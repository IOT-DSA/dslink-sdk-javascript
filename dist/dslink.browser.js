(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.DS = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global,Buffer){
global.global = global;global.Buffer = Buffer;global.require = require;require("dhcurve");require("crypto");// Generated by dart2js, the Dart to JavaScript compiler version: 1.12.0-edge.420bad6bb1629bd0e76b18203395eee896f5213f.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    return object.__proto__ && object.__proto__.p === cls.prototype.p;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  init.mangledNames = {get$_FORCE_CONFIG: "_FORCE_CONFIG", get$_authError: "_authError", get$_beforeSendListener: "_beforeSendListener", get$_browser_client$_closed: "_browser_client$_closed", get$_browser_client$_conn: "_browser_client$_conn", get$_cachedColumns: "_cachedColumns", get$_cachedLevel: "_cachedLevel", get$_cachedPrivate: "_cachedPrivate", get$_cachedTime: "_cachedTime", get$_changedPaths: "_changedPaths", get$_closed: "_closed", get$_columns: "_columns", get$_conn: "_conn", get$_connDelay: "_connDelay", get$_connListener: "_connListener", get$_connected: "_connected", get$_dataReceiveCount: "_dataReceiveCount", get$_dataSent: "_dataSent", get$_disconnectSent: "_disconnectSent", get$_err: "_err", get$_httpUpdateUri: "_httpUpdateUri", get$_initCalled: "_initCalled", get$_invokeCallback: "_invokeCallback", get$_isReady: "_isReady", get$_json: "_json", get$_lastUpdate: "_lastUpdate", get$_lastValueUpdate: "_lastValueUpdate", get$_listChangeController: "_listChangeController", get$_listController: "_listController", get$_listReqListener: "_listReqListener", get$_listener: "_listener", get$_loaded: "_loaded", get$_meta: "_meta", get$_msgCommand: "_msgCommand", get$_nodeChangeListener: "_nodeChangeListener", get$_nodes: "_nodes", get$_nonce: "_nonce", get$_onConnectedCompleter: "_onConnectedCompleter", get$_onDisconnectedCompleter: "_onDisconnectedCompleter", get$_onRequestReadyCompleter: "_onRequestReadyCompleter", get$_onRequesterReadyCompleter: "_onRequesterReadyCompleter", get$_opened: "_opened", get$_pendingInitializeLength: "_pendingInitializeLength", get$_pendingRemoveDef: "_pendingRemoveDef", get$_pendingSend: "_pendingSend", get$_pendingSending: "_pendingSending", get$_permission: "_permission", get$_permitted: "_permitted", get$_processors: "_processors", get$_profileFactories: "_profileFactories", get$_profileLoader: "_profileLoader", get$_ready: "_ready", get$_request: "_request", get$_requester$_controller: "_requester$_controller", get$_requester$_isClosed: "_requester$_isClosed", get$_requester$_pendingSend: "_requester$_pendingSend", get$_requester$_sendAfterAck: "_requester$_sendAfterAck", get$_requester$_stream: "_requester$_stream", get$_requester$_waitingAck: "_requester$_waitingAck", get$_requesterChannel: "_requesterChannel", get$_requests: "_requests", get$_responder$_subscription: "_responder$_subscription", get$_responderChannel: "_responderChannel", get$_responses: "_responses", get$_rows: "_rows", get$_sendAfterAck: "_sendAfterAck", get$_sending: "_sending", get$_sendingStreamStatus: "_sendingStreamStatus", get$_sentStreamStatus: "_sentStreamStatus", get$_subsciption: "_subsciption", get$_subscribeController: "_subscribeController", get$_toSendList: "_toSendList", get$_updates: "_updates", get$_waitingAck: "_waitingAck", get$_waitingAckId: "_waitingAckId", get$_wsConnection: "_wsConnection", get$_wsDelay: "_wsDelay", get$_wsUpdateUri: "_wsUpdateUri", get$ackId: "ackId", get$attributes: "attributes", get$binaryInCache: "binaryInCache", get$binaryOutCache: "binaryOutCache", get$brokerUrl: "brokerUrl", get$callback: "callback", get$callbacks: "callbacks", get$changed: "changed", get$changes: "changes", get$children: "children", get$clientLink: "clientLink", get$columns: "columns", get$completer: "completer", get$configs: "configs", get$conn: "conn", get$connected: "connected", get$count: "count", get$data: "data", get$dataStore: "dataStore", get$defaultNodes: "defaultNodes", get$defaultPermission: "defaultPermission", get$defaultValue: "defaultValue", get$defs: "defs", get$description: "description", get$detail: "detail", get$disconnectTs: "disconnectTs", get$dsId: "dsId", get$duration: "duration", get$encodedPublicKey: "encodedPublicKey", get$engines: "engines", get$error: "error", get$future: "future", get$getDependencies: "getDependencies", get$groupMatchs: "groupMatchs", get$groups: "groups", get$handler: "handler", get$httpUpdateUri: "httpUpdateUri", get$idMatchs: "idMatchs", get$initialResponse: "initialResponse", get$isRequester: "isRequester", get$isResponder: "isResponder", get$lastSentId: "lastSentId", get$lastValues: "lastValues", get$link: "link", get$listed: "listed", get$listener: "listener", get$loadNodes: "loadNodes", get$main: "main", get$max: "max", get$maxCache: "maxCache", get$messages: "messages", get$meta: "meta", get$min: "min", get$msg: "msg", get$msgId: "msgId", get$name: "name", get$nextRid: "nextRid", get$nextSid: "nextSid", get$node: "node", get$nodeCache: "nodeCache", get$nodeProvider: "nodeProvider", get$nodes: "nodes", get$nonce: "nonce", get$onAck: "onAck", get$onClose: "onClose", get$onConnect: "onConnect", get$onConnectController: "onConnectController", get$onDisconnectController: "onDisconnectController", get$onReceiveController: "onReceiveController", get$parentPath: "parentPath", get$path: "path", get$pendingAcks: "pendingAcks", get$permissions: "permissions", get$phase: "phase", get$pingTimer: "pingTimer", get$prefix: "prefix", get$privateKey: "privateKey", get$processors: "processors", get$profile: "profile", get$profiles: "profiles", get$provider: "provider", get$publicKey: "publicKey", get$qBase64: "qBase64", get$qHash64: "qHash64", get$random: "random", get$rawColumns: "rawColumns", get$ready: "ready", get$remotePath: "remotePath", get$removed: "removed", get$reqId: "reqId", get$request: "request", get$requester: "requester", get$responder: "responder", get$response: "response", get$rid: "rid", get$root: "root", get$rows: "rows", get$salts: "salts", get$serializable: "serializable", get$session: "session", get$sid: "sid", get$socket: "socket", get$status: "status", get$streamStatus: "streamStatus", get$subsriptionids: "subsriptionids", get$subsriptions: "subsriptions", get$sum: "sum", get$sys: "sys", get$toRemove: "toRemove", get$ts: "ts", get$type: "type", get$updater: "updater", get$updates: "updates", get$valid: "valid", get$value: "value", get$version: "version", get$wsUpdateUri: "wsUpdateUri"};
  init.mangledGlobalNames = {BrowserECDHLink_saltNameMap: "saltNameMap", BrowserUserLink_saltNameMap: "saltNameMap", Configs__globalConfigs: "_globalConfigs", Configs_defaultConfig: "defaultConfig", Configs_global: "global", DSError_DISCONNECTED: "DISCONNECTED", DSError_INVALID_METHOD: "INVALID_METHOD", DSError_INVALID_PARAMETER: "INVALID_PARAMETER", DSError_INVALID_PATH: "INVALID_PATH", DSError_INVALID_PATHS: "INVALID_PATHS", DSError_INVALID_VALUE: "INVALID_VALUE", DSError_NOT_IMPLEMENTED: "NOT_IMPLEMENTED", DSError_PERMISSION_DENIED: "PERMISSION_DENIED", DefaultDefNodes__defaultDefs: "_defaultDefs", DefaultDefNodes_nameMap: "nameMap", DefaultDefNodes_pathMap: "pathMap", ErrorPhase_request: "request", ErrorPhase_response: "response", Future__nullFuture: "_nullFuture", Interval_EIGHT_MILLISECONDS: "EIGHT_MILLISECONDS", Interval_FIFTY_MILLISECONDS: "FIFTY_MILLISECONDS", Interval_FIVE_SECONDS: "FIVE_SECONDS", Interval_FOUR_MILLISECONDS: "FOUR_MILLISECONDS", Interval_FOUR_SECONDS: "FOUR_SECONDS", Interval_HALF_SECOND: "HALF_SECOND", Interval_ONE_HUNDRED_MILLISECONDS: "ONE_HUNDRED_MILLISECONDS", Interval_ONE_MILLISECOND: "ONE_MILLISECOND", Interval_ONE_MINUTE: "ONE_MINUTE", Interval_ONE_SECOND: "ONE_SECOND", Interval_QUARTER_SECOND: "QUARTER_SECOND", Interval_SIXTEEN_MILLISECONDS: "SIXTEEN_MILLISECONDS", Interval_THIRTY_MILLISECONDS: "THIRTY_MILLISECONDS", Interval_THREE_HUNDRED_MILLISECONDS: "THREE_HUNDRED_MILLISECONDS", Interval_THREE_SECONDS: "THREE_SECONDS", Interval_TWO_HUNDRED_MILLISECONDS: "TWO_HUNDRED_MILLISECONDS", Interval_TWO_MILLISECONDS: "TWO_MILLISECONDS", Interval_TWO_SECONDS: "TWO_SECONDS", JSON: "JSON", ListController__ignoreProfileProps: "_ignoreProfileProps", LocalDataStorage_INSTANCE: "INSTANCE", NodeCryptoProvider_INSTANCE: "INSTANCE", Path_invalidChar: "invalidChar", Path_invalidNameChar: "invalidNameChar", Permission_CONFIG: "CONFIG", Permission_LIST: "LIST", Permission_NEVER: "NEVER", Permission_NONE: "NONE", Permission_READ: "READ", Permission_WRITE: "WRITE", Permission_nameParser: "nameParser", Permission_names: "names", SimpleNodeProvider_instance: "instance", StreamStatus_closed: "closed", StreamStatus_initialize: "initialize", StreamStatus_open: "open", ValueUpdate_TIME_ZONE: "TIME_ZONE", _CRYPTO_PROVIDER: "_CRYPTO_PROVIDER", _isCryptoProviderLocked: "_isCryptoProviderLocked", defaultProfileMap: "defaultProfileMap", unspecified: "unspecified"};
  // Constructors are generated at runtime.
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      var fieldNames = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        fieldNames += "'" + field + "',";
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
      str += accessors.join("");
      return str;
    }
    init.createNewIsolate = function() {
      return new Isolate();
    };
    init.classIdExtractor = function(o) {
      return o.constructor.name;
    };
    init.classFieldsExtractor = function(o) {
      var fieldNames = o.constructor.$__fields__;
      if (!fieldNames)
        return [];
      var result = [];
      result.length = fieldNames.length;
      for (var i = 0; i < fieldNames.length; i++)
        result[i] = o[fieldNames[i]];
      return result;
    };
    init.instanceFromClassId = function(name) {
      return new init.allClasses[name]();
    };
    init.initializeEmptyInstance = function(name, o, fields) {
      init.allClasses[name].apply(o, fields);
      return o;
    };
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        constructor["@"] = desc;
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      if (typeof classData == "object" && classData instanceof Array)
        classData = fields = classData[0];
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 3 * optionalParameterCount + 2 * requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
        if (isIntercepted)
          init.interceptedNames[getterStubName] = 1;
      }
      var isReflectable = array.length > unmangledNameIndex;
      if (isReflectable) {
        funcs[0].$reflectable = 1;
        funcs[0].$reflectionInfo = array;
        for (var i = 1; i < funcs.length; i++) {
          funcs[i].$reflectable = 2;
          funcs[i].$reflectionInfo = array;
        }
        var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
        var unmangledName = array[unmangledNameIndex];
        var reflectionName = unmangledName;
        if (getterStubName)
          mangledNames[getterStubName] = reflectionName;
        if (isSetter)
          reflectionName += "=";
        else if (!isGetter)
          reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
        mangledNames[name] = reflectionName;
        funcs[0].$reflectionName = reflectionName;
        funcs[0].$metadataIndex = unmangledNameIndex + 1;
        if (optionalParameterCount)
          prototype[unmangledName + "*"] = funcs[0];
      }
    }
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    if (!init.interceptedNames)
      init.interceptedNames = {set$_children: 1, set$_rows: 1, set$attributes: 1, set$binaryType: 1, set$bottom: 1, set$buffer: 1, set$children: 1, set$connection: 1, set$data: 1, set$defaultValue: 1, set$detail: 1, set$duration: 1, set$error: 1, set$height: 1, set$left: 1, set$length: 1, set$lengthInBytes: 1, set$list: 1, set$loaded: 1, set$max: 1, set$message: 1, set$min: 1, set$name: 1, set$nodes: 1, set$nonce: 1, set$offsetInBytes: 1, set$onClose: 1, set$parent: 1, set$path: 1, set$print: 1, set$readyState: 1, set$request: 1, set$response: 1, set$responseText: 1, set$result: 1, set$right: 1, set$rows: 1, set$status: 1, set$stream: 1, set$text: 1, set$top: 1, set$type: 1, set$value: 1, set$values: 1, set$version: 1, set$width: 1, get$_children: 1, get$_rows: 1, get$attributes: 1, get$bottom: 1, get$buffer: 1, get$children: 1, get$codeUnits: 1, get$connection: 1, get$data: 1, get$defaultValue: 1, get$detail: 1, get$duration: 1, get$error: 1, get$first: 1, get$hashCode: 1, get$height: 1, get$host: 1, get$isEmpty: 1, get$isFinite: 1, get$isNaN: 1, get$isNotEmpty: 1, get$iterator: 1, get$keys: 1, get$last: 1, get$left: 1, get$length: 1, get$lengthInBytes: 1, get$list: 1, get$loaded: 1, get$max: 1, get$message: 1, get$min: 1, get$name: 1, get$nodes: 1, get$nonce: 1, get$offsetInBytes: 1, get$onClose: 1, get$onDisconnect: 1, get$onError: 1, get$onMessage: 1, get$onOpen: 1, get$parent: 1, get$path: 1, get$port: 1, get$print: 1, get$readyState: 1, get$request: 1, get$response: 1, get$responseText: 1, get$result: 1, get$right: 1, get$rows: 1, get$runtimeType: 1, get$single: 1, get$status: 1, get$stream: 1, get$top: 1, get$type: 1, get$value: 1, get$values: 1, get$version: 1, get$width: 1, $add: 1, $and: 1, $eq: 1, $ge: 1, $gt: 1, $index: 1, $indexSet: 1, $le: 1, $lt: 1, $mod: 1, $mul: 1, $negate: 1, $not: 1, $shl: 1, $shr: 1, $sub: 1, $tdiv: 1, $xor: 1, _addEventListener$3: 1, _checkPosition$2: 1, _checkSublistArguments$3: 1, _clear$0: 1, _clearChildren$0: 1, _invalidPosition$2: 1, _removeEventListener$3: 1, _replaceChild$2: 1, _setRangeFast$4: 1, _shlPositive$1: 1, _shrOtherPositive$1: 1, _shrReceiverPositive$1: 1, _tdivFast$1: 1, add$1: 1, add$4: 1, addAll$1: 1, addEventListener$3: 1, allMatches$1: 1, allMatches$2: 1, asByteData$2: 1, asUint8List$0: 1, asUint8List$2: 1, checkGrowable$1: 1, checkMutable$1: 1, clear$0: 1, close$0: 1, close$1: 1, close$2: 1, codeUnitAt$1: 1, complete$0: 1, complete$1: 1, contains$1: 1, contains$2: 1, containsKey$1: 1, defaultValue$1: 1, elementAt$1: 1, endsWith$1: 1, forEach$1: 1, getAttribute$1: 1, getFloat32$1: 1, getFloat32$2: 1, getFloat64$1: 1, getFloat64$2: 1, getInt16$1: 1, getInt16$2: 1, getInt32$1: 1, getInt32$2: 1, getInt64$1: 1, getInt64$2: 1, getInt8$1: 1, getRange$2: 1, getUint16$1: 1, getUint16$2: 1, getUint32$1: 1, getUint32$2: 1, getUint64$1: 1, getUint64$2: 1, getUint8$1: 1, indexOf$1: 1, indexOf$2: 1, insertBefore$1: 1, join$1: 1, lastIndexOf$1: 1, lastIndexOf$2: 1, list$1: 1, load$1: 1, map$1: 1, matchAsPrefix$2: 1, noSuchMethod$1: 1, onDisconnect$0: 1, onError$1: 1, open$3$async: 1, open$5$async$password$user: 1, pause$0: 1, pause$1: 1, print$0: 1, print$1: 1, print$2: 1, putIfAbsent$2: 1, remainder$1: 1, remove$0: 1, remove$1: 1, removeEventListener$3: 1, removeRange$2: 1, replaceAll$2: 1, replaceRange$3: 1, replaceWith$1: 1, round$0: 1, send$1: 1, send$2: 1, sendByteBuffer$1: 1, sendString$1: 1, setAll$2: 1, setAttribute$4: 1, setFloat32$2: 1, setFloat32$3: 1, setFloat64$2: 1, setFloat64$3: 1, setInt16$2: 1, setInt16$3: 1, setInt32$2: 1, setInt32$3: 1, setInt64$2: 1, setInt64$3: 1, setInt8$2: 1, setRange$3: 1, setRange$4: 1, setUint16$2: 1, setUint16$3: 1, setUint32$2: 1, setUint32$3: 1, setUint64$2: 1, setUint64$3: 1, setUint8$2: 1, split$1: 1, startsWith$1: 1, startsWith$2: 1, sublist$1: 1, sublist$2: 1, substring$1: 1, substring$2: 1, take$1: 1, timeout$1: 1, timeout$2$onTimeout: 1, toInt$0: 1, toList$0: 1, toList$1$growable: 1, toRadixString$1: 1, toString$0: 1, trim$0: 1, where$1: 1};
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor == null) {
        proto = Object.getPrototypeOf(object);
        if (proto == null || proto === Object.prototype)
          return C.PlainJavaScriptObject_methods;
        else
          return C.UnknownJavaScriptObject_methods;
      }
      return interceptor;
    },
    Interceptor: {
      "^": "Object;",
      $eq: [function(receiver, other) {
        return receiver === other;
      }, null, "get$==", 2, 0, 130, 69, [], "=="],
      get$hashCode: [function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      }, null, null, 1, 0, 24, "hashCode"],
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }, "call$0", "get$toString", 0, 0, 15, "toString"],
      noSuchMethod$1: ["super$Interceptor$noSuchMethod", function(receiver, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, "call$1", "get$noSuchMethod", 2, 0, 140, 62, [], "noSuchMethod"],
      get$runtimeType: function(receiver) {
        return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
      },
      "%": "Body|MediaError|MediaKeyError|Request|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      get$runtimeType: function(receiver) {
        return C.Type_lhE;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      get$runtimeType: function(receiver) {
        return C.Type_Yyn;
      },
      noSuchMethod$1: [function(receiver, invocation) {
        return this.super$Interceptor$noSuchMethod(receiver, invocation);
      }, null, "get$noSuchMethod", 2, 0, null, 62, []]
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(_) {
        return 0;
      },
      get$runtimeType: function(_) {
        return C.Type_8k0;
      },
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        return String(receiver);
      }
    },
    JSArray: {
      "^": "Interceptor;",
      checkMutable$1: function(receiver, reason) {
        if (!!receiver.immutable$list)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      add$1: function(receiver, value) {
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      remove$1: function(receiver, element) {
        var i;
        this.checkGrowable$1(receiver, "remove");
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element)) {
            receiver.splice(i, 1);
            return true;
          }
        return false;
      },
      where$1: function(receiver, f) {
        var t1 = new H.WhereIterable(receiver, f);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        return t1;
      },
      addAll$1: function(receiver, collection) {
        var t1;
        this.checkGrowable$1(receiver, "addAll");
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      forEach$1: function(receiver, f) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      map$1: function(receiver, f) {
        var t1 = new H.MappedListIterable(receiver, f);
        t1.$builtinTypeInfo = [null, null];
        return t1;
      },
      join$1: function(receiver, separator) {
        var list, i;
        list = Array(receiver.length);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i)
          list[i] = H.S(receiver[i]);
        return list.join(separator);
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        var t1;
        if (typeof start !== "number" || Math.floor(start) !== start)
          throw H.wrapException(H.argumentErrorValue(start));
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        if (end == null)
          end = receiver.length;
        else {
          if (typeof end !== "number" || Math.floor(end) !== end)
            throw H.wrapException(H.argumentErrorValue(end));
          if (end < start || end > receiver.length)
            throw H.wrapException(P.RangeError$range(end, start, receiver.length, null, null));
        }
        if (start === end) {
          t1 = [];
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
          return t1;
        }
        t1 = receiver.slice(start, end);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        return t1;
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      getRange$2: function(receiver, start, end) {
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        return H.SubListIterable$(receiver, start, end, H.getTypeArgumentByIndex(receiver, 0));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$single: function(receiver) {
        var t1 = receiver.length;
        if (t1 === 1)
          return receiver[0];
        if (t1 === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        throw H.wrapException(H.IterableElementError_tooMany());
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var $length, t1, i;
        this.checkMutable$1(receiver, "set range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = J.$sub$n(end, start);
        if (J.$eq$($length, 0))
          return;
        if (skipCount < 0)
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        t1 = J.getInterceptor$asx(iterable);
        if (skipCount + $length > t1.get$length(iterable))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i)
            receiver[start + i] = t1.$index(iterable, skipCount + i);
        else
          for (i = 0; i < $length; ++i)
            receiver[start + i] = t1.$index(iterable, skipCount + i);
      },
      indexOf$2: function(receiver, element, start) {
        var t1, i;
        t1 = J.getInterceptor$n(start);
        if (t1.$ge(start, receiver.length))
          return -1;
        if (t1.$lt(start, 0))
          start = 0;
        for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, receiver.length); i = t1.$add(i, 1))
          if (J.$eq$(receiver[i], element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      lastIndexOf$2: function(receiver, element, startIndex) {
        var i;
        startIndex = receiver.length - 1;
        for (i = startIndex; i >= 0; --i)
          if (J.$eq$(receiver[i], element))
            return i;
        return -1;
      },
      lastIndexOf$1: function($receiver, element) {
        return this.lastIndexOf$2($receiver, element, null);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      toList$1$growable: function(receiver, growable) {
        var t1;
        if (growable) {
          t1 = receiver.slice();
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
          t1 = t1;
        } else {
          t1 = receiver.slice();
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
          t1.fixed$length = Array;
          t1 = t1;
        }
        return t1;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$iterator: function(receiver) {
        var t1 = new J.ArrayIterator(receiver, receiver.length, 0, null);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        return t1;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        this.checkGrowable$1(receiver, "set length");
        if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
          throw H.wrapException(P.ArgumentError$value(newLength, "newLength", null));
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (!!receiver.immutable$list)
          H.throwExpression(new P.UnsupportedError("indexed set"));
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    JSMutableArray: {
      "^": "JSArray;",
      $isJSIndexable: 1
    },
    JSFixedArray: {
      "^": "JSMutableArray;"
    },
    JSExtendableArray: {
      "^": "JSMutableArray;"
    },
    JSUnmodifiableArray: {
      "^": "JSArray;"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current",
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.__interceptors$_current = null;
          return false;
        }
        this.__interceptors$_current = t1[t2];
        this.__interceptors$_index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      get$isNaN: function(receiver) {
        return isNaN(receiver);
      },
      get$isFinite: function(receiver) {
        return isFinite(receiver);
      },
      remainder$1: function(receiver, b) {
        return receiver % b;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      toRadixString$1: function(receiver, radix) {
        var result, match, t1, exponent;
        H.checkInt(radix);
        if (radix < 2 || radix > 36)
          throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
        result = receiver.toString(radix);
        if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
          return result;
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
        if (match == null)
          H.throwExpression(new P.UnsupportedError("Unexpected toString result: " + result));
        t1 = J.getInterceptor$asx(match);
        result = t1.$index(match, 1);
        exponent = +t1.$index(match, 3);
        if (t1.$index(match, 2) != null) {
          result += t1.$index(match, 2);
          exponent -= t1.$index(match, 2).length;
        }
        return result + C.JSString_methods.$mul("0", exponent);
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $negate: function(receiver) {
        return -receiver;
      },
      $add: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $sub: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver - other;
      },
      $mul: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver * other;
      },
      $mod: function(receiver, other) {
        var result = receiver % other;
        if (result === 0)
          return 0;
        if (result > 0)
          return result;
        if (other < 0)
          return result - other;
        else
          return result + other;
      },
      $tdiv: function(receiver, other) {
        if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
          return receiver / other | 0;
        else
          return this.toInt$0(receiver / other);
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
      },
      $shl: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      _shlPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      $shr: function(receiver, other) {
        var t1;
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrReceiverPositive$1: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(H.argumentErrorValue(other));
        return other > 31 ? 0 : receiver >>> other;
      },
      $and: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return (receiver & other) >>> 0;
      },
      $xor: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return (receiver ^ other) >>> 0;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $le: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver <= other;
      },
      $ge: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      get$runtimeType: function(receiver) {
        return C.Type_cv7;
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      get$runtimeType: function(receiver) {
        return C.Type_tHn;
      },
      $not: function(receiver) {
        return ~receiver >>> 0;
      },
      $isnum: 1,
      $is$int: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      get$runtimeType: function(receiver) {
        return C.Type_K1J;
      },
      $isnum: 1
    },
    JSPositiveInt: {
      "^": "JSInt;"
    },
    JSUInt32: {
      "^": "JSPositiveInt;"
    },
    JSUInt31: {
      "^": "JSUInt32;"
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      allMatches$2: function(receiver, string, start) {
        H.checkString(string);
        H.checkInt(start);
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return H.allMatchesInStringUnchecked(receiver, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, i;
        if (start < 0 || start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        t1 = receiver.length;
        if (start + t1 > string.length)
          return;
        for (i = 0; i < t1; ++i)
          if (this.codeUnitAt$1(string, start + i) !== this.codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      endsWith$1: function(receiver, other) {
        var otherLength, t1;
        H.checkString(other);
        otherLength = other.length;
        t1 = receiver.length;
        if (otherLength > t1)
          return false;
        return other === this.substring$1(receiver, t1 - otherLength);
      },
      replaceAll$2: function(receiver, from, to) {
        H.checkString(to);
        return H.stringReplaceAllUnchecked(receiver, from, to);
      },
      split$1: function(receiver, pattern) {
        return receiver.split(pattern);
      },
      replaceRange$3: function(receiver, start, end, replacement) {
        H.checkString(replacement);
        H.checkInt(start);
        end = P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        H.checkInt(end);
        return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
      },
      startsWith$2: function(receiver, pattern, index) {
        var endIndex;
        if (index > receiver.length)
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        if (typeof pattern === "string") {
          endIndex = index + pattern.length;
          if (endIndex > receiver.length)
            return false;
          return pattern === receiver.substring(index, endIndex);
        }
        return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        var t1;
        if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
          H.throwExpression(H.argumentErrorValue(startIndex));
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
          H.throwExpression(H.argumentErrorValue(endIndex));
        t1 = J.getInterceptor$n(startIndex);
        if (t1.$lt(startIndex, 0))
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (t1.$gt(startIndex, endIndex))
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (J.$gt$n(endIndex, receiver.length))
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this.codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      get$codeUnits: function(receiver) {
        return new H.CodeUnits(receiver);
      },
      indexOf$2: function(receiver, pattern, start) {
        if (typeof start !== "number" || Math.floor(start) !== start)
          throw H.wrapException(H.argumentErrorValue(start));
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        return receiver.indexOf(pattern, start);
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      lastIndexOf$2: function(receiver, pattern, start) {
        var t1, t2;
        if (start == null)
          start = receiver.length;
        else if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        t1 = pattern.length;
        t2 = receiver.length;
        if (start + t1 > t2)
          start = t2 - t1;
        return receiver.lastIndexOf(pattern, start);
      },
      lastIndexOf$1: function($receiver, pattern) {
        return this.lastIndexOf$2($receiver, pattern, null);
      },
      contains$2: function(receiver, other, startIndex) {
        if (other == null)
          H.throwExpression(H.argumentErrorValue(other));
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      contains$1: function($receiver, other) {
        return this.contains$2($receiver, other, 0);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
      },
      get$runtimeType: function(receiver) {
        return C.Type_k8F;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $isString: 1,
      static: {JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 6158:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }, JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        }, JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }}
    }
  }], ["_isolate_helper", "dart:_isolate_helper",, H, {
    "^": "",
    _callInIsolate: function(isolate, $function) {
      var result = isolate.eval$1($function);
      if (!init.globalState.currentContext._isExecutingEvent)
        init.globalState.topEventLoop.run$0();
      return result;
    },
    leaveJsAsync: function() {
      --init.globalState.topEventLoop._activeJsAsyncCount;
    },
    startRootIsolate: function(entry, args) {
      var t1, t2, t3, t4, t5, rootContext;
      t1 = {};
      t1._captured_args_0 = args;
      args = args;
      t1._captured_args_0 = args;
      if (args == null) {
        args = [];
        t1._captured_args_0 = args;
        t2 = args;
      } else
        t2 = args;
      if (!J.getInterceptor(t2).$isList)
        throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
      t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
      t2._nativeDetectEnvironment$0();
      t2.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      t2.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      t2.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (t2.isWorker === true) {
        t2.mainManager = new H._MainManagerStub();
        t2._nativeInitWorkerMessageHandler$0();
      }
      init.globalState = t2;
      if (init.globalState.isWorker === true)
        return;
      t2 = init.globalState.nextIsolateId++;
      t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
      t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
      t5 = new H.RawReceivePortImpl(0, null, false);
      rootContext = new H._IsolateContext(t2, t3, t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      t4.add$1(0, 0);
      rootContext._addRegistration$2(0, t5);
      init.globalState.rootContext = rootContext;
      init.globalState.currentContext = rootContext;
      t2 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
      if (t3)
        rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
      else {
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
        if (t2)
          rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
        else
          rootContext.eval$1(entry);
      }
      init.globalState.topEventLoop.run$0();
    },
    _globalState: function() {
      return init.globalState;
    },
    IsolateNatives_computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (init.globalState.isWorker === true)
        return H.IsolateNatives_computeThisScriptFromTrace();
      return;
    },
    IsolateNatives_computeThisScriptFromTrace: function() {
      var stack, matches;
      stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(new P.UnsupportedError("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(new P.UnsupportedError("Cannot extract URI from \"" + H.S(stack) + "\""));
    },
    IsolateNatives__processWorkerMessage: [function(sender, e) {
      var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
      msg = new H._Deserializer(true, []).deserialize$1(e.data);
      t1 = J.getInterceptor$asx(msg);
      switch (t1.$index(msg, "command")) {
        case "start":
          init.globalState.currentManagerId = t1.$index(msg, "id");
          functionName = t1.$index(msg, "functionName");
          entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
          args = t1.$index(msg, "args");
          message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
          isSpawnUri = t1.$index(msg, "isSpawnUri");
          startPaused = t1.$index(msg, "startPaused");
          replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
          t1 = init.globalState.nextIsolateId++;
          t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
          t4 = new H.RawReceivePortImpl(0, null, false);
          context = new H._IsolateContext(t1, t2, t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          t3.add$1(0, 0);
          context._addRegistration$2(0, t4);
          init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
          init.globalState.currentContext = context;
          init.globalState.topEventLoop.run$0();
          break;
        case "spawn-worker":
          break;
        case "message":
          if (t1.$index(msg, "port") != null)
            J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
          init.globalState.topEventLoop.run$0();
          break;
        case "close":
          init.globalState.managers.remove$1(0, $.$get$IsolateNatives_workerIds().$index(0, sender));
          sender.terminate();
          init.globalState.topEventLoop.run$0();
          break;
        case "log":
          H.IsolateNatives__log(t1.$index(msg, "msg"));
          break;
        case "print":
          if (init.globalState.isWorker === true) {
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", msg]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          } else
            P.print(t1.$index(msg, "msg"));
          break;
        case "error":
          throw H.wrapException(t1.$index(msg, "msg"));
      }
    }, null, null, 4, 0, null, 187, [], 29, []],
    IsolateNatives__log: function(msg) {
      var trace, t1, t2, exception;
      if (init.globalState.isWorker === true) {
        t1 = init.globalState.mainManager;
        t2 = P.LinkedHashMap__makeLiteral(["command", "log", "msg", msg]);
        t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
        t1.toString;
        self.postMessage(t2);
      } else
        try {
          self.console.log(msg);
        } catch (exception) {
          H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          throw H.wrapException(P.Exception_Exception(trace));
        }
    },
    IsolateNatives__getJSFunctionFromName: function(functionName) {
      return init.globalFunctions[functionName]();
    },
    IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
      var context, t1, t2, t3;
      context = init.globalState.currentContext;
      t1 = context.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
      t1 = context.controlPort;
      t2 = init.globalState.currentContext.id;
      t3 = context.pauseCapability;
      J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
      t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
      if (startPaused === true) {
        context.addPause$2(t3, t3);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
      } else
        t2.call$0();
    },
    _clone: function(message) {
      return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(message));
    },
    startRootIsolate_closure: {
      "^": "Closure:1;__isolate_helper$_box_0,_captured_entry_1",
      call$0: function() {
        this._captured_entry_1.call$1(this.__isolate_helper$_box_0._captured_args_0);
      }
    },
    startRootIsolate_closure0: {
      "^": "Closure:1;__isolate_helper$_box_0,_captured_entry_2",
      call$0: function() {
        this._captured_entry_2.call$2(this.__isolate_helper$_box_0._captured_args_0, null);
      }
    },
    _Manager: {
      "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
      _nativeDetectEnvironment$0: function() {
        var t1, t2, t3;
        t1 = self.window == null;
        t2 = self.Worker;
        t3 = t1 && !!self.postMessage;
        this.isWorker = t3;
        if (!t3)
          t2 = t2 != null && $.$get$IsolateNatives_thisScript() != null;
        else
          t2 = true;
        this.supportsWorkers = t2;
        this.fromCommandLine = t1 && !t3;
      },
      _nativeInitWorkerMessageHandler$0: function() {
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, this.mainManager);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      },
      static: {_Manager__serializePrintMessage: [function(object) {
          var t1 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", object]);
          return new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
        }, null, null, 2, 0, null, 99, []]}
    },
    _IsolateContext: {
      "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized@,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
      addPause$2: function(authentification, resume) {
        if (!this.pauseCapability.$eq(0, authentification))
          return;
        if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
          this.isPaused = true;
        this._updateGlobalState$0();
      },
      removePause$1: function(resume) {
        var t1, $event;
        if (!this.isPaused)
          return;
        t1 = this.pauseTokens;
        t1.remove$1(0, resume);
        if (t1._collection$_length === 0) {
          for (t1 = this.delayedEvents; t1.length !== 0;) {
            $event = t1.pop();
            init.globalState.topEventLoop.events.addFirst$1($event);
          }
          this.isPaused = false;
        }
        this._updateGlobalState$0();
      },
      addDoneListener$2: function(responsePort, response) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          this.doneHandlers = [];
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            this.doneHandlers[i + 1] = response;
            return;
          }
        t2.push(responsePort);
        this.doneHandlers.push(response);
      },
      removeDoneListener$1: function(responsePort) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          return;
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 2;
            t1.toString;
            if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
              H.throwExpression(new P.UnsupportedError("removeRange"));
            P.RangeError_checkValidRange(i, t2, t1.length, null, null, null);
            t1.splice(i, t2 - i);
            return;
          }
      },
      setErrorsFatal$2: function(authentification, errorsAreFatal) {
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        this.errorsAreFatal = errorsAreFatal;
      },
      handlePing$3: function(responsePort, pingType, response) {
        var t1 = J.getInterceptor(pingType);
        if (!t1.$eq(pingType, 0))
          t1 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          J.send$1$x(responsePort, response);
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(new H._IsolateContext_handlePing_respond(responsePort, response));
      },
      handleKill$2: function(authentification, priority) {
        var t1;
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        t1 = J.getInterceptor(priority);
        if (!t1.$eq(priority, 0))
          t1 = t1.$eq(priority, 1) && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          this.kill$0();
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(this.get$kill());
      },
      handleUncaughtError$2: [function(error, stackTrace) {
        var t1, message, t2;
        t1 = this.errorPorts;
        if (t1._collection$_length === 0) {
          if (this.errorsAreFatal === true && this === init.globalState.rootContext)
            return;
          if (self.console && self.console.error)
            self.console.error(error, stackTrace);
          else {
            P.print(error);
            if (stackTrace != null)
              P.print(stackTrace);
          }
          return;
        }
        message = Array(2);
        message.fixed$length = Array;
        message[0] = J.toString$0$(error);
        message[1] = stackTrace == null ? null : J.toString$0$(stackTrace);
        t2 = new P.LinkedHashSetIterator(t1, t1._collection$_modifications, null, null);
        t2.$builtinTypeInfo = [null];
        t2._collection$_cell = t1._collection$_first;
        for (; t2.moveNext$0();)
          J.send$1$x(t2._collection$_current, message);
      }, "call$2", "get$handleUncaughtError", 4, 0, 79],
      eval$1: function(code) {
        var old, result, oldIsExecutingEvent, e, s, exception, t1;
        old = init.globalState.currentContext;
        init.globalState.currentContext = this;
        $ = this.isolateStatics;
        result = null;
        oldIsExecutingEvent = this._isExecutingEvent;
        this._isExecutingEvent = true;
        try {
          result = code.call$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
          if (this.errorsAreFatal === true) {
            this.kill$0();
            if (this === init.globalState.rootContext)
              throw exception;
          }
        } finally {
          this._isExecutingEvent = oldIsExecutingEvent;
          init.globalState.currentContext = old;
          if (old != null)
            $ = old.get$isolateStatics();
          if (this._scheduledControlEvents != null)
            for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
              this._scheduledControlEvents.removeFirst$0().call$0();
        }
        return result;
      },
      handleControlMessage$1: function(message) {
        var t1 = J.getInterceptor$asx(message);
        switch (t1.$index(message, 0)) {
          case "pause":
            this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "resume":
            this.removePause$1(t1.$index(message, 1));
            break;
          case "add-ondone":
            this.addDoneListener$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "remove-ondone":
            this.removeDoneListener$1(t1.$index(message, 1));
            break;
          case "set-errors-fatal":
            this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "ping":
            this.handlePing$3(t1.$index(message, 1), t1.$index(message, 2), t1.$index(message, 3));
            break;
          case "kill":
            this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "getErrors":
            this.errorPorts.add$1(0, t1.$index(message, 1));
            break;
          case "stopErrors":
            this.errorPorts.remove$1(0, t1.$index(message, 1));
            break;
        }
      },
      lookup$1: function(portId) {
        return this.ports.$index(0, portId);
      },
      _addRegistration$2: function(portId, port) {
        var t1 = this.ports;
        if (t1.containsKey$1(0, portId))
          throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
        t1.$indexSet(0, portId, port);
      },
      _updateGlobalState$0: function() {
        var t1 = this.ports;
        if (t1.get$length(t1) - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
          init.globalState.isolates.$indexSet(0, this.id, this);
        else
          this.kill$0();
      },
      kill$0: [function() {
        var t1, t2, i;
        t1 = this._scheduledControlEvents;
        if (t1 != null)
          t1.clear$0(0);
        for (t1 = this.ports, t2 = t1.get$values(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();)
          t2.get$current()._close$0();
        t1.clear$0(0);
        this.weakPorts.clear$0(0);
        init.globalState.isolates.remove$1(0, this.id);
        this.errorPorts.clear$0(0);
        if (this.doneHandlers != null) {
          for (i = 0; t1 = this.doneHandlers, i < t1.length; i += 2)
            J.send$1$x(t1[i], t1[i + 1]);
          this.doneHandlers = null;
        }
      }, "call$0", "get$kill", 0, 0, 0]
    },
    _IsolateContext_handlePing_respond: {
      "^": "Closure:0;_captured_responsePort_0,_captured_response_1",
      call$0: [function() {
        J.send$1$x(this._captured_responsePort_0, this._captured_response_1);
      }, null, null, 0, 0, null, "call"]
    },
    _EventLoop: {
      "^": "Object;events,_activeJsAsyncCount",
      dequeue$0: function() {
        var t1 = this.events;
        if (t1._head === t1._tail)
          return;
        return t1.removeFirst$0();
      },
      runIteration$0: function() {
        var $event, t1, t2;
        $event = this.dequeue$0();
        if ($event == null) {
          if (init.globalState.rootContext != null)
            if (init.globalState.isolates.containsKey$1(0, init.globalState.rootContext.id))
              if (init.globalState.fromCommandLine === true) {
                t1 = init.globalState.rootContext.ports;
                t1 = t1.get$isEmpty(t1);
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
          t1 = init.globalState;
          if (t1.isWorker === true) {
            t2 = t1.isolates;
            t2 = t2.get$isEmpty(t2) && t1.topEventLoop._activeJsAsyncCount === 0;
          } else
            t2 = false;
          if (t2) {
            t1 = t1.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "close"]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
          return false;
        }
        $event.process$0();
        return true;
      },
      _runHelper$0: function() {
        if (self.window != null)
          new H._EventLoop__runHelper_next(this).call$0();
        else
          for (; this.runIteration$0();)
            ;
      },
      run$0: [function() {
        var e, trace, exception, t1, t2;
        if (init.globalState.isWorker !== true)
          this._runHelper$0();
        else
          try {
            this._runHelper$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            trace = H.getTraceFromException(exception);
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
      }, "call$0", "get$run", 0, 0, 0]
    },
    _EventLoop__runHelper_next: {
      "^": "Closure:0;__isolate_helper$_captured_this_0",
      call$0: [function() {
        if (!this.__isolate_helper$_captured_this_0.runIteration$0())
          return;
        P.Timer_Timer(C.Duration_0, this);
      }, null, null, 0, 0, null, "call"]
    },
    _IsolateEvent: {
      "^": "Object;isolate,fn,message>",
      process$0: function() {
        var t1 = this.isolate;
        if (t1.get$isPaused()) {
          t1.get$delayedEvents().push(this);
          return;
        }
        t1.eval$1(this.fn);
      }
    },
    _MainManagerStub: {
      "^": "Object;"
    },
    IsolateNatives__processWorkerMessage_closure: {
      "^": "Closure:1;_captured_entryPoint_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_startPaused_4,_captured_replyTo_5",
      call$0: function() {
        H.IsolateNatives__startIsolate(this._captured_entryPoint_0, this._captured_args_1, this._captured_message_2, this._captured_isSpawnUri_3, this._captured_startPaused_4, this._captured_replyTo_5);
      }
    },
    IsolateNatives__startIsolate_runStartFunction: {
      "^": "Closure:0;_captured_topLevel_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_context_4",
      call$0: function() {
        var t1, t2, t3;
        this._captured_context_4.set$initialized(true);
        if (this._captured_isSpawnUri_3 !== true)
          this._captured_topLevel_0.call$1(this._captured_message_2);
        else {
          t1 = this._captured_topLevel_0;
          t2 = H.getDynamicRuntimeType();
          t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          if (t3)
            t1.call$2(this._captured_args_1, this._captured_message_2);
          else {
            t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
            if (t2)
              t1.call$1(this._captured_args_1);
            else
              t1.call$0();
          }
        }
      }
    },
    _BaseSendPort: {
      "^": "Object;"
    },
    _NativeJsSendPort: {
      "^": "_BaseSendPort;_receivePort,_isolateId",
      send$1: function(_, message) {
        var isolate, t1, msg, t2;
        isolate = init.globalState.isolates.$index(0, this._isolateId);
        if (isolate == null)
          return;
        t1 = this._receivePort;
        if (t1.get$_isClosed())
          return;
        msg = H._clone(message);
        if (isolate.get$controlPort() === t1) {
          isolate.handleControlMessage$1(msg);
          return;
        }
        t1 = init.globalState.topEventLoop;
        t2 = "receive " + H.S(message);
        t1.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), t2));
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._NativeJsSendPort && J.$eq$(this._receivePort, other._receivePort);
      },
      get$hashCode: function(_) {
        return this._receivePort.get$_id();
      }
    },
    _NativeJsSendPort_send_closure: {
      "^": "Closure:1;__isolate_helper$_captured_this_0,_captured_msg_1",
      call$0: function() {
        var t1 = this.__isolate_helper$_captured_this_0._receivePort;
        if (!t1.get$_isClosed())
          t1.__isolate_helper$_add$1(this._captured_msg_1);
      }
    },
    _WorkerSendPort: {
      "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
      send$1: function(_, message) {
        var t1, workerMessage, manager;
        t1 = P.LinkedHashMap__makeLiteral(["command", "message", "port", this, "msg", message]);
        workerMessage = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
        if (init.globalState.isWorker === true) {
          init.globalState.mainManager.toString;
          self.postMessage(workerMessage);
        } else {
          manager = init.globalState.managers.$index(0, this._workerId);
          if (manager != null)
            manager.postMessage(workerMessage);
        }
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H._WorkerSendPort && J.$eq$(this._workerId, other._workerId) && J.$eq$(this._isolateId, other._isolateId) && J.$eq$(this._receivePortId, other._receivePortId);
      },
      get$hashCode: function(_) {
        return (J.$shl$n(this._workerId, 16) ^ J.$shl$n(this._isolateId, 8) ^ this._receivePortId) >>> 0;
      }
    },
    RawReceivePortImpl: {
      "^": "Object;_id<,_handler,_isClosed<",
      set$handler: function(newHandler) {
        this._handler = newHandler;
      },
      _close$0: function() {
        this._isClosed = true;
        this._handler = null;
      },
      close$0: function(_) {
        var t1, t2;
        if (this._isClosed)
          return;
        this._isClosed = true;
        this._handler = null;
        t1 = init.globalState.currentContext;
        t2 = this._id;
        t1.ports.remove$1(0, t2);
        t1.weakPorts.remove$1(0, t2);
        t1._updateGlobalState$0();
      },
      __isolate_helper$_add$1: function(dataEvent) {
        if (this._isClosed)
          return;
        this._handler$1(dataEvent);
      },
      _handler$1: function(arg0) {
        return this._handler.call$1(arg0);
      },
      $isRawReceivePort: 1
    },
    TimerImpl: {
      "^": "Object;_once,_inEventLoop,_handle",
      cancel$0: function() {
        if (self.setTimeout != null) {
          if (this._inEventLoop)
            throw H.wrapException(new P.UnsupportedError("Timer in event loop cannot be canceled."));
          if (this._handle == null)
            return;
          H.leaveJsAsync();
          var t1 = this._handle;
          if (this._once)
            self.clearTimeout(t1);
          else
            self.clearInterval(t1);
          this._handle = null;
        } else
          throw H.wrapException(new P.UnsupportedError("Canceling a timer."));
      },
      get$isActive: function() {
        return this._handle != null;
      },
      TimerImpl$periodic$2: function(milliseconds, callback) {
        if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Periodic timer."));
      },
      TimerImpl$2: function(milliseconds, callback) {
        var t1, t2;
        if (milliseconds === 0)
          t1 = self.setTimeout == null || init.globalState.isWorker === true;
        else
          t1 = false;
        if (t1) {
          this._handle = 1;
          t1 = init.globalState.topEventLoop;
          t2 = init.globalState.currentContext;
          t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
          this._inEventLoop = true;
        } else if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
      },
      static: {TimerImpl$: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(true, false, null);
          t1.TimerImpl$2(milliseconds, callback);
          return t1;
        }, TimerImpl$periodic: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(false, false, null);
          t1.TimerImpl$periodic$2(milliseconds, callback);
          return t1;
        }}
    },
    TimerImpl_internalCallback: {
      "^": "Closure:0;__isolate_helper$_captured_this_0,_captured_callback_1",
      call$0: function() {
        this.__isolate_helper$_captured_this_0._handle = null;
        this._captured_callback_1.call$0();
      }
    },
    TimerImpl_internalCallback0: {
      "^": "Closure:0;__isolate_helper$_captured_this_2,_captured_callback_3",
      call$0: [function() {
        this.__isolate_helper$_captured_this_2._handle = null;
        H.leaveJsAsync();
        this._captured_callback_3.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    TimerImpl$periodic_closure: {
      "^": "Closure:1;__isolate_helper$_captured_this_0,_captured_callback_1",
      call$0: [function() {
        this._captured_callback_1.call$1(this.__isolate_helper$_captured_this_0);
      }, null, null, 0, 0, null, "call"]
    },
    CapabilityImpl: {
      "^": "Object;_id<",
      get$hashCode: function(_) {
        var hash, t1;
        hash = this._id;
        t1 = J.getInterceptor$n(hash);
        hash = t1.$shr(hash, 0) ^ t1.$tdiv(hash, 4294967296);
        hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
        hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
        hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
        return (hash ^ hash >>> 16) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof H.CapabilityImpl) {
          t1 = this._id;
          t2 = other._id;
          return t1 == null ? t2 == null : t1 === t2;
        }
        return false;
      }
    },
    _Serializer: {
      "^": "Object;_serializeSendPorts,serializedObjectIds",
      serialize$1: [function(x) {
        var t1, serializationId, serializeTearOff, t2, $name;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        t1 = this.serializedObjectIds;
        serializationId = t1.$index(0, x);
        if (serializationId != null)
          return ["ref", serializationId];
        t1.$indexSet(0, x, t1.get$length(t1));
        t1 = J.getInterceptor(x);
        if (!!t1.$isNativeByteBuffer)
          return ["buffer", x];
        if (!!t1.$isNativeTypedData)
          return ["typed", x];
        if (!!t1.$isJSIndexable)
          return this.serializeJSIndexable$1(x);
        if (!!t1.$isInternalMap) {
          serializeTearOff = this.get$serialize();
          t2 = t1.get$keys(x);
          t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "Iterable", 0), null);
          t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
          t1 = t1.get$values(x);
          t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
          return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0))];
        }
        if (!!t1.$isJSObject)
          return this.serializeJSObject$1(x);
        if (!!t1.$isInterceptor)
          this.unsupported$1(x);
        if (!!t1.$isRawReceivePort)
          this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
        if (!!t1.$is_NativeJsSendPort)
          return this.serializeJsSendPort$1(x);
        if (!!t1.$is_WorkerSendPort)
          return this.serializeWorkerSendPort$1(x);
        if (!!t1.$isClosure) {
          $name = x.$name;
          if ($name == null)
            this.unsupported$2(x, "Closures can't be transmitted:");
          return ["function", $name];
        }
        if (!!t1.$isCapabilityImpl)
          return ["capability", x._id];
        if (!(x instanceof P.Object))
          this.unsupported$1(x);
        return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
      }, "call$1", "get$serialize", 2, 0, 2, 42, []],
      unsupported$2: function(x, message) {
        throw H.wrapException(new P.UnsupportedError(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
      },
      unsupported$1: function(x) {
        return this.unsupported$2(x, null);
      },
      serializeJSIndexable$1: function(indexable) {
        var serialized = this.serializeArray$1(indexable);
        if (!!indexable.fixed$length)
          return ["fixed", serialized];
        if (!indexable.fixed$length)
          return ["extendable", serialized];
        if (!indexable.immutable$list)
          return ["mutable", serialized];
        if (indexable.constructor === Array)
          return ["const", serialized];
        this.unsupported$2(indexable, "Can't serialize indexable: ");
      },
      serializeArray$1: function(x) {
        var serialized, i;
        serialized = [];
        C.JSArray_methods.set$length(serialized, x.length);
        for (i = 0; i < x.length; ++i)
          serialized[i] = this.serialize$1(x[i]);
        return serialized;
      },
      serializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
        return x;
      },
      serializeJSObject$1: function(x) {
        var keys, values, i;
        if (!!x.constructor && x.constructor !== Object)
          this.unsupported$2(x, "Only plain JS Objects are supported:");
        keys = Object.keys(x);
        values = [];
        C.JSArray_methods.set$length(values, keys.length);
        for (i = 0; i < keys.length; ++i)
          values[i] = this.serialize$1(x[keys[i]]);
        return ["js-object", keys, values];
      },
      serializeWorkerSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", x._workerId, x._isolateId, x._receivePortId];
        return ["raw sendport", x];
      },
      serializeJsSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
        return ["raw sendport", x];
      }
    },
    _Deserializer: {
      "^": "Object;_adjustSendPorts,deserializedObjects",
      deserialize$1: [function(x) {
        var result, t1, classId, fields, emptyInstance;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        if (typeof x !== "object" || x === null || x.constructor !== Array)
          throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
        switch (C.JSArray_methods.get$first(x)) {
          case "ref":
            return this.deserializedObjects[x[1]];
          case "buffer":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "typed":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "fixed":
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            t1.fixed$length = Array;
            return t1;
          case "extendable":
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            return t1;
          case "mutable":
            result = x[1];
            this.deserializedObjects.push(result);
            return this.deserializeArrayInPlace$1(result);
          case "const":
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            t1.fixed$length = Array;
            return t1;
          case "map":
            return this.deserializeMap$1(x);
          case "sendport":
            return this.deserializeSendPort$1(x);
          case "raw sendport":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "js-object":
            return this.deserializeJSObject$1(x);
          case "function":
            result = init.globalFunctions[x[1]]();
            this.deserializedObjects.push(result);
            return result;
          case "capability":
            return new H.CapabilityImpl(x[1]);
          case "dart":
            classId = x[1];
            fields = x[2];
            emptyInstance = init.instanceFromClassId(classId);
            this.deserializedObjects.push(emptyInstance);
            this.deserializeArrayInPlace$1(fields);
            return init.initializeEmptyInstance(classId, emptyInstance, fields);
          default:
            throw H.wrapException("couldn't deserialize: " + H.S(x));
        }
      }, "call$1", "get$deserialize", 2, 0, 2, 42, []],
      deserializeArrayInPlace$1: function(x) {
        var t1, i;
        for (t1 = J.getInterceptor$asx(x), i = 0; i < t1.get$length(x); ++i)
          t1.$indexSet(x, i, this.deserialize$1(t1.$index(x, i)));
        return x;
      },
      deserializeMap$1: function(x) {
        var keys, values, result, t1, t2, i;
        keys = x[1];
        values = x[2];
        result = P.LinkedHashMap__makeEmpty();
        this.deserializedObjects.push(result);
        keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i)
          result.$indexSet(0, t1.$index(keys, i), this.deserialize$1(t2.$index(values, i)));
        return result;
      },
      deserializeSendPort$1: function(x) {
        var managerId, isolateId, receivePortId, isolate, receivePort, result;
        managerId = x[1];
        isolateId = x[2];
        receivePortId = x[3];
        if (J.$eq$(managerId, init.globalState.currentManagerId)) {
          isolate = init.globalState.isolates.$index(0, isolateId);
          if (isolate == null)
            return;
          receivePort = isolate.lookup$1(receivePortId);
          if (receivePort == null)
            return;
          result = new H._NativeJsSendPort(receivePort, isolateId);
        } else
          result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
        this.deserializedObjects.push(result);
        return result;
      },
      deserializeJSObject$1: function(x) {
        var keys, values, o, t1, t2, i;
        keys = x[1];
        values = x[2];
        o = {};
        this.deserializedObjects.push(o);
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i)
          o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
        return o;
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable Map"));
    },
    jsConstructorNameToRti: function(constructorName) {
      return init.getTypeFromName(constructorName);
    },
    getType: [function(index) {
      return init.types[index];
    }, null, null, 2, 0, null, 154, []],
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    throwInvalidReflectionError: function(memberName) {
      throw H.wrapException(new P.UnsupportedError("Can't use '" + H.S(memberName) + "' in reflection because it is not included in a @MirrorsUsed annotation."));
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives__parseIntError: function(source, handleError) {
      if (handleError == null)
        throw H.wrapException(new P.FormatException(source, null, null));
      return handleError.call$1(source);
    },
    Primitives_parseInt: function(source, radix, handleError) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i;
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return H.Primitives__parseIntError(source, handleError);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return H.Primitives__parseIntError(source, handleError);
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods.codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return H.Primitives__parseIntError(source, handleError);
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName: function(object) {
      var $name, decompiled;
      $name = C.JS_CONST_8ZY(J.getInterceptor(object));
      if ($name === "Object") {
        decompiled = String(object.constructor).match(/^\s*function\s*([\w$]*)\s*\(/)[1];
        if (typeof decompiled === "string")
          $name = /^\w+$/.test(decompiled) ? decompiled : $name;
      }
      if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, _i, i;
      a = [];
      a.$builtinTypeInfo = [P.$int];
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          a.push(i);
        else if (i <= 1114111) {
          a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          a.push(56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, t2, i;
      for (t1 = charCodes.length, _i = 0; t2 = charCodes.length, _i < t2; t2 === t1 || (0, H.throwConcurrentModificationError)(charCodes), ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var t1, i, result, i0, chunkEnd;
      t1 = J.getInterceptor$n(end);
      if (t1.$le(end, 500) && start === 0 && t1.$eq(end, charCodes.length))
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver.millisecondsSinceEpoch);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, namedArgumentList;
      t1 = {};
      t1._captured_argumentCount_0 = 0;
      $arguments = [];
      namedArgumentList = [];
      t1._captured_argumentCount_0 = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1._captured_names_1 = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, "call" + "$" + t1._captured_argumentCount_0 + t1._captured_names_1, 0, $arguments, namedArgumentList, null));
    },
    Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
      var $arguments, t1;
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      t1 = $arguments.length;
      if (t1 === 0) {
        if (!!$function.call$0)
          return $function.call$0();
      } else if (t1 === 1) {
        if (!!$function.call$1)
          return $function.call$1($arguments[0]);
      } else if (t1 === 2) {
        if (!!$function.call$2)
          return $function.call$2($arguments[0], $arguments[1]);
      } else if (t1 === 3)
        if (!!$function.call$3)
          return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
      return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
    },
    Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
      var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
      argumentCount = $arguments.length;
      jsFunction = $function["call" + "$" + argumentCount];
      if (jsFunction == null) {
        jsFunction = J.getInterceptor($function)["call*"];
        if (jsFunction == null)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        requiredArgumentCount = info.requiredParameterCount;
        maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
        if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        $arguments = P.List_List$from($arguments, true, null);
        for (pos = argumentCount; pos < maxArgumentCount; ++pos)
          C.JSArray_methods.add$1($arguments, init.metadata[info.defaultValue$1(0, pos)]);
      }
      return jsFunction.apply($function, $arguments);
    },
    JsCache_allocate: function() {
      var result = Object.create(null);
      result.x = 0;
      delete result.x;
      return result;
    },
    diagnoseIndexError: function(indexable, index) {
      var $length;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: [function() {
      return J.toString$0$(this.dartException);
    }, null, null, 0, 0, null],
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, t2, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              t2 = H.S(message) + " (Error " + ieErrorCode + ")";
              return t1.call$1(new H.NullError(t2, null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(new H.NullError(message, match == null ? null : match.method));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception, null);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception, null);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      var t1 = J.getInterceptor(numberOfArguments);
      if (t1.$eq(numberOfArguments, 0))
        return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
      else if (t1.$eq(numberOfArguments, 1))
        return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
      else if (t1.$eq(numberOfArguments, 2))
        return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
      else if (t1.$eq(numberOfArguments, 3))
        return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
      else if (t1.$eq(numberOfArguments, 4))
        return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
      else
        throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    }, null, null, 14, 0, null, 158, [], 160, [], 161, [], 98, [], 97, [], 112, [], 114, []],
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, init.globalState.currentContext, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t1, 1);
        t1 = new Function("a,b,c,d", "this.$initialize(a,b,c,d);" + t1);
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      t1 = !isStatic;
      if (t1) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(t) {
          return function() {
            return H.getType(t);
          };
        }(functionType);
      else if (t1 && typeof functionType == "function") {
        getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
        signatureFunction = function(f, r) {
          return function() {
            return f.apply({$receiver: r(this)}, arguments);
          };
        }(functionType, getReceiver);
      } else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t2, 1);
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      return new Function(t2 + H.S(t1) + "}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
      selfField = H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t3 = !t2 || arity >= 28;
      if (t3)
        return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t2, 1);
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    propertyTypeCastError: function(value, property) {
      var t1 = J.getInterceptor$asx(property);
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = typeof value === "object" && J.getInterceptor(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    listTypeCast: function(value) {
      if (!!J.getInterceptor(value).$isList || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "List"));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
    },
    buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
var proto = Object.create(new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null)); proto._isTest$1 = function() { return true; }; return proto;
    },
    buildInterfaceType: function(rti, typeArguments) {
      var jsConstructorName = rti.builtin$cls;
      if (typeArguments == null || typeArguments.length === 0)
        return new H.RuntimeTypePlain(jsConstructorName);
      return new H.RuntimeTypeGeneric(jsConstructorName, typeArguments, null);
    },
    getDynamicRuntimeType: function() {
      return C.C_DynamicRuntimeType;
    },
    random64: function() {
      return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    asyncHelper: function(object, bodyFunctionOrErrorCode, completer) {
      var future;
      if (bodyFunctionOrErrorCode === 0) {
        J.complete$1$x(completer, object);
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
        return;
      }
      if (!!J.getInterceptor(object).$isFuture)
        future = object;
      else {
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [null];
        future._asyncComplete$1(object);
      }
      future.then$2$onError(H._wrapJsFunctionForAsync(bodyFunctionOrErrorCode, 0), new H.asyncHelper_closure(bodyFunctionOrErrorCode));
      return completer.get$future();
    },
    _wrapJsFunctionForAsync: function($function, errorCode) {
      return new H._wrapJsFunctionForAsync_closure(errorCode, function(errorCode, result) {
        while (true)
          try {
            $function(errorCode, result);
            break;
          } catch (error) {
            result = error;
            errorCode = 1;
          }
      });
    },
    createRuntimeType: function($name) {
      return new H.TypeImpl($name, null);
    },
    setRuntimeTypeInfo: function(target, rti) {
      if (target != null)
        target.$builtinTypeInfo = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$builtinTypeInfo;
    },
    getRuntimeTypeArguments: function(target, substitutionName) {
      return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      if (rti == null)
        return "dynamic";
      else if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return rti[0].builtin$cls + H.joinArguments(rti, 1, onTypeVariable);
      else if (typeof rti == "function")
        return rti.builtin$cls;
      else if (typeof rti === "number" && Math.floor(rti) === rti)
        if (onTypeVariable == null)
          return C.JSInt_methods.toString$0(rti);
        else
          return onTypeVariable.call$1(rti);
      else
        return;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var buffer, index, firstArgument, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents = t1 + ", ";
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
      }
      return allDynamic ? "" : "<" + H.S(buffer) + ">";
    },
    getRuntimeTypeString: function(object) {
      var className = J.getInterceptor(object).constructor.builtin$cls;
      if (object == null)
        return className;
      return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
    },
    substitute: function(substitution, $arguments) {
      if (typeof substitution == "function") {
        substitution = H.invokeOn(substitution, null, $arguments);
        if (substitution == null || typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
          $arguments = substitution;
        else if (typeof substitution == "function")
          $arguments = H.invokeOn(substitution, null, $arguments);
      }
      return $arguments;
    },
    areSubtypes: function(s, t) {
      var len, i;
      if (s == null || t == null)
        return true;
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtype(s[i], t[i]))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var rti, type, targetSignatureFunction;
      if (o == null)
        return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
      if (t == null)
        return true;
      rti = H.getRuntimeTypeInfo(o);
      o = J.getInterceptor(o);
      type = o.constructor;
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      if ('func' in t) {
        targetSignatureFunction = o.$signature;
        if (targetSignatureFunction == null)
          return false;
        return H.isFunctionSubtype(H.invokeOn(targetSignatureFunction, o, null), t);
      }
      return H.isSubtype(type, t);
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        if (!('$is' + H.runtimeTypeToString(typeOfT, null) in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t2 ? t.slice(1) : null;
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, sLength, tLength, i, t2;
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      sLength = s.length;
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        t1 = s[i];
        t2 = t[i];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      t1 = Object.getOwnPropertyNames(t);
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
      if (!('func' in s))
        return false;
      if ("void" in s) {
        if (!("void" in t) && "ret" in t)
          return false;
      } else if (!("void" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (pos = 0; pos < sParametersLen; ++pos) {
          t1 = sParameterTypes[pos];
          t2 = tParameterTypes[pos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    invokeOn: function($function, receiver, $arguments) {
      return $function.apply(receiver, $arguments);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      return H.Primitives_objectHashCode(object);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = $.getTagFunction.call$1(obj);
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = $.alternateTagFunction.call$2(obj, tag);
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_gkc();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    allMatchesInStringUnchecked: function(pattern, string, startIndex) {
      var result, $length, patternLength, position, endIndex;
      result = [];
      result.$builtinTypeInfo = [P.Match];
      $length = string.length;
      patternLength = pattern.length;
      for (; true;) {
        position = string.indexOf(pattern, startIndex);
        if (position === -1)
          break;
        result.push(new H.StringMatch(position, string, pattern));
        endIndex = position + patternLength;
        if (endIndex === $length)
          break;
        else
          startIndex = position === endIndex ? startIndex + 1 : endIndex;
      }
      return result;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other === "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else {
        t1 = J.getInterceptor(other);
        if (!!t1.$isJSSyntaxRegExp) {
          t1 = C.JSString_methods.substring$1(receiver, startIndex);
          return other._nativeRegExp.test(H.checkString(t1));
        } else
          return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
      }
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var $length, t1, i;
      H.checkString(replacement);
      if (pattern === "")
        if (receiver === "")
          return replacement;
        else {
          $length = receiver.length;
          for (t1 = replacement, i = 0; i < $length; ++i)
            t1 = t1 + receiver[i] + replacement;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      else
        return receiver.replace(new RegExp(pattern.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return H.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix, suffix;
      prefix = receiver.substring(0, start);
      suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    NoSideEffects: {
      "^": "Object;"
    },
    NoThrows: {
      "^": "Object;"
    },
    NoInline: {
      "^": "Object;"
    },
    ForceInline: {
      "^": "Object;"
    },
    Native: {
      "^": "Object;name>"
    },
    _Patch: {
      "^": "Object;version>"
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;_map",
      $asUnmodifiableMapView: Isolate.functionThatReturnsNull,
      $asMapView: Isolate.functionThatReturnsNull,
      $asMap: Isolate.functionThatReturnsNull,
      $isMap: 1
    },
    ConstantMap: {
      "^": "Object;",
      get$isEmpty: function(_) {
        return J.$eq$(this.get$length(this), 0);
      },
      get$isNotEmpty: function(_) {
        return !J.$eq$(this.get$length(this), 0);
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      $indexSet: function(_, key, val) {
        return H.ConstantMap__throwUnmodifiable();
      },
      remove$1: function(_, key) {
        return H.ConstantMap__throwUnmodifiable();
      },
      clear$0: function(_) {
        return H.ConstantMap__throwUnmodifiable();
      },
      addAll$1: function(_, other) {
        return H.ConstantMap__throwUnmodifiable();
      },
      $isMap: 1,
      $asMap: null
    },
    ConstantStringMap: {
      "^": "ConstantMap;length>,_jsObject,_keys",
      containsKey$1: function(_, key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this._jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(0, key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this._jsObject[key];
      },
      forEach$1: function(_, f) {
        var keys, i, key;
        keys = this._keys;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          f.call$2(key, this._fetch$1(key));
        }
      },
      get$keys: function(_) {
        var t1 = new H._ConstantMapKeyIterable(this);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        return t1;
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this._keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      }
    },
    ConstantStringMap_values_closure: {
      "^": "Closure:2;_captured_this_0",
      call$1: [function(key) {
        return this._captured_this_0._fetch$1(key);
      }, null, null, 2, 0, null, 11, [], "call"]
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;__js_helper$_map",
      get$iterator: function(_) {
        return J.get$iterator$ax(this.__js_helper$_map._keys);
      },
      get$length: function(_) {
        return J.get$length$asx(this.__js_helper$_map._keys);
      }
    },
    JSInvocationMirror: {
      "^": "Object;_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
      get$memberName: function() {
        var $name, t1, t2, unmangledName;
        $name = this._memberName;
        t1 = J.getInterceptor($name);
        if (!!t1.$isSymbol0)
          return $name;
        t2 = $.$get$mangledNames();
        unmangledName = t2.$index(0, $name);
        if (unmangledName != null)
          $name = unmangledName.split(":")[0];
        else if (t2.$index(0, this._internalName) == null)
          P.print("Warning: '" + t1.toString$0($name) + "' is used reflectively but not in MirrorsUsed. This will break minified code.");
        t1 = new H.Symbol($name);
        this._memberName = t1;
        return t1;
      },
      get$isGetter: function() {
        return this._kind === 1;
      },
      get$isSetter: function() {
        return this._kind === 2;
      },
      get$positionalArguments: function() {
        var t1, argumentCount, list, index;
        if (this._kind === 1)
          return C.List_empty;
        t1 = this._arguments;
        argumentCount = t1.length - this._namedArgumentNames.length;
        if (argumentCount === 0)
          return C.List_empty;
        list = [];
        for (index = 0; index < argumentCount; ++index)
          list.push(t1[index]);
        list.fixed$length = Array;
        list.immutable$list = Array;
        return list;
      },
      get$namedArguments: function() {
        var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i;
        if (this._kind !== 0)
          return C.Map_empty0;
        t1 = this._namedArgumentNames;
        namedArgumentCount = t1.length;
        t2 = this._arguments;
        namedArgumentsStartIndex = t2.length - namedArgumentCount;
        if (namedArgumentCount === 0)
          return C.Map_empty0;
        map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, null);
        for (i = 0; i < namedArgumentCount; ++i)
          map.$indexSet(0, new H.Symbol(t1[i]), t2[namedArgumentsStartIndex + i]);
        t1 = new H.ConstantMapView(map);
        t1.$builtinTypeInfo = [P.Symbol0, null];
        return t1;
      },
      __js_helper$_getCachedInvocation$1: function(object) {
        var interceptor, $name, isIntercepted, interceptor0, receiver, method, baseName, isCatchAll;
        interceptor = J.getInterceptor(object);
        $name = this._internalName;
        isIntercepted = Object.prototype.hasOwnProperty.call(init.interceptedNames, $name);
        if (isIntercepted) {
          interceptor0 = object === interceptor ? null : interceptor;
          receiver = interceptor;
          interceptor = interceptor0;
        } else {
          receiver = object;
          interceptor = null;
        }
        method = receiver[$name];
        if (typeof method != "function") {
          baseName = this.get$memberName().get$_name();
          method = receiver[baseName + "*"];
          if (method == null) {
            interceptor = J.getInterceptor(object);
            method = interceptor[baseName + "*"];
            if (method != null)
              isIntercepted = true;
            else
              interceptor = null;
          }
          isCatchAll = true;
        } else
          isCatchAll = false;
        if (typeof method == "function")
          if (isCatchAll)
            return new H.CachedCatchAllInvocation(H.ReflectionInfo_ReflectionInfo(method), $name, method, isIntercepted, interceptor);
          else
            return new H.CachedInvocation($name, method, isIntercepted, interceptor);
        else
          return new H.CachedNoSuchMethodInvocation(interceptor);
      }
    },
    CachedInvocation: {
      "^": "Object;mangledName<,jsFunction<,isIntercepted<,cachedInterceptor",
      get$isNoSuchMethod: function() {
        return false;
      },
      get$isGetterStub: function() {
        return !!this.jsFunction.$getterStub;
      },
      invokeOn$2: function(victim, $arguments) {
        var receiver, arguments0;
        if (!this.isIntercepted) {
          if ($arguments.constructor !== Array)
            $arguments = P.List_List$from($arguments, true, null);
          receiver = victim;
        } else {
          arguments0 = [victim];
          C.JSArray_methods.addAll$1(arguments0, $arguments);
          receiver = this.cachedInterceptor;
          receiver = receiver != null ? receiver : victim;
          $arguments = arguments0;
        }
        return this.jsFunction.apply(receiver, $arguments);
      }
    },
    CachedCatchAllInvocation: {
      "^": "CachedInvocation;info,mangledName,jsFunction,isIntercepted,cachedInterceptor",
      get$isGetterStub: function() {
        return false;
      },
      invokeOn$2: function(victim, $arguments) {
        var t1, t2, fullParameterCount, providedArgumentCount, receiver, arguments0, i;
        t1 = this.info;
        t2 = t1.requiredParameterCount;
        fullParameterCount = t2 + t1.optionalParameterCount;
        if (!this.isIntercepted) {
          if ($arguments.constructor === Array) {
            providedArgumentCount = $arguments.length;
            if (providedArgumentCount < fullParameterCount)
              $arguments = P.List_List$from($arguments, true, null);
          } else {
            $arguments = P.List_List$from($arguments, true, null);
            providedArgumentCount = $arguments.length;
          }
          receiver = victim;
        } else {
          arguments0 = [victim];
          C.JSArray_methods.addAll$1(arguments0, $arguments);
          receiver = this.cachedInterceptor;
          receiver = receiver != null ? receiver : victim;
          providedArgumentCount = arguments0.length - 1;
          $arguments = arguments0;
        }
        if (t1.areOptionalParametersNamed && providedArgumentCount > t2)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + $arguments.length + " arguments."));
        else if (providedArgumentCount < t2)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too few)."));
        else if (providedArgumentCount > fullParameterCount)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too many)."));
        for (i = providedArgumentCount; i < fullParameterCount; ++i)
          C.JSArray_methods.add$1($arguments, init.metadata[t1.defaultValue$1(0, i)]);
        return this.jsFunction.apply(receiver, $arguments);
      },
      info$1: function(arg0) {
        return this.info.call$1(arg0);
      }
    },
    CachedNoSuchMethodInvocation: {
      "^": "Object;interceptor",
      get$isNoSuchMethod: function() {
        return true;
      },
      get$isGetterStub: function() {
        return false;
      },
      invokeOn$2: function(victim, invocation) {
        var receiver = this.interceptor;
        return J.noSuchMethod$1$(receiver == null ? victim : receiver, invocation);
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction<,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      parameterName$1: function(parameter) {
        var metadataIndex = this.data[2 * parameter + this.optionalParameterCount + 3];
        return init.metadata[metadataIndex];
      },
      defaultValue$1: [function(_, parameter) {
        var t1 = this.requiredParameterCount;
        if (J.$lt$n(parameter, t1))
          return;
        return this.data[3 + parameter - t1];
      }, "call$1", "get$defaultValue", 2, 0, 78, 153, []],
      computeFunctionRti$1: function(jsConstructor) {
        var t1, fakeInstance, t2;
        t1 = this.functionType;
        if (typeof t1 == "number")
          return init.types[t1];
        else if (typeof t1 == "function") {
          fakeInstance = new jsConstructor();
          t2 = fakeInstance["<>"];
          if (fakeInstance != null)
            fakeInstance.$builtinTypeInfo = t2;
          return t1.apply({$receiver: fakeInstance});
        } else
          throw H.wrapException(new H.RuntimeError("Unexpected function type"));
      },
      get$reflectionName: function() {
        return this.jsFunction.$reflectionName;
      },
      static: {ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }}
    },
    Primitives_functionNoSuchMethod_closure: {
      "^": "Closure:25;__js_helper$_box_0,_captured_arguments_1,_captured_namedArgumentList_2",
      call$2: function($name, argument) {
        var t1 = this.__js_helper$_box_0;
        t1._captured_names_1 = t1._captured_names_1 + "$" + H.S($name);
        this._captured_namedArgumentList_2.push($name);
        this._captured_arguments_1.push(argument);
        ++t1._captured_argumentCount_0;
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = [];
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }}
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + H.S(t1) + "' on null";
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + H.S(t1) + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(this._message) + ")";
      },
      static: {JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }}
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
      }
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:2;_captured_ex_0",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this._captured_ex_0;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      }
    },
    invokeClosure_closure: {
      "^": "Closure:1;_captured_closure_0",
      call$0: function() {
        return this._captured_closure_0.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:1;_captured_closure_1,_captured_arg1_2",
      call$0: function() {
        return this._captured_closure_1.call$1(this._captured_arg1_2);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:1;_captured_closure_3,_captured_arg1_4,_captured_arg2_5",
      call$0: function() {
        return this._captured_closure_3.call$2(this._captured_arg1_4, this._captured_arg2_5);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:1;_captured_closure_6,_captured_arg1_7,_captured_arg2_8,_captured_arg3_9",
      call$0: function() {
        return this._captured_closure_6.call$3(this._captured_arg1_7, this._captured_arg2_8, this._captured_arg3_9);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:1;_captured_closure_10,_captured_arg1_11,_captured_arg2_12,_captured_arg3_13,_captured_arg4_14",
      call$0: function() {
        return this._captured_closure_10.call$4(this._captured_arg1_11, this._captured_arg2_12, this._captured_arg3_13, this._captured_arg4_14);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this) + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    "+Closure": [3, 48],
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self<,_target,_receiver,__js_helper$_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this.__js_helper$_name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {BoundClosure_selfOf: function(closure) {
          return closure.get$_self();
        }, BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        }, BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        }, BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = Object.getOwnPropertyNames(template);
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }}
    },
    "+BoundClosure": [319],
    Creates: {
      "^": "Object;types"
    },
    Returns: {
      "^": "Object;types"
    },
    JSName: {
      "^": "Object;name>"
    },
    CastErrorImplementation: {
      "^": "Error;message>",
      toString$0: function(_) {
        return this.message;
      },
      static: {CastErrorImplementation$: function(actualType, expectedType) {
          return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
        }}
    },
    RuntimeError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    RuntimeType: {
      "^": "Object;"
    },
    RuntimeFunctionType: {
      "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
      _isTest$1: function(expression) {
        var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
        return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
      },
      _extractFunctionTypeObjectFrom$1: function(o) {
        var interceptor = J.getInterceptor(o);
        return "$signature" in interceptor ? interceptor.$signature() : null;
      },
      toRti$0: function() {
        var result, t1, t2, namedRti, keys, i, $name;
        result = {func: "dynafunc"};
        t1 = this.returnType;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isVoidRuntimeType)
          result.void = true;
        else if (!t2.$isDynamicRuntimeType)
          result.ret = t1.toRti$0();
        t1 = this.parameterTypes;
        if (t1 != null && t1.length !== 0)
          result.args = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0)
          result.opt = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.namedParameters;
        if (t1 != null) {
          namedRti = Object.create(null);
          keys = H.extractKeys(t1);
          for (t2 = keys.length, i = 0; i < t2; ++i) {
            $name = keys[i];
            namedRti[$name] = t1[$name].toRti$0();
          }
          result.named = namedRti;
        }
        return result;
      },
      toString$0: function(_) {
        var t1, t2, result, needsComma, i, type, keys, $name;
        t1 = this.parameterTypes;
        if (t1 != null)
          for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += H.S(type);
          }
        else {
          result = "(";
          needsComma = false;
        }
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0) {
          result = (needsComma ? result + ", " : result) + "[";
          for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += H.S(type);
          }
          result += "]";
        } else {
          t1 = this.namedParameters;
          if (t1 != null) {
            result = (needsComma ? result + ", " : result) + "{";
            keys = H.extractKeys(t1);
            for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
              $name = keys[i];
              if (needsComma)
                result += ", ";
              result += H.S(t1[$name].toRti$0()) + " " + $name;
            }
            result += "}";
          }
        }
        return result + (") -> " + H.S(this.returnType));
      },
      static: {RuntimeFunctionType_listToRti: function(list) {
          var result, t1, i;
          list = list;
          result = [];
          for (t1 = list.length, i = 0; i < t1; ++i)
            result.push(list[i].toRti$0());
          return result;
        }}
    },
    DynamicRuntimeType: {
      "^": "RuntimeType;",
      toString$0: function(_) {
        return "dynamic";
      },
      toRti$0: function() {
        return;
      }
    },
    RuntimeTypePlain: {
      "^": "RuntimeType;_jsConstructorName",
      toRti$0: function() {
        var t1, rti;
        t1 = this._jsConstructorName;
        rti = H.jsConstructorNameToRti(t1);
        if (rti == null)
          throw H.wrapException("no type for '" + t1 + "'");
        return rti;
      },
      toString$0: function(_) {
        return this._jsConstructorName;
      }
    },
    RuntimeTypeGeneric: {
      "^": "RuntimeType;_jsConstructorName,$arguments,rti",
      toRti$0: function() {
        var t1, result, t2, _i;
        t1 = this.rti;
        if (t1 != null)
          return t1;
        t1 = this._jsConstructorName;
        result = [H.jsConstructorNameToRti(t1)];
        if (result[0] == null)
          throw H.wrapException("no type for '" + t1 + "<...>'");
        for (t1 = this.$arguments, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          result.push(t1[_i].toRti$0());
        this.rti = result;
        return result;
      },
      toString$0: function(_) {
        var t1 = this.$arguments;
        return this._jsConstructorName + "<" + (t1 && C.JSArray_methods).join$1(t1, ", ") + ">";
      }
    },
    UnimplementedNoSuchMethodError: {
      "^": "Error;_message",
      toString$0: function(_) {
        return "Unsupported operation: " + this._message;
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace<"
    },
    asyncHelper_closure: {
      "^": "Closure:57;_captured_bodyFunctionOrErrorCode_0",
      call$2: [function(error, stackTrace) {
        H._wrapJsFunctionForAsync(this._captured_bodyFunctionOrErrorCode_0, 1).call$1(new H.ExceptionAndStackTrace(error, stackTrace));
      }, null, null, 4, 0, null, 6, [], 15, [], "call"]
    },
    _wrapJsFunctionForAsync_closure: {
      "^": "Closure:2;_captured_errorCode_0,_captured_protected_1",
      call$1: [function(result) {
        this._captured_protected_1(this._captured_errorCode_0, result);
      }, null, null, 2, 0, null, 159, [], "call"]
    },
    TypeImpl: {
      "^": "Object;_typeName<,_unmangledName",
      toString$0: function(_) {
        var t1, unmangledName;
        t1 = this._unmangledName;
        if (t1 != null)
          return t1;
        unmangledName = this._typeName.replace(/[^<,> ]+/g, function(m) {
          return init.mangledGlobalNames[m] || m;
        });
        this._unmangledName = unmangledName;
        return unmangledName;
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this._typeName);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.TypeImpl && J.$eq$(this._typeName, other._typeName);
      },
      $isType: 1
    },
    TypeVariable: {
      "^": "Object;owner<,name>,bound"
    },
    JsLinkedHashMap: {
      "^": "Object;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$keys: function(_) {
        var t1 = new H.LinkedHashMapKeyIterable(this);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        return t1;
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(this), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: ["super$JsLinkedHashMap$internalContainsKey", function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableEntry$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      }],
      addAll$1: function(_, other) {
        J.forEach$1$ax(other, new H.JsLinkedHashMap_addAll_closure(this));
      },
      $index: function(_, key) {
        var strings, cell, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableEntry$2(strings, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableEntry$2(nums, key);
          return cell == null ? null : cell.get$hashMapCellValue();
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: ["super$JsLinkedHashMap$internalGet", function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableEntry$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$hashMapCellValue();
      }],
      $indexSet: function(_, key, value) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: ["super$JsLinkedHashMap$internalSet", function(key, value) {
        var rest, hash, bucket, index;
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableEntry$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$hashMapCellValue(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }],
      putIfAbsent$2: function(_, key, ifAbsent) {
        var value;
        if (this.containsKey$1(0, key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: function(_, key) {
        if (typeof key === "string")
          return this._removeHashTableEntry$2(this._strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._removeHashTableEntry$2(this._nums, key);
        else
          return this.internalRemove$1(key);
      },
      internalRemove$1: ["super$JsLinkedHashMap$internalRemove", function(key) {
        var rest, bucket, index, cell;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableEntry$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$hashMapCellValue();
      }],
      clear$0: function(_) {
        if (this.__js_helper$_length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this.__js_helper$_length = 0;
          this._modifications = this._modifications + 1 & 67108863;
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell = this._getTableEntry$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.set$hashMapCellValue(value);
      },
      _removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return;
        cell = this._getTableEntry$2(table, key);
        if (cell == null)
          return;
        this._unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return cell.get$hashMapCellValue();
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(key, value, null, null);
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_previous();
        next = cell.get$_next();
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._previous = previous;
        --this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$hashMapCellKey(), key))
            return i;
        return -1;
      },
      toString$0: [function(_) {
        return P.Maps_mapToString(this);
      }, "call$0", "get$toString", 0, 0, 15, "toString"],
      _getTableEntry$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableEntry$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isInternalMap: 1,
      $isMap: 1,
      $asMap: null
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure:2;_captured_this_0",
      call$1: [function(each) {
        return this._captured_this_0.$index(0, each);
      }, null, null, 2, 0, null, 68, [], "call"]
    },
    JsLinkedHashMap_addAll_closure: {
      "^": "Closure;_captured_this_0",
      call$2: [function(key, value) {
        this._captured_this_0.$indexSet(0, key, value);
      }, null, null, 4, 0, null, 11, [], 1, [], "call"],
      $signature: function() {
        return H.computeSignature(function(K, V) {
          return {func: 1, args: [K, V]};
        }, this._captured_this_0, "JsLinkedHashMap");
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey<,hashMapCellValue@,_next<,_previous<"
    },
    LinkedHashMapKeyIterable: {
      "^": "Iterable;__js_helper$_map",
      get$length: function(_) {
        return this.__js_helper$_map.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_map.__js_helper$_length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.__js_helper$_map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        t2._cell = t1._first;
        return t2;
      },
      contains$1: function(_, element) {
        return this.__js_helper$_map.containsKey$1(0, element);
      },
      forEach$1: function(_, f) {
        var t1, cell, modifications;
        t1 = this.__js_helper$_map;
        cell = t1._first;
        modifications = t1._modifications;
        for (; cell != null;) {
          f.call$1(cell.hashMapCellKey);
          if (modifications !== t1._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
          cell = cell._next;
        }
      },
      $isEfficientLength: 1
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;__js_helper$_map,_modifications,_cell,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this.__js_helper$_map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this.__js_helper$_current = null;
            return false;
          } else {
            this.__js_helper$_current = t1.hashMapCellKey;
            this._cell = t1._next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:2;_captured_getTag_0",
      call$1: function(o) {
        return this._captured_getTag_0(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:338;_captured_getUnknownTag_1",
      call$2: function(o, tag) {
        return this._captured_getUnknownTag_1(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:16;_captured_prototypeForTag_2",
      call$1: function(tag) {
        return this._captured_prototypeForTag_2(tag);
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      get$_nativeAnchoredVersion: function() {
        var t1 = this._nativeAnchoredRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern + "|()", t1.multiline, !t1.ignoreCase, true);
        this._nativeAnchoredRegExp = t1;
        return t1;
      },
      allMatches$2: function(_, string, start) {
        H.checkString(string);
        H.checkInt(start);
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._AllMatchesIterable(this, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      _execGlobal$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeGlobalVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        return H._MatchImplementation$(this, match);
      },
      _execAnchored$2: function(string, start) {
        var regexp, match, t1;
        regexp = this.get$_nativeAnchoredVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        t1 = match.length - 1;
        if (match[t1] != null)
          return;
        C.JSArray_methods.set$length(match, t1);
        return H._MatchImplementation$(this, match);
      },
      matchAsPrefix$2: function(_, string, start) {
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return this._execAnchored$2(string, start);
      },
      static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          H.checkString(source);
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function() {
            try {
              return new RegExp(source, m + i + g);
            } catch (e) {
              return e;
            }
          }();
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(new P.FormatException("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }}
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match",
      $index: function(_, index) {
        return this._match[index];
      },
      groups$1: [function(groups) {
        var out, t1, t2;
        out = [];
        for (t1 = groups.get$iterator(groups), t2 = this._match; t1.moveNext$0();)
          out.push(t2[t1.get$current()]);
        return out;
      }, "call$1", "get$groups", 2, 0, 142],
      _MatchImplementation$2: function(pattern, _match) {
      },
      $isMatch: 1,
      static: {_MatchImplementation$: function(pattern, _match) {
          var t1 = new H._MatchImplementation(pattern, _match);
          t1._MatchImplementation$2(pattern, _match);
          return t1;
        }}
    },
    _AllMatchesIterable: {
      "^": "IterableBase;_re,_string,__js_helper$_start",
      get$iterator: function(_) {
        return new H._AllMatchesIterator(this._re, this._string, this.__js_helper$_start, null);
      },
      $asIterableBase: function() {
        return [P.Match];
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _AllMatchesIterator: {
      "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1, t2, match, nextIndex;
        t1 = this._string;
        if (t1 == null)
          return false;
        t2 = this._nextIndex;
        if (t2 <= t1.length) {
          match = this._regExp._execGlobal$2(t1, t2);
          if (match != null) {
            this.__js_helper$_current = match;
            t1 = match._match;
            nextIndex = t1.index + J.get$length$asx(t1[0]);
            this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
            return true;
          }
        }
        this.__js_helper$_current = null;
        this._string = null;
        return false;
      }
    },
    StringMatch: {
      "^": "Object;start,input,pattern",
      $index: function(_, g) {
        return this.group$1(g);
      },
      group$1: function(group_) {
        if (!J.$eq$(group_, 0))
          throw H.wrapException(P.RangeError$value(group_, null, null));
        return this.pattern;
      },
      groups$1: [function(groups_) {
        var result, t1, t2, g;
        result = [];
        result.$builtinTypeInfo = [P.String];
        for (t1 = groups_.get$iterator(groups_), t2 = this.pattern; t1.moveNext$0();) {
          g = t1.get$current();
          H.throwExpression(P.RangeError$value(g, null, null));
          result.push(t2);
        }
        return result;
      }, "call$1", "get$groups", 2, 0, 142],
      $isMatch: 1
    }
  }], ["crypto", "package:crypto/crypto.dart",, M, {
    "^": "",
    _CryptoUtils_bytesToBase64: function(bytes, urlSafe, addLineSeparator) {
      var len, lookup, remainderLength, chunkLength, t1, outputLen, out, j, i, c, i0, i1, i2, x, j0, t2, y;
      len = bytes.length;
      if (len === 0)
        return "";
      lookup = urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      remainderLength = C.JSInt_methods.remainder$1(len, 3);
      chunkLength = len - remainderLength;
      t1 = remainderLength > 0 ? 4 : 0;
      outputLen = (len / 3 | 0) * 4 + t1;
      if (addLineSeparator)
        outputLen += C.JSInt_methods._tdivFast$1(outputLen - 1, 76) << 1 >>> 0;
      out = Array(outputLen);
      out.fixed$length = Array;
      out.$builtinTypeInfo = [P.$int];
      for (t1 = outputLen - 2, j = 0, i = 0, c = 0; i < chunkLength; i = i2) {
        i0 = i + 1;
        i1 = i0 + 1;
        i2 = i1 + 1;
        x = bytes[i] << 16 & 16777215 | bytes[i0] << 8 & 16777215 | bytes[i1];
        j0 = j + 1;
        out[j] = C.JSString_methods.codeUnitAt$1(lookup, x >>> 18);
        j = j0 + 1;
        out[j0] = C.JSString_methods.codeUnitAt$1(lookup, x >>> 12 & 63);
        j0 = j + 1;
        out[j] = C.JSString_methods.codeUnitAt$1(lookup, x >>> 6 & 63);
        j = j0 + 1;
        out[j0] = C.JSString_methods.codeUnitAt$1(lookup, x & 63);
        if (addLineSeparator) {
          ++c;
          t2 = c === 19 && j < t1;
        } else
          t2 = false;
        if (t2) {
          j0 = j + 1;
          out[j] = 13;
          j = j0 + 1;
          out[j0] = 10;
          c = 0;
        }
      }
      if (remainderLength === 1) {
        x = bytes[i];
        j0 = j + 1;
        out[j] = C.JSString_methods.codeUnitAt$1(lookup, x >>> 2);
        j = j0 + 1;
        out[j0] = C.JSString_methods.codeUnitAt$1(lookup, x << 4 & 63);
        out[j] = 61;
        out[j + 1] = 61;
      } else if (remainderLength === 2) {
        x = bytes[i];
        y = bytes[i + 1];
        j0 = j + 1;
        out[j] = C.JSString_methods.codeUnitAt$1(lookup, x >>> 2);
        j = j0 + 1;
        out[j0] = C.JSString_methods.codeUnitAt$1(lookup, (x << 4 | y >>> 4) & 63);
        out[j] = C.JSString_methods.codeUnitAt$1(lookup, y << 2 & 63);
        out[j + 1] = 61;
      }
      return P.String_String$fromCharCodes(out, 0, null);
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    CodeUnits: {
      "^": "UnmodifiableListBase;__internal$_string",
      get$length: function(_) {
        return this.__internal$_string.length;
      },
      $index: function(_, i) {
        return C.JSString_methods.codeUnitAt$1(this.__internal$_string, i);
      },
      $asUnmodifiableListBase: function() {
        return [P.$int];
      },
      $asListBase: function() {
        return [P.$int];
      },
      $asObject_ListMixin: function() {
        return [P.$int];
      },
      $asList: function() {
        return [P.$int];
      },
      $asIterable: function() {
        return [P.$int];
      }
    },
    ListIterable: {
      "^": "Iterable;",
      get$iterator: function(_) {
        var t1 = new H.ListIterator(this, this.get$length(this), 0, null);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
        return t1;
      },
      forEach$1: function(_, action) {
        var $length, i;
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return J.$eq$(this.get$length(this), 0);
      },
      get$last: function(_) {
        if (J.$eq$(this.get$length(this), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.elementAt$1(0, J.$sub$n(this.get$length(this), 1));
      },
      get$single: function(_) {
        if (J.$eq$(this.get$length(this), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        if (J.$gt$n(this.get$length(this), 1))
          throw H.wrapException(H.IterableElementError_tooMany());
        return this.elementAt$1(0, 0);
      },
      contains$1: function(_, element) {
        var $length, i;
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          if (J.$eq$(this.elementAt$1(0, i), element))
            return true;
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return false;
      },
      join$1: function(_, separator) {
        var $length, t1, first, buffer, i;
        $length = this.get$length(this);
        if (separator.length !== 0) {
          t1 = J.getInterceptor($length);
          if (t1.$eq($length, 0))
            return "";
          first = H.S(this.elementAt$1(0, 0));
          if (!t1.$eq($length, this.get$length(this)))
            throw H.wrapException(new P.ConcurrentModificationError(this));
          buffer = new P.StringBuffer(first);
          for (i = 1; i < $length; ++i) {
            buffer._contents += separator;
            buffer._contents += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(new P.ConcurrentModificationError(this));
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else {
          buffer = new P.StringBuffer("");
          for (i = 0; i < $length; ++i) {
            buffer._contents += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(new P.ConcurrentModificationError(this));
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      },
      where$1: function(_, test) {
        return this.super$Iterable$where(this, test);
      },
      map$1: function(_, f) {
        var t1 = new H.MappedListIterable(this, f);
        t1.$builtinTypeInfo = [null, null];
        return t1;
      },
      toList$1$growable: function(_, growable) {
        var result, i;
        if (growable) {
          result = [];
          result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
          C.JSArray_methods.set$length(result, this.get$length(this));
        } else {
          result = Array(this.get$length(this));
          result.fixed$length = Array;
          result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
        }
        for (i = 0; i < this.get$length(this); ++i)
          result[i] = this.elementAt$1(0, i);
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      $isEfficientLength: 1
    },
    SubListIterable: {
      "^": "ListIterable;_iterable,_start,_endOrLength",
      get$_endIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._endOrLength;
        if (t1 == null || J.$gt$n(t1, $length))
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._start;
        if (t1 > $length)
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2;
        $length = J.get$length$asx(this._iterable);
        t1 = this._start;
        if (t1 >= $length)
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || J.$ge$n(t2, $length))
          return $length - t1;
        return J.$sub$n(t2, t1);
      },
      elementAt$1: function(_, index) {
        var realIndex = J.$add$ns(this.get$_startIndex(), index);
        if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return J.elementAt$1$ax(this._iterable, realIndex);
      },
      take$1: function(_, count) {
        var t1, t2, newEnd;
        if (J.$lt$n(count, 0))
          H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
        t1 = this._endOrLength;
        t2 = this._start;
        if (t1 == null)
          return H.SubListIterable$(this._iterable, t2, t2 + count, H.getTypeArgumentByIndex(this, 0));
        else {
          newEnd = t2 + count;
          if (J.$lt$n(t1, newEnd))
            return this;
          return H.SubListIterable$(this._iterable, t2, newEnd, H.getTypeArgumentByIndex(this, 0));
        }
      },
      toList$1$growable: function(_, growable) {
        var start, t1, t2, end, end0, $length, result, i;
        start = this._start;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        end = t2.get$length(t1);
        end0 = this._endOrLength;
        if (end0 != null && J.$lt$n(end0, end))
          end = end0;
        $length = J.$sub$n(end, start);
        if (J.$lt$n($length, 0))
          $length = 0;
        if (growable) {
          result = [];
          result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
          C.JSArray_methods.set$length(result, $length);
        } else {
          result = Array($length);
          result.fixed$length = Array;
          result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        }
        for (i = 0; i < $length; ++i) {
          result[i] = t2.elementAt$1(t1, start + i);
          if (J.$lt$n(t2.get$length(t1), end))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
        var t1, t2;
        t1 = this._start;
        if (t1 < 0)
          H.throwExpression(P.RangeError$range(t1, 0, null, "start", null));
        t2 = this._endOrLength;
        if (t2 != null) {
          if (J.$lt$n(t2, 0))
            H.throwExpression(P.RangeError$range(t2, 0, null, "end", null));
          if (t1 > t2)
            throw H.wrapException(P.RangeError$range(t1, 0, t2, "start", null));
        }
      },
      static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
          t1.$builtinTypeInfo = [$E];
          t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
          return t1;
        }}
    },
    ListIterator: {
      "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (!J.$eq$(this.__internal$_length, $length))
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t3 = this._index;
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this._index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this._iterable);
      },
      get$last: function(_) {
        return this._f$1(J.get$last$ax(this._iterable));
      },
      get$single: function(_) {
        return this._f$1(J.get$single$ax(this._iterable));
      },
      elementAt$1: function(_, index) {
        return this._f$1(J.elementAt$1$ax(this._iterable, index));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          var t1;
          if (!!J.getInterceptor(iterable).$isEfficientLength) {
            t1 = new H.EfficientLengthMappedIterable(iterable, $function);
            t1.$builtinTypeInfo = [$S, $T];
            return t1;
          }
          t1 = new H.MappedIterable(iterable, $function);
          t1.$builtinTypeInfo = [$S, $T];
          return t1;
        }}
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f",
      $isEfficientLength: 1
    },
    MappedIterator: {
      "^": "Iterator;__internal$_current,_iterator,_f",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;__internal$_source,_f",
      get$length: function(_) {
        return J.get$length$asx(this.__internal$_source);
      },
      elementAt$1: function(_, index) {
        return this._f$1(J.elementAt$1$ax(this.__internal$_source, index));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      $isEfficientLength: 1
    },
    WhereIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f",
      moveNext$0: function() {
        for (var t1 = this._iterator; t1.moveNext$0();)
          if (this._f$1(t1.get$current()) === true)
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      }
    },
    FixedLengthListMixin: {
      "^": "Object;",
      set$length: function(receiver, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of a fixed-length list"));
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      remove$1: function(receiver, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      },
      clear$0: function(receiver) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear a fixed-length list"));
      }
    },
    UnmodifiableListMixin: {
      "^": "Object;",
      $indexSet: function(_, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of an unmodifiable list"));
      },
      add$1: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      addAll$1: function(_, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      remove$1: function(_, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear an unmodifiable list"));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    UnmodifiableListBase: {
      "^": "ListBase+UnmodifiableListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    Symbol: {
      "^": "Object;_name<",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.Symbol && J.$eq$(this._name, other._name);
      },
      get$hashCode: function(_) {
        return 536870911 & 664597 * J.get$hashCode$(this._name);
      },
      toString$0: function(_) {
        return "Symbol(\"" + H.S(this._name) + "\")";
      },
      $isSymbol0: 1,
      static: {Symbol_validatePublicSymbol: function($name) {
          var t1 = J.getInterceptor$asx($name);
          if (t1.get$isEmpty($name) === true || $.$get$Symbol_publicSymbolPattern()._nativeRegExp.test(H.checkString($name)))
            return $name;
          if (t1.startsWith$1($name, "_"))
            throw H.wrapException(P.ArgumentError$("\"" + H.S($name) + "\" is a private identifier"));
          throw H.wrapException(P.ArgumentError$("\"" + H.S($name) + "\" is not a valid (qualified) symbol name"));
        }}
    }
  }], ["dart._js_mirrors", "dart:_js_mirrors",, H, {
    "^": "",
    n: function(symbol) {
      return symbol.get$_name();
    },
    s: function($name) {
      if ($name == null)
        return;
      return new H.Symbol($name);
    },
    reflect: [function(reflectee) {
      if (reflectee instanceof H.Closure)
        return new H.JsClosureMirror(reflectee, 4);
      else
        return new H.JsInstanceMirror(reflectee, 4);
    }, "call$1", "_js_mirrors__reflect$closure", 2, 0, 210, 171, []],
    reflectClassByMangledName: function(mangledName) {
      var result, unmangledName, t1;
      result = $.$get$mangledGlobalNames()._jsMangledNames[mangledName];
      unmangledName = typeof result !== "string" ? null : result;
      t1 = J.getInterceptor(mangledName);
      if (t1.$eq(mangledName, "dynamic"))
        return $.$get$JsMirrorSystem__dynamicType();
      if (t1.$eq(mangledName, "void"))
        return $.$get$JsMirrorSystem__voidType();
      return H.reflectClassByName(H.s(unmangledName == null ? mangledName : unmangledName), mangledName);
    },
    reflectClassByName: function(symbol, mangledName) {
      var t1, mirror, typeArgIndex, t2, originalDeclaration, $constructor, descriptor, fields, fieldsMetadata, mixins, classMirror, typeVariables, typeArguments, i;
      t1 = $.classMirrors;
      if (t1 == null) {
        t1 = H.JsCache_allocate();
        $.classMirrors = t1;
      }
      mirror = t1[mangledName];
      if (mirror != null)
        return mirror;
      t1 = J.getInterceptor$asx(mangledName);
      typeArgIndex = t1.indexOf$1(mangledName, "<");
      t2 = J.getInterceptor(typeArgIndex);
      if (!t2.$eq(typeArgIndex, -1)) {
        originalDeclaration = H.reflectClassByMangledName(t1.substring$2(mangledName, 0, typeArgIndex)).get$originalDeclaration();
        if (!!originalDeclaration.$isJsTypedefMirror)
          throw H.wrapException(new P.UnimplementedError(null));
        mirror = new H.JsTypeBoundClassMirror(originalDeclaration, t1.substring$2(mangledName, t2.$add(typeArgIndex, 1), J.$sub$n(t1.get$length(mangledName), 1)), null, null, null, null, null, null, null, null, null, null, null, null, null, originalDeclaration.get$simpleName());
        $.classMirrors[mangledName] = mirror;
        return mirror;
      }
      $constructor = init.allClasses[mangledName];
      if ($constructor == null)
        throw H.wrapException(new P.UnsupportedError("Cannot find class for: " + H.S(H.n(symbol))));
      descriptor = $constructor["@"];
      if (descriptor == null) {
        fields = null;
        fieldsMetadata = null;
      } else if ("$$isTypedef" in descriptor) {
        mirror = new H.JsTypedefMirror(mangledName, null, symbol);
        mirror.referent = new H.JsFunctionTypeMirror(init.types[descriptor.$typedefType], null, null, null, mirror);
        fields = null;
        fieldsMetadata = null;
      } else {
        fields = descriptor["^"];
        t1 = J.getInterceptor(fields);
        if (!!t1.$isList) {
          fieldsMetadata = t1.getRange$2(fields, 1, t1.get$length(fields)).toList$0(0);
          fields = t1.$index(fields, 0);
        } else
          fieldsMetadata = null;
        if (typeof fields !== "string")
          fields = "";
      }
      if (mirror == null) {
        mixins = J.split$1$s(J.split$1$s(fields, ";")[0], "+");
        if (mixins.length > 1 && $.$get$mangledGlobalNames().$index(0, mangledName) == null)
          mirror = H.reflectMixinApplication(mixins, mangledName);
        else {
          classMirror = new H.JsClassMirror(mangledName, $constructor, fields, fieldsMetadata, H.JsCache_allocate(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, symbol);
          typeVariables = $constructor.prototype["<>"];
          if (typeVariables == null || typeVariables.length === 0)
            mirror = classMirror;
          else {
            for (t1 = typeVariables.length, typeArguments = "dynamic", i = 1; i < t1; ++i)
              typeArguments += ",dynamic";
            mirror = new H.JsTypeBoundClassMirror(classMirror, typeArguments, null, null, null, null, null, null, null, null, null, null, null, null, null, classMirror.simpleName);
          }
        }
      }
      $.classMirrors[mangledName] = mirror;
      return mirror;
    },
    filterMethods: function(methods) {
      var result, t1, _i, method;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = methods.length, _i = 0; _i < methods.length; methods.length === t1 || (0, H.throwConcurrentModificationError)(methods), ++_i) {
        method = methods[_i];
        if (!method.get$isConstructor() && !method.get$isGetter() && !method.get$isSetter())
          result.$indexSet(0, method.get$simpleName(), method);
      }
      return result;
    },
    filterGetters: function(methods, fields) {
      var result, t1, _i, method, t2;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = methods.length, _i = 0; _i < methods.length; methods.length === t1 || (0, H.throwConcurrentModificationError)(methods), ++_i) {
        method = methods[_i];
        if (method.get$isGetter()) {
          t2 = method.get$simpleName();
          if (fields._map.$index(0, t2) != null)
            continue;
          result.$indexSet(0, method.get$simpleName(), method);
        }
      }
      return result;
    },
    reflectMixinApplication: function(mixinNames, mangledName) {
      var mixins, t1, _i, it, superclass;
      mixins = [];
      for (t1 = mixinNames.length, _i = 0; _i < mixinNames.length; mixinNames.length === t1 || (0, H.throwConcurrentModificationError)(mixinNames), ++_i)
        mixins.push(H.reflectClassByMangledName(mixinNames[_i]));
      it = new J.ArrayIterator(mixins, mixins.length, 0, null);
      it.$builtinTypeInfo = [H.getTypeArgumentByIndex(mixins, 0)];
      it.moveNext$0();
      superclass = it.__interceptors$_current;
      for (; it.moveNext$0();)
        superclass = new H.JsMixinApplication(superclass, it.__interceptors$_current, null, null, H.s(mangledName));
      return superclass;
    },
    findTypeVariableIndex: function(typeVariables, $name) {
      var t1, i;
      for (t1 = J.getInterceptor$asx(typeVariables), i = 0; i < t1.get$length(typeVariables); ++i)
        if (J.$eq$(t1.$index(typeVariables, i).get$simpleName(), H.s($name)))
          return i;
      throw H.wrapException(P.ArgumentError$("Type variable not present in list."));
    },
    typeMirrorFromRuntimeTypeRepresentation: function(owner, type) {
      var t1, context, t2, representation, typeVariable, typeVariables, typeArgument;
      t1 = {};
      t1._captured_ownerClass_0 = null;
      for (context = owner; context != null;) {
        t2 = J.getInterceptor(context);
        if (!!t2.$isClassMirror) {
          t1._captured_ownerClass_0 = context;
          break;
        }
        if (!!t2.$isTypedefMirror)
          break;
        context = context.get$owner();
      }
      if (type == null)
        return $.$get$JsMirrorSystem__dynamicType();
      else if (type instanceof H.TypeImpl)
        return H.reflectClassByMangledName(type._typeName);
      else {
        t2 = t1._captured_ownerClass_0;
        if (t2 == null)
          representation = H.runtimeTypeToString(type, null);
        else if (t2.get$isOriginalDeclaration())
          if (typeof type === "number") {
            typeVariable = init.metadata[type];
            typeVariables = t1._captured_ownerClass_0.get$typeVariables();
            return J.$index$asx(typeVariables, H.findTypeVariableIndex(typeVariables, J.get$name$x(typeVariable)));
          } else
            representation = H.runtimeTypeToString(type, null);
        else {
          t1 = new H.typeMirrorFromRuntimeTypeRepresentation_getTypeArgument(t1);
          if (typeof type === "number") {
            typeArgument = t1.call$1(type);
            if (typeArgument instanceof H.JsTypeVariableMirror)
              return typeArgument;
          }
          representation = H.runtimeTypeToString(type, new H.typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable(t1));
        }
      }
      if (representation != null)
        return H.reflectClassByMangledName(representation);
      if (type.typedef != null)
        return H.typeMirrorFromRuntimeTypeRepresentation(owner, type.typedef);
      else if ('func' in type)
        return new H.JsFunctionTypeMirror(type, null, null, null, owner);
      return P.reflectClass(C.Type_3bx);
    },
    computeQualifiedName: function(owner, simpleName) {
      if (owner == null)
        return simpleName;
      return H.s(H.S(owner.get$qualifiedName()._name) + "." + H.S(simpleName._name));
    },
    extractMetadata: function(victim) {
      var metadataFunction, t1;
      metadataFunction = Object.prototype.hasOwnProperty.call(victim, "@") ? victim["@"] : null;
      if (metadataFunction != null)
        return metadataFunction();
      if (typeof victim != "function")
        return C.List_empty;
      if ("$metadataIndex" in victim) {
        t1 = victim.$reflectionInfo.splice(victim.$metadataIndex);
        t1.fixed$length = Array;
        t1 = new H.MappedListIterable(t1, new H.extractMetadata_closure());
        t1.$builtinTypeInfo = [null, null];
        return t1.toList$0(0);
      }
      return C.List_empty;
    },
    parseCompactFieldSpecification: function(owner, fieldSpecification, isStatic, result) {
      var t1, fields, fieldsMetadata, t2, fieldNumber, _i, field, fieldNumber0, metadata, mirror;
      t1 = J.getInterceptor(fieldSpecification);
      if (!!t1.$isList) {
        fields = H.splitFields(t1.$index(fieldSpecification, 0), ",");
        fieldsMetadata = t1.sublist$1(fieldSpecification, 1);
      } else {
        fields = typeof fieldSpecification === "string" ? H.splitFields(fieldSpecification, ",") : [];
        fieldsMetadata = null;
      }
      for (t1 = fields.length, t2 = fieldsMetadata != null, fieldNumber = 0, _i = 0; _i < fields.length; fields.length === t1 || (0, H.throwConcurrentModificationError)(fields), ++_i) {
        field = fields[_i];
        if (t2) {
          fieldNumber0 = fieldNumber + 1;
          metadata = fieldsMetadata[fieldNumber];
          fieldNumber = fieldNumber0;
        } else
          metadata = null;
        mirror = H.JsVariableMirror_JsVariableMirror$from(field, metadata, owner, isStatic);
        if (mirror != null)
          result.push(mirror);
      }
    },
    splitFields: function(string, pattern) {
      var t1 = J.getInterceptor$asx(string);
      if (t1.get$isEmpty(string) === true) {
        t1 = [];
        t1.$builtinTypeInfo = [P.String];
        return t1;
      }
      return t1.split$1(string, pattern);
    },
    isOperatorName: function($name) {
      switch ($name) {
        case "==":
        case "[]":
        case "*":
        case "/":
        case "%":
        case "~/":
        case "+":
        case "<<":
        case ">>":
        case ">=":
        case ">":
        case "<=":
        case "<":
        case "&":
        case "^":
        case "|":
        case "-":
        case "unary-":
        case "[]=":
        case "~":
          return true;
        default:
          return false;
      }
    },
    isReflectiveDataInPrototype: function(key) {
      var t1, firstChar;
      t1 = J.getInterceptor(key);
      if (t1.$eq(key, "^") || t1.$eq(key, "$methodsWithOptionalArguments"))
        return true;
      firstChar = t1.$index(key, 0);
      t1 = J.getInterceptor(firstChar);
      return t1.$eq(firstChar, "*") || t1.$eq(firstChar, "+");
    },
    JsMirrorSystem: {
      "^": "Object;_cachedLibraries,isolate",
      static: {JsMirrorSystem_librariesByName: function() {
          var t1 = $.JsMirrorSystem__librariesByName;
          if (t1 == null) {
            t1 = H.JsMirrorSystem_computeLibrariesByName();
            $.JsMirrorSystem__librariesByName = t1;
            if (!$.JsMirrorSystem__hasInstalledDeferredLoadHook) {
              $.JsMirrorSystem__hasInstalledDeferredLoadHook = true;
              $.deferredLoadHook = new H.JsMirrorSystem_librariesByName_closure();
            }
          }
          return t1;
        }, JsMirrorSystem_computeLibrariesByName: function() {
          var result, jsLibraries, t1, _i, data, t2, $name, uriString, uri, t3, scheme, userInfo, host, query, fragment, port, isFile, classes, functions, metadataFunction, fields, isRoot, globalObject, metadata;
          result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, [P.List, P.LibraryMirror]);
          jsLibraries = init.libraries;
          if (jsLibraries == null)
            return result;
          for (t1 = jsLibraries.length, _i = 0; _i < jsLibraries.length; jsLibraries.length === t1 || (0, H.throwConcurrentModificationError)(jsLibraries), ++_i) {
            data = jsLibraries[_i];
            t2 = J.getInterceptor$asx(data);
            $name = t2.$index(data, 0);
            uriString = t2.$index(data, 1);
            if (!J.$eq$(uriString, ""))
              uri = P.Uri_parse(uriString, 0, null);
            else {
              t3 = P.LinkedHashMap__makeLiteral(["lib", $name]);
              scheme = P.Uri__makeScheme("https", 0, 5);
              userInfo = P.Uri__makeUserInfo("", 0, 0);
              host = P.Uri__makeHost("dartlang.org", 0, 12, false);
              query = P.Uri__makeQuery(null, 0, 0, t3);
              fragment = P.Uri__makeFragment(null, 0, 0);
              port = P.Uri__makePort(null, scheme);
              isFile = scheme === "file";
              if (host == null)
                t3 = userInfo.length !== 0 || port != null || isFile;
              else
                t3 = false;
              if (t3)
                host = "";
              uri = new P.Uri(host, port, P.Uri__makePath("dart2js-stripped-uri", 0, 20, null, host != null, isFile), scheme, userInfo, query, fragment, null, null);
            }
            classes = t2.$index(data, 2);
            functions = t2.$index(data, 3);
            metadataFunction = t2.$index(data, 4);
            fields = t2.$index(data, 5);
            isRoot = t2.$index(data, 6);
            globalObject = t2.$index(data, 7);
            metadata = metadataFunction == null ? C.List_empty : metadataFunction();
            J.add$1$ax(result.putIfAbsent$2(0, $name, new H.JsMirrorSystem_computeLibrariesByName_closure()), new H.JsLibraryMirror(uri, classes, functions, metadata, fields, isRoot, globalObject, null, null, null, null, null, null, null, null, null, null, H.s($name)));
          }
          return result;
        }}
    },
    JsMirrorSystem_librariesByName_closure: {
      "^": "Closure:1;",
      call$0: function() {
        $.JsMirrorSystem__librariesByName = null;
        return;
      }
    },
    JsMirrorSystem_computeLibrariesByName_closure: {
      "^": "Closure:1;",
      call$0: function() {
        var t1 = [];
        t1.$builtinTypeInfo = [P.LibraryMirror];
        return t1;
      }
    },
    JsMirror: {
      "^": "Object;",
      toString$0: function(_) {
        return this.get$_prettyName();
      },
      _getField$1: function(receiver) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      $isMirror: 1
    },
    JsIsolateMirror: {
      "^": "JsMirror;_isolateContext",
      get$_prettyName: function() {
        return "Isolate";
      },
      $isMirror: 1
    },
    JsDeclarationMirror: {
      "^": "JsMirror;simpleName<",
      get$qualifiedName: function() {
        return H.computeQualifiedName(this.get$owner(), this.get$simpleName());
      },
      toString$0: function(_) {
        return this.get$_prettyName() + " on '" + H.S(this.get$simpleName()._name) + "'";
      },
      _invoke$2: function(positionalArguments, namedArguments) {
        throw H.wrapException(new H.RuntimeError("Should not call _invoke"));
      },
      $isMirror: 1
    },
    JsTypeVariableMirror: {
      "^": "JsTypeMirror;owner<,_typeVariable,_metadataIndex,_cachedUpperBound,simpleName",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.JsTypeVariableMirror && J.$eq$(this.simpleName, other.simpleName) && this.owner.$eq(0, other.owner);
      },
      get$hashCode: function(_) {
        var t1 = this.owner;
        return (1073741823 & J.get$hashCode$(C.Type_gT2._typeName) ^ 17 * J.get$hashCode$(this.simpleName) ^ 19 * t1.get$hashCode(t1)) >>> 0;
      },
      get$_prettyName: function() {
        return "TypeVariableMirror";
      },
      get$isStatic: function() {
        return false;
      },
      $isTypeVariableMirror: 1,
      $isTypeMirror: 1,
      $isMirror: 1
    },
    JsTypeMirror: {
      "^": "JsDeclarationMirror;simpleName",
      get$_prettyName: function() {
        return "TypeMirror";
      },
      get$owner: function() {
        return;
      },
      get$typeVariables: function() {
        return C.List_empty1;
      },
      get$typeArguments: function() {
        return C.List_empty2;
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      $isTypeMirror: 1,
      $isMirror: 1,
      static: {JsTypeMirror$: function(simpleName) {
          return new H.JsTypeMirror(simpleName);
        }}
    },
    JsLibraryMirror: {
      "^": "JsDeclarationMirror_JsObjectMirror;_uri,_classes,_functions,_metadata,_compactFieldSpecification,_isRoot,_globalObject,_cachedFunctionMirrors,_cachedFields,_cachedClasses,_cachedFunctions,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,simpleName",
      get$_prettyName: function() {
        return "LibraryMirror";
      },
      get$qualifiedName: function() {
        return this.simpleName;
      },
      get$_methods: function() {
        return this.get$_functionMirrors();
      },
      get$__classes: function() {
        var t1, result, cls, t2;
        t1 = this._cachedClasses;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = J.get$iterator$ax(this._classes); t1.moveNext$0();) {
          cls = H.reflectClassByMangledName(t1.get$current());
          if (!!J.getInterceptor(cls).$isClassMirror)
            cls = cls.get$originalDeclaration();
          t2 = J.getInterceptor(cls);
          if (!!t2.$isJsClassMirror) {
            result.$indexSet(0, cls.simpleName, cls);
            cls._owner = this;
          } else if (!!t2.$isJsTypedefMirror)
            result.$indexSet(0, cls.simpleName, cls);
        }
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.ClassMirror];
        this._cachedClasses = t1;
        return t1;
      },
      getField$1: function(fieldName) {
        var mirror, getter;
        mirror = this.get$__members()._map.$index(0, fieldName);
        if (mirror == null)
          throw H.wrapException(H.NoSuchStaticMethodError$method(null, fieldName, [], null));
        if (!J.getInterceptor(mirror).$isMethodMirror)
          return H.reflect(mirror._getField$1(this));
        if (mirror.get$isGetter())
          return H.reflect(mirror._getField$1(this));
        getter = mirror._jsFunction.$getter;
        if (getter == null)
          throw H.wrapException(new P.UnimplementedError(null));
        return H.reflect(getter());
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        var mirror, t1, t2;
        mirror = this.get$__members()._map.$index(0, memberName);
        t1 = mirror instanceof H.JsMethodMirror;
        if (t1 && !("$reflectable" in mirror._jsFunction))
          H.throwInvalidReflectionError(memberName._name);
        if (mirror != null)
          t2 = t1 && mirror.isSetter;
        else
          t2 = true;
        if (t2)
          throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
        if (t1 && !mirror.isGetter)
          return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
        return this.getField$1(memberName).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
      },
      invoke$2: function(memberName, positionalArguments) {
        return this.invoke$3(memberName, positionalArguments, null);
      },
      get$_functionMirrors: function() {
        var t1, result, t2, t3, i, $name, jsFunction, result0, unmangledName, isConstructor, t4, mirror;
        t1 = this._cachedFunctionMirrors;
        if (t1 != null)
          return t1;
        result = [];
        result.$builtinTypeInfo = [H.JsMethodMirror];
        for (t1 = this._functions, t2 = J.getInterceptor$asx(t1), t3 = this._globalObject, i = 0; i < t2.get$length(t1); ++i) {
          $name = t2.$index(t1, i);
          jsFunction = t3[$name];
          result0 = $.$get$mangledGlobalNames()._jsMangledNames[$name];
          unmangledName = typeof result0 !== "string" ? null : result0;
          if (unmangledName == null || !!jsFunction.$getterStub)
            continue;
          isConstructor = J.getInterceptor$s(unmangledName).startsWith$1(unmangledName, "new ");
          if (isConstructor) {
            t4 = C.JSString_methods.substring$1(unmangledName, 4);
            unmangledName = H.stringReplaceAllUnchecked(t4, "$", ".");
          }
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
          result.push(mirror);
          mirror._owner = this;
        }
        this._cachedFunctionMirrors = result;
        return result;
      },
      get$_fields: function() {
        var t1, result;
        t1 = this._cachedFields;
        if (t1 != null)
          return t1;
        result = [];
        result.$builtinTypeInfo = [P.VariableMirror];
        H.parseCompactFieldSpecification(this, this._compactFieldSpecification, true, result);
        this._cachedFields = result;
        return result;
      },
      get$__functions: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedFunctions;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = this.get$_functionMirrors(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          if (!mirror.isConstructor)
            result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedFunctions = t1;
        return t1;
      },
      get$__getters: function() {
        var t1 = this._cachedGetters;
        if (t1 != null)
          return t1;
        t1 = new P.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedGetters = t1;
        return t1;
      },
      get$__setters: function() {
        var t1 = this._cachedSetters;
        if (t1 != null)
          return t1;
        t1 = new P.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedSetters = t1;
        return t1;
      },
      get$__variables: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedVariables;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = this.get$_fields(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.VariableMirror];
        this._cachedVariables = t1;
        return t1;
      },
      get$__members: function() {
        var t1, result;
        t1 = this._cachedMembers;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap$from(this.get$__classes(), null, null);
        t1 = new H.JsLibraryMirror___members_addToResult(result);
        this.get$__functions()._map.forEach$1(0, t1);
        this.get$__getters()._map.forEach$1(0, t1);
        this.get$__setters()._map.forEach$1(0, t1);
        this.get$__variables()._map.forEach$1(0, t1);
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.Mirror];
        this._cachedMembers = t1;
        return t1;
      },
      get$owner: function() {
        return;
      },
      $isLibraryMirror: 1,
      $isMirror: 1
    },
    JsDeclarationMirror_JsObjectMirror: {
      "^": "JsDeclarationMirror+JsObjectMirror;",
      $isMirror: 1
    },
    JsLibraryMirror___members_addToResult: {
      "^": "Closure:381;_captured_result_0",
      call$2: function(key, value) {
        this._captured_result_0.$indexSet(0, key, value);
      }
    },
    JsMixinApplication: {
      "^": "JsTypeMirror_JsObjectMirror;superclass,mixin,_cachedSimpleName,_cachedInstanceMembers,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      get$simpleName: function() {
        var t1, superName;
        t1 = this._cachedSimpleName;
        if (t1 != null)
          return t1;
        superName = this.superclass.get$qualifiedName()._name;
        t1 = this.mixin;
        t1 = J.contains$1$asx(superName, " with ") === true ? H.s(H.S(superName) + ", " + H.S(t1.get$qualifiedName()._name)) : H.s(H.S(superName) + " with " + H.S(t1.get$qualifiedName()._name));
        this._cachedSimpleName = t1;
        return t1;
      },
      get$qualifiedName: function() {
        return this.get$simpleName();
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
      },
      invoke$2: function(memberName, positionalArguments) {
        return this.invoke$3(memberName, positionalArguments, null);
      },
      getField$1: function(fieldName) {
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, fieldName, null, null));
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$typeVariables: function() {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      get$typeArguments: function() {
        return C.List_empty2;
      },
      $isClassMirror: 1,
      $isMirror: 1,
      $isTypeMirror: 1
    },
    JsTypeMirror_JsObjectMirror: {
      "^": "JsTypeMirror+JsObjectMirror;",
      $isMirror: 1
    },
    JsObjectMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    JsInstanceMirror: {
      "^": "JsObjectMirror;reflectee<,_getterCache",
      get$type: function(_) {
        var t1 = this.reflectee;
        if (t1 == null)
          return P.reflectClass(C.Type_Yyn);
        return H.reflectClassByMangledName(H.getRuntimeTypeString(t1));
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        return this._invoke$4(memberName, 0, positionalArguments, namedArguments == null ? C.Map_empty : namedArguments);
      },
      invoke$2: function(memberName, positionalArguments) {
        return this.invoke$3(memberName, positionalArguments, null);
      },
      _invokeMethodWithNamedArguments$3: function(reflectiveName, positionalArguments, namedArguments) {
        var t1, jsFunction, info, t2, defaultArguments, t3, i, t4;
        t1 = this.reflectee;
        jsFunction = J.getInterceptor(t1)[reflectiveName];
        if (jsFunction == null)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        positionalArguments = P.List_List$from(positionalArguments, true, null);
        t2 = info.requiredParameterCount;
        if (t2 !== positionalArguments.length)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
        defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
          t4 = i + t2;
          defaultArguments.$indexSet(0, info.parameterName$1(t4), init.metadata[info.defaultValue$1(0, t4)]);
        }
        namedArguments.forEach$1(0, new H.JsInstanceMirror__invokeMethodWithNamedArguments_closure(defaultArguments));
        C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
        return H.reflect(jsFunction.apply(t1, positionalArguments));
      },
      get$_classInvocationCache: function() {
        var cacheName, cacheHolder, cache;
        cacheName = $.Primitives_mirrorInvokeCacheName;
        cacheHolder = this.reflectee;
        if (cacheHolder == null)
          cacheHolder = J.getInterceptor(null);
        cache = cacheHolder.constructor[cacheName];
        if (cache == null) {
          cache = H.JsCache_allocate();
          cacheHolder.constructor[cacheName] = cache;
        }
        return cache;
      },
      _computeReflectiveName$4: function(symbolName, type, positionalArguments, namedArguments) {
        var $name, nbArgs;
        $name = symbolName.get$_name();
        switch (type) {
          case 1:
            return $name;
          case 2:
            return H.S($name) + "=";
          case 0:
            if (namedArguments.get$isNotEmpty(namedArguments))
              return H.S($name) + "*";
            nbArgs = positionalArguments.length;
            return H.S($name) + ":" + nbArgs;
        }
        throw H.wrapException(new H.RuntimeError("Could not compute reflective name for " + H.S($name)));
      },
      _getCachedInvocation$5: function($name, type, reflectiveName, positionalArguments, namedArguments) {
        var cache, cacheEntry;
        cache = this.get$_classInvocationCache();
        cacheEntry = cache[reflectiveName];
        if (cacheEntry == null) {
          cacheEntry = new H.JSInvocationMirror($name, $.$get$reflectiveNames().$index(0, reflectiveName), type, positionalArguments, C.List_empty, null).__js_helper$_getCachedInvocation$1(this.reflectee);
          cache[reflectiveName] = cacheEntry;
        }
        return cacheEntry;
      },
      _invoke$4: function($name, type, positionalArguments, namedArguments) {
        var reflectiveName, cacheEntry, t1, getterCacheEntry;
        reflectiveName = this._computeReflectiveName$4($name, type, positionalArguments, namedArguments);
        if (namedArguments.get$isNotEmpty(namedArguments))
          return this._invokeMethodWithNamedArguments$3(reflectiveName, positionalArguments, namedArguments);
        cacheEntry = this._getCachedInvocation$5($name, type, reflectiveName, positionalArguments, namedArguments);
        if (!cacheEntry.get$isNoSuchMethod())
          t1 = !("$reflectable" in cacheEntry.get$jsFunction() || this.reflectee instanceof H.TearOffClosure);
        else
          t1 = true;
        if (t1) {
          if (type === 0) {
            getterCacheEntry = this._getCachedInvocation$5($name, 1, this._computeReflectiveName$4($name, 1, C.List_empty, C.Map_empty), C.List_empty, C.Map_empty);
            t1 = !getterCacheEntry.get$isNoSuchMethod() && !getterCacheEntry.get$isGetterStub();
          } else
            t1 = false;
          if (t1)
            return this.getField$1($name).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
          if (type === 2)
            $name = H.s(H.S($name.get$_name()) + "=");
          if (!cacheEntry.get$isNoSuchMethod())
            H.throwInvalidReflectionError(reflectiveName);
          return H.reflect(cacheEntry.invokeOn$2(this.reflectee, new H.JSInvocationMirror($name, $.$get$reflectiveNames().$index(0, reflectiveName), type, positionalArguments, [], null)));
        } else
          return H.reflect(cacheEntry.invokeOn$2(this.reflectee, positionalArguments));
      },
      getField$1: function(fieldName) {
        var cache, getter, value, result;
        $FASTPATH$0: {
          cache = this._getterCache;
          if (typeof cache == "number" || typeof fieldName.$p == "undefined")
            break $FASTPATH$0;
          getter = fieldName.$p(cache);
          if (typeof getter == "undefined")
            break $FASTPATH$0;
          value = getter(this.reflectee);
          if (value === getter.v)
            return getter.m;
          else {
            result = H.reflect(value);
            getter.v = value;
            getter.m = result;
            return result;
          }
        }
        return this._getFieldSlow$1(fieldName);
      },
      _getFieldSlow$1: function(fieldName) {
        var result, $name, cacheEntry, cache, mangledName, getter;
        result = this._invoke$4(fieldName, 1, C.List_empty, C.Map_empty);
        $name = fieldName.get$_name();
        cacheEntry = this.get$_classInvocationCache()[$name];
        if (cacheEntry.get$isNoSuchMethod())
          return result;
        cache = this._getterCache;
        if (typeof cache == "number") {
          cache = J.$sub$n(cache, 1);
          this._getterCache = cache;
          if (!J.$eq$(cache, 0))
            return result;
          cache = Object.create(null);
          this._getterCache = cache;
        }
        if (typeof fieldName.$p == "undefined")
          fieldName.$p = this._newProbeFn$2($name, true);
        mangledName = cacheEntry.get$mangledName();
        getter = cacheEntry.get$isIntercepted() ? this._newInterceptedGetterFn$2(mangledName, true) : this._newGetterFn$2(mangledName, true);
        cache[$name] = getter;
        getter.v = getter.m = cache;
        return result;
      },
      _newProbeFn$2: function(id, useEval) {
        if (useEval)
          return new Function("c", "return c." + H.S(id) + ";");
        else
          return function(n) {
            return function(c) {
              return c[n];
            };
          }(id);
      },
      _newGetterFn$2: function($name, useEval) {
        if (!useEval)
          return function(n) {
            return function(o) {
              return o[n]();
            };
          }($name);
        return new Function("o", "/* " + this.reflectee.constructor.name + " */ return o." + H.S($name) + "();");
      },
      _newInterceptedGetterFn$2: function($name, useEval) {
        var interceptor, functionName;
        interceptor = J.getInterceptor(this.reflectee);
        if (!useEval)
          return function(n, i) {
            return function(o) {
              return i[n](o);
            };
          }($name, interceptor);
        functionName = interceptor.constructor.name + "$" + H.S($name);
        return new Function("i", "  function " + functionName + "(o){return i." + H.S($name) + "(o)}  return " + functionName + ";")(interceptor);
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.JsInstanceMirror) {
          t1 = this.reflectee;
          t2 = other.reflectee;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return J.$xor$n(H.objectHashCode(this.reflectee), 909522486);
      },
      toString$0: function(_) {
        return "InstanceMirror on " + H.S(P.Error_safeToString(this.reflectee));
      },
      $isMirror: 1
    },
    JsInstanceMirror__invokeMethodWithNamedArguments_closure: {
      "^": "Closure:109;_captured_defaultArguments_0",
      call$2: function(symbol, value) {
        var parameter, t1;
        parameter = symbol.get$_name();
        t1 = this._captured_defaultArguments_0;
        if (t1.containsKey$1(0, parameter))
          t1.$indexSet(0, parameter, value);
        else
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
      }
    },
    JsTypeBoundClassMirror: {
      "^": "JsDeclarationMirror;_class,_typeArguments,_cachedTypeArguments,_cachedDeclarations,_cachedMembers,_cachedConstructors,_cachedVariables,_cachedGetters,_cachedSetters,_cachedMethodsMap,_cachedMethods,_superclass,_cachedSuperinterfaces,_cachedInstanceMembers,_cachedStaticMembers,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      toString$0: function(_) {
        var result, t1, t2;
        result = "ClassMirror on " + H.S(this._class.get$simpleName()._name);
        if (this.get$typeArguments() != null) {
          t1 = result + "<";
          t2 = this.get$typeArguments();
          result = t1 + t2.join$1(t2, ", ") + ">";
        }
        return result;
      },
      get$_mangledName: function() {
        for (var t1 = this.get$typeArguments(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
          if (!J.$eq$(t1.__internal$_current, $.$get$JsMirrorSystem__dynamicType()))
            return H.S(this._class.get$_mangledName()) + "<" + this._typeArguments + ">";
        return this._class.get$_mangledName();
      },
      get$typeVariables: function() {
        return this._class.get$typeVariables();
      },
      get$typeArguments: function() {
        var t1, result, t2, t3, level, currentTypeArgument, i, character;
        t1 = this._cachedTypeArguments;
        if (t1 != null)
          return t1;
        result = [];
        t1 = new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument(result);
        t2 = this._typeArguments;
        if (C.JSString_methods.indexOf$1(t2, "<") === -1)
          C.JSArray_methods.forEach$1(t2.split(","), new H.JsTypeBoundClassMirror_typeArguments_closure(t1));
        else {
          for (t3 = t2.length, level = 0, currentTypeArgument = "", i = 0; i < t3; ++i) {
            character = t2[i];
            if (character === " ")
              continue;
            else if (character === "<") {
              currentTypeArgument += character;
              ++level;
            } else if (character === ">") {
              currentTypeArgument += character;
              --level;
            } else if (character === ",")
              if (level > 0)
                currentTypeArgument += character;
              else {
                t1.call$1(currentTypeArgument);
                currentTypeArgument = "";
              }
            else
              currentTypeArgument += character;
          }
          t1.call$1(currentTypeArgument);
        }
        t1 = new P.UnmodifiableListView(result);
        t1.$builtinTypeInfo = [null];
        this._cachedTypeArguments = t1;
        return t1;
      },
      get$_methods: function() {
        var t1 = this._cachedMethods;
        if (t1 != null)
          return t1;
        t1 = this._class._getMethodsWithOwner$1(this);
        this._cachedMethods = t1;
        return t1;
      },
      getField$1: function(fieldName) {
        return this._class.getField$1(fieldName);
      },
      get$owner: function() {
        return this._class.get$owner();
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        return this._class.invoke$3(memberName, positionalArguments, namedArguments);
      },
      invoke$2: function(memberName, positionalArguments) {
        return this.invoke$3(memberName, positionalArguments, null);
      },
      get$isOriginalDeclaration: function() {
        return false;
      },
      get$originalDeclaration: function() {
        return this._class;
      },
      get$qualifiedName: function() {
        return this._class.get$qualifiedName();
      },
      get$simpleName: function() {
        return this._class.get$simpleName();
      },
      $isClassMirror: 1,
      $isMirror: 1,
      $isTypeMirror: 1
    },
    JsTypeBoundClassMirror_typeArguments_addTypeArgument: {
      "^": "Closure:16;_captured_result_0",
      call$1: function(typeArgument) {
        var parsedIndex, t1, typeVariable;
        parsedIndex = H.Primitives_parseInt(typeArgument, null, new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure());
        t1 = this._captured_result_0;
        if (J.$eq$(parsedIndex, -1))
          t1.push(H.reflectClassByMangledName(J.trim$0$s(typeArgument)));
        else {
          typeVariable = init.metadata[parsedIndex];
          t1.push(new H.JsTypeVariableMirror(P.reflectClass(typeVariable.get$owner()), typeVariable, parsedIndex, null, H.s(J.get$name$x(typeVariable))));
        }
      }
    },
    JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure: {
      "^": "Closure:2;",
      call$1: function(_) {
        return -1;
      }
    },
    JsTypeBoundClassMirror_typeArguments_closure: {
      "^": "Closure:2;_captured_addTypeArgument_1",
      call$1: function(t) {
        return this._captured_addTypeArgument_1.call$1(t);
      }
    },
    JsClassMirror: {
      "^": "JsTypeMirror_JsObjectMirror0;_mangledName<,_jsConstructor<,_fieldsDescriptor,_fieldsMetadata,_jsConstructorCache,_metadata,_superclass,_cachedMethods,_cachedFields,_cachedConstructors,_cachedMethodsMap,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,_cachedSuperinterfaces,_cachedTypeVariables,_cachedInstanceMembers,_cachedStaticMembers,_owner,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      _getMethodsWithOwner$1: function(methodOwner) {
        var $prototype, keys, result, t1, _i, key, simpleName, $function, stubName, mirror, mangledName, jsFunction, reflectionName, isConstructor, t2;
        $prototype = this._jsConstructor.prototype;
        $prototype.$deferredAction();
        keys = H.extractKeys($prototype);
        result = [];
        result.$builtinTypeInfo = [H.JsMethodMirror];
        for (t1 = keys.length, _i = 0; _i < t1; ++_i) {
          key = keys[_i];
          if (H.isReflectiveDataInPrototype(key))
            continue;
          simpleName = $.$get$mangledNames().$index(0, key);
          if (simpleName == null)
            continue;
          $function = $prototype[key];
          if (!($function.$reflectable === 1))
            continue;
          stubName = $function.$stubName;
          if (stubName != null && !J.$eq$(key, stubName))
            continue;
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(simpleName, $function, false, false);
          result.push(mirror);
          mirror._owner = methodOwner;
        }
        keys = H.extractKeys(init.statics[this._mangledName]);
        for (t1 = keys.length, _i = 0; _i < t1; ++_i) {
          mangledName = keys[_i];
          if (H.isReflectiveDataInPrototype(mangledName))
            continue;
          jsFunction = this.get$owner()._globalObject[mangledName];
          if ("$reflectable" in jsFunction) {
            reflectionName = jsFunction.$reflectionName;
            if (reflectionName == null)
              continue;
            isConstructor = C.JSString_methods.startsWith$1(reflectionName, "new ");
            if (isConstructor) {
              t2 = C.JSString_methods.substring$1(reflectionName, 4);
              reflectionName = H.stringReplaceAllUnchecked(t2, "$", ".");
            }
          } else
            continue;
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(reflectionName, jsFunction, !isConstructor, isConstructor);
          result.push(mirror);
          mirror._owner = methodOwner;
        }
        return result;
      },
      get$_methods: function() {
        var t1 = this._cachedMethods;
        if (t1 != null)
          return t1;
        t1 = this._getMethodsWithOwner$1(this);
        this._cachedMethods = t1;
        return t1;
      },
      _getFieldsWithOwner$1: function(fieldOwner) {
        var result, instanceFieldSpecfication, t1, staticDescriptor;
        result = [];
        result.$builtinTypeInfo = [P.VariableMirror];
        instanceFieldSpecfication = this._fieldsDescriptor.split(";")[1];
        t1 = this._fieldsMetadata;
        if (t1 != null) {
          instanceFieldSpecfication = [instanceFieldSpecfication];
          C.JSArray_methods.addAll$1(instanceFieldSpecfication, t1);
        }
        H.parseCompactFieldSpecification(fieldOwner, instanceFieldSpecfication, false, result);
        staticDescriptor = init.statics[this._mangledName];
        if (staticDescriptor != null)
          H.parseCompactFieldSpecification(fieldOwner, staticDescriptor["^"], true, result);
        return result;
      },
      get$_fields: function() {
        var t1 = this._cachedFields;
        if (t1 != null)
          return t1;
        t1 = this._getFieldsWithOwner$1(this);
        this._cachedFields = t1;
        return t1;
      },
      get$__methods: function() {
        var t1 = this._cachedMethodsMap;
        if (t1 != null)
          return t1;
        t1 = new P.UnmodifiableMapView(H.filterMethods(this.get$_methods()));
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedMethodsMap = t1;
        return t1;
      },
      get$__getters: function() {
        var t1 = this._cachedGetters;
        if (t1 != null)
          return t1;
        t1 = new P.UnmodifiableMapView(H.filterGetters(this.get$_methods(), this.get$__variables()));
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedGetters = t1;
        return t1;
      },
      get$__variables: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedVariables;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = this.get$_fields(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.VariableMirror];
        this._cachedVariables = t1;
        return t1;
      },
      _staticFieldExists$1: function(fieldName) {
        var mirror, getter;
        mirror = this.get$__variables()._map.$index(0, fieldName);
        if (mirror != null)
          return mirror.get$isStatic();
        getter = this.get$__getters()._map.$index(0, fieldName);
        return getter != null && getter.get$isStatic();
      },
      getField$1: function(fieldName) {
        var mirror, jsName, lazies, getterName, getter, method;
        mirror = this.get$__variables()._map.$index(0, fieldName);
        if (mirror != null && mirror.get$isStatic()) {
          jsName = mirror.get$_jsName();
          if (!(jsName in $))
            throw H.wrapException(new H.RuntimeError("Cannot find \"" + jsName + "\" in current isolate."));
          lazies = init.lazies;
          if (jsName in lazies) {
            getterName = lazies[jsName];
            return H.reflect($[getterName]());
          } else
            return H.reflect($[jsName]);
        }
        getter = this.get$__getters()._map.$index(0, fieldName);
        if (getter != null && getter.get$isStatic())
          return H.reflect(getter._invoke$2(C.List_empty, C.Map_empty));
        method = this.get$__methods()._map.$index(0, fieldName);
        if (method != null && method.get$isStatic()) {
          getter = method.get$_jsFunction().$getter;
          if (getter == null)
            throw H.wrapException(new P.UnimplementedError(null));
          return H.reflect(getter());
        }
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, fieldName, null, null));
      },
      get$owner: function() {
        var t1, t2;
        t1 = this._owner;
        if (t1 == null) {
          for (t1 = H.JsMirrorSystem_librariesByName(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
            for (t2 = J.get$iterator$ax(t1.get$current()); t2.moveNext$0();)
              t2.get$current().get$__classes();
          t1 = this._owner;
          if (t1 == null)
            throw H.wrapException(new P.StateError("Class \"" + H.S(H.n(this.simpleName)) + "\" has no owner"));
        }
        return t1;
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        var mirror, t1;
        mirror = this.get$__methods()._map.$index(0, memberName);
        t1 = mirror == null;
        if (t1 && this._staticFieldExists$1(memberName))
          return this.getField$1(memberName).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
        if (t1 || !mirror.get$isStatic())
          throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
        if (!mirror.canInvokeReflectively$0())
          H.throwInvalidReflectionError(memberName._name);
        return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
      },
      invoke$2: function(memberName, positionalArguments) {
        return this.invoke$3(memberName, positionalArguments, null);
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$typeVariables: function() {
        var t1, result, typeVariables, i, typeVariable;
        t1 = this._cachedTypeVariables;
        if (t1 != null)
          return t1;
        result = [];
        typeVariables = this._jsConstructor.prototype["<>"];
        if (typeVariables == null)
          return result;
        for (i = 0; i < typeVariables.length; ++i) {
          t1 = typeVariables[i];
          typeVariable = init.metadata[t1];
          result.push(new H.JsTypeVariableMirror(this, typeVariable, t1, null, H.s(J.get$name$x(typeVariable))));
        }
        t1 = new P.UnmodifiableListView(result);
        t1.$builtinTypeInfo = [null];
        this._cachedTypeVariables = t1;
        return t1;
      },
      get$typeArguments: function() {
        return C.List_empty2;
      },
      $isClassMirror: 1,
      $isMirror: 1,
      $isTypeMirror: 1
    },
    JsTypeMirror_JsObjectMirror0: {
      "^": "JsTypeMirror+JsObjectMirror;",
      $isMirror: 1
    },
    JsVariableMirror: {
      "^": "JsDeclarationMirror;_jsName<,isFinal,isStatic<,_metadataFunction,_owner,_type<,_metadata,simpleName",
      get$_prettyName: function() {
        return "VariableMirror";
      },
      get$type: function(_) {
        return H.typeMirrorFromRuntimeTypeRepresentation(this._owner, init.types[this._type]);
      },
      get$owner: function() {
        return this._owner;
      },
      _getField$1: function(receiver) {
        return $[this._jsName];
      },
      $isVariableMirror: 1,
      $isMirror: 1,
      static: {JsVariableMirror_JsVariableMirror$from: function(descriptor, metadataFunction, owner, isStatic) {
          var fieldInformation, field, t1, $length, t2, code, isFinal, jsName, divider, accessorName, result, unmangledName, setterName, _i;
          fieldInformation = J.split$1$s(descriptor, "-");
          if (fieldInformation.length === 1)
            return;
          field = fieldInformation[0];
          t1 = J.getInterceptor$asx(field);
          $length = t1.get$length(field);
          t2 = J.getInterceptor$n($length);
          code = H.JsVariableMirror_fieldCode(t1.codeUnitAt$1(field, t2.$sub($length, 1)));
          if (code === 0)
            return;
          isFinal = C.JSInt_methods._shrOtherPositive$1(code, 2) === 0;
          jsName = t1.substring$2(field, 0, t2.$sub($length, 1));
          divider = t1.indexOf$1(field, ":");
          t2 = J.getInterceptor$n(divider);
          if (t2.$gt(divider, 0)) {
            accessorName = C.JSString_methods.substring$2(jsName, 0, divider);
            jsName = t1.substring$1(field, t2.$add(divider, 1));
          } else
            accessorName = jsName;
          if (isStatic) {
            result = $.$get$mangledGlobalNames()._jsMangledNames[accessorName];
            unmangledName = typeof result !== "string" ? null : result;
          } else
            unmangledName = $.$get$mangledNames().$index(0, "get$" + accessorName);
          if (unmangledName == null)
            unmangledName = accessorName;
          if (isFinal) {
            setterName = H.s(H.S(unmangledName) + "=");
            t1 = owner.get$_methods();
            t2 = t1.length;
            _i = 0;
            while (true) {
              if (!(_i < t1.length)) {
                isFinal = true;
                break;
              }
              if (J.$eq$(t1[_i].get$simpleName(), setterName)) {
                isFinal = false;
                break;
              }
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1);
              ++_i;
            }
          }
          return new H.JsVariableMirror(jsName, isFinal, isStatic, metadataFunction, owner, H.Primitives_parseInt(fieldInformation[1], null, new H.JsVariableMirror_JsVariableMirror$from_closure()), null, H.s(unmangledName));
        }, JsVariableMirror_fieldCode: function(code) {
          if (code >= 60 && code <= 64)
            return code - 59;
          if (code >= 123 && code <= 126)
            return code - 117;
          if (code >= 37 && code <= 43)
            return code - 27;
          return 0;
        }}
    },
    JsVariableMirror_JsVariableMirror$from_closure: {
      "^": "Closure:2;",
      call$1: function(_) {
        return;
      }
    },
    JsClosureMirror: {
      "^": "JsInstanceMirror;reflectee,_getterCache",
      toString$0: function(_) {
        return "ClosureMirror on '" + H.S(P.Error_safeToString(this.reflectee)) + "'";
      },
      $isMirror: 1
    },
    JsMethodMirror: {
      "^": "JsDeclarationMirror;_jsFunction<,_requiredParameterCount,_optionalParameterCount,isGetter<,isSetter<,isStatic<,isConstructor<,isOperator,_owner,_metadata,_returnType,_parameters,simpleName",
      get$_prettyName: function() {
        return "MethodMirror";
      },
      get$parameters: function() {
        var t1 = this._parameters;
        if (t1 != null)
          return t1;
        this.get$metadata();
        return this._parameters;
      },
      canInvokeReflectively$0: function() {
        return "$reflectable" in this._jsFunction;
      },
      get$owner: function() {
        return this._owner;
      },
      get$metadata: function() {
        var t1, raw, formals, info, functionType, type, isNamed, t2, t3, t4, i, parameter, $name, result, p, defaultValue, i0;
        t1 = this._metadata;
        if (t1 == null) {
          t1 = this._jsFunction;
          raw = H.extractMetadata(t1);
          formals = Array(J.$add$ns(this._requiredParameterCount, this._optionalParameterCount));
          info = H.ReflectionInfo_ReflectionInfo(t1);
          if (info != null) {
            functionType = info.functionType;
            if (typeof functionType === "number" && Math.floor(functionType) === functionType)
              type = new H.JsFunctionTypeMirror(info.computeFunctionRti$1(null), null, null, null, this);
            else
              type = this.get$owner() != null && !!J.getInterceptor(this.get$owner()).$isLibraryMirror ? new H.JsFunctionTypeMirror(info.computeFunctionRti$1(null), null, null, null, this._owner) : new H.JsFunctionTypeMirror(info.computeFunctionRti$1(this._owner.get$originalDeclaration().get$_jsConstructor()), null, null, null, this._owner);
            if (this.isConstructor)
              this._returnType = this._owner;
            else
              this._returnType = type.get$returnType();
            isNamed = info.areOptionalParametersNamed;
            for (t1 = type.get$parameters(), t1 = t1.get$iterator(t1), t2 = info.requiredParameterCount, t3 = info.data, t4 = info.optionalParameterCount, i = 0; t1.moveNext$0(); i = i0) {
              parameter = t1.__internal$_current;
              $name = info.parameterName$1(i);
              result = t3[2 * i + t4 + 3 + 1];
              if (i < t2)
                p = new H.JsParameterMirror(this, parameter.get$_type(), false, false, null, result, H.s($name));
              else {
                defaultValue = info.defaultValue$1(0, i);
                p = new H.JsParameterMirror(this, parameter.get$_type(), true, isNamed, defaultValue, result, H.s($name));
              }
              i0 = i + 1;
              formals[i] = p;
            }
          }
          t1 = new P.UnmodifiableListView(formals);
          t1.$builtinTypeInfo = [P.ParameterMirror];
          this._parameters = t1;
          t1 = new P.UnmodifiableListView(J.map$1$ax(raw, H._js_mirrors__reflect$closure()));
          t1.$builtinTypeInfo = [null];
          this._metadata = t1;
        }
        return t1;
      },
      _invoke$2: function(positionalArguments, namedArguments) {
        var positionalLength, t1, i;
        if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
          throw H.wrapException(new P.UnsupportedError("Named arguments are not implemented."));
        if (!this.isStatic && !this.isConstructor)
          throw H.wrapException(new H.RuntimeError("Cannot invoke instance method without receiver."));
        positionalLength = positionalArguments.length;
        t1 = this._requiredParameterCount;
        if (positionalLength < t1 || positionalLength > t1 + this._optionalParameterCount || this._jsFunction == null)
          throw H.wrapException(P.NoSuchMethodError$(this.get$owner(), this.simpleName, positionalArguments, namedArguments, null));
        if (positionalLength < t1 + this._optionalParameterCount) {
          t1 = positionalArguments.slice();
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(positionalArguments, 0)];
          positionalArguments = t1;
          for (i = positionalLength; i < J.get$length$asx(this.get$parameters()._source); ++i)
            positionalArguments.push(J.get$defaultValue$x(J.elementAt$1$ax(this.get$parameters()._source, i)).get$reflectee());
        }
        return this._jsFunction.apply($, P.List_List$from(positionalArguments, true, null));
      },
      _getField$1: function(receiver) {
        if (this.isGetter)
          return this._invoke$2([], null);
        else
          throw H.wrapException(new P.UnimplementedError("getField on " + receiver.toString$0(0)));
      },
      $isMirror: 1,
      $isMethodMirror: 1,
      static: {JsMethodMirror_JsMethodMirror$fromUnmangledName: function($name, jsFunction, isStatic, isConstructor) {
          var info, isOperator, isSetter, requiredParameterCount, isGetter, optionalParameterCount, reflectionInfo;
          info = $name.split(":");
          $name = info[0];
          isOperator = H.isOperatorName($name);
          isSetter = !isOperator && J.endsWith$1$s($name, "=");
          if (info.length === 1) {
            if (isSetter) {
              requiredParameterCount = 1;
              isGetter = false;
            } else {
              requiredParameterCount = 0;
              isGetter = true;
            }
            optionalParameterCount = 0;
          } else {
            reflectionInfo = H.ReflectionInfo_ReflectionInfo(jsFunction);
            requiredParameterCount = reflectionInfo.requiredParameterCount;
            optionalParameterCount = reflectionInfo.optionalParameterCount;
            isGetter = false;
          }
          return new H.JsMethodMirror(jsFunction, requiredParameterCount, optionalParameterCount, isGetter, isSetter, isStatic, isConstructor, isOperator, null, null, null, null, H.s($name));
        }}
    },
    JsParameterMirror: {
      "^": "JsDeclarationMirror;owner<,_type<,isOptional,isNamed,_defaultValue,metadataList,simpleName",
      get$_prettyName: function() {
        return "ParameterMirror";
      },
      get$type: function(_) {
        return H.typeMirrorFromRuntimeTypeRepresentation(this.owner, this._type);
      },
      get$isStatic: function() {
        return false;
      },
      get$defaultValue: function(_) {
        var t1 = this._defaultValue;
        return t1 != null ? H.reflect(init.metadata[t1]) : null;
      },
      $isParameterMirror: 1,
      $isVariableMirror: 1,
      $isMirror: 1
    },
    JsTypedefMirror: {
      "^": "JsDeclarationMirror;_mangledName<,referent,simpleName",
      get$value: function(_) {
        return this.referent;
      },
      get$_prettyName: function() {
        return "TypedefMirror";
      },
      get$typeVariables: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$owner: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      $isTypedefMirror: 1,
      $isTypeMirror: 1,
      $isMirror: 1
    },
    BrokenClassMirror: {
      "^": "Object;",
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      invoke$2: function(memberName, positionalArguments) {
        return this.invoke$3(memberName, positionalArguments, null);
      },
      getField$1: function(fieldName) {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$typeVariables: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$typeArguments: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$originalDeclaration: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$simpleName: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$qualifiedName: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      }
    },
    JsFunctionTypeMirror: {
      "^": "BrokenClassMirror;_typeData,_cachedToString,_cachedReturnType,_cachedParameters,owner<",
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$returnType: function() {
        var t1 = this._cachedReturnType;
        if (t1 != null)
          return t1;
        t1 = this._typeData;
        if (!!t1.void) {
          t1 = $.$get$JsMirrorSystem__voidType();
          this._cachedReturnType = t1;
          return t1;
        }
        if (!("ret" in t1)) {
          t1 = $.$get$JsMirrorSystem__dynamicType();
          this._cachedReturnType = t1;
          return t1;
        }
        t1 = H.typeMirrorFromRuntimeTypeRepresentation(this.owner, t1.ret);
        this._cachedReturnType = t1;
        return t1;
      },
      get$parameters: function() {
        var t1, result, t2, t3, parameterCount, _i, parameterCount0, $name;
        t1 = this._cachedParameters;
        if (t1 != null)
          return t1;
        result = [];
        t1 = this._typeData;
        if ("args" in t1)
          for (t2 = t1.args, t3 = t2.length, parameterCount = 0, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, parameterCount = parameterCount0) {
            parameterCount0 = parameterCount + 1;
            result.push(new H.JsParameterMirror(this, t2[_i], false, false, null, C.List_empty0, H.s("argument" + parameterCount)));
          }
        else
          parameterCount = 0;
        if ("opt" in t1)
          for (t2 = t1.opt, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, parameterCount = parameterCount0) {
            parameterCount0 = parameterCount + 1;
            result.push(new H.JsParameterMirror(this, t2[_i], false, false, null, C.List_empty0, H.s("argument" + parameterCount)));
          }
        if ("named" in t1)
          for (t2 = H.extractKeys(t1.named), t3 = t2.length, _i = 0; _i < t3; ++_i) {
            $name = t2[_i];
            result.push(new H.JsParameterMirror(this, t1.named[$name], false, false, null, C.List_empty0, H.s($name)));
          }
        t1 = new P.UnmodifiableListView(result);
        t1.$builtinTypeInfo = [P.ParameterMirror];
        this._cachedParameters = t1;
        return t1;
      },
      _unmangleIfPreserved$1: function(mangled) {
        var result = init.mangledGlobalNames[mangled];
        if (result != null)
          return result;
        return mangled;
      },
      toString$0: function(_) {
        var t1, t2, t3, s, sep, _i, argument, $name;
        t1 = this._cachedToString;
        if (t1 != null)
          return t1;
        t1 = this._typeData;
        if ("args" in t1)
          for (t2 = t1.args, t3 = t2.length, s = "FunctionTypeMirror on '(", sep = "", _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, sep = ", ") {
            argument = t2[_i];
            s = C.JSString_methods.$add(s + sep, this._unmangleIfPreserved$1(H.runtimeTypeToString(argument, null)));
          }
        else {
          s = "FunctionTypeMirror on '(";
          sep = "";
        }
        if ("opt" in t1) {
          s += sep + "[";
          for (t2 = t1.opt, t3 = t2.length, sep = "", _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, sep = ", ") {
            argument = t2[_i];
            s = C.JSString_methods.$add(s + sep, this._unmangleIfPreserved$1(H.runtimeTypeToString(argument, null)));
          }
          s += "]";
        }
        if ("named" in t1) {
          s += sep + "{";
          for (t2 = H.extractKeys(t1.named), t3 = t2.length, sep = "", _i = 0; _i < t3; ++_i, sep = ", ") {
            $name = t2[_i];
            s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), this._unmangleIfPreserved$1(H.runtimeTypeToString(t1.named[$name], null)));
          }
          s += "}";
        }
        s += ") -> ";
        if (!!t1.void)
          s += "void";
        else
          s = "ret" in t1 ? C.JSString_methods.$add(s, this._unmangleIfPreserved$1(H.runtimeTypeToString(t1.ret, null))) : s + "dynamic";
        t1 = s + "'";
        this._cachedToString = t1;
        return t1;
      },
      get$callMethod: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      callMethod$2: function(arg0, arg1) {
        return this.get$callMethod().call$2(arg0, arg1);
      },
      callMethod$1: function(arg0) {
        return this.get$callMethod().call$1(arg0);
      },
      $isClassMirror: 1,
      $isMirror: 1,
      $isTypeMirror: 1
    },
    typeMirrorFromRuntimeTypeRepresentation_getTypeArgument: {
      "^": "Closure:383;__js_mirrors$_box_0",
      call$1: function(index) {
        var typeVariable, t1, variableIndex;
        typeVariable = init.metadata[index];
        t1 = this.__js_mirrors$_box_0;
        variableIndex = H.findTypeVariableIndex(t1._captured_ownerClass_0.get$typeVariables(), J.get$name$x(typeVariable));
        return J.$index$asx(t1._captured_ownerClass_0.get$typeArguments(), variableIndex);
      }
    },
    typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable: {
      "^": "Closure:76;_captured_getTypeArgument_1",
      call$1: function(index) {
        var typeArgument, t1;
        typeArgument = this._captured_getTypeArgument_1.call$1(index);
        t1 = J.getInterceptor(typeArgument);
        if (!!t1.$isJsTypeVariableMirror)
          return H.S(typeArgument._metadataIndex);
        if (!t1.$isJsClassMirror && !t1.$isJsTypeBoundClassMirror)
          if (t1.$eq(typeArgument, $.$get$JsMirrorSystem__dynamicType()))
            return "dynamic";
          else if (t1.$eq(typeArgument, $.$get$JsMirrorSystem__voidType()))
            return "void";
          else
            return "dynamic";
        return typeArgument.get$_mangledName();
      }
    },
    extractMetadata_closure: {
      "^": "Closure:34;",
      call$1: [function(i) {
        return init.metadata[i];
      }, null, null, 2, 0, null, 172, [], "call"]
    },
    NoSuchStaticMethodError: {
      "^": "Error;_cls,__js_mirrors$_name,_positionalArguments,__js_mirrors$_namedArguments,__js_mirrors$_kind",
      toString$0: function(_) {
        switch (this.__js_mirrors$_kind) {
          case 0:
            return "NoSuchMethodError: No constructor named '" + H.S(this.__js_mirrors$_name._name) + "' in class '" + H.S(this._cls.get$qualifiedName().get$_name()) + "'.";
          case 1:
            return "NoSuchMethodError: No top-level method named '" + H.S(this.__js_mirrors$_name._name) + "'.";
          default:
            return "NoSuchMethodError";
        }
      },
      static: {NoSuchStaticMethodError$method: function(_cls, _name, _positionalArguments, _namedArguments) {
          return new H.NoSuchStaticMethodError(_cls, _name, _positionalArguments, _namedArguments, 1);
        }}
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = victim ? Object.keys(victim) : [];
      t1.$builtinTypeInfo = [null];
      t1.fixed$length = Array;
      return t1;
    },
    _LazyMangledNamesMap: {
      "^": "Object;_jsMangledNames",
      $index: ["super$_LazyMangledNamesMap$$index", function(_, key) {
        var result = this._jsMangledNames[key];
        return typeof result !== "string" ? null : result;
      }]
    },
    _LazyMangledInstanceNamesMap: {
      "^": "_LazyMangledNamesMap;_jsMangledNames",
      $index: function(_, key) {
        var result = this.super$_LazyMangledNamesMap$$index(this, key);
        if (result == null && J.startsWith$1$s(key, "set$")) {
          result = this.super$_LazyMangledNamesMap$$index(this, "get$" + J.substring$1$s(key, "set$".length));
          return result != null ? result + "=" : null;
        }
        return result;
      }
    },
    _LazyReflectiveNamesMap: {
      "^": "Object;_jsMangledNames,_isInstance,_cacheLength,_cache",
      _updateReflectiveNames$0: function() {
        var result, t1, t2, t3, getterPrefixLength, key, reflectiveName;
        result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
        t1 = this._jsMangledNames;
        for (t2 = J.get$iterator$ax(Object.keys(t1)), t3 = this._isInstance, getterPrefixLength = "get$".length; t2.moveNext$0();) {
          key = t2.get$current();
          reflectiveName = t1[key];
          if (typeof reflectiveName !== "string")
            continue;
          result.$indexSet(0, reflectiveName, key);
          if (t3 && J.startsWith$1$s(key, "get$"))
            result.$indexSet(0, H.S(reflectiveName) + "=", "set$" + J.substring$1$s(key, getterPrefixLength));
        }
        return result;
      },
      $index: function(_, key) {
        if (this._cache == null || Object.keys(this._jsMangledNames).length !== this._cacheLength) {
          this._cache = this._updateReflectiveNames$0();
          this._cacheLength = Object.keys(this._jsMangledNames).length;
        }
        return this._cache.$index(0, key);
      }
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1._captured_storedCallback_0 = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 40],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 40],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 40],
    _registerErrorHandler: function(errorHandler, zone) {
      var t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
      if (t1)
        return zone.registerBinaryCallback$1(errorHandler);
      else
        return zone.registerUnaryCallback$1(errorHandler);
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      var replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = J.get$error$x(replacement);
        error = error != null ? error : new P.NullThrownError();
        stackTrace = replacement.get$stackTrace();
      }
      result._completeError$2(error, stackTrace);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.get$next();
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        $.Zone__current = t1.get$zone();
        t1.callback$0();
      }
    },
    _microtaskLoopEntry: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $.Zone__current = C.C__RootZone;
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun_scheduleImmediateClosure().call$1(P.async___microtaskLoopEntry$closure());
      }
    }, "call$0", "async___microtaskLoopEntry$closure", 0, 0, 0],
    _scheduleAsyncCallback: function(newEntry) {
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun_scheduleImmediateClosure().call$1(P.async___microtaskLoopEntry$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone, t1;
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      if (C.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = C.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        P._rootScheduleMicrotask(null, null, currentZone, currentZone.registerCallback$1(callback));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
    },
    Stream_Stream$fromFuture: function(future, $T) {
      var controller, t1;
      controller = P.StreamController_StreamController(null, null, null, null, true, $T);
      future.then$2$onError(new P.Stream_Stream$fromFuture_closure(controller), new P.Stream_Stream$fromFuture_closure0(controller));
      t1 = new P._ControllerStream(controller);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(controller, 0)];
      return t1;
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      var t1, t2, t3;
      t1 = new P._StreamIteratorImpl(null, null, null, 0);
      t1.$builtinTypeInfo = [$T];
      t2 = t1.get$_onData();
      t3 = t1.get$_onError();
      t1._subscription = stream.listen$4$cancelOnError$onDone$onError(t2, true, t1.get$_onDone(), t3);
      return t1;
    },
    StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
      var t1;
      if (onCancel == null) {
        if (sync) {
          t1 = new P._NoCallbackSyncStreamController(null, 0, null);
          t1.$builtinTypeInfo = [$T];
        } else {
          t1 = new P._NoCallbackAsyncStreamController(null, 0, null);
          t1.$builtinTypeInfo = [$T];
        }
        return t1;
      }
      if (sync) {
        t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
        t1.$builtinTypeInfo = [$T];
      } else {
        t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
        t1.$builtinTypeInfo = [$T];
      }
      return t1;
    },
    StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
      var t1;
      if (sync) {
        t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
        t1.$builtinTypeInfo = [$T];
        t1._async$_previous = t1;
        t1._async$_next = t1;
      } else {
        t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
        t1.$builtinTypeInfo = [$T];
        t1._async$_previous = t1;
        t1._async$_next = t1;
      }
      return t1;
    },
    _runGuarded: function(notificationHandler) {
      var result, e, s, exception, t1;
      if (notificationHandler == null)
        return;
      try {
        result = notificationHandler.call$0();
        if (!!J.getInterceptor(result).$isFuture)
          return result;
        return;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _nullErrorHandler: [function(error, stackTrace) {
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    }, function(error) {
      return P._nullErrorHandler(error, null);
    }, "call$2", "call$1", "async___nullErrorHandler$closure", 2, 2, 87, 0, 6, [], 15, []],
    _nullDoneHandler: [function() {
    }, "call$0", "async___nullDoneHandler$closure", 0, 0, 0],
    _runUserCode: function(userCode, onSuccess, onError) {
      var e, s, replacement, error, stackTrace, exception, t1, error0;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        replacement = $.Zone__current.errorCallback$2(e, s);
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error0 = J.get$error$x(replacement);
          error = error0 != null ? error0 : new P.NullThrownError();
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorWithReplacement: function(subscription, future, error, stackTrace) {
      var replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = J.get$error$x(replacement);
        error = error != null ? error : new P.NullThrownError();
        stackTrace = replacement.get$stackTrace();
      }
      P._cancelAndError(subscription, future, error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _addErrorWithReplacement: function(sink, error, stackTrace) {
      var replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = J.get$error$x(replacement);
        error = error != null ? error : new P.NullThrownError();
        stackTrace = replacement.get$stackTrace();
      }
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer: function(duration, callback) {
      var t1;
      if (J.$eq$($.Zone__current, C.C__RootZone))
        return $.Zone__current.createTimer$2(duration, callback);
      t1 = $.Zone__current;
      return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
    },
    Timer_Timer$periodic: function(duration, callback) {
      var t1;
      if (J.$eq$($.Zone__current, C.C__RootZone))
        return $.Zone__current.createPeriodicTimer$2(duration, callback);
      t1 = $.Zone__current;
      return t1.createPeriodicTimer$2(duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = duration.get$inMilliseconds();
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer: function(duration, callback) {
      var milliseconds = duration.get$inMilliseconds();
      return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Zone__enter: function(zone) {
      var previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    _parentDelegate: function(zone) {
      if (zone.get$parent(zone) == null)
        return;
      return zone.get$parent(zone).get$_delegate();
    },
    _rootHandleUncaughtError: [function($self, $parent, zone, error, stackTrace) {
      var entry, t1, t2;
      entry = new P._AsyncCallbackEntry(new P._rootHandleUncaughtError_closure(error, stackTrace), C.C__RootZone, null);
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(entry);
        $._lastPriorityCallback = $._lastCallback;
      } else {
        t2 = $._lastPriorityCallback;
        if (t2 == null) {
          entry.next = t1;
          $._lastPriorityCallback = entry;
          $._nextCallback = entry;
        } else {
          entry.next = t2.next;
          t2.next = entry;
          $._lastPriorityCallback = entry;
          if (entry.next == null)
            $._lastCallback = entry;
        }
      }
    }, "call$5", "async___rootHandleUncaughtError$closure", 10, 0, 428, 16, [], 17, [], 19, [], 6, [], 15, []],
    _rootRun: [function($self, $parent, zone, f) {
      var old, t1;
      if (J.$eq$($.Zone__current, zone))
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    }, "call$4", "async___rootRun$closure", 8, 0, 215, 16, [], 17, [], 19, [], 27, []],
    _rootRunUnary: [function($self, $parent, zone, f, arg) {
      var old, t1;
      if (J.$eq$($.Zone__current, zone))
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    }, "call$5", "async___rootRunUnary$closure", 10, 0, 216, 16, [], 17, [], 19, [], 27, [], 48, []],
    _rootRunBinary: [function($self, $parent, zone, f, arg1, arg2) {
      var old, t1;
      if (J.$eq$($.Zone__current, zone))
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    }, "call$6", "async___rootRunBinary$closure", 12, 0, 217, 16, [], 17, [], 19, [], 27, [], 98, [], 97, []],
    _rootRegisterCallback: [function($self, $parent, zone, f) {
      return f;
    }, "call$4", "async___rootRegisterCallback$closure", 8, 0, 218, 16, [], 17, [], 19, [], 27, []],
    _rootRegisterUnaryCallback: [function($self, $parent, zone, f) {
      return f;
    }, "call$4", "async___rootRegisterUnaryCallback$closure", 8, 0, 219, 16, [], 17, [], 19, [], 27, []],
    _rootRegisterBinaryCallback: [function($self, $parent, zone, f) {
      return f;
    }, "call$4", "async___rootRegisterBinaryCallback$closure", 8, 0, 220, 16, [], 17, [], 19, [], 27, []],
    _rootErrorCallback: [function($self, $parent, zone, error, stackTrace) {
      return;
    }, "call$5", "async___rootErrorCallback$closure", 10, 0, 221, 16, [], 17, [], 19, [], 6, [], 15, []],
    _rootScheduleMicrotask: [function($self, $parent, zone, f) {
      var t1 = C.C__RootZone !== zone;
      if (t1) {
        f = zone.bindCallback$2$runGuarded(f, !(!t1 || C.C__RootZone.get$errorZone() === zone.get$errorZone()));
        zone = C.C__RootZone;
      }
      P._scheduleAsyncCallback(new P._AsyncCallbackEntry(f, zone, null));
    }, "call$4", "async___rootScheduleMicrotask$closure", 8, 0, 222, 16, [], 17, [], 19, [], 27, []],
    _rootCreateTimer: [function($self, $parent, zone, duration, callback) {
      return P.Timer__createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
    }, "call$5", "async___rootCreateTimer$closure", 10, 0, 223, 16, [], 17, [], 19, [], 41, [], 7, []],
    _rootCreatePeriodicTimer: [function($self, $parent, zone, duration, callback) {
      return P.Timer__createPeriodicTimer(duration, C.C__RootZone !== zone ? zone.bindUnaryCallback$1(callback) : callback);
    }, "call$5", "async___rootCreatePeriodicTimer$closure", 10, 0, 224, 16, [], 17, [], 19, [], 41, [], 7, []],
    _rootPrint: [function($self, $parent, zone, line) {
      H.printString(H.S(line));
    }, "call$4", "async___rootPrint$closure", 8, 0, 225, 16, [], 17, [], 19, [], 164, []],
    _printToZone: [function(line) {
      J.print$1$x($.Zone__current, line);
    }, "call$1", "async___printToZone$closure", 2, 0, 17],
    _rootFork: [function($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1;
      $.printToZone = P.async___printToZone$closure();
      if (specification == null)
        specification = C._ZoneSpecification_ALf;
      else if (!(specification instanceof P._ZoneSpecification))
        throw H.wrapException(P.ArgumentError$("ZoneSpecifications must be instantiated with the provided constructor."));
      if (zoneValues == null)
        valueMap = zone instanceof P._Zone ? zone.get$_async$_map() : P.HashMap_HashMap(null, null, null, null, null);
      else
        valueMap = P.HashMap_HashMap$from(zoneValues, null, null);
      t1 = new P._CustomZone(null, null, null, null, null, null, null, null, null, null, null, null, null, null, zone, valueMap);
      specification.get$run();
      t1._run = zone.get$_run();
      specification.get$runUnary();
      t1._runUnary = zone.get$_runUnary();
      specification.get$runBinary();
      t1._runBinary = zone.get$_runBinary();
      specification.get$registerCallback();
      t1._registerCallback = zone.get$_registerCallback();
      specification.get$registerUnaryCallback();
      t1._registerUnaryCallback = zone.get$_registerUnaryCallback();
      specification.get$registerBinaryCallback();
      t1._registerBinaryCallback = zone.get$_registerBinaryCallback();
      specification.get$errorCallback();
      t1._errorCallback = zone.get$_errorCallback();
      specification.get$scheduleMicrotask();
      t1._scheduleMicrotask = zone.get$_scheduleMicrotask();
      specification.get$createTimer();
      t1._createTimer = zone.get$_createTimer();
      specification.get$createPeriodicTimer();
      t1._createPeriodicTimer = zone.get$_createPeriodicTimer();
      J.get$print$x(specification);
      t1._print = zone.get$_print();
      specification.get$fork();
      t1._fork = zone.get$_fork();
      t1._handleUncaughtError = specification.get$handleUncaughtError() != null ? new P._ZoneFunction(t1, specification.get$handleUncaughtError()) : zone.get$_handleUncaughtError();
      return t1;
    }, "call$5", "async___rootFork$closure", 10, 0, 226, 16, [], 17, [], 19, [], 166, [], 167, []],
    runZoned: function(body, onError, zoneSpecification, zoneValues) {
      var zone;
      zoneSpecification = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
      zone = $.Zone__current.fork$2$specification$zoneValues(zoneSpecification, zoneValues);
      return zone.run$1(body);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:2;_async$_box_0",
      call$1: [function(_) {
        var t1, f;
        H.leaveJsAsync();
        t1 = this._async$_box_0;
        f = t1._captured_storedCallback_0;
        t1._captured_storedCallback_0 = null;
        f.call$0();
      }, null, null, 2, 0, null, 32, [], "call"]
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:340;_async$_box_0,_captured_div_1,_captured_span_2",
      call$1: function(callback) {
        var t1, t2;
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._async$_box_0._captured_storedCallback_0 = callback;
        t1 = this._captured_div_1;
        t2 = this._captured_span_2;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:1;_captured_callback_0",
      call$0: [function() {
        H.leaveJsAsync();
        this._captured_callback_0.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:1;_captured_callback_0",
      call$0: [function() {
        H.leaveJsAsync();
        this._captured_callback_0.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _UncaughtAsyncError: {
      "^": "AsyncError;error,stackTrace",
      toString$0: function(_) {
        var result, t1;
        result = "Uncaught Error: " + H.S(this.error);
        t1 = this.stackTrace;
        return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
      },
      static: {_UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
          if (stackTrace != null)
            return stackTrace;
          if (!!J.getInterceptor(error).$isError)
            return error.get$stackTrace();
          return;
        }}
    },
    _BroadcastStream: {
      "^": "_ControllerStream;_async$_controller",
      get$isBroadcast: function() {
        return true;
      }
    },
    _BroadcastSubscription: {
      "^": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      get$_async$_controller: function() {
        return this._async$_controller;
      },
      _expectsEvent$1: function(eventId) {
        return (this._eventState & 1) === eventId;
      },
      _toggleEventId$0: function() {
        this._eventState = this._eventState ^ 1;
      },
      get$_isFiring: function() {
        return (this._eventState & 2) !== 0;
      },
      _setRemoveAfterFiring$0: function() {
        this._eventState = this._eventState | 4;
      },
      get$_removeAfterFiring: function() {
        return (this._eventState & 4) !== 0;
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 0],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 0],
      $is_EventSink: 1,
      $isStreamSubscription: 1
    },
    _BroadcastStreamController: {
      "^": "Object;_async$_next@,_async$_previous@",
      get$stream: function(_) {
        var t1 = new P._BroadcastStream(this);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$isClosed: function() {
        return (this._state & 4) !== 0;
      },
      get$isPaused: function() {
        return false;
      },
      get$_isFiring: function() {
        return (this._state & 2) !== 0;
      },
      get$_mayAddEvent: function() {
        return this._state < 4;
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 != null)
          return t1;
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [null];
        this._doneFuture = t1;
        return t1;
      },
      _removeListener$1: function(subscription) {
        var previous, next;
        previous = subscription.get$_async$_previous();
        next = subscription.get$_async$_next();
        previous.set$_async$_next(next);
        next.set$_async$_previous(previous);
        subscription.set$_async$_previous(subscription);
        subscription.set$_async$_next(subscription);
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription;
        if ((this._state & 4) !== 0) {
          if (onDone == null)
            onDone = P.async___nullDoneHandler$closure();
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          t1._schedule$0();
          return t1;
        }
        t1 = $.Zone__current;
        subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
        subscription.$builtinTypeInfo = this.$builtinTypeInfo;
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
        subscription._async$_previous = subscription;
        subscription._async$_next = subscription;
        t1 = this._async$_previous;
        subscription._async$_previous = t1;
        subscription._async$_next = this;
        t1.set$_async$_next(subscription);
        this._async$_previous = subscription;
        subscription._eventState = this._state & 1;
        if (this._async$_next === subscription)
          P._runGuarded(this._async$_onListen);
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        if (subscription.get$_async$_next() === subscription)
          return;
        if (subscription.get$_isFiring())
          subscription._setRemoveAfterFiring$0();
        else {
          this._removeListener$1(subscription);
          if ((this._state & 2) === 0 && this._async$_next === this)
            this._callOnCancel$0();
        }
        return;
      },
      _recordPause$1: function(subscription) {
      },
      _recordResume$1: function(subscription) {
      },
      _addEventError$0: ["super$_BroadcastStreamController$_addEventError", function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add new events after calling close");
        return new P.StateError("Cannot add new events while doing an addStream");
      }],
      add$1: ["super$_BroadcastStreamController$add", function(_, data) {
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._sendData$1(data);
      }],
      addError$2: function(error, stackTrace) {
        var replacement;
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = J.get$error$x(replacement);
          error = error != null ? error : new P.NullThrownError();
          stackTrace = replacement.get$stackTrace();
        }
        this._sendError$2(error, stackTrace);
      },
      close$0: ["super$_BroadcastStreamController$close", function(_) {
        var doneFuture;
        if ((this._state & 4) !== 0)
          return this._doneFuture;
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._state |= 4;
        doneFuture = this._ensureDoneFuture$0();
        this._sendDone$0();
        return doneFuture;
      }],
      get$done: function() {
        return this._ensureDoneFuture$0();
      },
      _async$_add$1: function(data) {
        this._sendData$1(data);
      },
      _addError$2: function(error, stackTrace) {
        this._sendError$2(error, stackTrace);
      },
      _async$_close$0: function() {
        var addState = this._addStreamState;
        this._addStreamState = null;
        this._state &= 4294967287;
        C.JSNull_methods.complete$0(addState);
      },
      _forEachListener$1: function(action) {
        var t1, link, id, link0;
        t1 = this._state;
        if ((t1 & 2) !== 0)
          throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
        link = this._async$_next;
        if (link === this)
          return;
        id = t1 & 1;
        this._state = t1 ^ 3;
        for (; link !== this;)
          if (link._expectsEvent$1(id)) {
            link.set$_eventState(link.get$_eventState() | 2);
            action.call$1(link);
            link._toggleEventId$0();
            link0 = link.get$_async$_next();
            if (link.get$_removeAfterFiring())
              this._removeListener$1(link);
            link.set$_eventState(link.get$_eventState() & 4294967293);
            link = link0;
          } else
            link = link.get$_async$_next();
        this._state &= 4294967293;
        if (this._async$_next === this)
          this._callOnCancel$0();
      },
      _callOnCancel$0: ["super$_BroadcastStreamController$_callOnCancel", function() {
        if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
          this._doneFuture._asyncComplete$1(null);
        P._runGuarded(this._async$_onCancel);
      }]
    },
    _SyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;_async$_onListen,_async$_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      get$_mayAddEvent: function() {
        return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
      },
      _addEventError$0: function() {
        if ((this._state & 2) !== 0)
          return new P.StateError("Cannot fire new event. Controller is already firing an event");
        return this.super$_BroadcastStreamController$_addEventError();
      },
      _sendData$1: function(data) {
        var t1 = this._async$_next;
        if (t1 === this)
          return;
        if (t1.get$_async$_next() === this) {
          this._state |= 2;
          this._async$_next._async$_add$1(data);
          this._state &= 4294967293;
          if (this._async$_next === this)
            this._callOnCancel$0();
          return;
        }
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
      },
      _sendError$2: function(error, stackTrace) {
        if (this._async$_next === this)
          return;
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
      },
      _sendDone$0: function() {
        if (this._async$_next !== this)
          this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _SyncBroadcastStreamController__sendData_closure: {
      "^": "Closure;_async$_captured_this_0,_captured_data_1",
      call$1: function(subscription) {
        subscription._async$_add$1(this._captured_data_1);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendError_closure: {
      "^": "Closure;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$1: function(subscription) {
        subscription._addError$2(this._captured_error_1, this._captured_stackTrace_2);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendDone_closure: {
      "^": "Closure;_async$_captured_this_0",
      call$1: function(subscription) {
        subscription._async$_close$0();
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BroadcastSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _AsyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;_async$_onListen,_async$_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      _sendData$1: function(data) {
        var link, t1;
        for (link = this._async$_next; link !== this; link = link.get$_async$_next()) {
          t1 = new P._DelayedData(data, null);
          t1.$builtinTypeInfo = [null];
          link._addPending$1(t1);
        }
      },
      _sendError$2: function(error, stackTrace) {
        var link;
        for (link = this._async$_next; link !== this; link = link.get$_async$_next())
          link._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        var link = this._async$_next;
        if (link !== this)
          for (; link !== this; link = link.get$_async$_next())
            link._addPending$1(C.C__DelayedDone);
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _AsBroadcastStreamController: {
      "^": "_SyncBroadcastStreamController;_pending,_async$_onListen,_async$_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      _addPendingEvent$1: function($event) {
        var t1 = this._pending;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._pending = t1;
        }
        t1.add$1(0, $event);
      },
      add$1: [function(_, data) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          t1 = new P._DelayedData(data, null);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          this._addPendingEvent$1(t1);
          return;
        }
        this.super$_BroadcastStreamController$add(this, data);
        while (true) {
          t1 = this._pending;
          if (!(t1 != null && t1.lastPendingEvent != null))
            break;
          t1.handleNext$1(this);
        }
      }, "call$1", "get$add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_AsBroadcastStreamController");
      }, 37, []],
      addError$2: [function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          this._addPendingEvent$1(new P._DelayedError(error, stackTrace, null));
          return;
        }
        if (!(P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0))
          throw H.wrapException(this._addEventError$0());
        this._sendError$2(error, stackTrace);
        while (true) {
          t1 = this._pending;
          if (!(t1 != null && t1.lastPendingEvent != null))
            break;
          t1.handleNext$1(this);
        }
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 69, 0, 6, [], 15, []],
      close$0: [function(_) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          this._addPendingEvent$1(C.C__DelayedDone);
          this._state |= 4;
          return P._BroadcastStreamController.prototype.get$done.call(this);
        }
        return this.super$_BroadcastStreamController$close(this);
      }, "call$0", "get$close", 0, 0, 22],
      _callOnCancel$0: function() {
        var t1 = this._pending;
        if (t1 != null && t1.lastPendingEvent != null) {
          t1.clear$0(0);
          this._pending = null;
        }
        this.super$_BroadcastStreamController$_callOnCancel();
      }
    },
    Future: {
      "^": "Object;",
      "<>": [196],
      static: {"^": "Future__nullFuture<-320", Future_Future: [function(computation, $T) {
          var result = new P._Future(0, $.Zone__current, null);
          result.$builtinTypeInfo = [$T];
          P.Timer_Timer(C.Duration_0, new P.Future_Future_closure(computation, result));
          return result;
        }, null, null, 2, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [{func: 1}]};
          }, this.$receiver, "Future");
        }, 58, [], "new Future"], Future_Future$microtask: [function(computation, $T) {
          var result = new P._Future(0, $.Zone__current, null);
          result.$builtinTypeInfo = [$T];
          P.scheduleMicrotask(new P.Future_Future$microtask_closure(computation, result));
          return result;
        }, null, null, 2, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [{func: 1}]};
          }, this.$receiver, "Future");
        }, 58, [], "new Future$microtask"], Future_Future$sync: [function(computation, $T) {
          var result, error, stackTrace, t1, exception, replacement;
          try {
            result = computation.call$0();
            t1 = new P._Future(0, $.Zone__current, null);
            t1.$builtinTypeInfo = [$T];
            t1._asyncComplete$1(result);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            error = t1;
            stackTrace = H.getTraceFromException(exception);
            error = error;
            stackTrace = stackTrace;
            error = error != null ? error : new P.NullThrownError();
            t1 = $.Zone__current;
            if (t1 !== C.C__RootZone) {
              replacement = t1.errorCallback$2(error, stackTrace);
              if (replacement != null) {
                error = J.get$error$x(replacement);
                error = error != null ? error : new P.NullThrownError();
                stackTrace = replacement.get$stackTrace();
              }
            }
            t1 = new P._Future(0, $.Zone__current, null);
            t1.$builtinTypeInfo = [$T];
            t1._asyncCompleteError$2(error, stackTrace);
            return t1;
          }
        }, null, null, 2, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [{func: 1}]};
          }, this.$receiver, "Future");
        }, 58, [], "new Future$sync"], Future_Future$value: [function(value, $T) {
          var t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [$T];
          t1._asyncComplete$1(value);
          return t1;
        }, null, null, 0, 2, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], opt: [,]};
          }, this.$receiver, "Future");
        }, 0, 1, [], "new Future$value"], Future_Future$error: [function(error, stackTrace, $T) {
          var t1, replacement;
          error = error != null ? error : new P.NullThrownError();
          t1 = $.Zone__current;
          if (t1 !== C.C__RootZone) {
            replacement = t1.errorCallback$2(error, stackTrace);
            if (replacement != null) {
              error = J.get$error$x(replacement);
              error = error != null ? error : new P.NullThrownError();
              stackTrace = replacement.get$stackTrace();
            }
          }
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [$T];
          t1._asyncCompleteError$2(error, stackTrace);
          return t1;
        }, null, null, 2, 2, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [P.Object], opt: [P.StackTrace]};
          }, this.$receiver, "Future");
        }, 0, 6, [], 15, [], "new Future$error"], Future_Future$delayed: [function(duration, computation, $T) {
          var result = new P._Future(0, $.Zone__current, null);
          result.$builtinTypeInfo = [$T];
          P.Timer_Timer(duration, new P.Future_Future$delayed_closure(computation, result));
          return result;
        }, null, null, 2, 2, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [P.Duration], opt: [{func: 1, ret: T}]};
          }, this.$receiver, "Future");
        }, 0, 41, [], 58, [], "new Future$delayed"], Future_wait: [function(futures, cleanUp, eagerError) {
          var t1, result, t2, t3, values;
          t1 = {};
          result = new P._Future(0, $.Zone__current, null);
          result.$builtinTypeInfo = [P.List];
          t1._captured_values_0 = null;
          t1._captured_remaining_1 = 0;
          t1._captured_error_2 = null;
          t1._captured_stackTrace_3 = null;
          t2 = new P.Future_wait_handleError(t1, eagerError, cleanUp, result);
          for (t3 = J.get$iterator$ax(futures); t3.moveNext$0();)
            t3.get$current().then$2$onError(new P.Future_wait_closure(t1, eagerError, cleanUp, result, t1._captured_remaining_1++), t2);
          t2 = t1._captured_remaining_1;
          if (t2 === 0) {
            t1 = new P._Future(0, $.Zone__current, null);
            t1.$builtinTypeInfo = [null];
            t1._asyncComplete$1(C.List_empty);
            return t1;
          }
          values = Array(t2);
          values.fixed$length = Array;
          t1._captured_values_0 = values;
          return result;
        }, function(futures) {
          return P.Future_wait(futures, null, false);
        }, "call$3$cleanUp$eagerError", "call$1", "async_Future_wait$closure", 2, 5, 211, 46, 0, 135, [], 136, [], 138, [], "wait"], Future_forEach: [function(input, f) {
          return P.Future_doWhile(new P.Future_forEach_closure(f, J.get$iterator$ax(input)));
        }, "call$2", "async_Future_forEach$closure", 4, 0, 212, 45, [], 27, [], "forEach"], Future_doWhile: [function(f) {
          var t1, doneSignal, nextIteration;
          t1 = {};
          doneSignal = new P._Future(0, $.Zone__current, null);
          doneSignal.$builtinTypeInfo = [null];
          t1._captured_nextIteration_0 = null;
          nextIteration = $.Zone__current.bindUnaryCallback$2$runGuarded(new P.Future_doWhile_closure(t1, f, doneSignal), true);
          t1._captured_nextIteration_0 = nextIteration;
          nextIteration.call$1(true);
          return doneSignal;
        }, "call$1", "async_Future_doWhile$closure", 2, 0, 116, 27, [], "doWhile"]}
    },
    "+Future": [3],
    Future_Future_closure: {
      "^": "Closure:1;_captured_computation_0,_async$_captured_result_1",
      call$0: [function() {
        var e, s, exception, t1;
        try {
          this._async$_captured_result_1._complete$1(this._captured_computation_0.call$0());
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }, null, null, 0, 0, 1, "call"]
    },
    Future_Future$microtask_closure: {
      "^": "Closure:1;_captured_computation_0,_async$_captured_result_1",
      call$0: [function() {
        var e, s, exception, t1;
        try {
          this._async$_captured_result_1._complete$1(this._captured_computation_0.call$0());
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }, null, null, 0, 0, 1, "call"]
    },
    Future_Future$delayed_closure: {
      "^": "Closure:1;_captured_computation_0,_async$_captured_result_1",
      call$0: [function() {
        var e, s, t1, exception;
        try {
          t1 = this._captured_computation_0;
          t1 = t1 == null ? null : t1.call$0();
          this._async$_captured_result_1._complete$1(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }, null, null, 0, 0, 1, "call"]
    },
    Future_wait_handleError: {
      "^": "Closure:144;_async$_box_0,_captured_eagerError_1,_captured_cleanUp_2,_captured_result_3",
      call$2: [function(theError, theStackTrace) {
        var t1, t2, t3, t4, _i, value;
        t1 = this._async$_box_0;
        t2 = --t1._captured_remaining_1;
        t3 = t1._captured_values_0;
        if (t3 != null) {
          t2 = this._captured_cleanUp_2;
          if (t2 != null)
            for (t4 = t3.length, _i = 0; _i < t4; ++_i) {
              value = t3[_i];
              if (value != null)
                P.Future_Future$sync(new P.Future_wait_handleError_closure(t2, value), null);
            }
          t1._captured_values_0 = null;
          if (t1._captured_remaining_1 === 0 || this._captured_eagerError_1 === true)
            this._captured_result_3._completeError$2(theError, theStackTrace);
          else {
            t1._captured_error_2 = theError;
            t1._captured_stackTrace_3 = theStackTrace;
          }
        } else if (t2 === 0 && this._captured_eagerError_1 !== true)
          this._captured_result_3._completeError$2(t1._captured_error_2, t1._captured_stackTrace_3);
      }, null, null, 4, 0, 144, 174, [], 183, [], "call"]
    },
    Future_wait_handleError_closure: {
      "^": "Closure:1;_captured_cleanUp_4,_captured_value_5",
      call$0: [function() {
        this._captured_cleanUp_4.call$1(this._captured_value_5);
      }, null, null, 0, 0, 1, "call"]
    },
    Future_wait_closure: {
      "^": "Closure:146;_async$_box_0,_captured_eagerError_6,_captured_cleanUp_7,_captured_result_8,_captured_pos_9",
      call$1: [function(value) {
        var t1, t2, t3;
        t1 = this._async$_box_0;
        t2 = --t1._captured_remaining_1;
        t3 = t1._captured_values_0;
        if (t3 != null) {
          t3[this._captured_pos_9] = value;
          if (t2 === 0)
            this._captured_result_8._completeWithValue$1(t3);
        } else {
          t2 = this._captured_cleanUp_7;
          if (t2 != null && value != null)
            P.Future_Future$sync(new P.Future_wait__closure(t2, value), null);
          if (t1._captured_remaining_1 === 0 && this._captured_eagerError_6 !== true)
            this._captured_result_8._completeError$2(t1._captured_error_2, t1._captured_stackTrace_3);
        }
      }, null, null, 2, 0, 146, 1, [], "call"]
    },
    Future_wait__closure: {
      "^": "Closure:1;_captured_cleanUp_10,_captured_value_11",
      call$0: [function() {
        this._captured_cleanUp_10.call$1(this._captured_value_11);
      }, null, null, 0, 0, 1, "call"]
    },
    Future_forEach_closure: {
      "^": "Closure:1;_captured_f_0,_captured_iterator_1",
      call$0: [function() {
        var t1 = this._captured_iterator_1;
        if (!t1.moveNext$0())
          return false;
        return P.Future_Future$sync(new P.Future_forEach__closure(this._captured_f_0, t1), null).then$1(new P.Future_forEach__closure0());
      }, null, null, 0, 0, 1, "call"]
    },
    Future_forEach__closure: {
      "^": "Closure:1;_captured_f_2,_captured_iterator_3",
      call$0: [function() {
        return this._captured_f_2.call$1(this._captured_iterator_3.get$current());
      }, null, null, 0, 0, 1, "call"]
    },
    Future_forEach__closure0: {
      "^": "Closure:2;",
      call$1: [function(_) {
        return true;
      }, null, null, 2, 0, 2, 32, [], "call"]
    },
    Future_doWhile_closure: {
      "^": "Closure:75;_async$_box_0,_captured_f_1,_captured_doneSignal_2",
      call$1: [function(keepGoing) {
        var t1 = this._captured_doneSignal_2;
        if (keepGoing === true)
          P.Future_Future$sync(this._captured_f_1, null).then$2$onError(this._async$_box_0._captured_nextIteration_0, t1.get$_completeError());
        else
          t1._complete$1(null);
      }, null, null, 2, 0, 75, 184, [], "call"]
    },
    TimeoutException: {
      "^": "Object;message>,duration>",
      toString$0: function(_) {
        var t1, result;
        t1 = this.duration;
        result = t1 != null ? "TimeoutException after " + H.S(t1) : "TimeoutException";
        return result + ": " + this.message;
      }
    },
    Completer: {
      "^": "Object;",
      "<>": [150],
      static: {Completer_Completer: [function($T) {
          var t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [$T];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [$T];
          return t1;
        }, null, null, 0, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Completer, T]};
          }, this.$receiver, "Completer");
        }, "new Completer"], Completer_Completer$sync: [function($T) {
          var t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [$T];
          t1 = new P._SyncCompleter(t1);
          t1.$builtinTypeInfo = [$T];
          return t1;
        }, null, null, 0, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Completer, T]};
          }, this.$receiver, "Completer");
        }, "new Completer$sync"]}
    },
    "+Completer": [3],
    _Completer: {
      "^": "Object;future<-",
      completeError$2: [function(error, stackTrace) {
        var replacement;
        error = error != null ? error : new P.NullThrownError();
        if (!this.future.get$_mayComplete())
          throw H.wrapException(new P.StateError("Future already completed"));
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = J.get$error$x(replacement);
          error = error != null ? error : new P.NullThrownError();
          stackTrace = replacement.get$stackTrace();
        }
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 69, 0, 6, [], 15, [], "completeError"],
      get$isCompleted: [function() {
        return !this.future.get$_mayComplete();
      }, null, null, 1, 0, 8, "isCompleted"]
    },
    _AsyncCompleter: {
      "^": "_Completer;future-",
      complete$1: [function(_, value) {
        var t1 = this.future;
        if (!t1.get$_mayComplete())
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._asyncComplete$1(value);
      }, function($receiver) {
        return this.complete$1($receiver, null);
      }, "complete$0", "call$1", "call$0", "get$complete", 0, 2, 85, 0, 1, [], "complete"],
      _completeError$2: function(error, stackTrace) {
        this.future._asyncCompleteError$2(error, stackTrace);
      }
    },
    _SyncCompleter: {
      "^": "_Completer;future-",
      complete$1: [function(_, value) {
        var t1 = this.future;
        if (!t1.get$_mayComplete())
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._complete$1(value);
      }, function($receiver) {
        return this.complete$1($receiver, null);
      }, "complete$0", "call$1", "call$0", "get$complete", 0, 2, 85, 0, 1, [], "complete"],
      _completeError$2: function(error, stackTrace) {
        this.future._completeError$2(error, stackTrace);
      }
    },
    _FutureListener: {
      "^": "Object;_nextListener@,result>,state,callback<,errorCallback<",
      get$_zone: function() {
        return this.result.get$_zone();
      },
      get$handlesValue: function() {
        return (this.state & 1) !== 0;
      },
      get$hasErrorTest: function() {
        return this.state === 6;
      },
      get$handlesComplete: function() {
        return this.state === 8;
      },
      get$_onValue: function() {
        return this.callback;
      },
      get$_onError: function() {
        return this.errorCallback;
      },
      get$_errorTest: function() {
        return this.callback;
      },
      get$_whenCompleteAction: function() {
        return this.callback;
      },
      callback$0: function() {
        return this.callback.call$0();
      },
      errorCallback$2: function(arg0, arg1) {
        return this.errorCallback.call$2(arg0, arg1);
      }
    },
    _Future: {
      "^": "Object;_state,_zone<,_resultOrListeners",
      get$_mayComplete: function() {
        return this._state === 0;
      },
      get$_hasError: function() {
        return this._state === 8;
      },
      set$_isChained: function(value) {
        if (value)
          this._state = 2;
        else
          this._state = 0;
      },
      then$2$onError: [function(f, onError) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = [null];
        if (t1 !== C.C__RootZone) {
          f = t1.registerUnaryCallback$1(f);
          if (onError != null)
            onError = P._registerErrorHandler(onError, t1);
        }
        this._addListener$1(new P._FutureListener(null, result, onError == null ? 1 : 3, f, onError));
        return result;
      }, function(f) {
        return this.then$2$onError(f, null);
      }, "then$1", "call$2$onError", "call$1", "get$then", 2, 3, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: P.Future, args: [{func: 1, args: [T]}], named: {onError: P.Function}};
        }, this.$receiver, "_Future");
      }, 0, 27, [], 95, [], "then"],
      catchError$2$test: [function(onError, test) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = [null];
        if (t1 !== C.C__RootZone) {
          onError = P._registerErrorHandler(onError, t1);
          if (test != null)
            test = t1.registerUnaryCallback$1(test);
        }
        this._addListener$1(new P._FutureListener(null, result, test == null ? 2 : 6, test, onError));
        return result;
      }, function(onError) {
        return this.catchError$2$test(onError, null);
      }, "catchError$1", "call$2$test", "call$1", "get$catchError", 2, 3, 195, 0, 95, [], 193, [], "catchError"],
      whenComplete$1: [function(action) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = this.$builtinTypeInfo;
        this._addListener$1(new P._FutureListener(null, result, 8, t1 !== C.C__RootZone ? t1.registerCallback$1(action) : action, null));
        return result;
      }, "call$1", "get$whenComplete", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: [P.Future, T], args: [{func: 1}]};
        }, this.$receiver, "_Future");
      }, 33, [], "whenComplete"],
      asStream$0: [function() {
        return P.Stream_Stream$fromFuture(this, H.getTypeArgumentByIndex(this, 0));
      }, "call$0", "get$asStream", 0, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: [P.Stream, T]};
        }, this.$receiver, "_Future");
      }, "asStream"],
      _markPendingCompletion$0: function() {
        if (this._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        this._state = 1;
      },
      get$_value: function() {
        return this._resultOrListeners;
      },
      get$_error: function() {
        return this._resultOrListeners;
      },
      _setValue$1: function(value) {
        this._state = 4;
        this._resultOrListeners = value;
      },
      _setErrorObject$1: function(error) {
        this._state = 8;
        this._resultOrListeners = error;
      },
      _setError$2: function(error, stackTrace) {
        this._setErrorObject$1(new P.AsyncError(error, stackTrace));
      },
      _addListener$1: function(listener) {
        if (this._state >= 4)
          this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
        else {
          listener._nextListener = this._resultOrListeners;
          this._resultOrListeners = listener;
        }
      },
      _removeListeners$0: function() {
        var current, prev, next;
        current = this._resultOrListeners;
        this._resultOrListeners = null;
        for (prev = null; current != null; prev = current, current = next) {
          next = current.get$_nextListener();
          current.set$_nextListener(prev);
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, listeners;
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture)
          if (!!t1.$is_Future)
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          this._setValue$1(value);
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeWithValue$1: function(value) {
        var listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners = this._removeListeners$0();
        this._setErrorObject$1(new P.AsyncError(error, stackTrace));
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 87, 0, 6, [], 15, []],
      _asyncComplete$1: function(value) {
        var t1;
        if (value == null)
          ;
        else {
          t1 = J.getInterceptor(value);
          if (!!t1.$isFuture) {
            if (!!t1.$is_Future) {
              t1 = value._state;
              if (t1 >= 4 && t1 === 8) {
                this._markPendingCompletion$0();
                this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
              } else
                P._Future__chainCoreFuture(value, this);
            } else
              P._Future__chainForeignFuture(value, this);
            return;
          }
        }
        this._markPendingCompletion$0();
        this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure0(this, value));
      },
      _asyncCompleteError$2: function(error, stackTrace) {
        this._markPendingCompletion$0();
        this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
      },
      timeout$2$onTimeout: [function(_, timeLimit, onTimeout) {
        var t1, result, zone;
        t1 = {};
        t1._captured_onTimeout_0 = onTimeout;
        if (this._state >= 4) {
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [null];
          t1._asyncComplete$1(this);
          return t1;
        }
        result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = [null];
        t1._captured_timer_1 = null;
        if (onTimeout == null)
          t1._captured_timer_1 = P.Timer_Timer(timeLimit, new P._Future_timeout_closure(timeLimit, result));
        else {
          zone = $.Zone__current;
          t1._captured_onTimeout_0 = zone.registerCallback$1(onTimeout);
          t1._captured_timer_1 = P.Timer_Timer(timeLimit, new P._Future_timeout_closure0(t1, result, zone));
        }
        this.then$2$onError(new P._Future_timeout_closure1(t1, this, result), new P._Future_timeout_closure2(t1, result));
        return result;
      }, function($receiver, timeLimit) {
        return this.timeout$2$onTimeout($receiver, timeLimit, null);
      }, "timeout$1", "call$2$onTimeout", "call$1", "get$timeout", 2, 3, 325, 0, 214, [], 110, [], "timeout"],
      $isFuture: 1,
      static: {_Future__chainForeignFuture: function(source, target) {
          var e, s, exception, t1;
          target.set$_isChained(true);
          try {
            source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        }, _Future__chainCoreFuture: function(source, target) {
          var listener;
          target.set$_isChained(true);
          listener = new P._FutureListener(null, target, 0, null, null);
          if (source._state >= 4)
            P._Future__propagateToListeners(source, listener);
          else
            source._addListener$1(listener);
        }, _Future__propagateToListeners: function(source, listeners) {
          var t1, t2, t3, hasError, asyncError, listeners0, sourceValue, zone, oldZone, chainSource, result;
          t1 = {};
          t1._captured_source_4 = source;
          for (t2 = source; true;) {
            t3 = {};
            hasError = t2.get$_hasError();
            if (listeners == null) {
              if (hasError) {
                asyncError = t1._captured_source_4.get$_error();
                t1._captured_source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
              }
              return;
            }
            for (; listeners.get$_nextListener() != null; listeners = listeners0) {
              listeners0 = listeners.get$_nextListener();
              listeners.set$_nextListener(null);
              P._Future__propagateToListeners(t1._captured_source_4, listeners);
            }
            t3._captured_listenerHasValue_1 = true;
            sourceValue = hasError ? null : t1._captured_source_4.get$_value();
            t3._captured_listenerValueOrError_2 = sourceValue;
            t3._captured_isPropagationAborted_3 = false;
            t2 = !hasError;
            if (!t2 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
              zone = listeners.get$_zone();
              if (hasError && !t1._captured_source_4.get$_zone().inSameErrorZone$1(zone)) {
                asyncError = t1._captured_source_4.get$_error();
                t1._captured_source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              if (t2) {
                if (listeners.get$handlesValue())
                  t3._captured_listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
              } else
                new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
              if (listeners.get$handlesComplete())
                new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              if (t3._captured_isPropagationAborted_3)
                return;
              if (t3._captured_listenerHasValue_1 === true) {
                t2 = t3._captured_listenerValueOrError_2;
                t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
              } else
                t2 = false;
              if (t2) {
                chainSource = t3._captured_listenerValueOrError_2;
                result = J.get$result$x(listeners);
                if (chainSource instanceof P._Future)
                  if (chainSource._state >= 4) {
                    result.set$_isChained(true);
                    t1._captured_source_4 = chainSource;
                    listeners = new P._FutureListener(null, result, 0, null, null);
                    t2 = chainSource;
                    continue;
                  } else
                    P._Future__chainCoreFuture(chainSource, result);
                else
                  P._Future__chainForeignFuture(chainSource, result);
                return;
              }
            }
            result = J.get$result$x(listeners);
            listeners = result._removeListeners$0();
            t2 = t3._captured_listenerHasValue_1;
            t3 = t3._captured_listenerValueOrError_2;
            if (t2 === true)
              result._setValue$1(t3);
            else
              result._setErrorObject$1(t3);
            t1._captured_source_4 = result;
            t2 = result;
          }
        }}
    },
    _Future__addListener_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_listener_1",
      call$0: [function() {
        P._Future__propagateToListeners(this._async$_captured_this_0, this._captured_listener_1);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:2;_captured_target_0",
      call$1: [function(value) {
        this._captured_target_0._completeWithValue$1(value);
      }, null, null, 2, 0, null, 1, [], "call"]
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:89;_captured_target_1",
      call$2: [function(error, stackTrace) {
        this._captured_target_1._completeError$2(error, stackTrace);
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 0, 6, [], 15, [], "call"]
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:1;_captured_target_2,_captured_e_3,_captured_s_4",
      call$0: [function() {
        this._captured_target_2._completeError$2(this._captured_e_3, this._captured_s_4);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncComplete_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_coreFuture_1",
      call$0: [function() {
        P._Future__chainCoreFuture(this._captured_coreFuture_1, this._async$_captured_this_0);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncComplete_closure0: {
      "^": "Closure:1;_captured_this_2,_captured_value_3",
      call$0: [function() {
        this._captured_this_2._completeWithValue$1(this._captured_value_3);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncCompleteError_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$0: [function() {
        this._async$_captured_this_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:8;_box_1,_captured_listener_3,_captured_sourceValue_4,_captured_zone_5",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this._box_1._captured_listenerValueOrError_2 = this._captured_zone_5.runUnary$2(this._captured_listener_3.get$_onValue(), this._captured_sourceValue_4);
          return true;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this._box_1._captured_listenerValueOrError_2 = new P.AsyncError(e, s);
          return false;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:0;_box_2,_box_1,_captured_listener_6,_captured_zone_7",
      call$0: function() {
        var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
        asyncError = this._box_2._captured_source_4.get$_error();
        matchesTest = true;
        t1 = this._captured_listener_6;
        if (t1.get$hasErrorTest()) {
          test = t1.get$_errorTest();
          try {
            matchesTest = this._captured_zone_7.runUnary$2(test, J.get$error$x(asyncError));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = listenerValueOrError;
            t1._captured_listenerHasValue_1 = false;
            return;
          }
        }
        errorCallback = t1.get$_onError();
        if (matchesTest === true && errorCallback != null) {
          try {
            t1 = errorCallback;
            t2 = H.getDynamicRuntimeType();
            t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
            t3 = this._captured_zone_7;
            t4 = this._box_1;
            if (t2)
              t4._captured_listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            else
              t4._captured_listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e0 = t1;
            s0 = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e0;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = listenerValueOrError;
            t1._captured_listenerHasValue_1 = false;
            return;
          }
          this._box_1._captured_listenerHasValue_1 = true;
        } else {
          t1 = this._box_1;
          t1._captured_listenerValueOrError_2 = asyncError;
          t1._captured_listenerHasValue_1 = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:0;_box_2,_box_1,_captured_hasError_8,_captured_listener_9,_captured_zone_10",
      call$0: function() {
        var t1, e, s, completeResult, t2, exception, result;
        t1 = {};
        t1._captured_completeResult_0 = null;
        try {
          completeResult = this._captured_zone_10.run$1(this._captured_listener_9.get$_whenCompleteAction());
          t1._captured_completeResult_0 = completeResult;
          t2 = completeResult;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if (this._captured_hasError_8) {
            t1 = J.get$error$x(this._box_2._captured_source_4.get$_error());
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_1;
          if (t1)
            t2._captured_listenerValueOrError_2 = this._box_2._captured_source_4.get$_error();
          else
            t2._captured_listenerValueOrError_2 = new P.AsyncError(e, s);
          t2._captured_listenerHasValue_1 = false;
          return;
        }
        if (!!J.getInterceptor(t2).$isFuture) {
          result = J.get$result$x(this._captured_listener_9);
          result.set$_isChained(true);
          this._box_1._captured_isPropagationAborted_3 = true;
          t2.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this._box_2, result), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, result));
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:2;_box_2,_captured_result_11",
      call$1: [function(ignored) {
        P._Future__propagateToListeners(this._box_2._captured_source_4, new P._FutureListener(null, this._captured_result_11, 0, null, null));
      }, null, null, 2, 0, null, 111, [], "call"]
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
      "^": "Closure:89;_async$_box_0,_captured_result_12",
      call$2: [function(error, stackTrace) {
        var t1, completeResult;
        t1 = this._async$_box_0;
        if (!(t1._captured_completeResult_0 instanceof P._Future)) {
          completeResult = new P._Future(0, $.Zone__current, null);
          completeResult.$builtinTypeInfo = [null];
          t1._captured_completeResult_0 = completeResult;
          completeResult._setError$2(error, stackTrace);
        }
        P._Future__propagateToListeners(t1._captured_completeResult_0, new P._FutureListener(null, this._captured_result_12, 0, null, null));
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 0, 6, [], 15, [], "call"]
    },
    _Future_timeout_closure: {
      "^": "Closure:1;_captured_timeLimit_1,_captured_result_2",
      call$0: [function() {
        this._captured_result_2._completeError$1(new P.TimeoutException("Future not completed", this._captured_timeLimit_1));
      }, null, null, 0, 0, null, "call"]
    },
    _Future_timeout_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_result_3,_captured_zone_4",
      call$0: [function() {
        var e, s, exception, t1;
        try {
          this._captured_result_3._complete$1(this._captured_zone_4.run$1(this._async$_box_0._captured_onTimeout_0));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this._captured_result_3._completeError$2(e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    _Future_timeout_closure1: {
      "^": "Closure;_async$_box_0,_captured_this_5,_captured_result_6",
      call$1: [function(v) {
        var t1 = this._async$_box_0;
        if (t1._captured_timer_1.get$isActive()) {
          t1._captured_timer_1.cancel$0();
          this._captured_result_6._completeWithValue$1(v);
        }
      }, null, null, 2, 0, null, 28, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._captured_this_5, "_Future");
      }
    },
    _Future_timeout_closure2: {
      "^": "Closure:4;_async$_box_0,_captured_result_7",
      call$2: [function(e, s) {
        var t1 = this._async$_box_0;
        if (t1._captured_timer_1.get$isActive()) {
          t1._captured_timer_1.cancel$0();
          this._captured_result_7._completeError$2(e, s);
        }
      }, null, null, 4, 0, null, 29, [], 113, [], "call"]
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback<,zone<,next@",
      callback$0: function() {
        return this.callback.call$0();
      }
    },
    Stream: {
      "^": "Object;",
      get$isBroadcast: function() {
        return false;
      },
      where$1: function(_, test) {
        var t1 = new P._WhereStream(test, this);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
        return t1;
      },
      map$1: function(_, convert) {
        var t1 = new P._MapStream(convert, this);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0), null];
        return t1;
      },
      join$1: function(_, separator) {
        var t1, result, buffer;
        t1 = {};
        result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = [P.String];
        buffer = new P.StringBuffer("");
        t1._captured_subscription_0 = null;
        t1._captured_first_1 = true;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_join_closure(t1, this, separator, result, buffer), true, new P.Stream_join_closure0(result, buffer), new P.Stream_join_closure1(result));
        return result;
      },
      contains$1: function(_, needle) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [P.bool];
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
        return future;
      },
      forEach$1: function(_, action) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [null];
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [P.$int];
        t1._captured_count_0 = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$isEmpty: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [P.bool];
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
        return future;
      },
      toList$0: function(_) {
        var result, future;
        result = [];
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [[P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]];
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
        return future;
      },
      get$last: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
        t1._captured_result_0 = null;
        t1._captured_foundResult_1 = false;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$single: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
        t1._captured_result_0 = null;
        t1._captured_foundResult_1 = false;
        t1._captured_subscription_2 = null;
        t1._captured_subscription_2 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_single_closure(t1, this, future), true, new P.Stream_single_closure0(t1, future), future.get$_completeError());
        return future;
      },
      elementAt$1: function(_, index) {
        var t1, future;
        t1 = {};
        if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
          throw H.wrapException(P.ArgumentError$(index));
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
        t1._captured_subscription_0 = null;
        t1._captured_elementIndex_1 = 0;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_elementAt_closure(t1, this, index, future), true, new P.Stream_elementAt_closure0(t1, this, index, future), future.get$_completeError());
        return future;
      },
      timeout$2$onTimeout: function(_, timeLimit, onTimeout) {
        var t1, t2, t3, controller;
        t1 = {};
        t1._captured_onTimeout_0 = onTimeout;
        t1._captured_controller_1 = null;
        t1._captured_subscription_2 = null;
        t1._captured_timer_3 = null;
        t1._captured_zone_4 = null;
        t1._captured_timeout_5 = null;
        t2 = new P.Stream_timeout_onListen(t1, this, timeLimit, new P.Stream_timeout_onData(t1, this, timeLimit), new P.Stream_timeout_onError(t1, this, timeLimit), new P.Stream_timeout_onDone(t1));
        t3 = new P.Stream_timeout_onCancel(t1);
        if (this.get$isBroadcast()) {
          controller = new P._SyncBroadcastStreamController(t2, t3, 0, null, null, null, null);
          controller.$builtinTypeInfo = [null];
          controller._async$_previous = controller;
          controller._async$_next = controller;
        } else {
          controller = new P._SyncStreamController(t2, new P.Stream_timeout_closure(t1), new P.Stream_timeout_closure0(t1, timeLimit), t3, null, 0, null);
          controller.$builtinTypeInfo = [null];
        }
        t1._captured_controller_1 = controller;
        return controller.get$stream(controller);
      }
    },
    Stream_Stream$fromFuture_closure: {
      "^": "Closure:2;_captured_controller_0",
      call$1: [function(value) {
        var t1 = this._captured_controller_0;
        t1._async$_add$1(value);
        t1._closeUnchecked$0();
      }, null, null, 2, 0, null, 1, [], "call"]
    },
    Stream_Stream$fromFuture_closure0: {
      "^": "Closure:4;_captured_controller_1",
      call$2: [function(error, stackTrace) {
        var t1 = this._captured_controller_1;
        t1._addError$2(error, stackTrace);
        t1._closeUnchecked$0();
      }, null, null, 4, 0, null, 6, [], 15, [], "call"]
    },
    Stream_join_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_separator_2,_captured_result_3,_captured_buffer_4",
      call$1: [function(element) {
        var e, s, t1, exception, t2;
        t1 = this._async$_box_0;
        if (!t1._captured_first_1)
          this._captured_buffer_4._contents += this._captured_separator_2;
        t1._captured_first_1 = false;
        try {
          this._captured_buffer_4._contents += H.S(element);
        } catch (exception) {
          t2 = H.unwrapException(exception);
          e = t2;
          s = H.getTraceFromException(exception);
          P._cancelAndErrorWithReplacement(t1._captured_subscription_0, this._captured_result_3, e, s);
        }
      }, null, null, 2, 0, null, 64, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_join_closure1: {
      "^": "Closure:2;_captured_result_5",
      call$1: [function(e) {
        this._captured_result_5._completeError$1(e);
      }, null, null, 2, 0, null, 29, [], "call"]
    },
    Stream_join_closure0: {
      "^": "Closure:1;_captured_result_6,_captured_buffer_7",
      call$0: [function() {
        var t1 = this._captured_buffer_7._contents;
        this._captured_result_6._complete$1(t1.charCodeAt(0) == 0 ? t1 : t1);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_contains_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_needle_2,_captured_future_3",
      call$1: [function(element) {
        var t1, t2;
        t1 = this._async$_box_0;
        t2 = this._captured_future_3;
        P._runUserCode(new P.Stream_contains__closure(this._captured_needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1._captured_subscription_0, t2));
      }, null, null, 2, 0, null, 64, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_contains__closure: {
      "^": "Closure:1;_captured_needle_4,_captured_element_5",
      call$0: function() {
        return J.$eq$(this._captured_element_5, this._captured_needle_4);
      }
    },
    Stream_contains__closure0: {
      "^": "Closure:75;_async$_box_0,_captured_future_6",
      call$1: function(isMatch) {
        if (isMatch === true)
          P._cancelAndValue(this._async$_box_0._captured_subscription_0, this._captured_future_6, true);
      }
    },
    Stream_contains_closure0: {
      "^": "Closure:1;_captured_future_7",
      call$0: [function() {
        this._captured_future_7._complete$1(false);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_forEach_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_action_2,_captured_future_3",
      call$1: [function(element) {
        P._runUserCode(new P.Stream_forEach__closure(this._captured_action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._async$_box_0._captured_subscription_0, this._captured_future_3));
      }, null, null, 2, 0, null, 64, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_forEach__closure: {
      "^": "Closure:1;_captured_action_4,_captured_element_5",
      call$0: function() {
        return this._captured_action_4.call$1(this._captured_element_5);
      }
    },
    Stream_forEach__closure0: {
      "^": "Closure:2;",
      call$1: function(_) {
      }
    },
    Stream_forEach_closure0: {
      "^": "Closure:1;_captured_future_6",
      call$0: [function() {
        this._captured_future_6._complete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_length_closure: {
      "^": "Closure:2;_async$_box_0",
      call$1: [function(_) {
        ++this._async$_box_0._captured_count_0;
      }, null, null, 2, 0, null, 32, [], "call"]
    },
    Stream_length_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_future_1",
      call$0: [function() {
        this._captured_future_1._complete$1(this._async$_box_0._captured_count_0);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_isEmpty_closure: {
      "^": "Closure:2;_async$_box_0,_captured_future_1",
      call$1: [function(_) {
        P._cancelAndValue(this._async$_box_0._captured_subscription_0, this._captured_future_1, false);
      }, null, null, 2, 0, null, 32, [], "call"]
    },
    Stream_isEmpty_closure0: {
      "^": "Closure:1;_captured_future_2",
      call$0: [function() {
        this._captured_future_2._complete$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_toList_closure: {
      "^": "Closure;_async$_captured_this_0,_async$_captured_result_1",
      call$1: [function(data) {
        this._async$_captured_result_1.push(data);
      }, null, null, 2, 0, null, 37, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_0, "Stream");
      }
    },
    Stream_toList_closure0: {
      "^": "Closure:1;_captured_result_2,_captured_future_3",
      call$0: [function() {
        this._captured_future_3._complete$1(this._captured_result_2);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_last_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1",
      call$1: [function(value) {
        var t1 = this._async$_box_0;
        t1._captured_foundResult_1 = true;
        t1._captured_result_0 = value;
      }, null, null, 2, 0, null, 1, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_last_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_future_2",
      call$0: [function() {
        var e, s, t1, exception;
        t1 = this._async$_box_0;
        if (t1._captured_foundResult_1) {
          this._captured_future_2._complete$1(t1._captured_result_0);
          return;
        }
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._captured_future_2, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Stream_single_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_future_2",
      call$1: [function(value) {
        var e, s, t1, t2, exception;
        t1 = this._async$_box_0;
        if (t1._captured_foundResult_1) {
          try {
            t2 = H.IterableElementError_tooMany();
            throw H.wrapException(t2);
          } catch (exception) {
            t2 = H.unwrapException(exception);
            e = t2;
            s = H.getTraceFromException(exception);
            P._cancelAndErrorWithReplacement(t1._captured_subscription_2, this._captured_future_2, e, s);
          }
          return;
        }
        t1._captured_foundResult_1 = true;
        t1._captured_result_0 = value;
      }, null, null, 2, 0, null, 1, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_single_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_future_3",
      call$0: [function() {
        var e, s, t1, exception;
        t1 = this._async$_box_0;
        if (t1._captured_foundResult_1) {
          this._captured_future_3._complete$1(t1._captured_result_0);
          return;
        }
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._captured_future_3, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Stream_elementAt_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_index_2,_captured_future_3",
      call$1: [function(value) {
        var t1 = this._async$_box_0;
        if (J.$eq$(this._captured_index_2, t1._captured_elementIndex_1)) {
          P._cancelAndValue(t1._captured_subscription_0, this._captured_future_3, value);
          return;
        }
        ++t1._captured_elementIndex_1;
      }, null, null, 2, 0, null, 1, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_elementAt_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_this_4,_captured_index_5,_captured_future_6",
      call$0: [function() {
        this._captured_future_6._completeError$1(P.IndexError$(this._captured_index_5, this._captured_this_4, "index", null, this._async$_box_0._captured_elementIndex_1));
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onData: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_timeLimit_2",
      call$1: [function($event) {
        var t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        t1._captured_controller_1.add$1(0, $event);
        t1._captured_timer_3 = t1._captured_zone_4.createTimer$2(this._captured_timeLimit_2, t1._captured_timeout_5);
      }, null, null, 2, 0, null, 116, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_timeout_onError: {
      "^": "Closure:79;_async$_box_0,_captured_this_3,_captured_timeLimit_4",
      call$2: [function(error, stackTrace) {
        var t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        t1._captured_controller_1._addError$2(error, stackTrace);
        t1._captured_timer_3 = t1._captured_zone_4.createTimer$2(this._captured_timeLimit_4, t1._captured_timeout_5);
      }, null, null, 4, 0, null, 6, [], 15, [], "call"]
    },
    Stream_timeout_onDone: {
      "^": "Closure:0;_async$_box_0",
      call$0: [function() {
        var t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        t1._captured_controller_1.close$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onListen: {
      "^": "Closure:0;_async$_box_0,_captured_this_5,_captured_timeLimit_6,_captured_onData_7,_captured_onError_8,_captured_onDone_9",
      call$0: function() {
        var zone, t1, t2, wrapper;
        zone = $.Zone__current;
        t1 = this._async$_box_0;
        t1._captured_zone_4 = zone;
        t2 = t1._captured_onTimeout_0;
        if (t2 == null)
          t1._captured_timeout_5 = new P.Stream_timeout_onListen_closure(t1, this._captured_timeLimit_6);
        else {
          t1._captured_onTimeout_0 = zone.registerUnaryCallback$1(t2);
          wrapper = new P._ControllerEventSinkWrapper(null);
          wrapper.$builtinTypeInfo = [null];
          t1._captured_timeout_5 = new P.Stream_timeout_onListen_closure0(t1, wrapper);
        }
        t1._captured_subscription_2 = this._captured_this_5.listen$3$onDone$onError(this._captured_onData_7, this._captured_onDone_9, this._captured_onError_8);
        t1._captured_timer_3 = t1._captured_zone_4.createTimer$2(this._captured_timeLimit_6, t1._captured_timeout_5);
      }
    },
    Stream_timeout_onListen_closure: {
      "^": "Closure:1;_async$_box_0,_captured_timeLimit_10",
      call$0: [function() {
        this._async$_box_0._captured_controller_1.addError$2(new P.TimeoutException("No stream event", this._captured_timeLimit_10), null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onListen_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_wrapper_11",
      call$0: [function() {
        var t1, t2;
        t1 = this._captured_wrapper_11;
        t2 = this._async$_box_0;
        t1._async$_sink = t2._captured_controller_1;
        t2._captured_zone_4.runUnaryGuarded$2(t2._captured_onTimeout_0, t1);
        t1._async$_sink = null;
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onCancel: {
      "^": "Closure:22;_async$_box_0",
      call$0: [function() {
        var t1, result;
        t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        result = t1._captured_subscription_2.cancel$0();
        t1._captured_subscription_2 = null;
        return result;
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_closure: {
      "^": "Closure:1;_async$_box_0",
      call$0: function() {
        var t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        t1._captured_subscription_2.pause$0(0);
      }
    },
    Stream_timeout_closure0: {
      "^": "Closure:1;_async$_box_0,_captured_timeLimit_12",
      call$0: function() {
        var t1 = this._async$_box_0;
        t1._captured_subscription_2.resume$0();
        t1._captured_timer_3 = t1._captured_zone_4.createTimer$2(this._captured_timeLimit_12, t1._captured_timeout_5);
      }
    },
    StreamSubscription: {
      "^": "Object;"
    },
    _ControllerEventSinkWrapper: {
      "^": "Object;_async$_sink",
      add$1: function(_, data) {
        this._async$_sink.add$1(0, data);
      },
      close$0: function(_) {
        this._async$_sink.close$0(0);
      }
    },
    _StreamController: {
      "^": "Object;",
      get$stream: function(_) {
        var t1 = new P._ControllerStream(this);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$isClosed: function() {
        return (this._state & 4) !== 0;
      },
      get$isPaused: function() {
        var t1 = this._state;
        return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
      },
      get$_pendingEvents: function() {
        if ((this._state & 8) === 0)
          return this._varData;
        return this._varData.get$varData();
      },
      _ensurePendingEvents$0: function() {
        var t1, state;
        if ((this._state & 8) === 0) {
          t1 = this._varData;
          if (t1 == null) {
            t1 = new P._StreamImplEvents(null, null, 0);
            this._varData = t1;
          }
          return t1;
        }
        state = this._varData;
        state.get$varData();
        return state.get$varData();
      },
      get$_subscription: function() {
        if ((this._state & 8) !== 0)
          return this._varData.get$varData();
        return this._varData;
      },
      _badEventState$0: function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add event after closing");
        return new P.StateError("Cannot add event while adding a stream");
      },
      get$done: function() {
        return this._ensureDoneFuture$0();
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 == null) {
          if ((this._state & 2) !== 0)
            t1 = $.$get$Future__nullFuture();
          else {
            t1 = new P._Future(0, $.Zone__current, null);
            t1.$builtinTypeInfo = [null];
          }
          this._doneFuture = t1;
        }
        return t1;
      },
      add$1: function(_, value) {
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        this._async$_add$1(value);
      },
      addError$2: function(error, stackTrace) {
        var replacement;
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = J.get$error$x(replacement);
          error = error != null ? error : new P.NullThrownError();
          stackTrace = replacement.get$stackTrace();
        }
        this._addError$2(error, stackTrace);
      },
      close$0: function(_) {
        var t1 = this._state;
        if ((t1 & 4) !== 0)
          return this._ensureDoneFuture$0();
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        this._closeUnchecked$0();
        return this._ensureDoneFuture$0();
      },
      _closeUnchecked$0: function() {
        var t1 = this._state |= 4;
        if ((t1 & 1) !== 0)
          this._sendDone$0();
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      },
      _async$_add$1: function(value) {
        var t1, t2;
        t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendData$1(value);
        else if ((t1 & 3) === 0) {
          t1 = this._ensurePendingEvents$0();
          t2 = new P._DelayedData(value, null);
          t2.$builtinTypeInfo = this.$builtinTypeInfo;
          t1.add$1(0, t2);
        }
      },
      _addError$2: function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendError$2(error, stackTrace);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace, null));
      },
      _async$_close$0: function() {
        var addState = this._varData;
        this._varData = addState.get$varData();
        this._state &= 4294967287;
        addState.complete$0(0);
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription, pendingEvents, addState;
        if ((this._state & 3) !== 0)
          throw H.wrapException(new P.StateError("Stream has already been listened to."));
        t1 = $.Zone__current;
        subscription = new P._ControllerSubscription(this, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
        subscription.$builtinTypeInfo = [null];
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, null);
        pendingEvents = this.get$_pendingEvents();
        t1 = this._state |= 1;
        if ((t1 & 8) !== 0) {
          addState = this._varData;
          addState.set$varData(subscription);
          addState.resume$0();
        } else
          this._varData = subscription;
        subscription._setPendingEvents$1(pendingEvents);
        subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        var result, e, s, exception, t1, result0;
        result = null;
        if ((this._state & 8) !== 0)
          result = this._varData.cancel$0();
        this._varData = null;
        this._state = this._state & 4294967286 | 2;
        if (this.get$_async$_onCancel() != null)
          if (result == null)
            try {
              result = this._async$_onCancel$0();
            } catch (exception) {
              t1 = H.unwrapException(exception);
              e = t1;
              s = H.getTraceFromException(exception);
              result0 = new P._Future(0, $.Zone__current, null);
              result0.$builtinTypeInfo = [null];
              result0._asyncCompleteError$2(e, s);
              result = result0;
            }
          else
            result = result.whenComplete$1(this.get$_async$_onCancel());
        t1 = new P._StreamController__recordCancel_complete(this);
        if (result != null)
          result = result.whenComplete$1(t1);
        else
          t1.call$0();
        return result;
      },
      _recordPause$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.pause$0(0);
        P._runGuarded(this.get$_onPause());
      },
      _recordResume$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.resume$0();
        P._runGuarded(this.get$_onResume());
      }
    },
    _StreamController__subscribe_closure: {
      "^": "Closure:1;_async$_captured_this_0",
      call$0: function() {
        P._runGuarded(this._async$_captured_this_0.get$_async$_onListen());
      }
    },
    _StreamController__recordCancel_complete: {
      "^": "Closure:0;_async$_captured_this_0",
      call$0: [function() {
        var t1 = this._async$_captured_this_0._doneFuture;
        if (t1 != null && t1._state === 0)
          t1._asyncComplete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    _SyncStreamControllerDispatch: {
      "^": "Object;",
      _sendData$1: function(data) {
        this.get$_subscription()._async$_add$1(data);
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addError$2(error, stackTrace);
      },
      _sendDone$0: function() {
        this.get$_subscription()._async$_close$0();
      }
    },
    _AsyncStreamControllerDispatch: {
      "^": "Object;",
      _sendData$1: function(data) {
        var t1, t2;
        t1 = this.get$_subscription();
        t2 = new P._DelayedData(data, null);
        t2.$builtinTypeInfo = [null];
        t1._addPending$1(t2);
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        this.get$_subscription()._addPending$1(C.C__DelayedDone);
      }
    },
    _AsyncStreamController: {
      "^": "_StreamController__AsyncStreamControllerDispatch;_async$_onListen<,_onPause<,_onResume<,_async$_onCancel<,_varData,_state,_doneFuture",
      _async$_onCancel$0: function() {
        return this._async$_onCancel.call$0();
      }
    },
    _StreamController__AsyncStreamControllerDispatch: {
      "^": "_StreamController+_AsyncStreamControllerDispatch;"
    },
    _SyncStreamController: {
      "^": "_StreamController__SyncStreamControllerDispatch;_async$_onListen<,_onPause<,_onResume<,_async$_onCancel<,_varData,_state,_doneFuture",
      _async$_onCancel$0: function() {
        return this._async$_onCancel.call$0();
      }
    },
    _StreamController__SyncStreamControllerDispatch: {
      "^": "_StreamController+_SyncStreamControllerDispatch;"
    },
    _NoCallbacks: {
      "^": "Object;",
      get$_async$_onListen: function() {
        return;
      },
      get$_onPause: function() {
        return;
      },
      get$_onResume: function() {
        return;
      },
      get$_async$_onCancel: function() {
        return;
      },
      _async$_onCancel$0: function() {
        return this.get$_async$_onCancel().call$0();
      }
    },
    _NoCallbackAsyncStreamController: {
      "^": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
    },
    _StreamController__AsyncStreamControllerDispatch0: {
      "^": "_StreamController+_AsyncStreamControllerDispatch;"
    },
    _NoCallbackSyncStreamController: {
      "^": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
    },
    _StreamController__SyncStreamControllerDispatch0: {
      "^": "_StreamController+_SyncStreamControllerDispatch;"
    },
    _ControllerStream: {
      "^": "_StreamImpl;_async$_controller",
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return this._async$_controller._subscribe$4(onData, onError, onDone, cancelOnError);
      },
      get$hashCode: function(_) {
        return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof P._ControllerStream))
          return false;
        return other._async$_controller === this._async$_controller;
      }
    },
    _ControllerSubscription: {
      "^": "_BufferingStreamSubscription;_async$_controller<,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _async$_onCancel$0: function() {
        return this.get$_async$_controller()._recordCancel$1(this);
      },
      _onPause$0: [function() {
        this.get$_async$_controller()._recordPause$1(this);
      }, "call$0", "get$_onPause", 0, 0, 0],
      _onResume$0: [function() {
        this.get$_async$_controller()._recordResume$1(this);
      }, "call$0", "get$_onResume", 0, 0, 0]
    },
    _EventSink: {
      "^": "Object;"
    },
    _BufferingStreamSubscription: {
      "^": "Object;_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
      _setPendingEvents$1: function(pendingEvents) {
        if (pendingEvents == null)
          return;
        this._pending = pendingEvents;
        if (!pendingEvents.get$isEmpty(pendingEvents)) {
          this._state = (this._state | 64) >>> 0;
          this._pending.schedule$1(this);
        }
      },
      onData$1: function(handleData) {
        this._onData = this._zone.registerUnaryCallback$1(handleData);
      },
      onError$1: function(_, handleError) {
        if (handleError == null)
          handleError = P.async___nullErrorHandler$closure();
        this._onError = P._registerErrorHandler(handleError, this._zone);
      },
      onDone$1: function(handleDone) {
        if (handleDone == null)
          handleDone = P.async___nullDoneHandler$closure();
        this._onDone = this._zone.registerCallback$1(handleDone);
      },
      pause$1: function(_, resumeSignal) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        this._state = (t1 + 128 | 4) >>> 0;
        if (t1 < 128 && this._pending != null)
          this._pending.cancelSchedule$0();
        if ((t1 & 4) === 0 && (this._state & 32) === 0)
          this._guardCallback$1(this.get$_onPause());
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 >= 128) {
          t1 -= 128;
          this._state = t1;
          if (t1 < 128) {
            if ((t1 & 64) !== 0) {
              t1 = this._pending;
              t1 = !t1.get$isEmpty(t1);
            } else
              t1 = false;
            if (t1)
              this._pending.schedule$1(this);
            else {
              t1 = (this._state & 4294967291) >>> 0;
              this._state = t1;
              if ((t1 & 32) === 0)
                this._guardCallback$1(this.get$_onResume());
            }
          }
        }
      },
      cancel$0: function() {
        var t1 = (this._state & 4294967279) >>> 0;
        this._state = t1;
        if ((t1 & 8) !== 0)
          return this._cancelFuture;
        this._cancel$0();
        return this._cancelFuture;
      },
      asFuture$1: function(futureValue) {
        var result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)];
        this._onDone = new P._BufferingStreamSubscription_asFuture_closure(futureValue, result);
        this._onError = new P._BufferingStreamSubscription_asFuture_closure0(this, result);
        return result;
      },
      get$_isInputPaused: function() {
        return (this._state & 4) !== 0;
      },
      get$isPaused: function() {
        return this._state >= 128;
      },
      _cancel$0: function() {
        var t1 = (this._state | 8) >>> 0;
        this._state = t1;
        if ((t1 & 64) !== 0)
          this._pending.cancelSchedule$0();
        if ((this._state & 32) === 0)
          this._pending = null;
        this._cancelFuture = this._async$_onCancel$0();
      },
      _async$_add$1: ["super$_BufferingStreamSubscription$_add", function(data) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendData$1(data);
        else {
          t1 = new P._DelayedData(data, null);
          t1.$builtinTypeInfo = [null];
          this._addPending$1(t1);
        }
      }],
      _addError$2: ["super$_BufferingStreamSubscription$_addError", function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendError$2(error, stackTrace);
        else
          this._addPending$1(new P._DelayedError(error, stackTrace, null));
      }],
      _async$_close$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t1 = (t1 | 2) >>> 0;
        this._state = t1;
        if (t1 < 32)
          this._sendDone$0();
        else
          this._addPending$1(C.C__DelayedDone);
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 0],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 0],
      _async$_onCancel$0: function() {
        return;
      },
      _addPending$1: function($event) {
        var pending, t1;
        pending = this._pending;
        if (pending == null) {
          pending = new P._StreamImplEvents(null, null, 0);
          this._pending = pending;
        }
        pending.add$1(0, $event);
        t1 = this._state;
        if ((t1 & 64) === 0) {
          t1 = (t1 | 64) >>> 0;
          this._state = t1;
          if (t1 < 128)
            this._pending.schedule$1(this);
        }
      },
      _sendData$1: function(data) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        this._zone.runUnaryGuarded$2(this._onData, data);
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _sendError$2: function(error, stackTrace) {
        var t1, t2;
        t1 = this._state;
        t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
        if ((t1 & 1) !== 0) {
          this._state = (t1 | 16) >>> 0;
          this._cancel$0();
          t1 = this._cancelFuture;
          if (!!J.getInterceptor(t1).$isFuture)
            t1.whenComplete$1(t2);
          else
            t2.call$0();
        } else {
          t2.call$0();
          this._checkState$1((t1 & 4) !== 0);
        }
      },
      _sendDone$0: function() {
        var t1, t2;
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
        this._cancel$0();
        this._state = (this._state | 16) >>> 0;
        t2 = this._cancelFuture;
        if (!!J.getInterceptor(t2).$isFuture)
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      },
      _guardCallback$1: function(callback) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        callback.call$0();
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _checkState$1: function(wasInputPaused) {
        var t1, isInputPaused;
        if ((this._state & 64) !== 0) {
          t1 = this._pending;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
        if (t1) {
          t1 = (this._state & 4294967231) >>> 0;
          this._state = t1;
          if ((t1 & 4) !== 0)
            if (t1 < 128) {
              t1 = this._pending;
              t1 = t1 == null || t1.get$isEmpty(t1);
            } else
              t1 = false;
          else
            t1 = false;
          if (t1)
            this._state = (this._state & 4294967291) >>> 0;
        }
        for (; true; wasInputPaused = isInputPaused) {
          t1 = this._state;
          if ((t1 & 8) !== 0) {
            this._pending = null;
            return;
          }
          isInputPaused = (t1 & 4) !== 0;
          if (wasInputPaused === isInputPaused)
            break;
          this._state = (t1 ^ 32) >>> 0;
          if (isInputPaused)
            this._onPause$0();
          else
            this._onResume$0();
          this._state = (this._state & 4294967263) >>> 0;
        }
        t1 = this._state;
        if ((t1 & 64) !== 0 && t1 < 128)
          this._pending.schedule$1(this);
      },
      _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
        var t1 = this._zone;
        this._onData = t1.registerUnaryCallback$1(onData);
        this._onError = P._registerErrorHandler(onError == null ? P.async___nullErrorHandler$closure() : onError, t1);
        this._onDone = t1.registerCallback$1(onDone == null ? P.async___nullDoneHandler$closure() : onDone);
      },
      $is_EventSink: 1,
      $isStreamSubscription: 1,
      static: {_BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
          var t1 = $.Zone__current;
          t1 = new P._BufferingStreamSubscription(null, null, null, t1, cancelOnError ? 1 : 0, null, null);
          t1.$builtinTypeInfo = [$T];
          t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          return t1;
        }}
    },
    _BufferingStreamSubscription_asFuture_closure: {
      "^": "Closure:1;_captured_futureValue_0,_async$_captured_result_1",
      call$0: [function() {
        this._async$_captured_result_1._complete$1(this._captured_futureValue_0);
      }, null, null, 0, 0, null, "call"]
    },
    _BufferingStreamSubscription_asFuture_closure0: {
      "^": "Closure:4;_captured_this_2,_captured_result_3",
      call$2: [function(error, stackTrace) {
        this._captured_this_2.cancel$0();
        this._captured_result_3._completeError$2(error, stackTrace);
      }, null, null, 4, 0, null, 6, [], 15, [], "call"]
    },
    _BufferingStreamSubscription__sendError_sendError: {
      "^": "Closure:0;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$0: [function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = this._async$_captured_this_0;
        t2 = t1._state;
        if ((t2 & 8) !== 0 && (t2 & 16) === 0)
          return;
        t1._state = (t2 | 32) >>> 0;
        t2 = t1._onError;
        t3 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
        t4 = t1._zone;
        t5 = this._captured_error_1;
        t6 = t1._onError;
        if (t3)
          t4.runBinaryGuarded$3(t6, t5, this._captured_stackTrace_2);
        else
          t4.runUnaryGuarded$2(t6, t5);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _BufferingStreamSubscription__sendDone_sendDone: {
      "^": "Closure:0;_async$_captured_this_0",
      call$0: [function() {
        var t1, t2;
        t1 = this._async$_captured_this_0;
        t2 = t1._state;
        if ((t2 & 16) === 0)
          return;
        t1._state = (t2 | 42) >>> 0;
        t1._zone.runGuarded$1(t1._onDone);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImpl: {
      "^": "Stream;",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
      }
    },
    _DelayedEvent: {
      "^": "Object;next@"
    },
    _DelayedData: {
      "^": "_DelayedEvent;value>,next",
      perform$1: function(dispatch) {
        dispatch._sendData$1(this.value);
      }
    },
    _DelayedError: {
      "^": "_DelayedEvent;error>,stackTrace<,next",
      perform$1: function(dispatch) {
        dispatch._sendError$2(this.error, this.stackTrace);
      }
    },
    _DelayedDone: {
      "^": "Object;",
      perform$1: function(dispatch) {
        dispatch._sendDone$0();
      },
      get$next: function() {
        return;
      },
      set$next: function(_) {
        throw H.wrapException(new P.StateError("No events after a done."));
      }
    },
    _PendingEvents: {
      "^": "Object;",
      schedule$1: function(dispatch) {
        var t1 = this._state;
        if (t1 === 1)
          return;
        if (t1 >= 1) {
          this._state = 1;
          return;
        }
        P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
        this._state = 1;
      },
      cancelSchedule$0: function() {
        if (this._state === 1)
          this._state = 3;
      }
    },
    _PendingEvents_schedule_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_dispatch_1",
      call$0: [function() {
        var t1, oldState;
        t1 = this._async$_captured_this_0;
        oldState = t1._state;
        t1._state = 0;
        if (oldState === 3)
          return;
        t1.handleNext$1(this._captured_dispatch_1);
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
      get$isEmpty: function(_) {
        return this.lastPendingEvent == null;
      },
      add$1: function(_, $event) {
        var t1 = this.lastPendingEvent;
        if (t1 == null) {
          this.lastPendingEvent = $event;
          this.firstPendingEvent = $event;
        } else {
          t1.set$next($event);
          this.lastPendingEvent = $event;
        }
      },
      handleNext$1: function(dispatch) {
        var $event, t1;
        $event = this.firstPendingEvent;
        t1 = $event.get$next();
        this.firstPendingEvent = t1;
        if (t1 == null)
          this.lastPendingEvent = null;
        $event.perform$1(dispatch);
      },
      clear$0: function(_) {
        if (this._state === 1)
          this._state = 3;
        this.lastPendingEvent = null;
        this.firstPendingEvent = null;
      }
    },
    _DoneStreamSubscription: {
      "^": "Object;_zone<,_state,_onDone",
      get$isPaused: function() {
        return this._state >= 4;
      },
      _schedule$0: function() {
        if ((this._state & 2) !== 0)
          return;
        this._zone.scheduleMicrotask$1(this.get$_sendDone());
        this._state = (this._state | 2) >>> 0;
      },
      onData$1: function(handleData) {
      },
      onError$1: function(_, handleError) {
      },
      onDone$1: function(handleDone) {
        this._onDone = handleDone;
      },
      pause$1: function(_, resumeSignal) {
        this._state += 4;
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        var t1 = this._state;
        if (t1 >= 4) {
          t1 -= 4;
          this._state = t1;
          if (t1 < 4 && (t1 & 1) === 0)
            this._schedule$0();
        }
      },
      cancel$0: function() {
        return;
      },
      asFuture$1: function(futureValue) {
        var result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = [null];
        this._onDone = new P._DoneStreamSubscription_asFuture_closure(result);
        return result;
      },
      _sendDone$0: [function() {
        var t1 = (this._state & 4294967293) >>> 0;
        this._state = t1;
        if (t1 >= 4)
          return;
        this._state = (t1 | 1) >>> 0;
        t1 = this._onDone;
        if (t1 != null)
          this._zone.runGuarded$1(t1);
      }, "call$0", "get$_sendDone", 0, 0, 0]
    },
    _DoneStreamSubscription_asFuture_closure: {
      "^": "Closure:1;_async$_captured_result_0",
      call$0: [function() {
        this._async$_captured_result_0._completeWithValue$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    _AsBroadcastStream: {
      "^": "Stream;_async$_source,_onListenHandler,_onCancelHandler,_zone<,_async$_controller,_subscription",
      get$isBroadcast: function() {
        return true;
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, t2, t3;
        t1 = this._async$_controller;
        if (t1 == null || (t1._state & 4) !== 0) {
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          t1._schedule$0();
          return t1;
        }
        if (this._subscription == null) {
          t1 = t1.get$add(t1);
          t2 = this._async$_controller.get$addError();
          t3 = this._async$_controller;
          this._subscription = this._async$_source.listen$3$onDone$onError(t1, t3.get$close(t3), t2);
        }
        return this._async$_controller._subscribe$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      _async$_onCancel$0: [function() {
        var t1, shutdown, t2;
        t1 = this._async$_controller;
        shutdown = t1 == null || (t1._state & 4) !== 0;
        t1 = this._onCancelHandler;
        if (t1 != null) {
          t2 = new P._BroadcastSubscriptionWrapper(this);
          t2.$builtinTypeInfo = [null];
          this._zone.runUnary$2(t1, t2);
        }
        if (shutdown) {
          t1 = this._subscription;
          if (t1 != null) {
            t1.cancel$0();
            this._subscription = null;
          }
        }
      }, "call$0", "get$_async$_onCancel", 0, 0, 0],
      _async$_onListen$0: [function() {
        var t1, t2;
        t1 = this._onListenHandler;
        if (t1 != null) {
          t2 = new P._BroadcastSubscriptionWrapper(this);
          t2.$builtinTypeInfo = [null];
          this._zone.runUnary$2(t1, t2);
        }
      }, "call$0", "get$_async$_onListen", 0, 0, 0],
      _cancelSubscription$0: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        this._subscription = null;
        this._async$_controller = null;
        t1.cancel$0();
      },
      _pauseSubscription$1: function(resumeSignal) {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$1(0, resumeSignal);
      },
      _resumeSubscription$0: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0();
      },
      get$_isSubscriptionPaused: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return false;
        return t1.get$isPaused();
      }
    },
    _BroadcastSubscriptionWrapper: {
      "^": "Object;_async$_stream",
      onData$1: function(handleData) {
        throw H.wrapException(new P.UnsupportedError("Cannot change handlers of asBroadcastStream source subscription."));
      },
      onError$1: function(_, handleError) {
        throw H.wrapException(new P.UnsupportedError("Cannot change handlers of asBroadcastStream source subscription."));
      },
      onDone$1: function(handleDone) {
        throw H.wrapException(new P.UnsupportedError("Cannot change handlers of asBroadcastStream source subscription."));
      },
      pause$1: function(_, resumeSignal) {
        this._async$_stream._pauseSubscription$1(resumeSignal);
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        this._async$_stream._resumeSubscription$0();
      },
      cancel$0: function() {
        this._async$_stream._cancelSubscription$0();
        return;
      },
      get$isPaused: function() {
        return this._async$_stream.get$_isSubscriptionPaused();
      },
      asFuture$1: function(futureValue) {
        throw H.wrapException(new P.UnsupportedError("Cannot change handlers of asBroadcastStream source subscription."));
      }
    },
    _StreamIteratorImpl: {
      "^": "Object;_subscription,_async$_current,_futureOrPrefetch,_state",
      _clear$0: function(_) {
        this._subscription = null;
        this._futureOrPrefetch = null;
        this._async$_current = null;
        this._state = 1;
      },
      cancel$0: function() {
        var subscription, hasNext;
        subscription = this._subscription;
        if (subscription == null)
          return;
        if (this._state === 2) {
          hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._complete$1(false);
        } else
          this._clear$0(0);
        return subscription.cancel$0();
      },
      _onData$1: [function(data) {
        var hasNext;
        if (this._state === 2) {
          this._async$_current = data;
          hasNext = this._futureOrPrefetch;
          this._futureOrPrefetch = null;
          this._state = 0;
          hasNext._complete$1(true);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = data;
        this._state = 3;
      }, "call$1", "get$_onData", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_StreamIteratorImpl");
      }, 37, []],
      _onError$2: [function(error, stackTrace) {
        var hasNext;
        if (this._state === 2) {
          hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._completeError$2(error, stackTrace);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = new P.AsyncError(error, stackTrace);
        this._state = 4;
      }, function(error) {
        return this._onError$2(error, null);
      }, "_onError$1", "call$2", "call$1", "get$_onError", 2, 2, 69, 0, 6, [], 15, []],
      _onDone$0: [function() {
        if (this._state === 2) {
          var hasNext = this._futureOrPrefetch;
          this._clear$0(0);
          hasNext._complete$1(false);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = null;
        this._state = 5;
      }, "call$0", "get$_onDone", 0, 0, 0]
    },
    _cancelAndError_closure: {
      "^": "Closure:1;_captured_future_0,_captured_error_1,_captured_stackTrace_2",
      call$0: [function() {
        return this._captured_future_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
      }, null, null, 0, 0, null, "call"]
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:57;_captured_subscription_0,_captured_future_1",
      call$2: function(error, stackTrace) {
        return P._cancelAndError(this._captured_subscription_0, this._captured_future_1, error, stackTrace);
      }
    },
    _cancelAndValue_closure: {
      "^": "Closure:1;_captured_future_0,_captured_value_1",
      call$0: [function() {
        return this._captured_future_0._complete$1(this._captured_value_1);
      }, null, null, 0, 0, null, "call"]
    },
    _ForwardingStream: {
      "^": "Stream;",
      get$isBroadcast: function() {
        return this._async$_source.get$isBroadcast();
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return P._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
      },
      _handleData$2: function(data, sink) {
        sink._async$_add$1(data);
      },
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _ForwardingStreamSubscription: {
      "^": "_BufferingStreamSubscription;_async$_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _async$_add$1: function(data) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_add(data);
      },
      _addError$2: function(error, stackTrace) {
        if ((this._state & 2) !== 0)
          return;
        this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
      },
      _onPause$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$0(0);
      }, "call$0", "get$_onPause", 0, 0, 0],
      _onResume$0: [function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0();
      }, "call$0", "get$_onResume", 0, 0, 0],
      _async$_onCancel$0: function() {
        var t1 = this._subscription;
        if (t1 != null) {
          this._subscription = null;
          t1.cancel$0();
        }
        return;
      },
      _handleData$1: [function(data) {
        this._async$_stream._handleData$2(data, this);
      }, "call$1", "get$_handleData", 2, 0, function() {
        return H.computeSignature(function(S, T) {
          return {func: 1, void: true, args: [S]};
        }, this.$receiver, "_ForwardingStreamSubscription");
      }, 37, []],
      _handleError$2: [function(error, stackTrace) {
        this._addError$2(error, stackTrace);
      }, "call$2", "get$_handleError", 4, 0, 79, 6, [], 15, []],
      _handleDone$0: [function() {
        this._async$_close$0();
      }, "call$0", "get$_handleDone", 0, 0, 0],
      _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
        var t1, t2;
        t1 = this.get$_handleData();
        t2 = this.get$_handleError();
        this._subscription = this._async$_stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      },
      static: {_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
          var t1 = $.Zone__current;
          t1 = new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
          t1.$builtinTypeInfo = [$S, $T];
          t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
          return t1;
        }}
    },
    _WhereStream: {
      "^": "_ForwardingStream;_test,_async$_source",
      _handleData$2: function(inputEvent, sink) {
        var satisfies, e, s, exception, t1;
        satisfies = null;
        try {
          satisfies = this._test$1(inputEvent);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        if (satisfies === true)
          sink._async$_add$1(inputEvent);
      },
      _test$1: function(arg0) {
        return this._test.call$1(arg0);
      },
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      },
      $asStream: null
    },
    _MapStream: {
      "^": "_ForwardingStream;_transform,_async$_source",
      _handleData$2: function(inputEvent, sink) {
        var outputEvent, e, s, exception, t1;
        outputEvent = null;
        try {
          outputEvent = this._transform$1(inputEvent);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._addErrorWithReplacement(sink, e, s);
          return;
        }
        sink._async$_add$1(outputEvent);
      },
      _transform$1: function(arg0) {
        return this._transform.call$1(arg0);
      }
    },
    Timer: {
      "^": "Object;"
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _ZoneFunction: {
      "^": "Object;zone<,$function"
    },
    ZoneSpecification: {
      "^": "Object;"
    },
    _ZoneSpecification: {
      "^": "Object;handleUncaughtError<,run<,runUnary<,runBinary<,registerCallback<,registerUnaryCallback<,registerBinaryCallback<,errorCallback<,scheduleMicrotask<,createTimer<,createPeriodicTimer<,print>,fork<",
      handleUncaughtError$2: function(arg0, arg1) {
        return this.handleUncaughtError.call$2(arg0, arg1);
      },
      handleUncaughtError$3: function(arg0, arg1, arg2) {
        return this.handleUncaughtError.call$3(arg0, arg1, arg2);
      },
      run$1: function(arg0) {
        return this.run.call$1(arg0);
      },
      runUnary$2: function(arg0, arg1) {
        return this.runUnary.call$2(arg0, arg1);
      },
      runBinary$3: function(arg0, arg1, arg2) {
        return this.runBinary.call$3(arg0, arg1, arg2);
      },
      registerCallback$1: function(arg0) {
        return this.registerCallback.call$1(arg0);
      },
      registerUnaryCallback$1: function(arg0) {
        return this.registerUnaryCallback.call$1(arg0);
      },
      registerBinaryCallback$1: function(arg0) {
        return this.registerBinaryCallback.call$1(arg0);
      },
      errorCallback$2: function(arg0, arg1) {
        return this.errorCallback.call$2(arg0, arg1);
      },
      scheduleMicrotask$1: function(arg0) {
        return this.scheduleMicrotask.call$1(arg0);
      },
      createTimer$2: function(arg0, arg1) {
        return this.createTimer.call$2(arg0, arg1);
      },
      createPeriodicTimer$2: function(arg0, arg1) {
        return this.createPeriodicTimer.call$2(arg0, arg1);
      },
      print$1: function($receiver, arg0) {
        return this.print.call$1(arg0);
      },
      fork$2$specification$zoneValues: function(arg0, arg1) {
        return this.fork.call$2$specification$zoneValues(arg0, arg1);
      }
    },
    ZoneDelegate: {
      "^": "Object;"
    },
    Zone: {
      "^": "Object;"
    },
    _ZoneDelegate: {
      "^": "Object;_delegationTarget",
      handleUncaughtError$3: [function(zone, error, stackTrace) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_handleUncaughtError();
        implZone = implementation.zone;
        return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, error, stackTrace);
      }, "call$3", "get$handleUncaughtError", 6, 0, 386],
      run$2: [function(zone, f) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_run();
        implZone = implementation.zone;
        return implementation.$function.call$4(implZone, P._parentDelegate(implZone), zone, f);
      }, "call$2", "get$run", 4, 0, 198],
      runUnary$3: [function(zone, f, arg) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_runUnary();
        implZone = implementation.zone;
        return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, f, arg);
      }, "call$3", "get$runUnary", 6, 0, 205],
      runBinary$4: [function(zone, f, arg1, arg2) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_runBinary();
        implZone = implementation.zone;
        return implementation.$function.call$6(implZone, P._parentDelegate(implZone), zone, f, arg1, arg2);
      }, "call$4", "get$runBinary", 8, 0, 208],
      registerCallback$2: [function(zone, f) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_registerCallback();
        implZone = implementation.zone;
        return implementation.$function.call$4(implZone, P._parentDelegate(implZone), zone, f);
      }, "call$2", "get$registerCallback", 4, 0, 213],
      registerUnaryCallback$2: [function(zone, f) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_registerUnaryCallback();
        implZone = implementation.zone;
        return implementation.$function.call$4(implZone, P._parentDelegate(implZone), zone, f);
      }, "call$2", "get$registerUnaryCallback", 4, 0, 228],
      registerBinaryCallback$2: [function(zone, f) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_registerBinaryCallback();
        implZone = implementation.zone;
        return implementation.$function.call$4(implZone, P._parentDelegate(implZone), zone, f);
      }, "call$2", "get$registerBinaryCallback", 4, 0, 327],
      errorCallback$3: [function(zone, error, stackTrace) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_errorCallback();
        implZone = implementation.zone;
        if (implZone === C.C__RootZone)
          return;
        return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, error, stackTrace);
      }, "call$3", "get$errorCallback", 6, 0, 342],
      scheduleMicrotask$2: [function(zone, f) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_scheduleMicrotask();
        implZone = implementation.zone;
        implementation.$function.call$4(implZone, P._parentDelegate(implZone), zone, f);
      }, "call$2", "get$scheduleMicrotask", 4, 0, 358],
      createTimer$3: [function(zone, duration, f) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_createTimer();
        implZone = implementation.zone;
        return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, duration, f);
      }, "call$3", "get$createTimer", 6, 0, 363],
      createPeriodicTimer$3: [function(zone, period, f) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_createPeriodicTimer();
        implZone = implementation.zone;
        return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, period, f);
      }, "call$3", "get$createPeriodicTimer", 6, 0, 425],
      print$2: [function(_, zone, line) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_print();
        implZone = implementation.zone;
        implementation.$function.call$4(implZone, P._parentDelegate(implZone), zone, line);
      }, "call$2", "get$print", 4, 0, 168],
      fork$3: [function(zone, specification, zoneValues) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_fork();
        implZone = implementation.zone;
        return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, specification, zoneValues);
      }, "call$3", "get$fork", 6, 0, 169]
    },
    _Zone: {
      "^": "Object;",
      inSameErrorZone$1: function(otherZone) {
        return this === otherZone || this.get$errorZone() === otherZone.get$errorZone();
      }
    },
    _CustomZone: {
      "^": "_Zone;_runUnary<,_run<,_runBinary<,_registerCallback<,_registerUnaryCallback<,_registerBinaryCallback<,_errorCallback<,_scheduleMicrotask<,_createTimer<,_createPeriodicTimer<,_print<,_fork<,_handleUncaughtError<,_delegateCache,parent>,_async$_map<",
      get$_delegate: function() {
        var t1 = this._delegateCache;
        if (t1 != null)
          return t1;
        t1 = new P._ZoneDelegate(this);
        this._delegateCache = t1;
        return t1;
      },
      get$errorZone: function() {
        return this._handleUncaughtError.zone;
      },
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          t1 = this.run$1(f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return this.handleUncaughtError$2(e, s);
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          t1 = this.runUnary$2(f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return this.handleUncaughtError$2(e, s);
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          t1 = this.runBinary$3(f, arg1, arg2);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return this.handleUncaughtError$2(e, s);
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        var registered = this.registerCallback$1(f);
        if (runGuarded)
          return new P._CustomZone_bindCallback_closure(this, registered);
        else
          return new P._CustomZone_bindCallback_closure0(this, registered);
      },
      bindCallback$1: function(f) {
        return this.bindCallback$2$runGuarded(f, true);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        var registered = this.registerUnaryCallback$1(f);
        if (runGuarded)
          return new P._CustomZone_bindUnaryCallback_closure(this, registered);
        else
          return new P._CustomZone_bindUnaryCallback_closure0(this, registered);
      },
      bindUnaryCallback$1: function(f) {
        return this.bindUnaryCallback$2$runGuarded(f, true);
      },
      $index: function(_, key) {
        var t1, result, t2, value;
        t1 = this._async$_map;
        result = t1.$index(0, key);
        if (result != null || t1.containsKey$1(0, key))
          return result;
        t2 = this.parent;
        if (t2 != null) {
          value = J.$index$asx(t2, key);
          if (value != null)
            t1.$indexSet(0, key, value);
          return value;
        }
        return;
      },
      handleUncaughtError$2: [function(error, stackTrace) {
        var implementation, t1, parentDelegate;
        implementation = this._handleUncaughtError;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, error, stackTrace);
      }, "call$2", "get$handleUncaughtError", 4, 0, 57],
      fork$2$specification$zoneValues: [function(specification, zoneValues) {
        var implementation, t1, parentDelegate;
        implementation = this._fork;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, specification, zoneValues);
      }, function() {
        return this.fork$2$specification$zoneValues(null, null);
      }, "fork$0", "call$2$specification$zoneValues", "call$0", "get$fork", 0, 5, 108, 0, 0],
      run$1: [function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._run;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      }, "call$1", "get$run", 2, 0, 99],
      runUnary$2: [function(f, arg) {
        var implementation, t1, parentDelegate;
        implementation = this._runUnary;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, f, arg);
      }, "call$2", "get$runUnary", 4, 0, 122],
      runBinary$3: [function(f, arg1, arg2) {
        var implementation, t1, parentDelegate;
        implementation = this._runBinary;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$6(t1, parentDelegate, this, f, arg1, arg2);
      }, "call$3", "get$runBinary", 6, 0, 123],
      registerCallback$1: [function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._registerCallback;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      }, "call$1", "get$registerCallback", 2, 0, 124],
      registerUnaryCallback$1: [function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._registerUnaryCallback;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      }, "call$1", "get$registerUnaryCallback", 2, 0, 125],
      registerBinaryCallback$1: [function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._registerBinaryCallback;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      }, "call$1", "get$registerBinaryCallback", 2, 0, 127],
      errorCallback$2: [function(error, stackTrace) {
        var implementation, implementationZone, parentDelegate;
        implementation = this._errorCallback;
        implementationZone = implementation.zone;
        if (implementationZone === C.C__RootZone)
          return;
        parentDelegate = P._parentDelegate(implementationZone);
        return implementation.$function.call$5(implementationZone, parentDelegate, this, error, stackTrace);
      }, "call$2", "get$errorCallback", 4, 0, 128],
      scheduleMicrotask$1: [function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._scheduleMicrotask;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      }, "call$1", "get$scheduleMicrotask", 2, 0, 40],
      createTimer$2: [function(duration, f) {
        var implementation, t1, parentDelegate;
        implementation = this._createTimer;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, duration, f);
      }, "call$2", "get$createTimer", 4, 0, 131],
      createPeriodicTimer$2: [function(duration, f) {
        var implementation, t1, parentDelegate;
        implementation = this._createPeriodicTimer;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, duration, f);
      }, "call$2", "get$createPeriodicTimer", 4, 0, 132],
      print$1: [function(_, line) {
        var implementation, t1, parentDelegate;
        implementation = this._print;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, line);
      }, "call$1", "get$print", 2, 0, 17]
    },
    _CustomZone_bindCallback_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_registered_1",
      call$0: [function() {
        return this._async$_captured_this_0.runGuarded$1(this._captured_registered_1);
      }, null, null, 0, 0, null, "call"]
    },
    _CustomZone_bindCallback_closure0: {
      "^": "Closure:1;_captured_this_2,_captured_registered_3",
      call$0: [function() {
        return this._captured_this_2.run$1(this._captured_registered_3);
      }, null, null, 0, 0, null, "call"]
    },
    _CustomZone_bindUnaryCallback_closure: {
      "^": "Closure:2;_async$_captured_this_0,_captured_registered_1",
      call$1: [function(arg) {
        return this._async$_captured_this_0.runUnaryGuarded$2(this._captured_registered_1, arg);
      }, null, null, 2, 0, null, 48, [], "call"]
    },
    _CustomZone_bindUnaryCallback_closure0: {
      "^": "Closure:2;_captured_this_2,_captured_registered_3",
      call$1: [function(arg) {
        return this._captured_this_2.runUnary$2(this._captured_registered_3, arg);
      }, null, null, 2, 0, null, 48, [], "call"]
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:1;_async$_captured_error_0,_captured_stackTrace_1",
      call$0: function() {
        var t1 = this._async$_captured_error_0;
        throw H.wrapException(new P._UncaughtAsyncError(t1, P._UncaughtAsyncError__getBestStackTrace(t1, this._captured_stackTrace_1)));
      }
    },
    _RootZone: {
      "^": "_Zone;",
      get$_run: function() {
        return C._ZoneFunction__RootZone__rootRun;
      },
      get$_runUnary: function() {
        return C._ZoneFunction__RootZone__rootRunUnary;
      },
      get$_runBinary: function() {
        return C._ZoneFunction__RootZone__rootRunBinary;
      },
      get$_registerCallback: function() {
        return C._ZoneFunction__RootZone__rootRegisterCallback;
      },
      get$_registerUnaryCallback: function() {
        return C._ZoneFunction_Eeh;
      },
      get$_registerBinaryCallback: function() {
        return C._ZoneFunction_7G2;
      },
      get$_errorCallback: function() {
        return C._ZoneFunction__RootZone__rootErrorCallback;
      },
      get$_scheduleMicrotask: function() {
        return C._ZoneFunction__RootZone__rootScheduleMicrotask;
      },
      get$_createTimer: function() {
        return C._ZoneFunction__RootZone__rootCreateTimer;
      },
      get$_createPeriodicTimer: function() {
        return C._ZoneFunction_3bB;
      },
      get$_print: function() {
        return C._ZoneFunction__RootZone__rootPrint;
      },
      get$_fork: function() {
        return C._ZoneFunction__RootZone__rootFork;
      },
      get$_handleUncaughtError: function() {
        return C._ZoneFunction_NMc;
      },
      get$parent: function(_) {
        return;
      },
      get$_async$_map: function() {
        return $.$get$_RootZone__rootMap();
      },
      get$_delegate: function() {
        var t1 = $._RootZone__rootDelegate;
        if (t1 != null)
          return t1;
        t1 = new P._ZoneDelegate(this);
        $._RootZone__rootDelegate = t1;
        return t1;
      },
      get$errorZone: function() {
        return this;
      },
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$0();
            return t1;
          }
          t1 = P._rootRun(null, null, this, f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$1(arg);
            return t1;
          }
          t1 = P._rootRunUnary(null, null, this, f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$2(arg1, arg2);
            return t1;
          }
          t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindCallback_closure(this, f);
        else
          return new P._RootZone_bindCallback_closure0(this, f);
      },
      bindCallback$1: function(f) {
        return this.bindCallback$2$runGuarded(f, true);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindUnaryCallback_closure(this, f);
        else
          return new P._RootZone_bindUnaryCallback_closure0(this, f);
      },
      bindUnaryCallback$1: function(f) {
        return this.bindUnaryCallback$2$runGuarded(f, true);
      },
      $index: function(_, key) {
        return;
      },
      handleUncaughtError$2: [function(error, stackTrace) {
        return P._rootHandleUncaughtError(null, null, this, error, stackTrace);
      }, "call$2", "get$handleUncaughtError", 4, 0, 57],
      fork$2$specification$zoneValues: [function(specification, zoneValues) {
        return P._rootFork(null, null, this, specification, zoneValues);
      }, function() {
        return this.fork$2$specification$zoneValues(null, null);
      }, "fork$0", "call$2$specification$zoneValues", "call$0", "get$fork", 0, 5, 108, 0, 0],
      run$1: [function(f) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f);
      }, "call$1", "get$run", 2, 0, 99],
      runUnary$2: [function(f, arg) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg);
      }, "call$2", "get$runUnary", 4, 0, 122],
      runBinary$3: [function(f, arg1, arg2) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2);
      }, "call$3", "get$runBinary", 6, 0, 123],
      registerCallback$1: [function(f) {
        return f;
      }, "call$1", "get$registerCallback", 2, 0, 124],
      registerUnaryCallback$1: [function(f) {
        return f;
      }, "call$1", "get$registerUnaryCallback", 2, 0, 125],
      registerBinaryCallback$1: [function(f) {
        return f;
      }, "call$1", "get$registerBinaryCallback", 2, 0, 127],
      errorCallback$2: [function(error, stackTrace) {
        return;
      }, "call$2", "get$errorCallback", 4, 0, 128],
      scheduleMicrotask$1: [function(f) {
        P._rootScheduleMicrotask(null, null, this, f);
      }, "call$1", "get$scheduleMicrotask", 2, 0, 40],
      createTimer$2: [function(duration, f) {
        return P.Timer__createTimer(duration, f);
      }, "call$2", "get$createTimer", 4, 0, 131],
      createPeriodicTimer$2: [function(duration, f) {
        return P.Timer__createPeriodicTimer(duration, f);
      }, "call$2", "get$createPeriodicTimer", 4, 0, 132],
      print$1: [function(_, line) {
        H.printString(line);
      }, "call$1", "get$print", 2, 0, 17]
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure:1;_async$_captured_this_0,_captured_f_1",
      call$0: [function() {
        return this._async$_captured_this_0.runGuarded$1(this._captured_f_1);
      }, null, null, 0, 0, null, "call"]
    },
    _RootZone_bindCallback_closure0: {
      "^": "Closure:1;_captured_this_2,_captured_f_3",
      call$0: [function() {
        return this._captured_this_2.run$1(this._captured_f_3);
      }, null, null, 0, 0, null, "call"]
    },
    _RootZone_bindUnaryCallback_closure: {
      "^": "Closure:2;_async$_captured_this_0,_captured_f_1",
      call$1: [function(arg) {
        return this._async$_captured_this_0.runUnaryGuarded$2(this._captured_f_1, arg);
      }, null, null, 2, 0, null, 48, [], "call"]
    },
    _RootZone_bindUnaryCallback_closure0: {
      "^": "Closure:2;_captured_this_2,_captured_f_3",
      call$1: [function(arg) {
        return this._captured_this_2.runUnary$2(this._captured_f_3, arg);
      }, null, null, 2, 0, null, 48, [], "call"]
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    _defaultEquals: [function(a, b) {
      return J.$eq$(a, b);
    }, "call$2", "collection___defaultEquals$closure", 4, 0, 227],
    _defaultHashCode: [function(a) {
      return J.get$hashCode$(a);
    }, "call$1", "collection___defaultHashCode$closure", 2, 0, 115, 122, []],
    HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
      var t1 = new P._HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$K, $V];
      return t1;
    },
    HashMap_HashMap$from: function(other, $K, $V) {
      var result = P.HashMap_HashMap(null, null, null, $K, $V);
      J.forEach$1$ax(other, new P.HashMap_HashMap$from_closure(result));
      return result;
    },
    HashSet_HashSet: function(equals, hashCode, isValidKey, $E) {
      var t1 = new P._HashSet(0, null, null, null, null);
      t1.$builtinTypeInfo = [$E];
      return t1;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      t1.push(iterable);
      try {
        t2 = buffer;
        t2.set$_contents(P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", "));
      } finally {
        t1.pop();
      }
      t1 = buffer;
      t1.set$_contents(t1.get$_contents() + rightDelimiter);
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i) {
        t1 = t1[i];
        if (o == null ? t1 == null : o === t1)
          return true;
      }
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = parts.pop();
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
      t1.$builtinTypeInfo = [$E];
      return t1;
    },
    Maps_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        $.$get$_toStringVisiting().push(m);
        t2 = result;
        t2.set$_contents(t2.get$_contents() + "{");
        t1._captured_first_0 = true;
        J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
        t1 = result;
        t1.set$_contents(t1.get$_contents() + "}");
      } finally {
        $.$get$_toStringVisiting().pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Maps__id: [function(x) {
      return x;
    }, "call$1", "collection_Maps__id$closure", 2, 0, 2],
    Maps__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var t1, element;
      if (key == null)
        key = P.collection_Maps__id$closure();
      if (value == null)
        value = P.collection_Maps__id$closure();
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        element = t1.get$current();
        map.$indexSet(0, key.call$1(element), value.call$1(element));
      }
    },
    Maps__fillMapWithIterables: function(map, keys, values) {
      var keyIterator, valueIterator, hasNextKey, hasNextValue;
      keyIterator = J.get$iterator$ax(keys);
      valueIterator = J.get$iterator$ax(values);
      hasNextKey = keyIterator.moveNext$0();
      hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(), valueIterator.get$current());
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw H.wrapException(P.ArgumentError$("Iterables do not have same length."));
    },
    _HashMap: {
      "^": "Object;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_keys",
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      get$keys: function(_) {
        var t1 = new P.HashMapKeyIterable(this);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        return t1;
      },
      get$values: function(_) {
        var t1 = new P.HashMapKeyIterable(this);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          return strings == null ? false : strings[key] != null;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          return nums == null ? false : nums[key] != null;
        } else
          return this._containsKey$1(key);
      },
      _containsKey$1: function(key) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      },
      addAll$1: function(_, other) {
        J.forEach$1$ax(other, new P._HashMap_addAll_closure(this));
      },
      $index: function(_, key) {
        var strings, t1, entry, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            t1 = null;
          else {
            entry = strings[key];
            t1 = entry === strings ? null : entry;
          }
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null)
            t1 = null;
          else {
            entry = nums[key];
            t1 = entry === nums ? null : entry;
          }
          return t1;
        } else
          return this._get$1(key);
      },
      _get$1: function(key) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            strings = P._HashMap__newHashTable();
            this._collection$_strings = strings;
          }
          this._collection$_addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._HashMap__newHashTable();
            this._collection$_nums = nums;
          }
          this._collection$_addHashTableEntry$3(nums, key, value);
        } else
          this._set$2(key, value);
      },
      _set$2: function(key, value) {
        var rest, hash, bucket, index;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          ++this._collection$_length;
          this._collection$_keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            ++this._collection$_length;
            this._collection$_keys = null;
          }
        }
      },
      remove$1: function(_, key) {
        if (typeof key === "string" && key !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, key);
        else
          return this._remove$1(key);
      },
      _remove$1: function(key) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        --this._collection$_length;
        this._collection$_keys = null;
        return bucket.splice(index, 2)[1];
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_keys = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
        }
      },
      forEach$1: function(_, action) {
        var keys, $length, i, key;
        keys = this._collection$_computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          key = keys[i];
          action.call$2(key, this.$index(0, key));
          if (keys !== this._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      _collection$_computeKeys$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._collection$_keys;
        if (t1 != null)
          return t1;
        result = Array(this._collection$_length);
        result.fixed$length = Array;
        strings = this._collection$_strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._collection$_nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._collection$_rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; i0 += 2) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._collection$_keys = result;
        return result;
      },
      _collection$_addHashTableEntry$3: function(table, key, value) {
        if (table[key] == null) {
          ++this._collection$_length;
          this._collection$_keys = null;
        }
        P._HashMap__setTableEntry(table, key, value);
      },
      _collection$_removeHashTableEntry$2: function(table, key) {
        var value;
        if (table != null && table[key] != null) {
          value = P._HashMap__getTableEntry(table, key);
          delete table[key];
          --this._collection$_length;
          this._collection$_keys = null;
          return value;
        } else
          return;
      },
      _computeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2)
          if (J.$eq$(bucket[i], key))
            return i;
        return -1;
      },
      $isMap: 1,
      $asMap: null,
      static: {_HashMap__getTableEntry: function(table, key) {
          var entry = table[key];
          return entry === table ? null : entry;
        }, _HashMap__setTableEntry: function(table, key, value) {
          if (value == null)
            table[key] = table;
          else
            table[key] = value;
        }, _HashMap__newHashTable: function() {
          var table = Object.create(null);
          P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
          delete table["<non-identifier-key>"];
          return table;
        }}
    },
    _HashMap_values_closure: {
      "^": "Closure:2;_collection$_captured_this_0",
      call$1: [function(each) {
        return this._collection$_captured_this_0.$index(0, each);
      }, null, null, 2, 0, null, 68, [], "call"]
    },
    _HashMap_addAll_closure: {
      "^": "Closure;_collection$_captured_this_0",
      call$2: [function(key, value) {
        this._collection$_captured_this_0.$indexSet(0, key, value);
      }, null, null, 4, 0, null, 11, [], 1, [], "call"],
      $signature: function() {
        return H.computeSignature(function(K, V) {
          return {func: 1, args: [K, V]};
        }, this._collection$_captured_this_0, "_HashMap");
      }
    },
    HashMapKeyIterable: {
      "^": "Iterable;_map",
      get$length: function(_) {
        return this._map._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._map._collection$_length === 0;
      },
      get$iterator: function(_) {
        var t1 = this._map;
        t1 = new P.HashMapKeyIterator(t1, t1._collection$_computeKeys$0(), 0, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      contains$1: function(_, element) {
        return this._map.containsKey$1(0, element);
      },
      forEach$1: function(_, f) {
        var t1, keys, $length, i;
        t1 = this._map;
        keys = t1._collection$_computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          f.call$1(keys[i]);
          if (keys !== t1._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
        }
      },
      $isEfficientLength: 1
    },
    HashMapKeyIterator: {
      "^": "Object;_map,_collection$_keys,_offset,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var keys, offset, t1;
        keys = this._collection$_keys;
        offset = this._offset;
        t1 = this._map;
        if (keys !== t1._collection$_keys)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else if (offset >= keys.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = keys[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      internalComputeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i) {
          t1 = bucket[i].get$hashMapCellKey();
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      },
      static: {_LinkedIdentityHashMap__LinkedIdentityHashMap$es6: function($K, $V) {
          var t1 = new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [$K, $V];
          return t1;
        }}
    },
    _LinkedCustomHashMap: {
      "^": "JsLinkedHashMap;_equals,_hashCode,_validKey,__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      $index: function(_, key) {
        if (this._validKey$1(key) !== true)
          return;
        return this.super$JsLinkedHashMap$internalGet(key);
      },
      $indexSet: function(_, key, value) {
        this.super$JsLinkedHashMap$internalSet(key, value);
      },
      containsKey$1: function(_, key) {
        if (this._validKey$1(key) !== true)
          return false;
        return this.super$JsLinkedHashMap$internalContainsKey(key);
      },
      remove$1: function(_, key) {
        if (this._validKey$1(key) !== true)
          return;
        return this.super$JsLinkedHashMap$internalRemove(key);
      },
      internalComputeHashCode$1: function(key) {
        return this._hashCode$1(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (this._equals$2(bucket[i].get$hashMapCellKey(), key) === true)
            return i;
        return -1;
      },
      _equals$2: function(arg0, arg1) {
        return this._equals.call$2(arg0, arg1);
      },
      _hashCode$1: function(arg0) {
        return this._hashCode.call$1(arg0);
      },
      _validKey$1: function(arg0) {
        return this._validKey.call$1(arg0);
      },
      static: {_LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
          var t1 = new P._LinkedCustomHashMap(_equals, _hashCode, validKey != null ? validKey : new P._LinkedCustomHashMap_closure($K), 0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [$K, $V];
          return t1;
        }}
    },
    _LinkedCustomHashMap_closure: {
      "^": "Closure:2;_captured_K_0",
      call$1: function(v) {
        var t1 = H.checkSubtypeOfRuntimeType(v, this._captured_K_0);
        return t1;
      }
    },
    _HashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_elements",
      get$iterator: function(_) {
        var t1 = new P.HashSetIterator(this, this._computeElements$0(), 0, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          return strings == null ? false : strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          return nums == null ? false : nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1;
        if (!(typeof object === "string" && object !== "__proto__"))
          t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        else
          t1 = true;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index);
      },
      add$1: function(_, element) {
        var strings, table, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_strings = table;
            strings = table;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_nums = table;
            nums = table;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._HashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [element];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(element);
        }
        ++this._collection$_length;
        this._elements = null;
        return true;
      },
      addAll$1: function(_, objects) {
        var t1;
        for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        --this._collection$_length;
        this._elements = null;
        bucket.splice(index, 1);
        return true;
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._elements = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
        }
      },
      _computeElements$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._elements;
        if (t1 != null)
          return t1;
        result = Array(this._collection$_length);
        result.fixed$length = Array;
        strings = this._collection$_strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._collection$_nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._collection$_rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; ++i0) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._elements = result;
        return result;
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = 0;
        ++this._collection$_length;
        this._elements = null;
        return true;
      },
      _collection$_removeHashTableEntry$2: function(table, element) {
        if (table != null && table[element] != null) {
          delete table[element];
          --this._collection$_length;
          this._elements = null;
          return true;
        } else
          return false;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i], element))
            return i;
        return -1;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {_HashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }}
    },
    HashSetIterator: {
      "^": "Object;_set,_elements,_offset,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var elements, offset, t1;
        elements = this._elements;
        offset = this._offset;
        t1 = this._set;
        if (elements !== t1._elements)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else if (offset >= elements.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = elements[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications",
      get$iterator: function(_) {
        var t1 = new P.LinkedHashSetIterator(this, this._collection$_modifications, null, null);
        t1.$builtinTypeInfo = [null];
        t1._collection$_cell = this._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1;
        if (!(typeof object === "string" && object !== "__proto__"))
          t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        else
          t1 = true;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        else
          return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_element();
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._collection$_first;
        modifications = this._collection$_modifications;
        for (; cell != null;) {
          action.call$1(cell.get$_element());
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell.get$_collection$_next();
        }
      },
      get$last: function(_) {
        var t1 = this._collection$_last;
        if (t1 == null)
          throw H.wrapException(new P.StateError("No elements"));
        return t1.get$_element();
      },
      add$1: function(_, element) {
        var strings, table, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_strings = table;
            strings = table;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_nums = table;
            nums = table;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_last = null;
          this._collection$_first = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
          this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        }
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _collection$_removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = table[element];
        if (cell == null)
          return false;
        this._collection$_unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P.LinkedHashSetCell(element, null, null);
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last.set$_collection$_next(cell);
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        return cell;
      },
      _collection$_unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell.get$_collection$_previous();
        next = cell.get$_collection$_next();
        if (previous == null)
          this._collection$_first = next;
        else
          previous.set$_collection$_next(next);
        if (next == null)
          this._collection$_last = previous;
        else
          next.set$_collection$_previous(previous);
        --this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].get$_element(), element))
            return i;
        return -1;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {_LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }}
    },
    LinkedHashSetCell: {
      "^": "Object;_element<,_collection$_next@,_collection$_previous@"
    },
    LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,_collection$_cell,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._collection$_cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = t1.get$_element();
            this._collection$_cell = this._collection$_cell.get$_collection$_next();
            return true;
          }
        }
      }
    },
    UnmodifiableListView: {
      "^": "UnmodifiableListBase;_source",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      $index: function(_, index) {
        return J.elementAt$1$ax(this._source, index);
      }
    },
    HashMap_HashMap$from_closure: {
      "^": "Closure:4;_collection$_captured_result_0",
      call$2: [function(k, v) {
        this._collection$_captured_result_0.$indexSet(0, k, v);
      }, null, null, 4, 0, null, 40, [], 28, [], "call"]
    },
    _HashSetBase: {
      "^": "SetBase;"
    },
    IterableBase: {
      "^": "Iterable;"
    },
    LinkedHashMap: {
      "^": "Object;",
      $isMap: 1,
      $asMap: null,
      "<>": [86, 101],
      static: {LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
          var t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [$K, $V];
          return t1;
        }, LinkedHashMap__makeEmpty: [function() {
          var t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [null, null];
          return t1;
        }, "call$0", "collection_LinkedHashMap__makeEmpty$closure", 0, 0, 1, "_makeEmpty"], LinkedHashMap__makeLiteral: [function(keyValuePairs) {
          var t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [null, null];
          return H.fillLiteralMap(keyValuePairs, t1);
        }, "call$1", "collection_LinkedHashMap__makeLiteral$closure", 2, 0, 2, 121, [], "_makeLiteral"], LinkedHashMap_LinkedHashMap: [function(equals, hashCode, isValidKey, $K, $V) {
          var t1;
          if (isValidKey == null)
            if (hashCode == null) {
              if (equals == null) {
                t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
                t1.$builtinTypeInfo = [$K, $V];
                return t1;
              }
              hashCode = P.collection___defaultHashCode$closure();
            } else {
              if (P.core__identityHashCode$closure() === hashCode && P.core__identical$closure() === equals)
                return P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6($K, $V);
              if (equals == null)
                equals = P.collection___defaultEquals$closure();
            }
          else {
            if (hashCode == null)
              hashCode = P.collection___defaultHashCode$closure();
            if (equals == null)
              equals = P.collection___defaultEquals$closure();
          }
          return P._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
        }, null, null, 0, 7, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V], named: {equals: {func: 1, ret: P.bool, args: [K, K]}, hashCode: {func: 1, ret: P.$int, args: [K]}, isValidKey: {func: 1, ret: P.bool, args: [,]}}};
          }, this.$receiver, "LinkedHashMap");
        }, 0, 0, 0, 123, [], 127, [], 130, [], "new LinkedHashMap"], LinkedHashMap_LinkedHashMap$identity: [function($K, $V) {
          return P._LinkedIdentityHashMap__LinkedIdentityHashMap$es6($K, $V);
        }, null, null, 0, 0, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V]};
          }, this.$receiver, "LinkedHashMap");
        }, "new LinkedHashMap$identity"], LinkedHashMap_LinkedHashMap$from: [function(other, $K, $V) {
          var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
          J.forEach$1$ax(other, new P.LinkedHashMap_LinkedHashMap$from_closure(result));
          return result;
        }, null, null, 2, 0, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V], args: [P.Map]};
          }, this.$receiver, "LinkedHashMap");
        }, 69, [], "new LinkedHashMap$from"], LinkedHashMap_LinkedHashMap$fromIterable: [function(iterable, key, value, $K, $V) {
          var map = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
          P.Maps__fillMapWithMappedIterable(map, iterable, key, value);
          return map;
        }, null, null, 2, 5, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V], args: [P.Iterable], named: {key: {func: 1, ret: K, args: [,]}, value: {func: 1, ret: V, args: [,]}}};
          }, this.$receiver, "LinkedHashMap");
        }, 0, 0, 132, [], 11, [], 1, [], "new LinkedHashMap$fromIterable"], LinkedHashMap_LinkedHashMap$fromIterables: [function(keys, values, $K, $V) {
          var map = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
          P.Maps__fillMapWithIterables(map, keys, values);
          return map;
        }, null, null, 4, 0, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V], args: [[P.Iterable, K], [P.Iterable, V]]};
          }, this.$receiver, "LinkedHashMap");
        }, 134, [], 93, [], "new LinkedHashMap$fromIterables"]}
    },
    "+LinkedHashMap": [3, 321],
    LinkedHashMap_LinkedHashMap$from_closure: {
      "^": "Closure:4;_collection$_captured_result_0",
      call$2: [function(k, v) {
        this._collection$_captured_result_0.$indexSet(0, k, v);
      }, null, null, 4, 0, 4, 40, [], 28, [], "call"]
    },
    LinkedList: {
      "^": "Iterable;_modificationCount,_collection$_length,_collection$_next@,_collection$_previous@",
      addFirst$1: function(entry) {
        this._insertAfter$2(this, entry);
      },
      add$1: function(_, entry) {
        this._insertAfter$2(this._collection$_previous, entry);
      },
      addAll$1: function(_, entries) {
        J.forEach$1$ax(entries, new P.LinkedList_addAll_closure(this));
      },
      remove$1: function(_, entry) {
        if (entry.get$_collection$_list() !== this)
          return false;
        this._unlink$1(entry);
        return true;
      },
      get$iterator: function(_) {
        var t1 = new P._LinkedListIterator(this, this._modificationCount, null, this._collection$_next);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      clear$0: function(_) {
        var next, next0;
        ++this._modificationCount;
        next = this._collection$_next;
        for (; next !== this; next = next0) {
          next0 = next.get$_collection$_next();
          next.set$_collection$_list(null);
          next.set$_collection$_previous(null);
          next.set$_collection$_next(null);
        }
        this._collection$_previous = this;
        this._collection$_next = this;
        this._collection$_length = 0;
      },
      get$first: function(_) {
        var t1 = this._collection$_next;
        if (t1 === this)
          throw H.wrapException(new P.StateError("No such element"));
        return t1;
      },
      get$last: function(_) {
        var t1 = this._collection$_previous;
        if (t1 === this)
          throw H.wrapException(new P.StateError("No such element"));
        return t1;
      },
      get$single: function(_) {
        var t1, t2;
        t1 = this._collection$_previous;
        if (t1 === this)
          throw H.wrapException(new P.StateError("No such element"));
        t2 = this._collection$_next;
        if (t1 == null ? t2 != null : t1 !== t2)
          throw H.wrapException(new P.StateError("Too many elements"));
        return t2;
      },
      forEach$1: function(_, action) {
        var modificationCount, current;
        modificationCount = this._modificationCount;
        current = this._collection$_next;
        for (; current !== this;) {
          action.call$1(current);
          if (modificationCount !== this._modificationCount)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          current = current.get$_collection$_next();
        }
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      _insertAfter$2: function(entry, newEntry) {
        var successor;
        if (J.get$list$x(newEntry) != null)
          throw H.wrapException(new P.StateError("LinkedListEntry is already in a LinkedList"));
        ++this._modificationCount;
        newEntry.set$_collection$_list(this);
        successor = entry.get$_collection$_next();
        successor.set$_collection$_previous(newEntry);
        newEntry.set$_collection$_previous(entry);
        newEntry.set$_collection$_next(successor);
        entry.set$_collection$_next(newEntry);
        ++this._collection$_length;
      },
      _unlink$1: function(entry) {
        ++this._modificationCount;
        entry.get$_collection$_next().set$_collection$_previous(entry.get$_collection$_previous());
        entry.get$_collection$_previous().set$_collection$_next(entry.get$_collection$_next());
        --this._collection$_length;
        entry.set$_collection$_previous(null);
        entry.set$_collection$_next(null);
        entry.set$_collection$_list(null);
      },
      LinkedList$0: function($E) {
        this._collection$_previous = this;
        this._collection$_next = this;
      }
    },
    LinkedList_addAll_closure: {
      "^": "Closure:2;_collection$_captured_this_0",
      call$1: [function(entry) {
        var t1 = this._collection$_captured_this_0;
        return t1._insertAfter$2(t1._collection$_previous, entry);
      }, null, null, 2, 0, null, 137, [], "call"]
    },
    _LinkedListIterator: {
      "^": "Object;_collection$_list<,_modificationCount,_collection$_current,_collection$_next@",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2;
        t1 = this._collection$_next;
        t2 = this._collection$_list;
        if (t1 === t2) {
          this._collection$_current = null;
          return false;
        }
        if (this._modificationCount !== t2._modificationCount)
          throw H.wrapException(new P.ConcurrentModificationError(this));
        this._collection$_current = t1;
        this._collection$_next = t1.get$_collection$_next();
        return true;
      }
    },
    LinkedListEntry: {
      "^": "Object;_collection$_list@,_collection$_next@,_collection$_previous@",
      get$list: function(_) {
        return this._collection$_list;
      },
      unlink$0: function() {
        this._collection$_list._unlink$1(this);
      },
      get$next: function() {
        var t1, t2;
        t1 = this._collection$_next;
        t2 = this._collection$_list;
        if (t1 == null ? t2 == null : t1 === t2)
          return;
        return t1;
      },
      insertBefore$1: function(_, entry) {
        this._collection$_list._insertAfter$2(this._collection$_previous, entry);
      },
      list$1: function($receiver, arg0) {
        return this.get$list(this).call$1(arg0);
      }
    },
    ListBase: {
      "^": "Object_ListMixin;"
    },
    Object_ListMixin: {
      "^": "Object+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    ListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        return t1;
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      forEach$1: function(receiver, action) {
        var $length, i;
        $length = this.get$length(receiver);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      get$isEmpty: function(receiver) {
        return J.$eq$(this.get$length(receiver), 0);
      },
      get$isNotEmpty: function(receiver) {
        return !this.get$isEmpty(receiver);
      },
      get$last: function(receiver) {
        if (J.$eq$(this.get$length(receiver), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
      },
      get$single: function(receiver) {
        if (J.$eq$(this.get$length(receiver), 0))
          throw H.wrapException(H.IterableElementError_noElement());
        if (J.$gt$n(this.get$length(receiver), 1))
          throw H.wrapException(H.IterableElementError_tooMany());
        return this.$index(receiver, 0);
      },
      contains$1: function(receiver, element) {
        var $length, t1, i;
        $length = this.get$length(receiver);
        for (t1 = J.getInterceptor($length), i = 0; i < this.get$length(receiver); ++i) {
          if (J.$eq$(this.$index(receiver, i), element))
            return true;
          if (!t1.$eq($length, this.get$length(receiver)))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return false;
      },
      join$1: function(receiver, separator) {
        var t1;
        if (J.$eq$(this.get$length(receiver), 0))
          return "";
        t1 = P.StringBuffer__writeAll("", receiver, separator);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      where$1: function(receiver, test) {
        var t1 = new H.WhereIterable(receiver, test);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        return t1;
      },
      map$1: function(receiver, f) {
        var t1 = new H.MappedListIterable(receiver, f);
        t1.$builtinTypeInfo = [null, null];
        return t1;
      },
      toList$1$growable: function(receiver, growable) {
        var result, i;
        if (growable) {
          result = [];
          result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
          C.JSArray_methods.set$length(result, this.get$length(receiver));
        } else {
          result = Array(this.get$length(receiver));
          result.fixed$length = Array;
          result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        }
        for (i = 0; i < this.get$length(receiver); ++i)
          result[i] = this.$index(receiver, i);
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(receiver, element) {
        var t1 = this.get$length(receiver);
        this.set$length(receiver, J.$add$ns(t1, 1));
        this.$indexSet(receiver, t1, element);
      },
      addAll$1: function(receiver, iterable) {
        var t1, element, t2;
        for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
          element = t1.get$current();
          t2 = this.get$length(receiver);
          this.set$length(receiver, J.$add$ns(t2, 1));
          this.$indexSet(receiver, t2, element);
        }
      },
      remove$1: function(receiver, element) {
        var i;
        for (i = 0; i < this.get$length(receiver); ++i)
          if (J.$eq$(this.$index(receiver, i), element)) {
            this.setRange$4(receiver, i, J.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
            this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
            return true;
          }
        return false;
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      sublist$2: function(receiver, start, end) {
        var listLength, $length, result, i;
        listLength = this.get$length(receiver);
        if (end == null)
          end = listLength;
        P.RangeError_checkValidRange(start, end, listLength, null, null, null);
        $length = J.$sub$n(end, start);
        result = [];
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        C.JSArray_methods.set$length(result, $length);
        for (i = 0; i < $length; ++i)
          result[i] = this.$index(receiver, start + i);
        return result;
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      getRange$2: function(receiver, start, end) {
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        return H.SubListIterable$(receiver, start, end, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      },
      setRange$4: ["super$ListMixin$setRange", function(receiver, start, end, iterable, skipCount) {
        var $length, t1, i;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        $length = J.$sub$n(end, start);
        if (J.$eq$($length, 0))
          return;
        t1 = J.getInterceptor$asx(iterable);
        if (skipCount + $length > t1.get$length(iterable))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i)
            this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
        else
          for (i = 0; i < $length; ++i)
            this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
      }, function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }, "setRange$3", null, null, "get$setRange", 6, 2, null, 52],
      indexOf$2: function(receiver, element, startIndex) {
        var t1, i;
        t1 = J.getInterceptor$n(startIndex);
        if (t1.$ge(startIndex, this.get$length(receiver)))
          return -1;
        if (t1.$lt(startIndex, 0))
          startIndex = 0;
        for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$lt(i, this.get$length(receiver)); i = t1.$add(i, 1))
          if (J.$eq$(this.$index(receiver, i), element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      lastIndexOf$2: function(receiver, element, startIndex) {
        var i, t1;
        startIndex = J.$sub$n(this.get$length(receiver), 1);
        for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$ge(i, 0); i = t1.$sub(i, 1))
          if (J.$eq$(this.$index(receiver, i), element))
            return i;
        return -1;
      },
      lastIndexOf$1: function($receiver, element) {
        return this.lastIndexOf$2($receiver, element, null);
      },
      setAll$2: function(receiver, index, iterable) {
        this.setRange$3(receiver, index, index + iterable.length, iterable);
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _UnmodifiableMapMixin: {
      "^": "Object;",
      $indexSet: function(_, key, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      addAll$1: function(_, other) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      remove$1: function(_, key) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      $isMap: 1,
      $asMap: null
    },
    MapView: {
      "^": "Object;",
      $index: function(_, key) {
        return this._map.$index(0, key);
      },
      $indexSet: function(_, key, value) {
        this._map.$indexSet(0, key, value);
      },
      addAll$1: function(_, other) {
        this._map.addAll$1(0, other);
      },
      clear$0: function(_) {
        this._map.clear$0(0);
      },
      containsKey$1: function(_, key) {
        return this._map.containsKey$1(0, key);
      },
      forEach$1: function(_, action) {
        this._map.forEach$1(0, action);
      },
      get$isEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isEmpty(t1);
      },
      get$isNotEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isNotEmpty(t1);
      },
      get$length: function(_) {
        var t1 = this._map;
        return t1.get$length(t1);
      },
      get$keys: function(_) {
        var t1 = this._map;
        return t1.get$keys(t1);
      },
      remove$1: function(_, key) {
        return this._map.remove$1(0, key);
      },
      toString$0: function(_) {
        return this._map.toString$0(0);
      },
      get$values: function(_) {
        var t1 = this._map;
        return t1.get$values(t1);
      },
      $isMap: 1,
      $asMap: null
    },
    UnmodifiableMapView: {
      "^": "MapView+_UnmodifiableMapMixin;_map",
      $isMap: 1,
      $asMap: null
    },
    Maps_mapToString_closure: {
      "^": "Closure:4;_box_0,_captured_result_1",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1._captured_first_0)
          this._captured_result_1._contents += ", ";
        t1._captured_first_0 = false;
        t1 = this._captured_result_1;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    ListQueue: {
      "^": "Iterable;_table,_head,_tail,_modificationCount",
      get$iterator: function(_) {
        var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      forEach$1: function(_, action) {
        var modificationCount, i;
        modificationCount = this._modificationCount;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          action.call$1(this._table[i]);
          if (modificationCount !== this._modificationCount)
            H.throwExpression(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return J.$and$n(J.$sub$n(this._tail, this._head), this._table.length - 1);
      },
      get$last: function(_) {
        var t1, t2;
        t1 = this._head;
        t2 = this._tail;
        if (t1 === t2)
          throw H.wrapException(H.IterableElementError_noElement());
        return this._table[J.$and$n(J.$sub$n(t2, 1), this._table.length - 1)];
      },
      get$single: function(_) {
        if (this._head === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        if (this.get$length(this) > 1)
          throw H.wrapException(H.IterableElementError_tooMany());
        return this._table[this._head];
      },
      elementAt$1: function(_, index) {
        var $length, t1;
        $length = this.get$length(this);
        if (0 > index || index >= $length)
          H.throwExpression(P.IndexError$(index, this, "index", null, $length));
        t1 = this._table;
        return t1[(this._head + index & t1.length - 1) >>> 0];
      },
      toList$1$growable: function(_, growable) {
        var list;
        if (growable) {
          list = [];
          list.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
          C.JSArray_methods.set$length(list, this.get$length(this));
        } else {
          list = Array(this.get$length(this));
          list.fixed$length = Array;
          list.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        }
        this._writeToList$1(list);
        return list;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(_, value) {
        this._add$1(value);
      },
      addAll$1: function(_, elements) {
        var t1, addCount, $length, t2, t3, newTable, endSpace, preSpace;
        t1 = J.getInterceptor(elements);
        if (!!t1.$isList) {
          addCount = t1.get$length(elements);
          $length = this.get$length(this);
          t1 = $length + addCount;
          t2 = this._table;
          t3 = t2.length;
          if (t1 >= t3) {
            newTable = Array(P.ListQueue__nextPowerOf2(t1 + C.JSNumber_methods._shrOtherPositive$1(t1, 1)));
            newTable.fixed$length = Array;
            newTable.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
            this._tail = this._writeToList$1(newTable);
            this._table = newTable;
            this._head = 0;
            C.JSArray_methods.setRange$4(newTable, $length, t1, elements, 0);
            this._tail = J.$add$ns(this._tail, addCount);
          } else {
            t1 = this._tail;
            endSpace = t3 - t1;
            if (addCount < endSpace) {
              C.JSArray_methods.setRange$4(t2, t1, t1 + addCount, elements, 0);
              this._tail = J.$add$ns(this._tail, addCount);
            } else {
              preSpace = addCount - endSpace;
              C.JSArray_methods.setRange$4(t2, t1, t1 + endSpace, elements, 0);
              C.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
              this._tail = preSpace;
            }
          }
          ++this._modificationCount;
        } else
          for (t1 = t1.get$iterator(elements); t1.moveNext$0();)
            this._add$1(t1.get$current());
      },
      remove$1: function(_, value) {
        var i;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0)
          if (J.$eq$(this._table[i], value)) {
            this._remove$1(i);
            ++this._modificationCount;
            return true;
          }
        return false;
      },
      clear$0: function(_) {
        var i, t1, t2, t3;
        i = this._head;
        t1 = this._tail;
        if (i !== t1) {
          for (t2 = this._table, t3 = t2.length - 1; i !== t1; i = (i + 1 & t3) >>> 0)
            t2[i] = null;
          this._tail = 0;
          this._head = 0;
          ++this._modificationCount;
        }
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      addFirst$1: function(value) {
        var t1, t2;
        t1 = this._head;
        t2 = this._table;
        t1 = (t1 - 1 & t2.length - 1) >>> 0;
        this._head = t1;
        t2[t1] = value;
        if (t1 === this._tail)
          this._grow$0();
        ++this._modificationCount;
      },
      removeFirst$0: function() {
        var t1, t2, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._table;
        result = t2[t1];
        t2[t1] = null;
        this._head = (t1 + 1 & t2.length - 1) >>> 0;
        return result;
      },
      _add$1: function(element) {
        var t1, t2;
        t1 = this._table;
        t2 = this._tail;
        t1[t2] = element;
        t2 = J.$and$n(J.$add$ns(t2, 1), this._table.length - 1);
        this._tail = t2;
        if (this._head === t2)
          this._grow$0();
        ++this._modificationCount;
      },
      _remove$1: function(offset) {
        var mask, t1, t2, i, prevOffset, nextOffset;
        mask = this._table.length - 1;
        if ((offset - this._head & mask) >>> 0 < J.$and$n(J.$sub$n(this._tail, offset), mask)) {
          for (t1 = this._head, t2 = this._table, i = offset; i !== t1; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            t2[i] = t2[prevOffset];
          }
          t2[t1] = null;
          this._head = (t1 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else {
          t1 = J.$and$n(J.$sub$n(this._tail, 1), mask);
          this._tail = t1;
          for (t2 = this._table, i = offset; i !== t1; i = nextOffset) {
            nextOffset = (i + 1 & mask) >>> 0;
            t2[i] = t2[nextOffset];
          }
          t2[t1] = null;
          return offset;
        }
      },
      _grow$0: function() {
        var newTable, t1, t2, split;
        newTable = Array(this._table.length * 2);
        newTable.fixed$length = Array;
        newTable.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
        this._head = 0;
        this._tail = this._table.length;
        this._table = newTable;
      },
      _writeToList$1: function(target) {
        var t1, t2, $length, firstPartSize;
        t1 = this._head;
        t2 = this._tail;
        if (t1 <= t2) {
          $length = t2 - t1;
          C.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
          return $length;
        } else {
          t2 = this._table;
          firstPartSize = t2.length - t1;
          C.JSArray_methods.setRange$4(target, 0, firstPartSize, t2, t1);
          C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
          return J.$add$ns(this._tail, firstPartSize);
        }
      },
      ListQueue$1: function(initialCapacity, $E) {
        var t1 = Array(8);
        t1.fixed$length = Array;
        t1.$builtinTypeInfo = [$E];
        this._table = t1;
      },
      $isEfficientLength: 1,
      $asIterable: null,
      static: {ListQueue$: function(initialCapacity, $E) {
          var t1 = new P.ListQueue(null, 0, 0, 0);
          t1.$builtinTypeInfo = [$E];
          t1.ListQueue$1(initialCapacity, $E);
          return t1;
        }, ListQueue__nextPowerOf2: function(number) {
          var nextNumber;
          number = (number << 1 >>> 0) - 1;
          for (; true; number = nextNumber) {
            nextNumber = (number & number - 1) >>> 0;
            if (nextNumber === 0)
              return number;
          }
        }}
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(new P.ConcurrentModificationError(t1));
        t2 = this._collection$_position;
        if (t2 === this._end) {
          this._collection$_current = null;
          return false;
        }
        t1 = t1._table;
        this._collection$_current = t1[t2];
        this._collection$_position = (t2 + 1 & t1.length - 1) >>> 0;
        return true;
      }
    },
    SetMixin: {
      "^": "Object;",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      clear$0: function(_) {
        this.removeAll$1(this.toList$0(0));
      },
      addAll$1: function(_, elements) {
        var t1;
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      removeAll$1: function(elements) {
        var t1, _i;
        for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
          this.remove$1(0, elements[_i]);
      },
      toList$1$growable: function(_, growable) {
        var result, t1, i, i0;
        if (growable) {
          result = [];
          result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
          C.JSArray_methods.set$length(result, this.get$length(this));
        } else {
          result = Array(this.get$length(this));
          result.fixed$length = Array;
          result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        }
        for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
          i0 = i + 1;
          result[i] = t1.get$current();
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      map$1: function(_, f) {
        var t1 = new H.EfficientLengthMappedIterable(this, f);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0), null];
        return t1;
      },
      get$single: function(_) {
        var it;
        if (this.get$length(this) > 1)
          throw H.wrapException(H.IterableElementError_tooMany());
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        return it.get$current();
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      where$1: function(_, f) {
        var t1 = new H.WhereIterable(this, f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      join$1: function(_, separator) {
        var iterator, buffer, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        buffer = new P.StringBuffer("");
        if (separator === "") {
          do
            buffer._contents += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          buffer._contents = H.S(iterator.get$current());
          for (; iterator.moveNext$0();) {
            buffer._contents += separator;
            buffer._contents += H.S(iterator.get$current());
          }
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$last: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        do
          result = it.get$current();
        while (it.moveNext$0());
        return result;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    SetBase: {
      "^": "SetMixin;"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "JSON<-322",
    _convertJsonToDart: function(json, reviver) {
      return reviver.call$2(null, new P._convertJsonToDart_walk(reviver).call$1(json));
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null), null);
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _parseJson: function(source, reviver) {
      var parsed, e, t1, exception;
      t1 = source;
      if (typeof t1 !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(new P.FormatException(String(e), null, null));
      }
      if (reviver == null)
        return P._convertJsonToDartLazy(parsed);
      else
        return P._convertJsonToDart(parsed, reviver);
    },
    _defaultToEncodable: [function(object) {
      return object.toJson$0();
    }, "call$1", "convert___defaultToEncodable$closure", 2, 0, 117, 99, []],
    _convertJsonToDart_walk: {
      "^": "Closure:2;_captured_reviver_0",
      call$1: function(e) {
        var t1, i, map, keys, t2, key;
        if (e == null || typeof e != "object")
          return e;
        if (Object.getPrototypeOf(e) === Array.prototype) {
          for (t1 = this._captured_reviver_0, i = 0; i < e.length; ++i)
            e[i] = t1.call$2(i, this.call$1(e[i]));
          return e;
        }
        t1 = Object.create(null);
        map = new P._JsonMap(e, t1, null);
        keys = map._computeKeys$0();
        for (t2 = this._captured_reviver_0, i = 0; i < keys.length; ++i) {
          key = keys[i];
          t1[key] = t2.call$2(key, this.call$1(e[key]));
        }
        map._original = t1;
        return map;
      }
    },
    _JsonMap: {
      "^": "Object;_original,_processed,_data",
      $index: function(_, key) {
        var t1, result;
        t1 = this._processed;
        if (t1 == null)
          return this._data.$index(0, key);
        else if (typeof key !== "string")
          return;
        else {
          result = t1[key];
          return typeof result == "undefined" ? this._process$1(key) : result;
        }
      },
      get$length: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1;
      },
      get$isEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1 === 0;
      },
      get$isNotEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1 > 0;
      },
      get$keys: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          return t1.get$keys(t1);
        }
        return new P._JsonMapKeyIterable(this);
      },
      get$values: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          return t1.get$values(t1);
        }
        return H.MappedIterable_MappedIterable(this._computeKeys$0(), new P._JsonMap_values_closure(this), null, null);
      },
      $indexSet: function(_, key, value) {
        var processed, original;
        if (this._processed == null)
          this._data.$indexSet(0, key, value);
        else if (this.containsKey$1(0, key)) {
          processed = this._processed;
          processed[key] = value;
          original = this._original;
          if (original == null ? processed != null : original !== processed)
            original[key] = null;
        } else
          this._upgrade$0().$indexSet(0, key, value);
      },
      addAll$1: function(_, other) {
        J.forEach$1$ax(other, new P._JsonMap_addAll_closure(this));
      },
      containsKey$1: function(_, key) {
        if (this._processed == null)
          return this._data.containsKey$1(0, key);
        if (typeof key !== "string")
          return false;
        return Object.prototype.hasOwnProperty.call(this._original, key);
      },
      putIfAbsent$2: function(_, key, ifAbsent) {
        var value;
        if (this.containsKey$1(0, key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: function(_, key) {
        if (this._processed != null && !this.containsKey$1(0, key))
          return;
        return this._upgrade$0().remove$1(0, key);
      },
      clear$0: function(_) {
        var t1;
        if (this._processed == null)
          this._data.clear$0(0);
        else {
          t1 = this._data;
          if (t1 != null)
            J.clear$0$ax(t1);
          this._processed = null;
          this._original = null;
          this._data = P.LinkedHashMap__makeEmpty();
        }
      },
      forEach$1: function(_, f) {
        var keys, i, key, value;
        if (this._processed == null)
          return this._data.forEach$1(0, f);
        keys = this._computeKeys$0();
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          value = this._processed[key];
          if (typeof value == "undefined") {
            value = P._convertJsonToDartLazy(this._original[key]);
            this._processed[key] = value;
          }
          f.call$2(key, value);
          if (keys !== this._data)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      toString$0: [function(_) {
        return P.Maps_mapToString(this);
      }, "call$0", "get$toString", 0, 0, 15, "toString"],
      _computeKeys$0: function() {
        var keys = this._data;
        if (keys == null) {
          keys = Object.keys(this._original);
          this._data = keys;
        }
        return keys;
      },
      _upgrade$0: function() {
        var result, keys, i, t1, key;
        if (this._processed == null)
          return this._data;
        result = P.LinkedHashMap__makeEmpty();
        keys = this._computeKeys$0();
        for (i = 0; t1 = keys.length, i < t1; ++i) {
          key = keys[i];
          result.$indexSet(0, key, this.$index(0, key));
        }
        if (t1 === 0)
          keys.push(null);
        else
          C.JSArray_methods.set$length(keys, 0);
        this._processed = null;
        this._original = null;
        this._data = result;
        return result;
      },
      _process$1: function(key) {
        var result;
        if (!Object.prototype.hasOwnProperty.call(this._original, key))
          return;
        result = P._convertJsonToDartLazy(this._original[key]);
        return this._processed[key] = result;
      },
      $isMap: 1,
      $asMap: Isolate.functionThatReturnsNull
    },
    _JsonMap_values_closure: {
      "^": "Closure:2;_convert$_captured_this_0",
      call$1: [function(each) {
        return this._convert$_captured_this_0.$index(0, each);
      }, null, null, 2, 0, null, 68, [], "call"]
    },
    _JsonMap_addAll_closure: {
      "^": "Closure:4;_convert$_captured_this_0",
      call$2: [function(key, value) {
        this._convert$_captured_this_0.$indexSet(0, key, value);
      }, null, null, 4, 0, null, 11, [], 1, [], "call"]
    },
    _JsonMapKeyIterable: {
      "^": "ListIterable;_parent",
      get$length: function(_) {
        var t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1._data;
          t1 = t1.get$length(t1);
        } else
          t1 = t1._computeKeys$0().length;
        return t1;
      },
      elementAt$1: function(_, index) {
        var t1 = this._parent;
        return t1._processed == null ? t1.get$keys(t1).elementAt$1(0, index) : t1._computeKeys$0()[index];
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1.get$keys(t1);
          t1 = t1.get$iterator(t1);
        } else {
          t1 = t1._computeKeys$0();
          t2 = new J.ArrayIterator(t1, t1.length, 0, null);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
          t1 = t2;
        }
        return t1;
      },
      contains$1: function(_, key) {
        return this._parent.containsKey$1(0, key);
      },
      $asListIterable: Isolate.functionThatReturnsNull,
      $asIterable: Isolate.functionThatReturnsNull
    },
    Codec: {
      "^": "Object;"
    },
    Converter: {
      "^": "Object;"
    },
    Encoding: {
      "^": "Codec;",
      $asCodec: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    JsonUnsupportedObjectError: {
      "^": "Error;unsupportedObject,cause",
      toString$0: function(_) {
        if (this.cause != null)
          return "Converting object to an encodable object failed.";
        else
          return "Converting object did not return an encodable object.";
      }
    },
    JsonCyclicError: {
      "^": "JsonUnsupportedObjectError;unsupportedObject,cause",
      toString$0: function(_) {
        return "Cyclic error in JSON stringify";
      }
    },
    JsonCodec: {
      "^": "Codec;_reviver,_toEncodable",
      decode$2$reviver: function(source, reviver) {
        return P._parseJson(source, this.get$decoder()._reviver);
      },
      decode$1: function(source) {
        return this.decode$2$reviver(source, null);
      },
      get$decoder: function() {
        return C.JsonDecoder_null;
      },
      $asCodec: function() {
        return [P.Object, P.String];
      }
    },
    JsonEncoder: {
      "^": "Converter;indent,_toEncodable",
      $asConverter: function() {
        return [P.Object, P.String];
      },
      static: {JsonEncoder$: function(toEncodable) {
          return new P.JsonEncoder(null, toEncodable);
        }}
    },
    JsonDecoder: {
      "^": "Converter;_reviver",
      $asConverter: function() {
        return [P.String, P.Object];
      },
      static: {JsonDecoder$: function(reviver) {
          return new P.JsonDecoder(reviver);
        }}
    },
    _JsonStringifier: {
      "^": "Object;",
      writeStringContent$1: function(s) {
        var t1, $length, offset, i, charCode, t2;
        t1 = J.getInterceptor$asx(s);
        $length = t1.get$length(s);
        for (offset = 0, i = 0; i < $length; ++i) {
          charCode = t1.codeUnitAt$1(s, i);
          if (charCode > 92)
            continue;
          if (charCode < 32) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            switch (charCode) {
              case 8:
                this.writeCharCode$1(98);
                break;
              case 9:
                this.writeCharCode$1(116);
                break;
              case 10:
                this.writeCharCode$1(110);
                break;
              case 12:
                this.writeCharCode$1(102);
                break;
              case 13:
                this.writeCharCode$1(114);
                break;
              default:
                this.writeCharCode$1(117);
                this.writeCharCode$1(48);
                this.writeCharCode$1(48);
                t2 = charCode >>> 4 & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                t2 = charCode & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                break;
            }
          } else if (charCode === 34 || charCode === 92) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            this.writeCharCode$1(charCode);
          }
        }
        if (offset === 0)
          this.writeString$1(s);
        else if (offset < $length)
          this.writeStringSlice$3(s, offset, $length);
      },
      _checkCycle$1: function(object) {
        var t1, t2, i, t3;
        for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
          t3 = t1[i];
          if (object == null ? t3 == null : object === t3)
            throw H.wrapException(new P.JsonCyclicError(object, null));
        }
        t1.push(object);
      },
      _removeSeen$1: function(object) {
        this._seen.pop();
      },
      writeObject$1: function(object) {
        var customJson, e, exception, t1;
        if (this.writeJsonValue$1(object))
          return;
        this._checkCycle$1(object);
        try {
          customJson = this._toEncodable$1(object);
          if (!this.writeJsonValue$1(customJson))
            throw H.wrapException(new P.JsonUnsupportedObjectError(object, null));
          this._seen.pop();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          throw H.wrapException(new P.JsonUnsupportedObjectError(object, e));
        }
      },
      writeJsonValue$1: function(object) {
        var t1, success;
        if (typeof object === "number") {
          if (!C.JSNumber_methods.get$isFinite(object))
            return false;
          this.writeNumber$1(object);
          return true;
        } else if (object === true) {
          this.writeString$1("true");
          return true;
        } else if (object === false) {
          this.writeString$1("false");
          return true;
        } else if (object == null) {
          this.writeString$1("null");
          return true;
        } else if (typeof object === "string") {
          this.writeString$1("\"");
          this.writeStringContent$1(object);
          this.writeString$1("\"");
          return true;
        } else {
          t1 = J.getInterceptor(object);
          if (!!t1.$isList) {
            this._checkCycle$1(object);
            this.writeList$1(object);
            this._removeSeen$1(object);
            return true;
          } else if (!!t1.$isMap) {
            this._checkCycle$1(object);
            success = this.writeMap$1(object);
            this._removeSeen$1(object);
            return success;
          } else
            return false;
        }
      },
      writeList$1: function(list) {
        var t1, i;
        this.writeString$1("[");
        t1 = J.getInterceptor$asx(list);
        if (J.$gt$n(t1.get$length(list), 0)) {
          this.writeObject$1(t1.$index(list, 0));
          for (i = 1; i < t1.get$length(list); ++i) {
            this.writeString$1(",");
            this.writeObject$1(t1.$index(list, i));
          }
        }
        this.writeString$1("]");
      },
      writeMap$1: function(map) {
        var t1, t2, keyValueList, separator, i;
        t1 = {};
        t2 = J.getInterceptor$asx(map);
        if (t2.get$isEmpty(map)) {
          this.writeString$1("{}");
          return true;
        }
        keyValueList = Array(J.$mul$ns(t2.get$length(map), 2));
        t1._captured_i_0 = 0;
        t1._captured_allStringKeys_1 = true;
        t2.forEach$1(map, new P._JsonStringifier_writeMap_closure(t1, keyValueList));
        if (!t1._captured_allStringKeys_1)
          return false;
        this.writeString$1("{");
        for (t1 = keyValueList.length, separator = "\"", i = 0; i < t1; i += 2, separator = ",\"") {
          this.writeString$1(separator);
          this.writeStringContent$1(keyValueList[i]);
          this.writeString$1("\":");
          this.writeObject$1(keyValueList[i + 1]);
        }
        this.writeString$1("}");
        return true;
      },
      _toEncodable$1: function(arg0) {
        return this._toEncodable.call$1(arg0);
      }
    },
    _JsonStringifier_writeMap_closure: {
      "^": "Closure:4;_convert$_box_0,_captured_keyValueList_1",
      call$2: function(key, value) {
        var t1, t2, t3, i;
        if (typeof key !== "string")
          this._convert$_box_0._captured_allStringKeys_1 = false;
        t1 = this._captured_keyValueList_1;
        t2 = this._convert$_box_0;
        t3 = t2._captured_i_0;
        i = t3 + 1;
        t2._captured_i_0 = i;
        t1[t3] = key;
        t2._captured_i_0 = i + 1;
        t1[i] = value;
      }
    },
    _JsonPrettyPrintMixin: {
      "^": "Object;",
      writeList$1: function(list) {
        var t1, i;
        t1 = J.getInterceptor$asx(list);
        if (t1.get$isEmpty(list))
          this.writeString$1("[]");
        else {
          this.writeString$1("[\n");
          this.writeIndentation$1(++this._JsonPrettyPrintMixin__indentLevel);
          this.writeObject$1(t1.$index(list, 0));
          for (i = 1; i < t1.get$length(list); ++i) {
            this.writeString$1(",\n");
            this.writeIndentation$1(this._JsonPrettyPrintMixin__indentLevel);
            this.writeObject$1(t1.$index(list, i));
          }
          this.writeString$1("\n");
          this.writeIndentation$1(--this._JsonPrettyPrintMixin__indentLevel);
          this.writeString$1("]");
        }
      },
      writeMap$1: function(map) {
        var t1, t2, keyValueList, separator, i;
        t1 = {};
        t2 = J.getInterceptor$asx(map);
        if (t2.get$isEmpty(map)) {
          this.writeString$1("{}");
          return true;
        }
        keyValueList = Array(J.$mul$ns(t2.get$length(map), 2));
        t1._captured_i_0 = 0;
        t1._captured_allStringKeys_1 = true;
        t2.forEach$1(map, new P._JsonPrettyPrintMixin_writeMap_closure(t1, keyValueList));
        if (!t1._captured_allStringKeys_1)
          return false;
        this.writeString$1("{\n");
        ++this._JsonPrettyPrintMixin__indentLevel;
        for (t1 = keyValueList.length, separator = "", i = 0; i < t1; i += 2, separator = ",\n") {
          this.writeString$1(separator);
          this.writeIndentation$1(this._JsonPrettyPrintMixin__indentLevel);
          this.writeString$1("\"");
          this.writeStringContent$1(keyValueList[i]);
          this.writeString$1("\": ");
          this.writeObject$1(keyValueList[i + 1]);
        }
        this.writeString$1("\n");
        this.writeIndentation$1(--this._JsonPrettyPrintMixin__indentLevel);
        this.writeString$1("}");
        return true;
      }
    },
    _JsonPrettyPrintMixin_writeMap_closure: {
      "^": "Closure:4;_convert$_box_0,_captured_keyValueList_1",
      call$2: function(key, value) {
        var t1, t2, t3, i;
        if (typeof key !== "string")
          this._convert$_box_0._captured_allStringKeys_1 = false;
        t1 = this._captured_keyValueList_1;
        t2 = this._convert$_box_0;
        t3 = t2._captured_i_0;
        i = t3 + 1;
        t2._captured_i_0 = i;
        t1[t3] = key;
        t2._captured_i_0 = i + 1;
        t1[i] = value;
      }
    },
    _JsonStringStringifier: {
      "^": "_JsonStringifier;_sink,_seen,_toEncodable",
      writeNumber$1: function(number) {
        this._sink._contents += C.JSNumber_methods.toString$0(number);
      },
      writeString$1: function(string) {
        this._sink._contents += H.S(string);
      },
      writeStringSlice$3: function(string, start, end) {
        this._sink._contents += J.substring$2$s(string, start, end);
      },
      writeCharCode$1: function(charCode) {
        this._sink._contents += H.Primitives_stringFromCharCode(charCode);
      },
      static: {_JsonStringStringifier_stringify: function(object, toEncodable, indent) {
          var output, t1, stringifier;
          output = new P.StringBuffer("");
          if (indent == null) {
            t1 = toEncodable != null ? toEncodable : P.convert___defaultToEncodable$closure();
            stringifier = new P._JsonStringStringifier(output, [], t1);
          } else {
            t1 = toEncodable != null ? toEncodable : P.convert___defaultToEncodable$closure();
            stringifier = new P._JsonStringStringifierPretty(indent, 0, output, [], t1);
          }
          stringifier.writeObject$1(object);
          t1 = output._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }}
    },
    _JsonStringStringifierPretty: {
      "^": "_JsonStringStringifier__JsonPrettyPrintMixin;_indent,_JsonPrettyPrintMixin__indentLevel,_sink,_seen,_toEncodable",
      writeIndentation$1: function(count) {
        var t1, t2, i;
        for (t1 = this._indent, t2 = this._sink, i = 0; i < count; ++i)
          t2._contents += t1;
      }
    },
    _JsonStringStringifier__JsonPrettyPrintMixin: {
      "^": "_JsonStringStringifier+_JsonPrettyPrintMixin;"
    },
    Utf8Codec: {
      "^": "Encoding;_allowMalformed",
      get$name: function(_) {
        return "utf-8";
      },
      decode$2$allowMalformed: function(codeUnits, allowMalformed) {
        return new P.Utf8Decoder(this._allowMalformed).convert$1(codeUnits);
      },
      decode$1: function(codeUnits) {
        return this.decode$2$allowMalformed(codeUnits, null);
      },
      get$encoder: function() {
        return new P.Utf8Encoder();
      }
    },
    Utf8Encoder: {
      "^": "Converter;",
      convert$3: function(string, start, end) {
        var t1, stringLength, t2, $length, t3, encoder;
        t1 = J.getInterceptor$asx(string);
        stringLength = t1.get$length(string);
        P.RangeError_checkValidRange(start, end, stringLength, null, null, null);
        t2 = J.getInterceptor$n(stringLength);
        $length = t2.$sub(stringLength, start);
        t3 = J.getInterceptor($length);
        if (t3.$eq($length, 0))
          return new Uint8Array(H._checkLength(0));
        t3 = new Uint8Array(H._checkLength(t3.$mul($length, 3)));
        encoder = new P._Utf8Encoder(0, 0, t3);
        if (encoder._fillBuffer$3(string, start, stringLength) !== stringLength)
          encoder._writeSurrogate$2(t1.codeUnitAt$1(string, t2.$sub(stringLength, 1)), 0);
        return C.NativeUint8List_methods.sublist$2(t3, 0, encoder._bufferIndex);
      },
      convert$1: function(string) {
        return this.convert$3(string, 0, null);
      },
      $asConverter: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    _Utf8Encoder: {
      "^": "Object;_carry,_bufferIndex,_buffer",
      _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
        var t1, t2, rune, t3;
        t1 = this._buffer;
        t2 = this._bufferIndex;
        if ((nextCodeUnit & 64512) === 56320) {
          rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          t1[t2] = (240 | rune >>> 18) >>> 0;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          t1[t3] = 128 | rune >>> 12 & 63;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          t1[t2] = 128 | rune >>> 6 & 63;
          this._bufferIndex = t3 + 1;
          t1[t3] = 128 | rune & 63;
          return true;
        } else {
          t3 = t2 + 1;
          this._bufferIndex = t3;
          t1[t2] = 224 | leadingSurrogate >>> 12;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
          this._bufferIndex = t2 + 1;
          t1[t2] = 128 | leadingSurrogate & 63;
          return false;
        }
      },
      _fillBuffer$3: function(str, start, end) {
        var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
        if (start !== end && (J.codeUnitAt$1$s(str, J.$sub$n(end, 1)) & 64512) === 55296)
          end = J.$sub$n(end, 1);
        for (t1 = this._buffer, t2 = t1.length, t3 = J.getInterceptor$s(str), stringIndex = start; stringIndex < end; ++stringIndex) {
          codeUnit = t3.codeUnitAt$1(str, stringIndex);
          if (codeUnit <= 127) {
            t4 = this._bufferIndex;
            if (t4 >= t2)
              break;
            this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit;
          } else if ((codeUnit & 64512) === 55296) {
            if (this._bufferIndex + 3 >= t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (this._writeSurrogate$2(codeUnit, t3.codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (codeUnit <= 2047) {
            t4 = this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            this._bufferIndex = t5;
            t1[t4] = 192 | codeUnit >>> 6;
            this._bufferIndex = t5 + 1;
            t1[t5] = 128 | codeUnit & 63;
          } else {
            t4 = this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = t4 + 1;
            this._bufferIndex = t5;
            t1[t4] = 224 | codeUnit >>> 12;
            t4 = t5 + 1;
            this._bufferIndex = t4;
            t1[t5] = 128 | codeUnit >>> 6 & 63;
            this._bufferIndex = t4 + 1;
            t1[t4] = 128 | codeUnit & 63;
          }
        }
        return stringIndex;
      }
    },
    Utf8Decoder: {
      "^": "Converter;_allowMalformed",
      convert$3: function(codeUnits, start, end) {
        var $length, buffer, decoder, t1;
        $length = J.get$length$asx(codeUnits);
        P.RangeError_checkValidRange(start, end, $length, null, null, null);
        buffer = new P.StringBuffer("");
        decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
        decoder.convert$3(codeUnits, start, $length);
        decoder.flush$0();
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      convert$1: function(codeUnits) {
        return this.convert$3(codeUnits, 0, null);
      },
      $asConverter: function() {
        return [[P.List, P.$int], P.String];
      }
    },
    _Utf8Decoder: {
      "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
      close$0: function(_) {
        this.flush$0();
      },
      flush$0: function() {
        if (this._expectedUnits > 0) {
          if (!this._allowMalformed)
            throw H.wrapException(new P.FormatException("Unfinished UTF-8 octet sequence", null, null));
          this._stringSink._contents += H.Primitives_stringFromCharCode(65533);
          this._convert$_value = 0;
          this._expectedUnits = 0;
          this._extraUnits = 0;
        }
      },
      convert$3: function(codeUnits, startIndex, endIndex) {
        var value, expectedUnits, extraUnits, t1, t2, t3, t4, t5, i, unit, t6, oneBytes, i0;
        value = this._convert$_value;
        expectedUnits = this._expectedUnits;
        extraUnits = this._extraUnits;
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
        t1 = new P._Utf8Decoder_convert_scanOneByteCharacters(endIndex);
        t2 = new P._Utf8Decoder_convert_addSingleBytes(this, codeUnits, startIndex, endIndex);
        $loop$0:
          for (t3 = this._stringSink, t4 = !this._allowMalformed, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
            $multibyte$2:
              if (expectedUnits > 0) {
                do {
                  if (i === endIndex)
                    break $loop$0;
                  unit = t5.$index(codeUnits, i);
                  t6 = J.getInterceptor$n(unit);
                  if (t6.$and(unit, 192) !== 128) {
                    if (t4)
                      throw H.wrapException(new P.FormatException("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16), null, null));
                    this._isFirstCharacter = false;
                    t3._contents += H.Primitives_stringFromCharCode(65533);
                    expectedUnits = 0;
                    break $multibyte$2;
                  } else {
                    value = (value << 6 | t6.$and(unit, 63)) >>> 0;
                    --expectedUnits;
                    ++i;
                  }
                } while (expectedUnits > 0);
                if (value <= C.List_127_2047_65535_1114111[extraUnits - 1]) {
                  if (t4)
                    throw H.wrapException(new P.FormatException("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                  value = 65533;
                  expectedUnits = 0;
                  extraUnits = 0;
                }
                if (value > 1114111) {
                  if (t4)
                    throw H.wrapException(new P.FormatException("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                  value = 65533;
                }
                if (!this._isFirstCharacter || value !== 65279)
                  t3._contents += H.Primitives_stringFromCharCode(value);
                this._isFirstCharacter = false;
              }
            for (; i < endIndex; i = i0) {
              oneBytes = t1.call$2(codeUnits, i);
              if (J.$gt$n(oneBytes, 0)) {
                this._isFirstCharacter = false;
                i0 = i + oneBytes;
                t2.call$2(i, i0);
                if (i0 === endIndex)
                  break;
                i = i0;
              }
              i0 = i + 1;
              unit = t5.$index(codeUnits, i);
              t6 = J.getInterceptor$n(unit);
              if (t6.$lt(unit, 0)) {
                if (t4)
                  throw H.wrapException(new P.FormatException("Negative UTF-8 code unit: -0x" + J.toRadixString$1$n(t6.$negate(unit), 16), null, null));
                t3._contents += H.Primitives_stringFromCharCode(65533);
              } else {
                if (t6.$and(unit, 224) === 192) {
                  value = t6.$and(unit, 31);
                  expectedUnits = 1;
                  extraUnits = 1;
                  continue $loop$0;
                }
                if (t6.$and(unit, 240) === 224) {
                  value = t6.$and(unit, 15);
                  expectedUnits = 2;
                  extraUnits = 2;
                  continue $loop$0;
                }
                if (t6.$and(unit, 248) === 240 && t6.$lt(unit, 245)) {
                  value = t6.$and(unit, 7);
                  expectedUnits = 3;
                  extraUnits = 3;
                  continue $loop$0;
                }
                if (t4)
                  throw H.wrapException(new P.FormatException("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16), null, null));
                this._isFirstCharacter = false;
                t3._contents += H.Primitives_stringFromCharCode(65533);
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
            }
            break $loop$0;
          }
        if (expectedUnits > 0) {
          this._convert$_value = value;
          this._expectedUnits = expectedUnits;
          this._extraUnits = extraUnits;
        }
      }
    },
    _Utf8Decoder_convert_scanOneByteCharacters: {
      "^": "Closure:339;_captured_endIndex_0",
      call$2: function(units, from) {
        var to, t1, i, unit;
        to = this._captured_endIndex_0;
        for (t1 = J.getInterceptor$asx(units), i = from; i < to; ++i) {
          unit = t1.$index(units, i);
          if (J.$and$n(unit, 127) !== unit)
            return i - from;
        }
        return to - from;
      }
    },
    _Utf8Decoder_convert_addSingleBytes: {
      "^": "Closure:74;_convert$_captured_this_1,_captured_codeUnits_2,_captured_startIndex_3,_captured_endIndex_4",
      call$2: function(from, to) {
        this._convert$_captured_this_1._stringSink._contents += P.String_String$fromCharCodes(this._captured_codeUnits_2, from, to);
      }
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), null, null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), null, null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, null, null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    identical: [function(a, b) {
      return a == null ? b == null : a === b;
    }, "call$2", "core__identical$closure", 4, 0, 229],
    identityHashCode: [function(object) {
      return H.objectHashCode(object);
    }, "call$1", "core__identityHashCode$closure", 2, 0, 230],
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = [];
      list.$builtinTypeInfo = [$E];
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      if (growable)
        return list;
      list.fixed$length = Array;
      return list;
    },
    print: function(object) {
      var line, t1;
      line = H.S(object);
      t1 = $.printToZone;
      if (t1 == null)
        H.printString(line);
      else
        t1.call$1(line);
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false), null, null);
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len;
      if (charCodes.constructor === Array) {
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len, null, null, null);
        return H.Primitives_stringFromCharCodes(start > 0 || J.$lt$n(end, len) ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (!!J.getInterceptor(charCodes).$isNativeUint8List)
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length, null, null, null));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    NoSuchMethodError_toString_closure: {
      "^": "Closure:109;_core$_box_0,_captured_sb_1",
      call$2: function(key, value) {
        var t1, t2, t3;
        t1 = this._captured_sb_1;
        t2 = this._core$_box_0;
        t1._contents += t2._captured_comma_0;
        t3 = t1._contents += H.S(key.get$_name());
        t1._contents = t3 + ": ";
        t1._contents += H.S(P.Error_safeToString(value));
        t2._captured_comma_0 = ", ";
      }
    },
    Deprecated: {
      "^": "Object;expires",
      toString$0: function(_) {
        return "Deprecated feature. Will be removed " + this.expires;
      }
    },
    _Override: {
      "^": "Object;"
    },
    bool: {
      "^": "Object;",
      toString$0: function(_) {
        return this ? "true" : "false";
      }
    },
    "+bool": 0,
    DateTime: {
      "^": "Object;millisecondsSinceEpoch,isUtc",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
      },
      get$hashCode: function(_) {
        return this.millisecondsSinceEpoch;
      },
      toString$0: function(_) {
        var y, m, d, h, min, sec, ms;
        y = P.DateTime__fourDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        if (this.isUtc)
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      },
      toIso8601String$0: function() {
        var y, m, d, h, min, sec, ms;
        y = H.Primitives_getYear(this) >= -9999 && H.Primitives_getYear(this) <= 9999 ? P.DateTime__fourDigits(H.Primitives_getYear(this)) : P.DateTime__sixDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        if (this.isUtc)
          return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms;
      },
      add$1: function(_, duration) {
        return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
      },
      get$timeZoneOffset: function() {
        if (this.isUtc)
          return P.Duration$(0, 0, 0, 0, 0, 0);
        return P.Duration$(0, 0, 0, 0, -H.Primitives_lazyAsJsDate(this).getTimezoneOffset(), 0);
      },
      DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
        if (Math.abs(millisecondsSinceEpoch) > 864e13)
          throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
      },
      static: {DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
          var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
          t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
          return t1;
        }, DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + H.S(absN);
          if (absN >= 10)
            return sign + "00" + H.S(absN);
          return sign + "000" + H.S(absN);
        }, DateTime__sixDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "+";
          if (absN >= 100000)
            return sign + H.S(absN);
          return sign + "0" + H.S(absN);
        }, DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        }, DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }}
    },
    $double: {
      "^": "num;"
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration<",
      $add: function(_, other) {
        return new P.Duration(this._duration + other.get$_duration());
      },
      $sub: function(_, other) {
        return new P.Duration(this._duration - other.get$_duration());
      },
      $mul: function(_, factor) {
        return new P.Duration(C.JSNumber_methods.round$0(this._duration * factor));
      },
      $tdiv: function(_, quotient) {
        if (quotient === 0)
          throw H.wrapException(new P.IntegerDivisionByZeroException());
        return new P.Duration(C.JSNumber_methods.$tdiv(this._duration, quotient));
      },
      $lt: function(_, other) {
        return this._duration < other.get$_duration();
      },
      $gt: function(_, other) {
        return this._duration > other.get$_duration();
      },
      $le: function(_, other) {
        return this._duration <= other.get$_duration();
      },
      $ge: function(_, other) {
        return this._duration >= other.get$_duration();
      },
      get$inMilliseconds: function() {
        return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(-t2).toString$0(0);
        twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
        twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
        return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      $negate: function(_) {
        return new P.Duration(-this._duration);
      },
      static: {Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
          return new P.Duration(864e8 * days + 3600000000 * hours + 60000000 * minutes + 1000000 * seconds + 1000 * milliseconds + microseconds);
        }}
    },
    Duration_toString_sixDigits: {
      "^": "Closure:76;",
      call$1: function(n) {
        if (n >= 100000)
          return H.S(n);
        if (n >= 10000)
          return "0" + H.S(n);
        if (n >= 1000)
          return "00" + H.S(n);
        if (n >= 100)
          return "000" + H.S(n);
        if (n >= 10)
          return "0000" + H.S(n);
        return "00000" + H.S(n);
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:76;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name>,message>",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        }, ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        }, ArgumentError$notNull: function($name) {
          return new P.ArgumentError(true, null, $name, "Must not be null");
        }}
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2, t3;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else {
            t3 = J.getInterceptor$n(t2);
            if (t3.$gt(t2, t1))
              explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
            else
              explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
          }
        }
        return explanation;
      },
      static: {RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        }, RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        }, RangeError_checkValueInInterval: function(value, minValue, maxValue, $name, message) {
          if (value < minValue || value > maxValue)
            throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, message));
        }, RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (start > end || end > $length)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }}
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        P.Error_safeToString(this.indexable);
        var explanation = ": index should be less than " + H.S(this.length);
        return J.$lt$n(this.invalidValue, 0) ? ": index must not be negative" : explanation;
      },
      static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = $length != null ? $length : J.get$length$asx(indexable);
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }}
    },
    NoSuchMethodError: {
      "^": "Error;_core$_receiver,_core$_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
      toString$0: function(_) {
        var t1, sb, t2, t3, _i, argument, memberName, receiverText, actualParameters;
        t1 = {};
        sb = new P.StringBuffer("");
        t1._captured_comma_0 = "";
        for (t2 = this._core$_arguments, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          argument = t2[_i];
          sb._contents += t1._captured_comma_0;
          sb._contents += H.S(P.Error_safeToString(argument));
          t1._captured_comma_0 = ", ";
        }
        t2 = this._namedArguments;
        if (t2 != null)
          t2.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1, sb));
        memberName = this._core$_memberName.get$_name();
        receiverText = P.Error_safeToString(this._core$_receiver);
        actualParameters = H.S(sb);
        return "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
      },
      static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
          return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
        }}
    },
    UnsupportedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        return "Reading static variable '" + this.variableName + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message>",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      }
    },
    FormatException: {
      "^": "Object;message>,source,offset",
      toString$0: function(_) {
        var t1, report, offset, source, lineNum, lineStart, lastWasCR, i, $char, lineEnd, t2, end, start, prefix, postfix, slice;
        t1 = this.message;
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
        offset = this.offset;
        source = this.source;
        if (typeof source !== "string")
          return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
        if (offset != null) {
          t1 = J.getInterceptor$n(offset);
          t1 = t1.$lt(offset, 0) || t1.$gt(offset, J.get$length$asx(source));
        } else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          t1 = J.getInterceptor$asx(source);
          if (J.$gt$n(t1.get$length(source), 78))
            source = t1.substring$2(source, 0, 75) + "...";
          return report + "\n" + H.S(source);
        }
        for (t1 = J.getInterceptor$asx(source), lineNum = 1, lineStart = 0, lastWasCR = null, i = 0; i < offset; ++i) {
          $char = t1.codeUnitAt$1(source, i);
          if ($char === 10) {
            if (lineStart !== i || lastWasCR !== true)
              ++lineNum;
            lineStart = i + 1;
            lastWasCR = false;
          } else if ($char === 13) {
            ++lineNum;
            lineStart = i + 1;
            lastWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + H.S(offset - lineStart + 1) + ")\n") : report + (" (at character " + H.S(offset + 1) + ")\n");
        lineEnd = t1.get$length(source);
        for (i = offset; i < t1.get$length(source); ++i) {
          $char = t1.codeUnitAt$1(source, i);
          if ($char === 10 || $char === 13) {
            lineEnd = i;
            break;
          }
        }
        t2 = J.getInterceptor$n(lineEnd);
        if (J.$gt$n(t2.$sub(lineEnd, lineStart), 78))
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (J.$lt$n(t2.$sub(lineEnd, offset), 75)) {
              start = t2.$sub(lineEnd, 75);
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = t1.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      }
    },
    IntegerDivisionByZeroException: {
      "^": "Object;",
      toString$0: function(_) {
        return "IntegerDivisionByZeroException";
      }
    },
    Expando: {
      "^": "Object;name>",
      toString$0: function(_) {
        return "Expando:" + H.S(this.name);
      },
      $index: function(_, object) {
        var values = H.Primitives_getProperty(object, "expando$values");
        return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
      },
      $indexSet: function(_, object, value) {
        var values = H.Primitives_getProperty(object, "expando$values");
        if (values == null) {
          values = new P.Object();
          H.Primitives_setProperty(object, "expando$values", values);
        }
        H.Primitives_setProperty(values, this._getKey$0(), value);
      },
      _getKey$0: function() {
        var key, t1;
        key = H.Primitives_getProperty(this, "expando$key");
        if (key == null) {
          t1 = $.Expando__keyCount;
          $.Expando__keyCount = t1 + 1;
          key = "expando$key$" + t1;
          H.Primitives_setProperty(this, "expando$key", key);
        }
        return key;
      }
    },
    Function: {
      "^": "Object;"
    },
    $int: {
      "^": "num;"
    },
    "+int": 0,
    Invocation: {
      "^": "Object;"
    },
    Iterable: {
      "^": "Object;",
      map$1: function(_, f) {
        return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "Iterable", 0), null);
      },
      where$1: ["super$Iterable$where", function(_, f) {
        var t1 = new H.WhereIterable(this, f);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Iterable", 0)];
        return t1;
      }],
      contains$1: function(_, element) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (J.$eq$(t1.get$current(), element))
            return true;
        return false;
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      join$1: function(_, separator) {
        var iterator, buffer, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        buffer = new P.StringBuffer("");
        if (separator === "") {
          do
            buffer._contents += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          buffer._contents = H.S(iterator.get$current());
          for (; iterator.moveNext$0();) {
            buffer._contents += separator;
            buffer._contents += H.S(iterator.get$current());
          }
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      toList$1$growable: function(_, growable) {
        return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$isNotEmpty: function(_) {
        return this.get$isEmpty(this) !== true;
      },
      get$last: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        do
          result = it.get$current();
        while (it.moveNext$0());
        return result;
      },
      get$single: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        result = it.get$current();
        if (it.moveNext$0())
          throw H.wrapException(H.IterableElementError_tooMany());
        return result;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      },
      $asIterable: null
    },
    Iterator: {
      "^": "Object;"
    },
    List: {
      "^": "Object;",
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    "+List": 0,
    Map: {
      "^": "Object;",
      $asMap: null
    },
    Null: {
      "^": "Object;",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;"
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: [function(_, other) {
        return this === other;
      }, null, "get$==", 2, 0, 130, 69, [], "=="],
      get$hashCode: [function(_) {
        return H.Primitives_objectHashCode(this);
      }, null, null, 1, 0, 24, "hashCode"],
      toString$0: ["super$Object$toString", function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      }, "call$0", "get$toString", 0, 0, 15, "toString"],
      noSuchMethod$1: [function(_, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, "call$1", "get$noSuchMethod", 2, 0, 140, 62, [], "noSuchMethod"],
      get$runtimeType: [function(_) {
        return new H.TypeImpl(H.getRuntimeTypeString(this), null);
      }, null, null, 1, 0, 134, "runtimeType"]
    },
    Match: {
      "^": "Object;"
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;"
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents@",
      get$length: function(_) {
        return this._contents.length;
      },
      get$isEmpty: function(_) {
        return this._contents.length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._contents.length !== 0;
      },
      write$1: function(obj) {
        this._contents += H.S(obj);
      },
      clear$0: function(_) {
        this._contents = "";
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }}
    },
    Symbol0: {
      "^": "Object;"
    },
    Type: {
      "^": "Object;"
    },
    Uri: {
      "^": "Object;_host,_port,_path,scheme,_userInfo,_query,_fragment,_pathSegments,_queryParameters",
      get$host: function(_) {
        var t1 = this._host;
        if (t1 == null)
          return "";
        if (J.getInterceptor$s(t1).startsWith$1(t1, "["))
          return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
        return t1;
      },
      get$port: function(_) {
        var t1 = this._port;
        if (t1 == null)
          return P.Uri__defaultPort(this.scheme);
        return t1;
      },
      get$path: function(_) {
        return this._path;
      },
      get$isAbsolute: function() {
        if (this.scheme !== "") {
          var t1 = this._fragment;
          t1 = (t1 == null ? "" : t1) === "";
        } else
          t1 = false;
        return t1;
      },
      _merge$2: function(base, reference) {
        var backCount, refStart, baseEnd, newEnd, delta, t1;
        if (base.length === 0)
          return "/" + reference;
        for (backCount = 0, refStart = 0; C.JSString_methods.startsWith$2(reference, "../", refStart);) {
          refStart += 3;
          ++backCount;
        }
        baseEnd = C.JSString_methods.lastIndexOf$1(base, "/");
        while (true) {
          if (!(baseEnd > 0 && backCount > 0))
            break;
          newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
          if (newEnd < 0)
            break;
          delta = baseEnd - newEnd;
          t1 = delta !== 2;
          if (!t1 || delta === 3)
            if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
              t1 = !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            break;
          --backCount;
          baseEnd = newEnd;
        }
        return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
      },
      _hasDotSegments$1: function(path) {
        if (path.length > 0 && C.JSString_methods.codeUnitAt$1(path, 0) === 46)
          return true;
        return C.JSString_methods.indexOf$1(path, "/.") !== -1;
      },
      _removeDotSegments$1: function(path) {
        var output, t1, t2, appendSlash, _i, segment, t3;
        if (!this._hasDotSegments$1(path))
          return path;
        output = [];
        for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          segment = t1[_i];
          if (J.$eq$(segment, "..")) {
            t3 = output.length;
            if (t3 !== 0)
              t3 = t3 !== 1 || !J.$eq$(output[0], "");
            else
              t3 = false;
            if (t3)
              output.pop();
            appendSlash = true;
          } else if ("." === segment)
            appendSlash = true;
          else {
            output.push(segment);
            appendSlash = false;
          }
        }
        if (appendSlash)
          output.push("");
        return C.JSArray_methods.join$1(output, "/");
      },
      resolveUri$1: function(reference) {
        var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, fragment;
        targetScheme = reference.scheme;
        if (targetScheme.length !== 0) {
          if (reference._host != null) {
            targetUserInfo = reference._userInfo;
            targetHost = reference.get$host(reference);
            targetPort = reference._port != null ? reference.get$port(reference) : null;
          } else {
            targetUserInfo = "";
            targetHost = null;
            targetPort = null;
          }
          targetPath = this._removeDotSegments$1(reference._path);
          targetQuery = reference._query;
          if (targetQuery != null)
            ;
          else
            targetQuery = null;
        } else {
          targetScheme = this.scheme;
          if (reference._host != null) {
            targetUserInfo = reference._userInfo;
            targetHost = reference.get$host(reference);
            targetPort = P.Uri__makePort(reference._port != null ? reference.get$port(reference) : null, targetScheme);
            targetPath = this._removeDotSegments$1(reference._path);
            targetQuery = reference._query;
            if (targetQuery != null)
              ;
            else
              targetQuery = null;
          } else {
            t1 = reference._path;
            if (t1 === "") {
              targetPath = this._path;
              targetQuery = reference._query;
              if (targetQuery != null)
                ;
              else
                targetQuery = this._query;
            } else {
              targetPath = C.JSString_methods.startsWith$1(t1, "/") ? this._removeDotSegments$1(t1) : this._removeDotSegments$1(this._merge$2(this._path, t1));
              targetQuery = reference._query;
              if (targetQuery != null)
                ;
              else
                targetQuery = null;
            }
            targetUserInfo = this._userInfo;
            targetHost = this._host;
            targetPort = this._port;
          }
        }
        fragment = reference._fragment;
        if (fragment != null)
          ;
        else
          fragment = null;
        return new P.Uri(targetHost, targetPort, targetPath, targetScheme, targetUserInfo, targetQuery, fragment, null, null);
      },
      toString$0: function(_) {
        var t1, t2, t3, t4;
        t1 = this.scheme;
        t2 = "" !== t1 ? t1 + ":" : "";
        t3 = this._host;
        t4 = t3 == null;
        if (!t4 || C.JSString_methods.startsWith$1(this._path, "//") || t1 === "file") {
          t1 = t2 + "//";
          t2 = this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += H.S(t3);
          t2 = this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += this._path;
        t2 = this._query;
        if (t2 != null)
          t1 = t1 + "?" + H.S(t2);
        t2 = this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + H.S(t2);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $eq: function(_, other) {
        var t1, t2, t3, t4;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isUri)
          return false;
        if (this.scheme === other.scheme)
          if (this._host != null === (other._host != null))
            if (this._userInfo === other._userInfo) {
              t2 = this.get$host(this);
              t3 = t1.get$host(other);
              if (t2 == null ? t3 == null : t2 === t3) {
                t2 = this.get$port(this);
                t1 = t1.get$port(other);
                if (t2 == null ? t1 == null : t2 === t1)
                  if (this._path === other._path) {
                    t1 = this._query;
                    t2 = t1 == null;
                    t3 = other._query;
                    t4 = t3 == null;
                    if (!t2 === !t4) {
                      if (t2)
                        t1 = "";
                      if (t1 == null ? (t4 ? "" : t3) == null : t1 === (t4 ? "" : t3)) {
                        t1 = this._fragment;
                        t2 = t1 == null;
                        t3 = other._fragment;
                        t4 = t3 == null;
                        if (!t2 === !t4) {
                          if (t2)
                            t1 = "";
                          t1 = t1 == null ? (t4 ? "" : t3) == null : t1 === (t4 ? "" : t3);
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4, t5;
        t1 = new P.Uri_hashCode_combine();
        t2 = this.get$host(this);
        t3 = this.get$port(this);
        t4 = this._query;
        if (t4 == null)
          t4 = "";
        t5 = this._fragment;
        return t1.call$2(this.scheme, t1.call$2(this._userInfo, t1.call$2(t2, t1.call$2(t3, t1.call$2(this._path, t1.call$2(t4, t1.call$2(t5 == null ? "" : t5, 1)))))));
      },
      static: {Uri__defaultPort: function(scheme) {
          if (scheme === "http")
            return 80;
          if (scheme === "https")
            return 443;
          return 0;
        }, Uri_parse: function(uri, start, end) {
          var t1, pathStart, state, t2, i, $char, index, t3, t4, path, numberSignIndex, query, fragment;
          t1 = {};
          t1._captured_end_0 = end;
          t1._captured_scheme_1 = "";
          t1._captured_userinfo_2 = "";
          t1._captured_host_3 = null;
          t1._captured_port_4 = null;
          t1._captured_end_0 = J.get$length$asx(uri);
          t1._captured_index_5 = start;
          t1._captured_char_6 = -1;
          t2 = J.getInterceptor$s(uri);
          i = start;
          while (true) {
            if (!(i < t1._captured_end_0)) {
              pathStart = start;
              state = 0;
              break;
            }
            $char = t2.codeUnitAt$1(uri, i);
            t1._captured_char_6 = $char;
            if ($char === 63 || $char === 35) {
              pathStart = start;
              state = 0;
              break;
            }
            if ($char === 47) {
              state = i === start ? 2 : 1;
              pathStart = start;
              break;
            }
            if ($char === 58) {
              if (i === start)
                P.Uri__fail(uri, start, "Invalid empty scheme");
              t1._captured_scheme_1 = P.Uri__makeScheme(uri, start, i);
              ++i;
              if (i === t1._captured_end_0) {
                t1._captured_char_6 = -1;
                state = 0;
              } else {
                $char = t2.codeUnitAt$1(uri, i);
                t1._captured_char_6 = $char;
                if ($char === 63 || $char === 35)
                  state = 0;
                else
                  state = $char === 47 ? 2 : 1;
              }
              pathStart = i;
              break;
            }
            ++i;
            t1._captured_char_6 = -1;
          }
          t1._captured_index_5 = i;
          if (state === 2) {
            index = i + 1;
            t1._captured_index_5 = index;
            if (index === t1._captured_end_0) {
              t1._captured_char_6 = -1;
              state = 0;
            } else {
              $char = t2.codeUnitAt$1(uri, t1._captured_index_5);
              t1._captured_char_6 = $char;
              if ($char === 47) {
                t1._captured_index_5 = J.$add$ns(t1._captured_index_5, 1);
                new P.Uri_parse_parseAuth(t1, uri, -1).call$0();
                pathStart = t1._captured_index_5;
              }
              t3 = t1._captured_char_6;
              state = t3 === 63 || t3 === 35 || t3 === -1 ? 0 : 1;
            }
          }
          if (state === 1)
            for (; index = J.$add$ns(t1._captured_index_5, 1), t1._captured_index_5 = index, J.$lt$n(index, t1._captured_end_0);) {
              $char = t2.codeUnitAt$1(uri, t1._captured_index_5);
              t1._captured_char_6 = $char;
              if ($char === 63 || $char === 35)
                break;
              t1._captured_char_6 = -1;
            }
          t3 = t1._captured_scheme_1;
          t4 = t1._captured_host_3;
          path = P.Uri__makePath(uri, pathStart, t1._captured_index_5, null, t4 != null, t3 === "file");
          t3 = t1._captured_char_6;
          if (t3 === 63) {
            i = J.$add$ns(t1._captured_index_5, 1);
            while (true) {
              t3 = J.getInterceptor$n(i);
              if (!t3.$lt(i, t1._captured_end_0)) {
                numberSignIndex = -1;
                break;
              }
              if (t2.codeUnitAt$1(uri, i) === 35) {
                numberSignIndex = i;
                break;
              }
              i = t3.$add(i, 1);
            }
            t2 = J.getInterceptor$n(numberSignIndex);
            t3 = t2.$lt(numberSignIndex, 0);
            t4 = t1._captured_index_5;
            if (t3) {
              query = P.Uri__makeQuery(uri, J.$add$ns(t4, 1), t1._captured_end_0, null);
              fragment = null;
            } else {
              query = P.Uri__makeQuery(uri, J.$add$ns(t4, 1), numberSignIndex, null);
              fragment = P.Uri__makeFragment(uri, t2.$add(numberSignIndex, 1), t1._captured_end_0);
            }
          } else {
            fragment = t3 === 35 ? P.Uri__makeFragment(uri, J.$add$ns(t1._captured_index_5, 1), t1._captured_end_0) : null;
            query = null;
          }
          t2 = t1._captured_scheme_1;
          t3 = t1._captured_userinfo_2;
          return new P.Uri(t1._captured_host_3, t1._captured_port_4, path, t2, t3, query, fragment, null, null);
        }, Uri__fail: function(uri, index, message) {
          throw H.wrapException(new P.FormatException(message, uri, index));
        }, Uri__makePort: function(port, scheme) {
          if (port != null && port === P.Uri__defaultPort(scheme))
            return;
          return port;
        }, Uri__makeHost: function(host, start, end, strictIPv6) {
          var t1, t2, t3, i;
          if (host == null)
            return;
          t1 = J.getInterceptor(start);
          if (t1.$eq(start, end))
            return "";
          t2 = J.getInterceptor$s(host);
          if (t2.codeUnitAt$1(host, start) === 91) {
            t3 = J.getInterceptor$n(end);
            if (t2.codeUnitAt$1(host, t3.$sub(end, 1)) !== 93)
              P.Uri__fail(host, start, "Missing end `]` to match `[` in host");
            P.Uri_parseIPv6Address(host, t1.$add(start, 1), t3.$sub(end, 1));
            return t2.substring$2(host, start, end).toLowerCase();
          }
          if (!strictIPv6)
            for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
              if (t2.codeUnitAt$1(host, i) === 58) {
                P.Uri_parseIPv6Address(host, start, end);
                return "[" + H.S(host) + "]";
              }
          return P.Uri__normalizeRegName(host, start, end);
        }, Uri__normalizeRegName: function(host, start, end) {
          var t1, index, sectionStart, buffer, isNormalized, t2, $char, replacement, t3, slice, sourceLength, tail;
          for (t1 = J.getInterceptor$s(host), index = start, sectionStart = index, buffer = null, isNormalized = true; t2 = J.getInterceptor$n(index), t2.$lt(index, end);) {
            $char = t1.codeUnitAt$1(host, index);
            if ($char === 37) {
              replacement = P.Uri__normalizeEscape(host, index, true);
              t3 = replacement == null;
              if (t3 && isNormalized) {
                index = t2.$add(index, 3);
                continue;
              }
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = t1.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              buffer._contents = buffer._contents + slice;
              if (t3) {
                replacement = t1.substring$2(host, index, t2.$add(index, 3));
                sourceLength = 3;
              } else if (replacement === "%") {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
              buffer._contents += replacement;
              index = t2.$add(index, sourceLength);
              sectionStart = index;
              isNormalized = true;
            } else if ($char < 127 && (C.List_qNA[$char >>> 4] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0) {
              if (isNormalized && 65 <= $char && 90 >= $char) {
                if (buffer == null)
                  buffer = new P.StringBuffer("");
                if (J.$lt$n(sectionStart, index)) {
                  t3 = t1.substring$2(host, sectionStart, index);
                  buffer._contents = buffer._contents + t3;
                  sectionStart = index;
                }
                isNormalized = false;
              }
              index = t2.$add(index, 1);
            } else if ($char <= 93 && (C.List_2Vk[$char >>> 4] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0)
              P.Uri__fail(host, index, "Invalid character");
            else {
              if (($char & 64512) === 55296 && J.$lt$n(t2.$add(index, 1), end)) {
                tail = t1.codeUnitAt$1(host, t2.$add(index, 1));
                if ((tail & 64512) === 56320) {
                  $char = (65536 | ($char & 1023) << 10 | tail & 1023) >>> 0;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = t1.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              buffer._contents = buffer._contents + slice;
              buffer._contents += P.Uri__escapeChar($char);
              index = t2.$add(index, sourceLength);
              sectionStart = index;
            }
          }
          if (buffer == null)
            return t1.substring$2(host, start, end);
          if (J.$lt$n(sectionStart, end)) {
            slice = t1.substring$2(host, sectionStart, end);
            buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, Uri__makeScheme: function(scheme, start, end) {
          var t1, firstCodeUnit, allLowercase, t2, i, codeUnit;
          if (start === end)
            return "";
          t1 = J.getInterceptor$s(scheme);
          firstCodeUnit = t1.codeUnitAt$1(scheme, start);
          allLowercase = firstCodeUnit >= 97;
          if (!(allLowercase && firstCodeUnit <= 122))
            t2 = firstCodeUnit >= 65 && firstCodeUnit <= 90;
          else
            t2 = true;
          if (!t2)
            P.Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
          for (i = start; i < end; ++i) {
            codeUnit = t1.codeUnitAt$1(scheme, i);
            if (!(codeUnit < 128 && (C.List_JYB[codeUnit >>> 4] & C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0))
              P.Uri__fail(scheme, i, "Illegal scheme character");
            if (codeUnit < 97 || codeUnit > 122)
              allLowercase = false;
          }
          scheme = t1.substring$2(scheme, start, end);
          return !allLowercase ? scheme.toLowerCase() : scheme;
        }, Uri__makeUserInfo: function(userInfo, start, end) {
          if (userInfo == null)
            return "";
          return P.Uri__normalize(userInfo, start, end, C.List_gRj);
        }, Uri__makePath: function(path, start, end, pathSegments, ensureLeadingSlash, isFile) {
          var t1, result;
          t1 = path == null;
          if (t1 && true)
            return isFile ? "/" : "";
          t1 = !t1;
          if (t1)
            ;
          result = t1 ? P.Uri__normalize(path, start, end, C.List_qg4) : C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()).join$1(0, "/");
          if (result.length === 0) {
            if (isFile)
              return "/";
          } else if ((isFile || ensureLeadingSlash) && C.JSString_methods.codeUnitAt$1(result, 0) !== 47)
            return "/" + result;
          return result;
        }, Uri__makeQuery: function(query, start, end, queryParameters) {
          var t1, t2, result;
          t1 = {};
          t2 = query == null;
          if (t2 && queryParameters == null)
            return;
          t2 = !t2;
          if (t2 && queryParameters != null)
            throw H.wrapException(P.ArgumentError$("Both query and queryParameters specified"));
          if (t2)
            return P.Uri__normalize(query, start, end, C.List_CVk);
          result = new P.StringBuffer("");
          t1._captured_first_0 = true;
          queryParameters.forEach$1(0, new P.Uri__makeQuery_closure(t1, result));
          t1 = result._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, Uri__makeFragment: function(fragment, start, end) {
          if (fragment == null)
            return;
          return P.Uri__normalize(fragment, start, end, C.List_CVk);
        }, Uri__isHexDigit: function($char) {
          if (57 >= $char)
            return 48 <= $char;
          $char |= 32;
          return 97 <= $char && 102 >= $char;
        }, Uri__hexValue: function($char) {
          if (57 >= $char)
            return $char - 48;
          return ($char | 32) - 87;
        }, Uri__normalizeEscape: function(source, index, lowerCase) {
          var t1, t2, firstDigit, secondDigit, value;
          t1 = J.getInterceptor$ns(index);
          t2 = J.getInterceptor$asx(source);
          if (J.$ge$n(t1.$add(index, 2), t2.get$length(source)))
            return "%";
          firstDigit = t2.codeUnitAt$1(source, t1.$add(index, 1));
          secondDigit = t2.codeUnitAt$1(source, t1.$add(index, 2));
          if (!P.Uri__isHexDigit(firstDigit) || !P.Uri__isHexDigit(secondDigit))
            return "%";
          value = P.Uri__hexValue(firstDigit) * 16 + P.Uri__hexValue(secondDigit);
          if (value < 127 && (C.List_nxB[C.JSInt_methods._shrOtherPositive$1(value, 4)] & C.JSInt_methods._shlPositive$1(1, value & 15)) !== 0)
            return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
          if (firstDigit >= 97 || secondDigit >= 97)
            return t2.substring$2(source, index, t1.$add(index, 3)).toUpperCase();
          return;
        }, Uri__escapeChar: function($char) {
          var codeUnits, flag, encodedBytes, index, $byte;
          if ($char < 128) {
            codeUnits = Array(3);
            codeUnits.fixed$length = Array;
            codeUnits[0] = 37;
            codeUnits[1] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $char >>> 4);
            codeUnits[2] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $char & 15);
          } else {
            if ($char > 2047)
              if ($char > 65535) {
                flag = 240;
                encodedBytes = 4;
              } else {
                flag = 224;
                encodedBytes = 3;
              }
            else {
              flag = 192;
              encodedBytes = 2;
            }
            codeUnits = Array(3 * encodedBytes);
            codeUnits.fixed$length = Array;
            for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
              $byte = C.JSInt_methods._shrReceiverPositive$1($char, 6 * encodedBytes) & 63 | flag;
              codeUnits[index] = 37;
              codeUnits[index + 1] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte >>> 4);
              codeUnits[index + 2] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15);
              index += 3;
            }
          }
          return P.String_String$fromCharCodes(codeUnits, 0, null);
        }, Uri__normalize: function(component, start, end, charTable) {
          var t1, index, sectionStart, buffer, t2, $char, replacement, sourceLength, tail, t3;
          for (t1 = J.getInterceptor$s(component), index = start, sectionStart = index, buffer = null; t2 = J.getInterceptor$n(index), t2.$lt(index, end);) {
            $char = t1.codeUnitAt$1(component, index);
            if ($char < 127 && (charTable[$char >>> 4] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0)
              index = t2.$add(index, 1);
            else {
              if ($char === 37) {
                replacement = P.Uri__normalizeEscape(component, index, false);
                if (replacement == null) {
                  index = t2.$add(index, 3);
                  continue;
                }
                if ("%" === replacement) {
                  replacement = "%25";
                  sourceLength = 1;
                } else
                  sourceLength = 3;
              } else if ($char <= 93 && (C.List_2Vk[$char >>> 4] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0) {
                P.Uri__fail(component, index, "Invalid character");
                replacement = null;
                sourceLength = null;
              } else {
                if (($char & 64512) === 55296)
                  if (J.$lt$n(t2.$add(index, 1), end)) {
                    tail = t1.codeUnitAt$1(component, t2.$add(index, 1));
                    if ((tail & 64512) === 56320) {
                      $char = (65536 | ($char & 1023) << 10 | tail & 1023) >>> 0;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                else
                  sourceLength = 1;
                replacement = P.Uri__escapeChar($char);
              }
              if (buffer == null)
                buffer = new P.StringBuffer("");
              t3 = t1.substring$2(component, sectionStart, index);
              buffer._contents = buffer._contents + t3;
              buffer._contents += H.S(replacement);
              index = t2.$add(index, sourceLength);
              sectionStart = index;
            }
          }
          if (buffer == null)
            return t1.substring$2(component, start, end);
          if (J.$lt$n(sectionStart, end))
            buffer._contents += t1.substring$2(component, sectionStart, end);
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, Uri_parseIPv4Address: function(host) {
          var t1, bytes;
          t1 = new P.Uri_parseIPv4Address_error();
          bytes = host.split(".");
          if (bytes.length !== 4)
            t1.call$1("IPv4 address should contain exactly 4 parts");
          t1 = new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1));
          t1.$builtinTypeInfo = [null, null];
          return t1.toList$0(0);
        }, Uri_parseIPv6Address: function(host, start, end) {
          var error, parseHex, parts, partStart, last, i, wildcardSeen, t1, atEnd, isLastWildcard, exception, bytes, index, value, wildCardLength, j;
          if (end == null)
            end = J.get$length$asx(host);
          error = new P.Uri_parseIPv6Address_error(host);
          parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
          if (J.$lt$n(J.get$length$asx(host), 2))
            error.call$1("address is too short");
          parts = [];
          partStart = start;
          for (i = start, wildcardSeen = false; t1 = J.getInterceptor$n(i), t1.$lt(i, end); i = J.$add$ns(i, 1))
            if (J.codeUnitAt$1$s(host, i) === 58) {
              if (t1.$eq(i, start)) {
                i = t1.$add(i, 1);
                if (J.codeUnitAt$1$s(host, i) !== 58)
                  error.call$2("invalid start colon.", i);
                partStart = i;
              }
              t1 = J.getInterceptor(i);
              if (t1.$eq(i, partStart)) {
                if (wildcardSeen)
                  error.call$2("only one wildcard `::` is allowed", i);
                J.add$1$ax(parts, -1);
                wildcardSeen = true;
              } else
                J.add$1$ax(parts, parseHex.call$2(partStart, i));
              partStart = t1.$add(i, 1);
            }
          if (J.get$length$asx(parts) === 0)
            error.call$1("too few parts");
          atEnd = J.$eq$(partStart, end);
          isLastWildcard = J.$eq$(J.get$last$ax(parts), -1);
          if (atEnd && !isLastWildcard)
            error.call$2("expected a part after last `:`", end);
          if (!atEnd)
            try {
              J.add$1$ax(parts, parseHex.call$2(partStart, end));
            } catch (exception) {
              H.unwrapException(exception);
              try {
                last = P.Uri_parseIPv4Address(J.substring$2$s(host, partStart, end));
                J.add$1$ax(parts, (J.$shl$n(J.$index$asx(last, 0), 8) | J.$index$asx(last, 1)) >>> 0);
                J.add$1$ax(parts, (J.$shl$n(J.$index$asx(last, 2), 8) | J.$index$asx(last, 3)) >>> 0);
              } catch (exception) {
                H.unwrapException(exception);
                error.call$2("invalid end of IPv6 address.", partStart);
              }
            }
          if (wildcardSeen) {
            if (J.get$length$asx(parts) > 7)
              error.call$1("an address with a wildcard must have less than 7 parts");
          } else if (J.get$length$asx(parts) !== 8)
            error.call$1("an address without a wildcard must contain exactly 8 parts");
          bytes = Array(16);
          bytes.$builtinTypeInfo = [P.$int];
          for (i = 0, index = 0; i < J.get$length$asx(parts); ++i) {
            value = J.$index$asx(parts, i);
            t1 = J.getInterceptor(value);
            if (t1.$eq(value, -1)) {
              wildCardLength = 9 - J.get$length$asx(parts);
              for (j = 0; j < wildCardLength; ++j) {
                bytes[index] = 0;
                bytes[index + 1] = 0;
                index += 2;
              }
            } else {
              bytes[index] = t1.$shr(value, 8);
              bytes[index + 1] = t1.$and(value, 255);
              index += 2;
            }
          }
          return bytes;
        }, Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
          var t1, result, bytes, t2, i, $byte;
          t1 = new P.Uri__uriEncode_byteToHex();
          result = new P.StringBuffer("");
          bytes = encoding.get$encoder().convert$1(text);
          for (t2 = bytes.length, i = 0; i < t2; ++i) {
            $byte = bytes[i];
            if ($byte < 128 && (canonicalTable[$byte >>> 4] & C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0)
              result._contents += H.Primitives_stringFromCharCode($byte);
            else if (spaceToPlus && $byte === 32)
              result._contents += H.Primitives_stringFromCharCode(43);
            else {
              result._contents += H.Primitives_stringFromCharCode(37);
              t1.call$2($byte, result);
            }
          }
          t1 = result._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, Uri__hexCharPairToByte: function(s, pos) {
          var t1, $byte, i, charCode;
          for (t1 = J.getInterceptor$s(s), $byte = 0, i = 0; i < 2; ++i) {
            charCode = t1.codeUnitAt$1(s, pos + i);
            if (48 <= charCode && charCode <= 57)
              $byte = $byte * 16 + charCode - 48;
            else {
              charCode |= 32;
              if (97 <= charCode && charCode <= 102)
                $byte = $byte * 16 + charCode - 87;
              else
                throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
            }
          }
          return $byte;
        }, Uri__uriDecode: function(text, encoding, plusToSpace) {
          var t1, simple, i, codeUnit, bytes;
          t1 = J.getInterceptor$asx(text);
          simple = true;
          i = 0;
          while (true) {
            if (!(i < t1.get$length(text) && simple))
              break;
            codeUnit = t1.codeUnitAt$1(text, i);
            simple = codeUnit !== 37 && codeUnit !== 43;
            ++i;
          }
          if (simple)
            if (encoding === C.Utf8Codec_false || false)
              return text;
            else
              bytes = t1.get$codeUnits(text);
          else {
            bytes = [];
            for (i = 0; i < t1.get$length(text); ++i) {
              codeUnit = t1.codeUnitAt$1(text, i);
              if (codeUnit > 127)
                throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
              if (codeUnit === 37) {
                if (i + 3 > t1.get$length(text))
                  throw H.wrapException(P.ArgumentError$("Truncated URI"));
                bytes.push(P.Uri__hexCharPairToByte(text, i + 1));
                i += 2;
              } else if (plusToSpace && codeUnit === 43)
                bytes.push(32);
              else
                bytes.push(codeUnit);
            }
          }
          return encoding.decode$1(bytes);
        }}
    },
    Uri_parse_parseAuth: {
      "^": "Closure:0;_core$_box_0,_captured_uri_1,_captured_EOI_2",
      call$0: function() {
        var t1, authStart, t2, t3, $char, lastColon, lastAt, char0, endBracket, hostEnd, t4, hostStart, i, portNumber, digit;
        t1 = this._core$_box_0;
        if (J.$eq$(t1._captured_index_5, t1._captured_end_0)) {
          t1._captured_char_6 = this._captured_EOI_2;
          return;
        }
        authStart = t1._captured_index_5;
        t2 = this._captured_uri_1;
        t3 = J.getInterceptor$s(t2);
        t1._captured_char_6 = t3.codeUnitAt$1(t2, authStart);
        for ($char = this._captured_EOI_2, lastColon = -1, lastAt = -1; J.$lt$n(t1._captured_index_5, t1._captured_end_0);) {
          char0 = t3.codeUnitAt$1(t2, t1._captured_index_5);
          t1._captured_char_6 = char0;
          if (char0 === 47 || char0 === 63 || char0 === 35)
            break;
          if (char0 === 64) {
            lastAt = t1._captured_index_5;
            lastColon = -1;
          } else if (char0 === 58)
            lastColon = t1._captured_index_5;
          else if (char0 === 91) {
            endBracket = t3.indexOf$2(t2, "]", J.$add$ns(t1._captured_index_5, 1));
            if (J.$eq$(endBracket, -1)) {
              t1._captured_index_5 = t1._captured_end_0;
              t1._captured_char_6 = $char;
              lastColon = -1;
              break;
            } else
              t1._captured_index_5 = endBracket;
            lastColon = -1;
          }
          t1._captured_index_5 = J.$add$ns(t1._captured_index_5, 1);
          t1._captured_char_6 = $char;
        }
        hostEnd = t1._captured_index_5;
        t4 = J.getInterceptor$n(lastAt);
        if (t4.$ge(lastAt, 0)) {
          t1._captured_userinfo_2 = P.Uri__makeUserInfo(t2, authStart, lastAt);
          hostStart = t4.$add(lastAt, 1);
        } else
          hostStart = authStart;
        t4 = J.getInterceptor$n(lastColon);
        if (t4.$ge(lastColon, 0)) {
          if (J.$lt$n(t4.$add(lastColon, 1), t1._captured_index_5))
            for (i = t4.$add(lastColon, 1), portNumber = 0; t4 = J.getInterceptor$n(i), t4.$lt(i, t1._captured_index_5); i = t4.$add(i, 1)) {
              digit = t3.codeUnitAt$1(t2, i);
              if (48 > digit || 57 < digit)
                P.Uri__fail(t2, i, "Invalid port number");
              portNumber = portNumber * 10 + (digit - 48);
            }
          else
            portNumber = null;
          t1._captured_port_4 = P.Uri__makePort(portNumber, t1._captured_scheme_1);
          hostEnd = lastColon;
        }
        t1._captured_host_3 = P.Uri__makeHost(t2, hostStart, hostEnd, true);
        if (J.$lt$n(t1._captured_index_5, t1._captured_end_0))
          t1._captured_char_6 = t3.codeUnitAt$1(t2, t1._captured_index_5);
      }
    },
    Uri__makePath_closure: {
      "^": "Closure:2;",
      call$1: function(s) {
        return P.Uri__uriEncode(C.List_qg40, s, C.Utf8Codec_false, false);
      }
    },
    Uri__makeQuery_closure: {
      "^": "Closure:4;_core$_box_0,_core$_captured_result_1",
      call$2: function(key, value) {
        var t1 = this._core$_box_0;
        if (!t1._captured_first_0)
          this._core$_captured_result_1._contents += "&";
        t1._captured_first_0 = false;
        t1 = this._core$_captured_result_1;
        t1._contents += P.Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true);
        if (value != null && J.get$isEmpty$asx(value) !== true) {
          t1._contents += "=";
          t1._contents += P.Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true);
        }
      }
    },
    Uri_hashCode_combine: {
      "^": "Closure:343;",
      call$2: function(part, current) {
        return current * 31 + J.get$hashCode$(part) & 1073741823;
      }
    },
    Uri_parseIPv4Address_error: {
      "^": "Closure:17;",
      call$1: function(msg) {
        throw H.wrapException(new P.FormatException("Illegal IPv4 address, " + msg, null, null));
      }
    },
    Uri_parseIPv4Address_closure: {
      "^": "Closure:2;_captured_error_0",
      call$1: [function(byteString) {
        var $byte, t1;
        $byte = H.Primitives_parseInt(byteString, null, null);
        t1 = J.getInterceptor$n($byte);
        if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
          this._captured_error_0.call$1("each part must be in the range of `0..255`");
        return $byte;
      }, null, null, 2, 0, null, 139, [], "call"]
    },
    Uri_parseIPv6Address_error: {
      "^": "Closure:351;_captured_host_0",
      call$2: function(msg, position) {
        throw H.wrapException(new P.FormatException("Illegal IPv6 address, " + msg, this._captured_host_0, position));
      },
      call$1: function(msg) {
        return this.call$2(msg, null);
      }
    },
    Uri_parseIPv6Address_parseHex: {
      "^": "Closure:352;_captured_host_1,_captured_error_2",
      call$2: function(start, end) {
        var value, t1;
        if (J.$gt$n(J.$sub$n(end, start), 4))
          this._captured_error_2.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
        value = H.Primitives_parseInt(J.substring$2$s(this._captured_host_1, start, end), 16, null);
        t1 = J.getInterceptor$n(value);
        if (t1.$lt(value, 0) || t1.$gt(value, 65535))
          this._captured_error_2.call$2("each part must be in the range of `0x0..0xFFFF`", start);
        return value;
      }
    },
    Uri__uriEncode_byteToHex: {
      "^": "Closure:4;",
      call$2: function($byte, buffer) {
        var t1 = J.getInterceptor$n($byte);
        buffer._contents += H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$shr($byte, 4)));
        buffer._contents += H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$and($byte, 15)));
      }
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    HttpRequest_getString: function(url, onProgress, withCredentials) {
      return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
    },
    HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
      var t1, completer, xhr, t2, t3;
      t1 = new P._Future(0, $.Zone__current, null);
      t1.$builtinTypeInfo = [W.HttpRequest];
      completer = new P._AsyncCompleter(t1);
      completer.$builtinTypeInfo = [W.HttpRequest];
      xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, method == null ? "GET" : method, url, true);
      if (withCredentials != null)
        xhr.withCredentials = withCredentials;
      if (mimeType != null)
        xhr.overrideMimeType(mimeType);
      t2 = new W._EventStream(xhr, "load", false);
      t2.$builtinTypeInfo = [null];
      t3 = new W._EventStreamSubscription(0, xhr, "load", W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), false);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      t3._tryResume$0();
      t2 = new W._EventStream(xhr, "error", false);
      t2.$builtinTypeInfo = [null];
      t3 = new W._EventStreamSubscription(0, xhr, "error", W._wrapZone(completer.get$completeError()), false);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      t3._tryResume$0();
      if (sendData != null)
        xhr.send(sendData);
      else
        xhr.send();
      return t1;
    },
    WebSocket_WebSocket: function(url, protocol_OR_protocols) {
      return new WebSocket(url);
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    _convertNativeToDart_Window: function(win) {
      if (win == null)
        return;
      return W._DOMWindowCrossFrame__createSafe(win);
    },
    _convertNativeToDart_XHR_Response: function(o) {
      if (!!J.getInterceptor(o).$isDocument)
        return o;
      return P.convertNativeToDart_AcceptStructuredClone(o, true);
    },
    _wrapZone: function(callback) {
      if (J.$eq$($.Zone__current, C.C__RootZone))
        return callback;
      return $.Zone__current.bindUnaryCallback$2$runGuarded(callback, true);
    },
    HtmlElement: {
      "^": "Element;",
      $isHtmlElement: 1,
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;type%",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLAnchorElement"
    },
    ApplicationCacheErrorEvent: {
      "^": "Event;message=,status=",
      "%": "ApplicationCacheErrorEvent"
    },
    AreaElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLAreaElement"
    },
    Blob: {
      "^": "Interceptor;type=",
      close$0: function(receiver) {
        return receiver.close();
      },
      $isBlob: 1,
      "%": ";Blob"
    },
    BodyElement: {
      "^": "HtmlElement;",
      get$onError: function(receiver) {
        var t1 = new W._ElementEventStreamImpl(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      get$onMessage: function(receiver) {
        var t1 = new W._ElementEventStreamImpl(receiver, "message", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;name%,type%,value%",
      "%": "HTMLButtonElement"
    },
    CanvasElement: {
      "^": "HtmlElement;",
      $isObject: 1,
      "%": "HTMLCanvasElement"
    },
    CharacterData: {
      "^": "Node;data%,length=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    CloseEvent: {
      "^": "Event;",
      $isCloseEvent: 1,
      "%": "CloseEvent"
    },
    CompositionEvent: {
      "^": "UIEvent;data=",
      "%": "CompositionEvent"
    },
    CustomEvent: {
      "^": "Event;",
      get$detail: function(receiver) {
        var t1 = receiver._dartDetail;
        if (t1 != null)
          return t1;
        return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
      },
      "%": "CustomEvent"
    },
    DeviceLightEvent: {
      "^": "Event;value=",
      "%": "DeviceLightEvent"
    },
    DialogElement: {
      "^": "HtmlElement;",
      close$1: function(receiver, $returnValue) {
        return receiver.close($returnValue);
      },
      "%": "HTMLDialogElement"
    },
    DivElement: {
      "^": "HtmlElement;",
      "%": ";HTMLDivElement"
    },
    Document: {
      "^": "Node;readyState=",
      get$onError: function(receiver) {
        var t1 = new W._EventStream(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isDocument: 1,
      "%": "Document|HTMLDocument|XMLDocument"
    },
    DocumentFragment: {
      "^": "Node;",
      get$children: function(receiver) {
        var t1;
        if (receiver._docChildren == null) {
          t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
          t1.$builtinTypeInfo = [null];
          receiver._docChildren = t1;
        }
        return receiver._docChildren;
      },
      set$children: function(receiver, value) {
        var copy, children, t1;
        copy = P.List_List$from(value, true, null);
        children = this.get$children(receiver);
        t1 = J.getInterceptor$ax(children);
        t1.clear$0(children);
        t1.addAll$1(children, copy);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "DocumentFragment|ShadowRoot"
    },
    DomError: {
      "^": "Interceptor;message=,name=",
      "%": "DOMError|FileError"
    },
    DomException: {
      "^": "Interceptor;message=",
      get$name: function(receiver) {
        var errorName = receiver.name;
        if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
          return "SecurityError";
        if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
          return "SyntaxError";
        return errorName;
      },
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomRectReadOnly: {
      "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$width(receiver);
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = this.get$height(receiver);
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(this.get$width(receiver));
        t4 = J.get$hashCode$(this.get$height(receiver));
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      $isObject: 1,
      "%": ";DOMRectReadOnly"
    },
    _ChildrenElementList: {
      "^": "ListBase;_html$_element,_childElements",
      contains$1: function(_, element) {
        return J.contains$1$asx(this._childElements, element);
      },
      get$isEmpty: function(_) {
        return this._html$_element.firstElementChild == null;
      },
      get$length: function(_) {
        return this._childElements.length;
      },
      $index: function(_, index) {
        return this._childElements[index];
      },
      $indexSet: function(_, index, value) {
        this._html$_element.replaceChild(value, this._childElements[index]);
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize element lists"));
      },
      add$1: function(_, value) {
        this._html$_element.appendChild(value);
        return value;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.toList$0(this);
        t2 = new J.ArrayIterator(t1, t1.length, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        return t2;
      },
      addAll$1: function(_, iterable) {
        var t1, t2;
        for (t1 = J.get$iterator$ax(iterable instanceof W._ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._html$_element; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      remove$1: function(_, object) {
        var t1;
        if (!!J.getInterceptor(object).$isElement) {
          t1 = this._html$_element;
          if (object.parentNode === t1) {
            t1.removeChild(object);
            return true;
          }
        }
        return false;
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._html$_element);
      },
      get$first: function(_) {
        var result = this._html$_element.firstElementChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$last: function(_) {
        var result = this._html$_element.lastElementChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$single: function(_) {
        if (this._childElements.length > 1)
          throw H.wrapException(new P.StateError("More than one element"));
        return this.get$first(this);
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asObject_ListMixin: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    Element: {
      "^": "Node;",
      get$attributes: function(receiver) {
        return new W._ElementAttributeMap(receiver);
      },
      set$attributes: function(receiver, value) {
        var t1, key;
        new W._ElementAttributeMap(receiver).clear$0(0);
        for (t1 = value.get$keys(value), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current();
          receiver.setAttribute(key, value.$index(0, key));
        }
      },
      get$children: function(receiver) {
        return new W._ChildrenElementList(receiver, receiver.children);
      },
      set$children: function(receiver, value) {
        var copy, children;
        copy = P.List_List$from(value, true, null);
        children = this.get$children(receiver);
        children.clear$0(0);
        children.addAll$1(0, copy);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      getAttribute$1: function(receiver, $name) {
        return receiver.getAttribute($name);
      },
      get$onError: function(receiver) {
        var t1 = new W._ElementEventStreamImpl(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      $isInterceptor: 1,
      "%": ";Element"
    },
    EmbedElement: {
      "^": "HtmlElement;name%,type%",
      "%": "HTMLEmbedElement"
    },
    ErrorEvent: {
      "^": "Event;error=,message=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;path=,type=",
      $isEvent: 1,
      $isObject: 1,
      "%": "AnimationPlayerEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|DeviceMotionEvent|DeviceOrientationEvent|ExtendableEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MediaKeyNeededEvent|MediaQueryListEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;ClipboardEvent|Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, useCapture);
      },
      removeEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._removeEventListener$3(receiver, type, listener, useCapture);
      },
      _addEventListener$3: function(receiver, type, listener, useCapture) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
      },
      _removeEventListener$3: function(receiver, type, listener, useCapture) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
      },
      "%": "MediaStream;EventTarget"
    },
    FetchEvent: {
      "^": "Event;request=",
      "%": "FetchEvent"
    },
    FieldSetElement: {
      "^": "HtmlElement;name%,type=",
      "%": "HTMLFieldSetElement"
    },
    File: {
      "^": "Blob;name=",
      "%": "File"
    },
    FormElement: {
      "^": "HtmlElement;length=,name%",
      "%": "HTMLFormElement"
    },
    HtmlCollection: {
      "^": "Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$single: function(receiver) {
        var len = receiver.length;
        if (len === 1)
          return receiver[0];
        if (len === 0)
          throw H.wrapException(new P.StateError("No elements"));
        throw H.wrapException(new P.StateError("More than one element"));
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin: {
      "^": "Interceptor_ListMixin+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    HttpRequest: {
      "^": "HttpRequestEventTarget;readyState=,responseText=,status=",
      get$response: function(receiver) {
        return W._convertNativeToDart_XHR_Response(receiver.response);
      },
      open$5$async$password$user: function(receiver, method, url, async, password, user) {
        return receiver.open(method, url, async, user, password);
      },
      open$3$async: function($receiver, method, url, async) {
        return $receiver.open(method, url, async);
      },
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      timeout$2$onTimeout: function($receiver, arg0, arg1) {
        return $receiver.timeout.call$2$onTimeout(arg0, arg1);
      },
      $isHttpRequest: 1,
      $isObject: 1,
      "%": "XMLHttpRequest"
    },
    HttpRequest_getString_closure: {
      "^": "Closure:354;",
      call$1: [function(xhr) {
        return J.get$responseText$x(xhr);
      }, null, null, 2, 0, null, 141, [], "call"]
    },
    HttpRequest_request_closure: {
      "^": "Closure:2;_captured_completer_1,_captured_xhr_2",
      call$1: [function(e) {
        var t1, t2, accepted, unknownRedirect, t3;
        t1 = this._captured_xhr_2;
        t2 = t1.status;
        accepted = t2 >= 200 && t2 < 300;
        unknownRedirect = t2 > 307 && t2 < 400;
        t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
        t3 = this._captured_completer_1;
        if (t2)
          t3.complete$1(0, t1);
        else
          t3.completeError$1(e);
      }, null, null, 2, 0, null, 29, [], "call"]
    },
    HttpRequestEventTarget: {
      "^": "EventTarget;",
      get$onError: function(receiver) {
        var t1 = new W._EventStream(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      "%": ";XMLHttpRequestEventTarget"
    },
    IFrameElement: {
      "^": "HtmlElement;name%",
      "%": "HTMLIFrameElement"
    },
    ImageData: {
      "^": "Interceptor;data=",
      $isImageData: 1,
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;",
      complete$1: function($receiver, arg0) {
        return $receiver.complete.call$1(arg0);
      },
      complete$0: function($receiver) {
        return $receiver.complete.call$0();
      },
      $isObject: 1,
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;defaultValue%,list=,max%,min%,name%,type%,value%",
      list$1: function($receiver, arg0) {
        return $receiver.list.call$1(arg0);
      },
      $isElement: 1,
      $isInterceptor: 1,
      $isObject: 1,
      $isNode: 1,
      "%": "HTMLInputElement"
    },
    KeygenElement: {
      "^": "HtmlElement;name%,type=",
      "%": "HTMLKeygenElement"
    },
    LIElement: {
      "^": "HtmlElement;value%",
      "%": "HTMLLIElement"
    },
    LinkElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLLinkElement"
    },
    MapElement: {
      "^": "HtmlElement;name%",
      "%": "HTMLMapElement"
    },
    MediaElement: {
      "^": "HtmlElement;duration=,error=,readyState=",
      pause$0: function(receiver) {
        return receiver.pause();
      },
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MediaKeyEvent: {
      "^": "Event;message=",
      "%": "MediaKeyEvent"
    },
    MediaKeyMessageEvent: {
      "^": "Event;message=",
      "%": "MediaKeyMessageEvent"
    },
    MediaStreamEvent: {
      "^": "Event;stream=",
      "%": "MediaStreamEvent"
    },
    MenuElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLMenuElement"
    },
    MenuItemElement: {
      "^": "HtmlElement;defaultValue:default%,type%",
      "%": "HTMLMenuItemElement"
    },
    MessageEvent: {
      "^": "Event;",
      get$data: function(receiver) {
        return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
      },
      $isMessageEvent: 1,
      $isEvent: 1,
      $isObject: 1,
      "%": "MessageEvent"
    },
    MetaElement: {
      "^": "HtmlElement;name%",
      "%": "HTMLMetaElement"
    },
    MeterElement: {
      "^": "HtmlElement;max%,min%,value%",
      "%": "HTMLMeterElement"
    },
    MidiMessageEvent: {
      "^": "Event;data=",
      "%": "MIDIMessageEvent"
    },
    MidiOutput: {
      "^": "MidiPort;",
      send$2: function(receiver, data, timestamp) {
        return receiver.send(data, timestamp);
      },
      send$1: function($receiver, data) {
        return $receiver.send(data);
      },
      "%": "MIDIOutput"
    },
    MidiPort: {
      "^": "EventTarget;name=,type=,version=",
      get$onDisconnect: function(receiver) {
        var t1 = new W._EventStream(receiver, "disconnect", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onDisconnect$0: function($receiver) {
        return this.get$onDisconnect($receiver).call$0();
      },
      "%": "MIDIInput;MIDIPort"
    },
    Navigator: {
      "^": "Interceptor;connection=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "Navigator"
    },
    NavigatorUserMediaError: {
      "^": "Interceptor;message=,name=",
      "%": "NavigatorUserMediaError"
    },
    NetworkInformation: {
      "^": "EventTarget;type=",
      "%": "NetworkInformation"
    },
    _ChildNodeListLazy: {
      "^": "ListBase;_this",
      get$last: function(_) {
        var result = this._this.lastChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      get$single: function(_) {
        var t1, l;
        t1 = this._this;
        l = t1.childNodes.length;
        if (l === 0)
          throw H.wrapException(new P.StateError("No elements"));
        if (l > 1)
          throw H.wrapException(new P.StateError("More than one element"));
        return t1.firstChild;
      },
      add$1: function(_, value) {
        this._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2, len, i;
        t1 = J.getInterceptor(iterable);
        if (!!t1.$is_ChildNodeListLazy) {
          t1 = iterable._this;
          t2 = this._this;
          if (t1 !== t2)
            for (len = t1.childNodes.length, i = 0; i < len; ++i)
              t2.appendChild(t1.firstChild);
          return;
        }
        for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      remove$1: function(_, object) {
        var t1;
        if (!J.getInterceptor(object).$isNode)
          return false;
        t1 = this._this;
        if (t1 !== object.parentNode)
          return false;
        t1.removeChild(object);
        return true;
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._this);
      },
      $indexSet: function(_, index, value) {
        var t1 = this._this;
        t1.replaceChild(value, t1.childNodes[index]);
      },
      get$iterator: function(_) {
        return C.NodeList_methods.get$iterator(this._this.childNodes);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on Node list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      get$length: function(_) {
        return this._this.childNodes.length;
      },
      set$length: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot set length on immutable List."));
      },
      $index: function(_, index) {
        return this._this.childNodes[index];
      },
      $asListBase: function() {
        return [W.Node];
      },
      $asObject_ListMixin: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;parent:parentElement=,text:textContent}",
      get$nodes: function(receiver) {
        return new W._ChildNodeListLazy(receiver);
      },
      set$nodes: function(receiver, value) {
        var copy, t1, _i;
        copy = P.List_List$from(value, true, null);
        this.set$text(receiver, "");
        for (t1 = copy.length, _i = 0; _i < copy.length; copy.length === t1 || (0, H.throwConcurrentModificationError)(copy), ++_i)
          receiver.appendChild(copy[_i]);
      },
      remove$0: function(receiver) {
        var t1 = receiver.parentNode;
        if (t1 != null)
          t1.removeChild(receiver);
      },
      replaceWith$1: function(receiver, otherNode) {
        var $parent, exception;
        try {
          $parent = receiver.parentNode;
          J._replaceChild$2$x($parent, otherNode, receiver);
        } catch (exception) {
          H.unwrapException(exception);
        }
        return receiver;
      },
      _clearChildren$0: function(receiver) {
        var t1;
        for (; t1 = receiver.firstChild, t1 != null;)
          receiver.removeChild(t1);
      },
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      contains$1: function(receiver, other) {
        return receiver.contains(other);
      },
      _replaceChild$2: function(receiver, newChild, oldChild) {
        return receiver.replaceChild(newChild, oldChild);
      },
      $isNode: 1,
      $isObject: 1,
      "%": ";Node"
    },
    "+Node": 0,
    NodeList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$single: function(receiver) {
        var len = receiver.length;
        if (len === 1)
          return receiver[0];
        if (len === 0)
          throw H.wrapException(new P.StateError("No elements"));
        throw H.wrapException(new P.StateError("More than one element"));
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "NodeList|RadioNodeList"
    },
    Interceptor_ListMixin0: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin0: {
      "^": "Interceptor_ListMixin0+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    OListElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;data%,name%,type%",
      "%": "HTMLObjectElement"
    },
    OptionElement: {
      "^": "HtmlElement;value%",
      "%": "HTMLOptionElement"
    },
    OutputElement: {
      "^": "HtmlElement;defaultValue%,name%,type=,value%",
      "%": "HTMLOutputElement"
    },
    ParamElement: {
      "^": "HtmlElement;name%,value%",
      "%": "HTMLParamElement"
    },
    PluginPlaceholderElement: {
      "^": "DivElement;message=",
      "%": "PluginPlaceholderElement"
    },
    PositionError: {
      "^": "Interceptor;message=",
      "%": "PositionError"
    },
    ProgressElement: {
      "^": "HtmlElement;max%,value%",
      "%": "HTMLProgressElement"
    },
    ProgressEvent: {
      "^": "Event;loaded=",
      "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
    },
    PushEvent: {
      "^": "Event;data=",
      "%": "PushEvent"
    },
    ScriptElement: {
      "^": "HtmlElement;nonce%,type%",
      "%": "HTMLScriptElement"
    },
    SelectElement: {
      "^": "HtmlElement;length=,name%,type=,value%",
      "%": "HTMLSelectElement"
    },
    SourceElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLSourceElement"
    },
    SpeechRecognitionError: {
      "^": "Event;error=,message=",
      "%": "SpeechRecognitionError"
    },
    SpeechSynthesisEvent: {
      "^": "Event;name=",
      "%": "SpeechSynthesisEvent"
    },
    Storage: {
      "^": "Interceptor;",
      addAll$1: function(receiver, other) {
        J.forEach$1$ax(other, new W.Storage_addAll_closure(receiver));
      },
      containsKey$1: function(receiver, key) {
        return receiver.getItem(key) != null;
      },
      $index: function(receiver, key) {
        return receiver.getItem(key);
      },
      $indexSet: function(receiver, key, value) {
        receiver.setItem(key, value);
      },
      remove$1: function(receiver, key) {
        var value = receiver.getItem(key);
        receiver.removeItem(key);
        return value;
      },
      clear$0: function(receiver) {
        return receiver.clear();
      },
      forEach$1: function(receiver, f) {
        var i, key;
        for (i = 0; true; ++i) {
          key = receiver.key(i);
          if (key == null)
            return;
          f.call$2(key, receiver.getItem(key));
        }
      },
      get$keys: function(receiver) {
        var keys = [];
        this.forEach$1(receiver, new W.Storage_keys_closure(keys));
        return keys;
      },
      get$values: function(receiver) {
        var values = [];
        this.forEach$1(receiver, new W.Storage_values_closure(values));
        return values;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      get$isEmpty: function(receiver) {
        return receiver.key(0) == null;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.key(0) != null;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      },
      $isObject: 1,
      "%": "Storage"
    },
    Storage_addAll_closure: {
      "^": "Closure:4;_html$_captured_this_0",
      call$2: [function(k, v) {
        this._html$_captured_this_0.setItem(k, v);
      }, null, null, 4, 0, null, 40, [], 28, [], "call"]
    },
    Storage_keys_closure: {
      "^": "Closure:4;_captured_keys_0",
      call$2: function(k, v) {
        return this._captured_keys_0.push(k);
      }
    },
    Storage_values_closure: {
      "^": "Closure:4;_captured_values_0",
      call$2: function(k, v) {
        return this._captured_values_0.push(v);
      }
    },
    StyleElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLStyleElement"
    },
    TableElement: {
      "^": "HtmlElement;",
      get$rows: function(receiver) {
        var t1 = new W._WrappedList(receiver.rows);
        t1.$builtinTypeInfo = [W.TableRowElement];
        return t1;
      },
      "%": "HTMLTableElement"
    },
    TableRowElement: {
      "^": "HtmlElement;",
      $isTableRowElement: 1,
      $isHtmlElement: 1,
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      "%": "HTMLTableRowElement"
    },
    TableSectionElement: {
      "^": "HtmlElement;",
      get$rows: function(receiver) {
        var t1 = new W._WrappedList(receiver.rows);
        t1.$builtinTypeInfo = [W.TableRowElement];
        return t1;
      },
      "%": "HTMLTableSectionElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;defaultValue%,name%,rows%,type=,value%",
      "%": "HTMLTextAreaElement"
    },
    TextEvent: {
      "^": "UIEvent;data=",
      "%": "TextEvent"
    },
    TrackElement: {
      "^": "HtmlElement;defaultValue:default%,readyState=",
      "%": "HTMLTrackElement"
    },
    UIEvent: {
      "^": "Event;detail=",
      "%": "DragEvent|FocusEvent|KeyboardEvent|MSPointerEvent|MouseEvent|PointerEvent|SVGZoomEvent|TouchEvent|WheelEvent;UIEvent"
    },
    VideoElement: {
      "^": "MediaElement;",
      $isObject: 1,
      "%": "HTMLVideoElement"
    },
    WebSocket: {
      "^": "EventTarget;binaryType},readyState=",
      close$2: function(receiver, code, reason) {
        return receiver.close(code, reason);
      },
      close$0: function($receiver) {
        return $receiver.close();
      },
      close$1: function($receiver, code) {
        return $receiver.close(code);
      },
      send$1: function(receiver, data) {
        return receiver.send(data);
      },
      sendByteBuffer$1: function(receiver, data) {
        return receiver.send(data);
      },
      sendString$1: function(receiver, data) {
        return receiver.send(data);
      },
      get$onClose: function(receiver) {
        var t1 = new W._EventStream(receiver, "close", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      get$onError: function(receiver) {
        var t1 = new W._EventStream(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      get$onMessage: function(receiver) {
        var t1 = new W._EventStream(receiver, "message", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      get$onOpen: function(receiver) {
        var t1 = new W._EventStream(receiver, "open", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      "%": "WebSocket"
    },
    Window: {
      "^": "EventTarget;name%,status%",
      get$parent: function(receiver) {
        return W._convertNativeToDart_Window(receiver.parent);
      },
      close$0: function(receiver) {
        return receiver.close();
      },
      print$0: [function(receiver) {
        return receiver.print();
      }, "call$0", "get$print", 0, 0, 0],
      get$onError: function(receiver) {
        var t1 = new W._EventStream(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      get$onMessage: function(receiver) {
        var t1 = new W._EventStream(receiver, "message", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isWindow: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "DOMWindow|Window"
    },
    _Attr: {
      "^": "Node;name=,value%",
      set$text: function(receiver, value) {
        receiver.textContent = value;
      },
      "%": "Attr"
    },
    _ClientRect: {
      "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.width;
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = receiver.height;
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(receiver.width);
        t4 = J.get$hashCode$(receiver.height);
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      $isRectangle: 1,
      $asRectangle: Isolate.functionThatReturnsNull,
      $isObject: 1,
      "%": "ClientRect"
    },
    _DocumentType: {
      "^": "Node;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "DocumentType"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      "%": "DOMRect"
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLFrameSetElement"
    },
    _NamedNodeMap: {
      "^": "Interceptor_ListMixin_ImmutableListMixin1;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      get$single: function(receiver) {
        var len = receiver.length;
        if (len === 1)
          return receiver[0];
        if (len === 0)
          throw H.wrapException(new P.StateError("No elements"));
        throw H.wrapException(new P.StateError("More than one element"));
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    Interceptor_ListMixin1: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin1: {
      "^": "Interceptor_ListMixin1+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    _AttributeMap: {
      "^": "Object;",
      addAll$1: function(_, other) {
        J.forEach$1$ax(other, new W._AttributeMap_addAll_closure(this));
      },
      clear$0: function(_) {
        var t1, t2, _i;
        for (t1 = this.get$keys(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          this.remove$1(0, t1[_i]);
      },
      forEach$1: function(_, f) {
        var t1, t2, _i, key;
        for (t1 = this.get$keys(this), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, this.$index(0, key));
        }
      },
      get$keys: function(_) {
        var attributes, keys, len, i;
        attributes = this._html$_element.attributes;
        keys = [];
        keys.$builtinTypeInfo = [P.String];
        for (len = attributes.length, i = 0; i < len; ++i)
          if (this._matches$1(attributes[i]))
            keys.push(J.get$name$x(attributes[i]));
        return keys;
      },
      get$values: function(_) {
        var attributes, values, len, i;
        attributes = this._html$_element.attributes;
        values = [];
        values.$builtinTypeInfo = [P.String];
        for (len = attributes.length, i = 0; i < len; ++i)
          if (this._matches$1(attributes[i]))
            values.push(J.get$value$x(attributes[i]));
        return values;
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _AttributeMap_addAll_closure: {
      "^": "Closure:4;_html$_captured_this_0",
      call$2: [function(k, v) {
        this._html$_captured_this_0.$indexSet(0, k, v);
      }, null, null, 4, 0, null, 40, [], 28, [], "call"]
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_html$_element",
      containsKey$1: function(_, key) {
        return this._html$_element.hasAttribute(key);
      },
      $index: function(_, key) {
        return this._html$_element.getAttribute(key);
      },
      $indexSet: function(_, key, value) {
        this._html$_element.setAttribute(key, value);
      },
      remove$1: function(_, key) {
        var t1, value;
        t1 = this._html$_element;
        value = t1.getAttribute(key);
        t1.removeAttribute(key);
        return value;
      },
      get$length: function(_) {
        return this.get$keys(this).length;
      },
      _matches$1: function(node) {
        return node.namespaceURI == null;
      }
    },
    _EventStream: {
      "^": "Stream;_html$_target,_eventType,_useCapture",
      get$isBroadcast: function() {
        return true;
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        t1._tryResume$0();
        return t1;
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture"
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_html$_onData,_useCapture",
      cancel$0: function() {
        if (this._html$_target == null)
          return;
        this._unlisten$0();
        this._html$_target = null;
        this._html$_onData = null;
        return;
      },
      onData$1: function(handleData) {
        if (this._html$_target == null)
          throw H.wrapException(new P.StateError("Subscription has been canceled."));
        this._unlisten$0();
        this._html$_onData = W._wrapZone(handleData);
        this._tryResume$0();
      },
      onError$1: function(_, handleError) {
      },
      onDone$1: function(handleDone) {
      },
      pause$1: function(_, resumeSignal) {
        if (this._html$_target == null)
          return;
        ++this._pauseCount;
        this._unlisten$0();
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      get$isPaused: function() {
        return this._pauseCount > 0;
      },
      resume$0: function() {
        if (this._html$_target == null || this._pauseCount <= 0)
          return;
        --this._pauseCount;
        this._tryResume$0();
      },
      _tryResume$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null && this._pauseCount <= 0)
          J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
      },
      _unlisten$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null)
          J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
      },
      asFuture$1: function(futureValue) {
        var t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [null];
        new P._AsyncCompleter(t1).$builtinTypeInfo = [null];
        return t1;
      }
    },
    ImmutableListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        var t1 = new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)];
        return t1;
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      remove$1: function(receiver, object) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on immutable List."));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _WrappedList: {
      "^": "ListBase;_html$_list",
      get$iterator: function(_) {
        var t1 = new W._WrappedIterator(J.get$iterator$ax(this._html$_list));
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      get$length: function(_) {
        return this._html$_list.length;
      },
      add$1: function(_, element) {
        J.add$1$ax(this._html$_list, element);
      },
      remove$1: function(_, element) {
        return J.remove$1$ax(this._html$_list, element);
      },
      clear$0: function(_) {
        J.clear$0$ax(this._html$_list);
      },
      $index: function(_, index) {
        return this._html$_list[index];
      },
      $indexSet: function(_, index, value) {
        this._html$_list[index] = value;
      },
      set$length: function(_, newLength) {
        J.set$length$asx(this._html$_list, newLength);
      },
      indexOf$2: function(_, element, start) {
        return J.indexOf$2$asx(this._html$_list, element, start);
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      lastIndexOf$2: function(_, element, start) {
        return J.lastIndexOf$2$asx(this._html$_list, element, start);
      },
      lastIndexOf$1: function($receiver, element) {
        return this.lastIndexOf$2($receiver, element, null);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        J.setRange$4$ax(this._html$_list, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }
    },
    _WrappedIterator: {
      "^": "Object;_html$_iterator",
      moveNext$0: function() {
        return this._html$_iterator.moveNext$0();
      },
      get$current: function() {
        return this._html$_iterator._current;
      }
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_length,_position,_current",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._length;
        if (nextPosition < t1) {
          this._current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._current;
      }
    },
    _DOMWindowCrossFrame: {
      "^": "Object;_window",
      get$parent: function(_) {
        return W._DOMWindowCrossFrame__createSafe(this._window.parent);
      },
      close$0: function(_) {
        return this._window.close();
      },
      addEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      removeEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      $isInterceptor: 1,
      static: {_DOMWindowCrossFrame__createSafe: function(w) {
          if (w === window)
            return w;
          else
            return new W._DOMWindowCrossFrame(w);
        }}
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    KeyRange: {
      "^": "Interceptor;",
      $isKeyRange: 1,
      "%": "IDBKeyRange"
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    AElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAElement"
    },
    AltGlyphElement: {
      "^": "TextPositioningElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAltGlyphElement"
    },
    AnimationElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
    },
    FEBlendElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;type=,values=,result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEOffsetElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFESpecularLightingElement"
    },
    FETileElement: {
      "^": "SvgElement;result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;type=,result=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFilterElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGForeignObjectElement|SVGGElement|SVGGeometryElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGImageElement"
    },
    MarkerElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMarkerElement"
    },
    MaskElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMaskElement"
    },
    PatternElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGPatternElement"
    },
    ScriptElement0: {
      "^": "SvgElement;type%",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGScriptElement"
    },
    StyleElement0: {
      "^": "SvgElement;type%",
      "%": "SVGStyleElement"
    },
    SvgElement: {
      "^": "Element;",
      get$children: function(receiver) {
        var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
        t1.$builtinTypeInfo = [W.Element];
        return t1;
      },
      set$children: function(receiver, value) {
        var children = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
        children.$builtinTypeInfo = [W.Element];
        this._clearChildren$0(receiver);
        children.addAll$1(0, value);
      },
      get$onError: function(receiver) {
        var t1 = new W._ElementEventStreamImpl(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGTitleElement|SVGVKernElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGSVGElement"
    },
    SymbolElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGSymbolElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": ";SVGTextContentElement"
    },
    TextPathElement: {
      "^": "TextContentElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGTextPathElement"
    },
    TextPositioningElement: {
      "^": "TextContentElement;",
      "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
    },
    UseElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGUseElement"
    },
    ViewElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGViewElement"
    },
    _GradientElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
    },
    _SVGCursorElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGCursorElement"
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDropShadowElement"
    },
    _SVGGlyphRefElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGGlyphRefElement"
    },
    _SVGMPathElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMPathElement"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": ""
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": ""
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlError: {
      "^": "Interceptor;message=",
      "%": "SQLError"
    }
  }], ["dart.isolate", "dart:isolate",, P, {
    "^": "",
    Capability: {
      "^": "Object;"
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    _callDartFunction: [function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      if (captureThis === true) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$ax($arguments, P.js___convertToDart$closure()), true, null);
      return P._convertToJS(H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs));
    }, null, null, 8, 0, null, 7, [], 104, [], 16, [], 152, []],
    _defineProperty: function(o, $name, value) {
      var exception;
      if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name))
        try {
          Object.defineProperty(o, $name, {value: value});
          return true;
        } catch (exception) {
          H.unwrapException(exception);
        }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: [function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor(o);
      if (!!t1.$isJsObject)
        return o._js$_jsObject;
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    }, "call$1", "js___convertToJS$closure", 2, 0, 2, 66, []],
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: [function(o) {
      var t1;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else {
        if (o instanceof Object) {
          t1 = J.getInterceptor(o);
          t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
        } else
          t1 = false;
        if (t1)
          return o;
        else if (o instanceof Date)
          return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
        else if (o.constructor === $.$get$_dartProxyCtor())
          return o.o;
        else
          return P._wrapToDart(o);
      }
    }, "call$1", "js___convertToDart$closure", 2, 0, 117, 66, []],
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: {
      "^": "Object;_js$_jsObject",
      $index: ["super$JsObject$$index", function(_, property) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return P._convertToDart(this._js$_jsObject[property]);
      }],
      $indexSet: ["super$JsObject$$indexSet", function(_, property, value) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        this._js$_jsObject[property] = P._convertToJS(value);
      }],
      get$hashCode: function(_) {
        return 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
      },
      toString$0: function(_) {
        var t1, exception;
        try {
          t1 = String(this._js$_jsObject);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
          return this.super$Object$toString(this);
        }
      },
      callMethod$2: function(method, args) {
        var t1, t2;
        t1 = this._js$_jsObject;
        t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P.js___convertToJS$closure()), true, null);
        return P._convertToDart(t1[method].apply(t1, t2));
      },
      callMethod$1: function(method) {
        return this.callMethod$2(method, null);
      },
      static: {JsObject_JsObject: function($constructor, $arguments) {
          var constr, args, t1, factoryFunction;
          constr = P._convertToJS($constructor);
          if ($arguments instanceof Array)
            switch ($arguments.length) {
              case 0:
                return P._wrapToDart(new constr());
              case 1:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0])));
              case 2:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1])));
              case 3:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2])));
              case 4:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2]), P._convertToJS($arguments[3])));
            }
          args = [null];
          t1 = new H.MappedListIterable($arguments, P.js___convertToJS$closure());
          t1.$builtinTypeInfo = [null, null];
          C.JSArray_methods.addAll$1(args, t1);
          factoryFunction = constr.bind.apply(constr, args);
          String(factoryFunction);
          return P._wrapToDart(new factoryFunction());
        }}
    },
    JsFunction: {
      "^": "JsObject;_js$_jsObject"
    },
    JsArray: {
      "^": "JsObject_ListMixin;_js$_jsObject",
      $index: function(_, index) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        return this.super$JsObject$$index(this, index);
      },
      $indexSet: function(_, index, value) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        this.super$JsObject$$indexSet(this, index, value);
      },
      get$length: function(_) {
        var len = this._js$_jsObject.length;
        if (typeof len === "number" && len >>> 0 === len)
          return len;
        throw H.wrapException(new P.StateError("Bad JsArray length"));
      },
      set$length: function(_, $length) {
        this.super$JsObject$$indexSet(this, "length", $length);
      },
      add$1: function(_, value) {
        this.callMethod$2("push", [value]);
      },
      addAll$1: function(_, iterable) {
        this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        var $length, args, t1;
        P.JsArray__checkRange(start, end, this.get$length(this));
        $length = J.$sub$n(end, start);
        if (J.$eq$($length, 0))
          return;
        args = [start, $length];
        t1 = new H.SubListIterable(iterable, skipCount, null);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(iterable, "ListMixin", 0)];
        C.JSArray_methods.addAll$1(args, t1.take$1(0, $length));
        this.callMethod$2("splice", args);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      static: {JsArray__checkRange: function(start, end, $length) {
          var t1;
          if (start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, null, null));
          t1 = J.getInterceptor$n(end);
          if (t1.$lt(end, start) || t1.$gt(end, $length))
            throw H.wrapException(P.RangeError$range(end, start, $length, null, null));
        }}
    },
    JsObject_ListMixin: {
      "^": "JsObject+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _convertToJS_closure: {
      "^": "Closure:2;",
      call$1: function(o) {
        var jsFunction = function(_call, f, captureThis) {
          return function() {
            return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
          };
        }(P._callDartFunction, o, false);
        P._defineProperty(jsFunction, $.$get$_DART_CLOSURE_PROPERTY_NAME(), o);
        return jsFunction;
      }
    },
    _convertToJS_closure0: {
      "^": "Closure:2;_captured_ctor_0",
      call$1: function(o) {
        return new this._captured_ctor_0(o);
      }
    },
    _wrapToDart_closure: {
      "^": "Closure:2;",
      call$1: function(o) {
        return new P.JsFunction(o);
      }
    },
    _wrapToDart_closure0: {
      "^": "Closure:2;",
      call$1: function(o) {
        var t1 = new P.JsArray(o);
        t1.$builtinTypeInfo = [null];
        return t1;
      }
    },
    _wrapToDart_closure1: {
      "^": "Closure:2;",
      call$1: function(o) {
        return new P.JsObject(o);
      }
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish0: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    }
  }], ["dart.mirrors", "dart:mirrors",, P, {
    "^": "",
    reflectClass: function(key) {
      var t1, tm;
      t1 = J.getInterceptor(key);
      if (!t1.$isType || t1.$eq(key, C.Type_dynamic))
        throw H.wrapException(P.ArgumentError$(H.S(key) + " does not denote a class"));
      tm = P.reflectType(key);
      if (!J.getInterceptor(tm).$isClassMirror)
        throw H.wrapException(P.ArgumentError$(H.S(key) + " does not denote a class"));
      return tm.get$originalDeclaration();
    },
    reflectType: function(key) {
      if (J.$eq$(key, C.Type_dynamic)) {
        $.$get$currentJsMirrorSystem().toString;
        return $.$get$JsMirrorSystem__dynamicType();
      }
      return H.reflectClassByMangledName(key.get$_typeName());
    },
    Mirror: {
      "^": "Object;"
    },
    InstanceMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    LibraryMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    TypeMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    ClassMirror: {
      "^": "Object;",
      $isTypeMirror: 1,
      $isMirror: 1
    },
    TypeVariableMirror: {
      "^": "TypeMirror;",
      $isMirror: 1
    },
    MethodMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    VariableMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    ParameterMirror: {
      "^": "Object;",
      $isMirror: 1,
      $isVariableMirror: 1
    },
    MirrorsUsed: {
      "^": "Object;symbols,targets,metaTargets,override"
    }
  }], ["dart.typed_data", "dart:typed_data",, P, {
    "^": "",
    ByteBuffer: {
      "^": "Object;"
    },
    Endianness: {
      "^": "Object;_littleEndian"
    },
    ByteData: {
      "^": "Object;",
      $isTypedData: 1,
      static: {ByteData_ByteData: [function($length) {
          return new DataView(new ArrayBuffer(H._checkLength($length)));
        }, null, null, 2, 0, 231, 89, [], "new ByteData"], ByteData_ByteData$view: [function(buffer, offsetInBytes, $length) {
          return J.asByteData$2$x(buffer, offsetInBytes, $length);
        }, null, null, 2, 4, 232, 52, 0, 156, [], 157, [], 89, [], "new ByteData$view"]}
    },
    "+ByteData": [3, 323],
    Uint8List: {
      "^": "Object;",
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkLength: function($length) {
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$("Invalid length " + H.S($length)));
      return $length;
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
      if ($length != null && (typeof $length !== "number" || Math.floor($length) !== $length))
        throw H.wrapException(P.ArgumentError$("Invalid view length " + H.S($length)));
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    NativeByteBuffer: {
      "^": "Interceptor;lengthInBytes:byteLength=",
      get$runtimeType: function(receiver) {
        return C.Type_RkP;
      },
      asUint8List$2: function(receiver, offsetInBytes, $length) {
        return H.NativeUint8List_NativeUint8List$view(receiver, offsetInBytes, $length);
      },
      asUint8List$0: function($receiver) {
        return this.asUint8List$2($receiver, 0, null);
      },
      asByteData$2: function(receiver, offsetInBytes, $length) {
        H._checkViewArguments(receiver, offsetInBytes, $length);
        return $length == null ? new DataView(receiver, offsetInBytes) : new DataView(receiver, offsetInBytes, $length);
      },
      $isNativeByteBuffer: 1,
      $isByteBuffer: 1,
      $isObject: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;buffer=,lengthInBytes:byteLength=,offsetInBytes:byteOffset=",
      _invalidPosition$2: function(receiver, position, $length) {
        if (typeof position !== "number" || Math.floor(position) !== position)
          throw H.wrapException(P.ArgumentError$value(position, null, "Invalid list position"));
        else
          throw H.wrapException(P.RangeError$range(position, 0, $length, null, null));
      },
      _checkPosition$2: function(receiver, position, $length) {
        if (position >>> 0 !== position || position > $length)
          this._invalidPosition$2(receiver, position, $length);
      },
      _checkSublistArguments$3: function(receiver, start, end, $length) {
        this._checkPosition$2(receiver, start, $length);
        if (end == null)
          return $length;
        this._checkPosition$2(receiver, end, $length);
        if (start > end)
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        return end;
      },
      $isNativeTypedData: 1,
      $isTypedData: 1,
      $isObject: 1,
      "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
    },
    NativeByteData: {
      "^": "NativeTypedData;",
      get$runtimeType: [function(receiver) {
        return C.Type_zNC;
      }, null, null, 1, 0, 134, "runtimeType"],
      getFloat32$2: [function(receiver, byteOffset, endian) {
        return receiver.getFloat32(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getFloat32$2($receiver, byteOffset, C.Endianness_false);
      }, "getFloat32$1", "call$2", "call$1", "get$getFloat32", 2, 2, 139, 13, 10, [], 14, [], "getFloat32"],
      getFloat64$2: [function(receiver, byteOffset, endian) {
        return receiver.getFloat64(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getFloat64$2($receiver, byteOffset, C.Endianness_false);
      }, "getFloat64$1", "call$2", "call$1", "get$getFloat64", 2, 2, 139, 13, 10, [], 14, [], "getFloat64"],
      getInt16$2: [function(receiver, byteOffset, endian) {
        return receiver.getInt16(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getInt16$2($receiver, byteOffset, C.Endianness_false);
      }, "getInt16$1", "call$2", "call$1", "get$getInt16", 2, 2, 31, 13, 10, [], 14, [], "getInt16"],
      getInt32$2: [function(receiver, byteOffset, endian) {
        return receiver.getInt32(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getInt32$2($receiver, byteOffset, C.Endianness_false);
      }, "getInt32$1", "call$2", "call$1", "get$getInt32", 2, 2, 31, 13, 10, [], 14, [], "getInt32"],
      getInt64$2: [function(receiver, byteOffset, endian) {
        throw H.wrapException(new P.UnsupportedError("Int64 accessor not supported by dart2js."));
      }, function($receiver, byteOffset) {
        return this.getInt64$2($receiver, byteOffset, C.Endianness_false);
      }, "getInt64$1", "call$2", "call$1", "get$getInt64", 2, 2, 31, 13, 10, [], 14, [], "getInt64"],
      getInt8$1: [function(receiver, byteOffset) {
        return receiver.getInt8(byteOffset);
      }, "call$1", "get$getInt8", 2, 0, 78, 10, [], "getInt8"],
      getUint16$2: [function(receiver, byteOffset, endian) {
        return receiver.getUint16(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getUint16$2($receiver, byteOffset, C.Endianness_false);
      }, "getUint16$1", "call$2", "call$1", "get$getUint16", 2, 2, 31, 13, 10, [], 14, [], "getUint16"],
      getUint32$2: [function(receiver, byteOffset, endian) {
        return receiver.getUint32(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getUint32$2($receiver, byteOffset, C.Endianness_false);
      }, "getUint32$1", "call$2", "call$1", "get$getUint32", 2, 2, 31, 13, 10, [], 14, [], "getUint32"],
      getUint64$2: [function(receiver, byteOffset, endian) {
        throw H.wrapException(new P.UnsupportedError("Uint64 accessor not supported by dart2js."));
      }, function($receiver, byteOffset) {
        return this.getUint64$2($receiver, byteOffset, C.Endianness_false);
      }, "getUint64$1", "call$2", "call$1", "get$getUint64", 2, 2, 31, 13, 10, [], 14, [], "getUint64"],
      getUint8$1: [function(receiver, byteOffset) {
        return receiver.getUint8(byteOffset);
      }, "call$1", "get$getUint8", 2, 0, 78, 10, [], "getUint8"],
      setFloat32$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setFloat32(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setFloat32$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setFloat32$2", "call$3", "call$2", "get$setFloat32", 4, 2, 141, 13, 10, [], 1, [], 14, [], "setFloat32"],
      setFloat64$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setFloat64(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setFloat64$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setFloat64$2", "call$3", "call$2", "get$setFloat64", 4, 2, 141, 13, 10, [], 1, [], 14, [], "setFloat64"],
      setInt16$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setInt16(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setInt16$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setInt16$2", "call$3", "call$2", "get$setInt16", 4, 2, 32, 13, 10, [], 1, [], 14, [], "setInt16"],
      setInt32$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setInt32(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setInt32$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setInt32$2", "call$3", "call$2", "get$setInt32", 4, 2, 32, 13, 10, [], 1, [], 14, [], "setInt32"],
      setInt64$3: [function(receiver, byteOffset, value, endian) {
        throw H.wrapException(new P.UnsupportedError("Int64 accessor not supported by dart2js."));
      }, function($receiver, byteOffset, value) {
        return this.setInt64$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setInt64$2", "call$3", "call$2", "get$setInt64", 4, 2, 32, 13, 10, [], 1, [], 14, [], "setInt64"],
      setInt8$2: [function(receiver, byteOffset, value) {
        return receiver.setInt8(byteOffset, value);
      }, "call$2", "get$setInt8", 4, 0, 74, 10, [], 1, [], "setInt8"],
      setUint16$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setUint16(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setUint16$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setUint16$2", "call$3", "call$2", "get$setUint16", 4, 2, 32, 13, 10, [], 1, [], 14, [], "setUint16"],
      setUint32$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setUint32(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setUint32$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setUint32$2", "call$3", "call$2", "get$setUint32", 4, 2, 32, 13, 10, [], 1, [], 14, [], "setUint32"],
      setUint64$3: [function(receiver, byteOffset, value, endian) {
        throw H.wrapException(new P.UnsupportedError("Uint64 accessor not supported by dart2js."));
      }, function($receiver, byteOffset, value) {
        return this.setUint64$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setUint64$2", "call$3", "call$2", "get$setUint64", 4, 2, 32, 13, 10, [], 1, [], 14, [], "setUint64"],
      setUint8$2: [function(receiver, byteOffset, value) {
        return receiver.setUint8(byteOffset, value);
      }, "call$2", "get$setUint8", 4, 0, 74, 10, [], 1, [], "setUint8"],
      $isByteData: 1,
      $isTypedData: 1,
      $isObject: 1,
      "%": "DataView"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      _setRangeFast$4: function(receiver, start, end, source, skipCount) {
        var targetLength, count, sourceLength;
        targetLength = receiver.length;
        this._checkPosition$2(receiver, start, targetLength);
        this._checkPosition$2(receiver, end, targetLength);
        if (start > end)
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        count = end - start;
        sourceLength = source.length;
        if (sourceLength - skipCount < count)
          throw H.wrapException(new P.StateError("Not enough elements"));
        if (skipCount !== 0 || sourceLength !== count)
          source = source.subarray(skipCount, skipCount + count);
        receiver.set(source, start);
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    NativeTypedArrayOfInt: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
      $indexSet: function(receiver, index, value) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin0: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin0: {
      "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;",
      get$runtimeType: function(receiver) {
        return C.Type_LB7;
      },
      sublist$2: function(receiver, start, end) {
        return new Float32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float32Array"
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      get$runtimeType: function(receiver) {
        return C.Type_LB70;
      },
      sublist$2: function(receiver, start, end) {
        return new Float64Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float64Array"
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_uXf;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_O50;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_ekJ;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_2bx;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_2bx0;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_Jik;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint8ClampedArray(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_WLA;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isNativeUint8List: 1,
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": ";Uint8Array"
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["dslink.browser", "package:dslink/browser.dart",, B, {
    "^": "",
    LinkProvider: {
      "^": "Object;link@-324,defaultNodes@-13,profiles@-13,loadNodes@-6,provider@-51,dataStore@-126,privateKey@-52,brokerUrl@-5,prefix@-5,isRequester@-6,isResponder@-6,_initCalled@-6",
      init$0: [function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$handler = 1, $async$currentError, $async$self = this, t1, t2, $async$temp1, $async$temp2, $async$temp3, $async$temp4, $async$temp5, $async$temp6;
        function $async$init$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = $async$self;
                $async$temp1._initCalled = true;
                $async$temp1 = $async$self;
                $async$temp2 = Y;
                $async$temp2 = $async$temp2;
                $async$temp3 = $async$self;
                $async$goto = 2;
                return H.asyncHelper($async$temp2.getPrivateKey($async$temp3.dataStore), $async$init$0, $async$completer);
              case 2:
                // returning from await.
                $async$temp1.privateKey = $async$result;
                $async$temp1 = $async$self;
                t1 = $async$temp1.provider;
                $async$goto = t1 == null ? 3 : 4;
                break;
              case 3:
                // then
                $async$temp1 = $async$self;
                t1 = $async$temp1.profiles;
                $async$temp1 = T;
                $async$temp1 = $async$temp1;
                $async$temp2 = P;
                $async$temp2 = $async$temp2;
                $async$temp3 = P;
                $async$temp3 = $async$temp3.String;
                $async$temp4 = T;
                $async$temp2 = $async$temp2.LinkedHashMap_LinkedHashMap(null, null, null, $async$temp3, $async$temp4.LocalNode);
                $async$temp3 = P;
                $async$temp3 = $async$temp3;
                $async$temp4 = P;
                $async$temp4 = $async$temp4.String;
                $async$temp5 = T;
                $async$temp5 = $async$temp5.SimpleNode;
                $async$temp6 = P;
                $async$temp3 = $async$temp3.LinkedHashMap_LinkedHashMap(null, null, null, $async$temp4, {func: 1, ret: $async$temp5, args: [$async$temp6.String]});
                $async$temp4 = T;
                t2 = new $async$temp1.SimpleNodeProvider($async$temp2, null, null, null, $async$temp3, new $async$temp4.DummyPermissionManager());
                $async$temp1 = t2;
                $async$temp1.SimpleNodeProvider$2(null, t1);
                $async$temp1 = $async$self;
                $async$temp1.provider = t2;
                t1 = t2;
              case 4:
                // join
                $async$temp1 = $async$self;
                $async$temp1 = $async$temp1.loadNodes === true;
                if ($async$temp1) {
                  // goto then
                  $async$goto = 8;
                  break;
                } else
                  $async$result = $async$temp1;
                // goto join
                $async$goto = 9;
                break;
              case 8:
                // then
                $async$temp1 = J;
                $async$temp1 = $async$temp1.getInterceptor(t1);
                $async$result = !!$async$temp1.$isSerializableNodeProvider;
              case 9:
                // join
                $async$goto = $async$result ? 5 : 7;
                break;
              case 5:
                // then
                $async$temp1 = $async$self;
                $async$temp1 = $async$temp1.dataStore;
                $async$goto = 10;
                return H.asyncHelper($async$temp1.has$1("dsa_nodes"), $async$init$0, $async$completer);
              case 10:
                // returning from await.
                t1 = $async$result;
                $async$temp1 = $async$self;
                t2 = $async$temp1.provider;
                $async$goto = t1 !== true ? 11 : 13;
                break;
              case 11:
                // then
                $async$temp1 = H;
                $async$temp1 = $async$temp1.interceptedTypeCast(t2, "$isSerializableNodeProvider");
                $async$temp1 = $async$temp1;
                $async$temp2 = $async$self;
                $async$temp1.init$1($async$temp2.defaultNodes);
                // goto join
                $async$goto = 12;
                break;
              case 13:
                // else
                $async$temp1 = H;
                $async$temp1 = $async$temp1.interceptedTypeCast(t2, "$isSerializableNodeProvider");
                $async$temp1 = $async$temp1;
                $async$temp2 = P;
                $async$temp2 = $async$temp2;
                $async$temp3 = $async$self;
                $async$temp3 = $async$temp3.dataStore;
                $async$goto = 14;
                return H.asyncHelper($async$temp3.$get$1("dsa_nodes"), $async$init$0, $async$completer);
              case 14:
                // returning from await.
                $async$temp3 = $async$result;
                $async$temp4 = $;
                $async$temp4 = $async$temp4.$get$DsJson_instance();
                $async$temp4 = $async$temp4.decoder;
                $async$temp1.init$1($async$temp2._parseJson($async$temp3, $async$temp4._reviver));
              case 12:
                // join
                // goto join
                $async$goto = 6;
                break;
              case 7:
                // else
                $async$temp1 = H;
                $async$temp1 = $async$temp1.interceptedTypeCast(t1, "$isSerializableNodeProvider");
                $async$temp1 = $async$temp1;
                $async$temp2 = $async$self;
                $async$temp1.init$1($async$temp2.defaultNodes);
              case 6:
                // join
                // implicit return
                return H.asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$init$0, $async$completer, null);
      }, "call$0", "get$init", 0, 0, 22, "init"],
      resetSavedNodes$0: [function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$handler = 1, $async$currentError, $async$self = this, $async$temp1, $async$temp2;
        function $async$resetSavedNodes$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = J;
                $async$temp1 = $async$temp1;
                $async$temp2 = $async$self;
                $async$goto = 2;
                return H.asyncHelper($async$temp1.remove$1$ax($async$temp2.dataStore, "dsa_nodes"), $async$resetSavedNodes$0, $async$completer);
              case 2:
                // returning from await.
                // implicit return
                return H.asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$resetSavedNodes$0, $async$completer, null);
      }, "call$0", "get$resetSavedNodes", 0, 0, 22, "resetSavedNodes"],
      onValueChange$2$cacheLevel: [function(path, cacheLevel) {
        var t1, controller;
        t1 = {};
        t1._captured_listener_0 = null;
        t1._captured_controller_1 = null;
        t1._captured_subs_2 = 0;
        controller = P.StreamController_StreamController$broadcast(new B.LinkProvider_onValueChange_closure(t1), new B.LinkProvider_onValueChange_closure0(t1, this, path, cacheLevel), false, O.ValueUpdate);
        t1._captured_controller_1 = controller;
        t1 = new P._BroadcastStream(controller);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(controller, 0)];
        return t1;
      }, function(path) {
        return this.onValueChange$2$cacheLevel(path, 1);
      }, "onValueChange$1", "call$2$cacheLevel", "call$1", "get$onValueChange", 2, 3, 362, 44, 3, [], 35, [], "onValueChange"],
      save$0: [function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, $async$temp1, $async$temp2;
        function $async$save$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = $async$self;
                t1 = $async$temp1.provider;
                $async$temp1 = J;
                $async$temp1 = $async$temp1.getInterceptor(t1);
                if (!$async$temp1.$isSerializableNodeProvider) {
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  ;
                $async$temp1 = $async$self;
                t2 = $async$temp1.dataStore;
                $async$temp1 = H;
                $async$temp1 = $async$temp1.interceptedTypeCast(t1, "$isSerializableNodeProvider");
                t1 = $async$temp1.save$0();
                $async$temp1 = t2;
                $async$temp1 = $async$temp1;
                $async$temp2 = $;
                $async$temp2 = $async$temp2.$get$DsJson_instance();
                $async$goto = 3;
                return H.asyncHelper($async$temp1.store$2("dsa_nodes", $async$temp2.encodeJson$2$pretty(t1, false)), $async$save$0, $async$completer);
              case 3:
                // returning from await.
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$save$0, $async$completer, null);
      }, "call$0", "get$save", 0, 0, 22, "save"],
      syncValue$1: [function(path) {
        var n = J.$index$asx(this.provider, path);
        n.updateValue$2$force(J.get$value$x(n.get$lastValueUpdate()), true);
      }, "call$1", "get$syncValue", 2, 0, 17, 3, [], "syncValue"],
      connect$0: [function() {
        var t1 = new B.LinkProvider_connect_run(this);
        if (this.link != null)
          throw H.wrapException(new P.StateError("Link is already connected!"));
        if (this._initCalled !== true)
          return this.init$0().then$1(new B.LinkProvider_connect_closure(t1));
        else
          return t1.call$0();
      }, "call$0", "get$connect", 0, 0, 22, "connect"],
      close$0: [function(_) {
        var t1 = this.link;
        if (t1 != null) {
          J.close$0$x(t1);
          this.link = null;
        }
      }, "call$0", "get$close", 0, 0, 0, "close"],
      getNode$1: [function(path) {
        return this.provider.getNode$1(path);
      }, "call$1", "get$getNode", 2, 0, 58, 3, [], "getNode"],
      addNode$2: [function(path, m) {
        var t1 = this.provider;
        if (!J.getInterceptor(t1).$isMutableNodeProvider)
          throw H.wrapException(P.Exception_Exception("Unable to Modify Node Provider: It is not mutable."));
        return H.interceptedTypeCast(t1, "$isMutableNodeProvider").addNode$2(path, m);
      }, "call$2", "get$addNode", 4, 0, 214, 3, [], 4, [], "addNode"],
      removeNode$1: [function(path) {
        var t1 = this.provider;
        if (!J.getInterceptor(t1).$isMutableNodeProvider)
          throw H.wrapException(P.Exception_Exception("Unable to Modify Node Provider: It is not mutable."));
        H.interceptedTypeCast(t1, "$isMutableNodeProvider").removeNode$1(path);
      }, "call$1", "get$removeNode", 2, 0, 17, 3, [], "removeNode"],
      updateValue$2: [function(path, value) {
        var t1 = this.provider;
        if (!J.getInterceptor(t1).$isMutableNodeProvider)
          throw H.wrapException(P.Exception_Exception("Unable to Modify Node Provider: It is not mutable."));
        H.interceptedTypeCast(t1, "$isMutableNodeProvider").updateValue$2(path, value);
      }, "call$2", "get$updateValue", 4, 0, 375, 3, [], 1, [], "updateValue"],
      val$2: [function(path, value) {
        var t1;
        if (value instanceof O.Unspecified)
          return J.get$value$x(J.$index$asx(this.provider, path).get$lastValueUpdate());
        else {
          t1 = this.provider;
          if (!J.getInterceptor(t1).$isMutableNodeProvider)
            H.throwExpression(P.Exception_Exception("Unable to Modify Node Provider: It is not mutable."));
          H.interceptedTypeCast(t1, "$isMutableNodeProvider").updateValue$2(path, value);
          return value;
        }
      }, function(path) {
        return this.val$2(path, C.C_Unspecified);
      }, "val$1", "call$2", "call$1", "get$val", 2, 2, 376, 195, 3, [], 1, [], "val"],
      $index: [function(_, path) {
        return J.$index$asx(this.provider, path);
      }, null, "get$[]", 2, 0, 58, 3, [], "[]"],
      get$requester: [function() {
        return this.link.get$requester();
      }, null, null, 1, 0, 377, "requester"],
      get$onRequesterReady: [function() {
        return this.link.get$onRequesterReady();
      }, null, null, 1, 0, 68, "onRequesterReady"],
      $not: [function(_) {
        return J.$index$asx(this.provider, "/");
      }, null, "get$~", 0, 0, 156, "~"],
      static: {LinkProvider$: [function(brokerUrl, prefix, dataStore, defaultNodes, isRequester, isResponder, loadNodes, profiles, provider) {
          var t1 = new B.LinkProvider(null, defaultNodes, profiles, loadNodes, provider, dataStore, null, brokerUrl, prefix, isRequester, isResponder, false);
          if (dataStore == null)
            t1.dataStore = $.$get$LocalDataStorage_INSTANCE();
          return t1;
        }, null, null, 4, 15, 233, 0, 0, 0, 0, 46, 30, 30, 162, [], 88, [], 165, [], 73, [], 49, [], 169, [], 170, [], 60, [], 61, [], "new LinkProvider"]}
    },
    "+LinkProvider": [3],
    LinkProvider_onValueChange_closure0: {
      "^": "Closure:1;_browser$_box_0,_browser$_captured_this_1,_captured_path_2,_captured_cacheLevel_3",
      call$0: [function() {
        var t1 = this._browser$_box_0;
        ++t1._captured_subs_2;
        if (t1._captured_listener_0 == null)
          t1._captured_listener_0 = J.$index$asx(this._browser$_captured_this_1.provider, this._captured_path_2).subscribe$2(new B.LinkProvider_onValueChange__closure(t1), this._captured_cacheLevel_3);
      }, null, null, 0, 0, 1, "call"]
    },
    LinkProvider_onValueChange__closure: {
      "^": "Closure:157;_browser$_box_0",
      call$1: [function(update) {
        var t1 = this._browser$_box_0._captured_controller_1;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(update);
      }, null, null, 2, 0, 157, 43, [], "call"]
    },
    LinkProvider_onValueChange_closure: {
      "^": "Closure:1;_browser$_box_0",
      call$0: [function() {
        var t1 = this._browser$_box_0;
        if (--t1._captured_subs_2 === 0) {
          t1._captured_listener_0.cancel$0();
          t1._captured_listener_0 = null;
        }
      }, null, null, 0, 0, 1, "call"]
    },
    LinkProvider_connect_run: {
      "^": "Closure:22;_browser$_captured_this_0",
      call$0: [function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
        t1 = this._browser$_captured_this_0;
        t2 = t1.brokerUrl;
        t3 = t1.prefix;
        t4 = t1.privateKey;
        t5 = t1.provider;
        t6 = t1.isRequester;
        t7 = t1.isResponder;
        t8 = new P._Future(0, $.Zone__current, null);
        t8.$builtinTypeInfo = [L.Requester];
        t8 = new P._AsyncCompleter(t8);
        t8.$builtinTypeInfo = [L.Requester];
        t9 = new P._Future(0, $.Zone__current, null);
        t9.$builtinTypeInfo = [null];
        t9 = new P._AsyncCompleter(t9);
        t9.$builtinTypeInfo = [null];
        t10 = Array(3);
        t10.fixed$length = Array;
        t10.$builtinTypeInfo = [P.String];
        t3 = H.S(t3) + H.S(t4.get$publicKey().get$qHash64());
        t6 = t6 === true ? L.Requester$(null) : null;
        t2 = new Y.BrowserECDHLink(t8, t9, t3, t6, t7 === true && t5 != null ? T.Responder$(t5, null) : null, t4, null, null, t10, null, null, t2, 1, 1, false);
        t1.link = t2;
        t2.connect$0();
        return t1.link.get$onConnected();
      }, null, null, 0, 0, 22, "call"]
    },
    LinkProvider_connect_closure: {
      "^": "Closure:2;_captured_run_1",
      call$1: [function(_) {
        return this._captured_run_1.call$0();
      }, null, null, 2, 0, 2, 32, [], "call"]
    },
    BrowserUtils: {
      "^": "Object;",
      static: {BrowserUtils$: [function() {
          return new B.BrowserUtils();
        }, null, null, 0, 0, 234, "new BrowserUtils"], BrowserUtils_fetchBrokerUrlFromPath: [function(path, otherwise) {
          var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], t1, exception, $async$exception, $async$temp1, $async$temp2;
          function $async$BrowserUtils_fetchBrokerUrlFromPath($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$handler = 4;
                  $async$temp1 = J;
                  $async$temp1 = $async$temp1;
                  $async$temp2 = W;
                  $async$goto = 7;
                  return H.asyncHelper($async$temp2.HttpRequest_getString(path, null, null), $async$BrowserUtils_fetchBrokerUrlFromPath, $async$completer);
                case 7:
                  // returning from await.
                  t1 = $async$temp1.trim$0$s($async$result);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                  $async$handler = 2;
                  // goto after finally
                  $async$goto = 6;
                  break;
                case 4:
                  // catch
                  $async$handler = 3;
                  $async$exception = $async$currentError;
                  $async$temp1 = H;
                  $async$temp1.unwrapException($async$exception);
                  $async$returnValue = otherwise;
                  // goto return
                  $async$goto = 1;
                  break;
                  // goto after finally
                  $async$goto = 6;
                  break;
                case 3:
                  // uncaught
                  // goto rethrow
                  $async$goto = 2;
                  break;
                case 6:
                  // after finally
                case 1:
                  // return
                  return H.asyncHelper($async$returnValue, 0, $async$completer, null);
                case 2:
                  // rethrow
                  return H.asyncHelper($async$currentError, 1, $async$completer);
              }
          }
          return H.asyncHelper(null, $async$BrowserUtils_fetchBrokerUrlFromPath, $async$completer, null);
        }, "call$2", "browser_BrowserUtils_fetchBrokerUrlFromPath$closure", 4, 0, 235, 3, [], 175, [], "fetchBrokerUrlFromPath"], BrowserUtils_createBinaryUrl: [function(input, type) {
          var t1, t2, t3, data;
          t1 = J.getInterceptor$x(input);
          t2 = t1.get$buffer(input);
          t3 = t1.get$offsetInBytes(input);
          t1 = t1.get$lengthInBytes(input);
          t2.toString;
          data = H.NativeUint8List_NativeUint8List$view(t2, t3, t1);
          return "data:" + H.S(type) + ";base64," + M._CryptoUtils_bytesToBase64(data, false, false);
        }, function(input) {
          return B.BrowserUtils_createBinaryUrl(input, "application/octet-stream");
        }, "call$2$type", "call$1", "browser_BrowserUtils_createBinaryUrl$closure", 2, 3, 236, 182, 45, [], 51, [], "createBinaryUrl"]}
    },
    "+BrowserUtils": [3]
  }], ["dslink.browser_client", "package:dslink/browser_client.dart",, Y, {
    "^": "",
    getPrivateKey: [function(storage) {
      var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, t1, key, $async$temp1, $async$temp2;
      function $async$getPrivateKey($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = storage == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$temp1 = $;
              storage = $async$temp1.$get$LocalDataStorage_INSTANCE();
            case 4:
              // join
              $async$temp1 = storage;
              $async$goto = 7;
              return H.asyncHelper($async$temp1.has$1("dsa_key"), $async$getPrivateKey, $async$completer);
            case 7:
              // returning from await.
              $async$goto = $async$result === true ? 5 : 6;
              break;
            case 5:
              // then
              $async$temp1 = storage;
              $async$goto = 8;
              return H.asyncHelper($async$temp1.$get$1("dsa_key"), $async$getPrivateKey, $async$completer);
            case 8:
              // returning from await.
              t1 = $async$result;
              $async$temp1 = $;
              $async$temp1 = $async$temp1.$get$_CRYPTO_PROVIDER();
              $async$returnValue = $async$temp1.loadFromString$1(t1);
              // goto return
              $async$goto = 1;
              break;
            case 6:
              // join
              $async$temp1 = K;
              $async$goto = 9;
              return H.asyncHelper($async$temp1.PrivateKey_generate(), $async$getPrivateKey, $async$completer);
            case 9:
              // returning from await.
              key = $async$result;
              $async$temp1 = storage;
              $async$temp1 = $async$temp1;
              $async$temp2 = key;
              $async$goto = 10;
              return H.asyncHelper($async$temp1.store$2("dsa_key", $async$temp2.saveToString$0()), $async$getPrivateKey, $async$completer);
            case 10:
              // returning from await.
              $async$returnValue = key;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return H.asyncHelper($async$returnValue, 0, $async$completer, null);
            case 2:
              // rethrow
              return H.asyncHelper($async$currentError, 1, $async$completer);
          }
      }
      return H.asyncHelper(null, $async$getPrivateKey, $async$completer, null);
    }, function() {
      return Y.getPrivateKey(null);
    }, "call$1$storage", "call$0", "browser_client__getPrivateKey$closure", 0, 3, 238, 0, 199, [], "getPrivateKey"],
    DataStorage: {
      "^": "Object;",
      static: {DataStorage$: [function() {
          return new Y.DataStorage();
        }, null, null, 0, 0, 237, "new DataStorage"]}
    },
    "+DataStorage": [3],
    LocalDataStorage: {
      "^": "DataStorage;",
      $get$1: [function(key) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$temp1;
        function $async$$get$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = window;
                $async$temp1 = $async$temp1.localStorage;
                $async$returnValue = $async$temp1.getItem(key);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$$get$1, $async$completer, null);
      }, "call$1", "get$get", 2, 0, 158, 11, [], "get", 12],
      has$1: [function(key) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$temp1;
        function $async$has$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = window;
                $async$temp1 = $async$temp1.localStorage;
                $async$returnValue = $async$temp1.getItem(key) != null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$has$1, $async$completer, null);
      }, "call$1", "get$has", 2, 0, 401, 11, [], "has", 12],
      store$2: [function(key, value) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$temp1;
        function $async$store$2($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = window;
                $async$temp1 = $async$temp1.localStorage;
                $async$temp1.setItem(key, value);
                $async$returnValue = value;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$store$2, $async$completer, null);
      }, "call$2", "get$store", 4, 0, 407, 11, [], 1, [], "store", 12],
      remove$1: [function(_, key) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, t1, $async$temp1;
        function $async$remove$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = window;
                t1 = $async$temp1.localStorage;
                $async$temp1 = t1;
                if ($async$temp1) {
                  // goto then
                  $async$goto = 3;
                  break;
                } else
                  $async$result = $async$temp1;
                // goto join
                $async$goto = 4;
                break;
              case 3:
                // then
                $async$temp1 = C;
                $async$result = $async$temp1.Storage_methods;
              case 4:
                // join
                $async$temp1 = $async$result;
                $async$returnValue = $async$temp1.remove$1(t1, key);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$remove$1, $async$completer, null);
      }, "call$1", "get$remove", 2, 0, 158, 11, [], "remove", 12],
      static: {"^": "LocalDataStorage_INSTANCE<-331", LocalDataStorage$: [function() {
          return new Y.LocalDataStorage();
        }, null, null, 0, 0, 1, "new LocalDataStorage"]}
    },
    "+LocalDataStorage": [126],
    BrowserECDHLink: {
      "^": "Object;_onRequesterReadyCompleter@-129,_onConnectedCompleter@-333,dsId<-5,requester<-20,responder<-37,privateKey<-52,_nonce@-67,_wsConnection@-133,salts<-36,_wsUpdateUri@-5,_httpUpdateUri@-5,_browser_client$_conn@-5,_connDelay@-7,_wsDelay@-7,_browser_client$_closed@-6",
      get$onConnected: [function() {
        return this._onConnectedCompleter.get$future();
      }, null, null, 1, 0, 22, "onConnected"],
      get$onRequesterReady: [function() {
        return this._onRequesterReadyCompleter.get$future();
      }, null, null, 1, 0, 68, "onRequesterReady"],
      get$nonce: [function(_) {
        return this._nonce;
      }, null, null, 1, 0, 164, "nonce"],
      updateSalt$2: [function(salt, saltId) {
        J.$indexSet$ax(this.salts, saltId, salt);
      }, function(salt) {
        return this.updateSalt$2(salt, 0);
      }, "updateSalt$1", "call$2", "call$1", "get$updateSalt", 2, 2, 138, 52, 39, [], 87, [], "updateSalt"],
      connect$0: [function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, connUri, requestJson, request, serverConfig, tempKey, t1, t2, exception, $async$exception, $async$temp1, $async$temp2, $async$temp3, $async$temp4;
        function $async$connect$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = $async$self;
                if ($async$temp1._browser_client$_closed === true) {
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  ;
                $async$temp1 = $;
                $async$temp1._isCryptoProviderLocked = true;
                $async$temp1 = $async$self;
                t1 = $async$temp1.dsId;
                $async$temp1 = P;
                $async$temp1 = $async$temp1;
                $async$temp2 = H;
                $async$temp2 = $async$temp2;
                $async$temp3 = $async$self;
                $async$temp2 = $async$temp2.S($async$temp3._browser_client$_conn) + "?dsId=";
                $async$temp3 = H;
                connUri = $async$temp1.Uri_parse($async$temp2 + $async$temp3.S(t1), 0, null);
                $async$temp1 = Q;
                $async$temp1 = $async$temp1.logger();
                $async$temp1 = $async$temp1;
                $async$temp2 = H;
                $async$temp1.info$1("Connecting: " + $async$temp2.S(connUri));
                $async$handler = 4;
                $async$temp1 = $async$self;
                t2 = $async$temp1.privateKey;
                $async$temp1 = P;
                $async$temp1 = $async$temp1;
                $async$temp2 = t2;
                $async$temp2 = $async$temp2.get$publicKey();
                $async$temp2 = $async$temp2.get$qBase64();
                $async$temp3 = $async$self;
                $async$temp3 = $async$temp3.requester != null;
                $async$temp4 = $async$self;
                requestJson = $async$temp1.LinkedHashMap__makeLiteral(["publicKey", $async$temp2, "isRequester", $async$temp3, "isResponder", $async$temp4.responder != null, "version", "1.0.4"]);
                $async$temp1 = W;
                $async$temp1 = $async$temp1;
                $async$temp2 = J;
                $async$temp2 = $async$temp2.toString$0$(connUri);
                $async$temp3 = $;
                $async$temp3 = $async$temp3.$get$DsJson_instance();
                $async$goto = 7;
                return H.asyncHelper($async$temp1.HttpRequest_request($async$temp2, "POST", "application/json", null, null, null, $async$temp3.encodeJson$2$pretty(requestJson, false), false), $async$connect$0, $async$completer);
              case 7:
                // returning from await.
                request = $async$result;
                $async$temp1 = P;
                $async$temp1 = $async$temp1;
                $async$temp2 = J;
                $async$temp2 = $async$temp2.get$responseText$x(request);
                $async$temp3 = $;
                $async$temp3 = $async$temp3.$get$DsJson_instance();
                $async$temp3 = $async$temp3.decoder;
                serverConfig = $async$temp1._parseJson($async$temp2, $async$temp3._reviver);
                $async$temp1 = C;
                $async$temp1 = $async$temp1.Map_gVGBQ;
                $async$temp1 = $async$temp1;
                $async$temp2 = Y;
                $async$temp1.forEach$1(0, new $async$temp2.BrowserECDHLink_connect_closure($async$self, serverConfig));
                $async$temp1 = J;
                tempKey = $async$temp1.$index$asx(serverConfig, "tempKey");
                $async$temp1 = $async$self;
                $async$temp2 = t2;
                $async$goto = 8;
                return H.asyncHelper($async$temp2.getSecret$1(tempKey), $async$connect$0, $async$completer);
              case 8:
                // returning from await.
                $async$temp1._nonce = $async$result;
                $async$temp1 = J;
                t2 = $async$temp1.$index$asx(serverConfig, "wsUri");
                $async$goto = typeof t2 === "string" ? 9 : 10;
                break;
              case 9:
                // then
                $async$temp1 = connUri;
                $async$temp1 = $async$temp1;
                $async$temp2 = P;
                $async$temp2 = $async$temp2;
                $async$temp3 = J;
                $async$temp1 = $async$temp1.resolveUri$1($async$temp2.Uri_parse($async$temp3.$index$asx(serverConfig, "wsUri"), 0, null));
                $async$temp1 = $async$temp1.toString$0(0) + "?dsId=";
                $async$temp2 = H;
                t2 = $async$temp1 + $async$temp2.S(t1);
                $async$temp1 = H;
                $async$temp1.checkString("ws");
                $async$temp1 = H;
                $async$temp1.checkInt(0);
                $async$temp1 = P;
                $async$temp1.RangeError_checkValueInInterval(0, 0, t2.length, "startIndex", null);
                $async$temp1 = $async$self;
                $async$temp2 = H;
                $async$temp1._wsUpdateUri = $async$temp2.stringReplaceFirstUnchecked(t2, "http", "ws", 0);
              case 10:
                // join
                $async$temp1 = J;
                t2 = $async$temp1.$index$asx(serverConfig, "httpUri");
                $async$goto = typeof t2 === "string" ? 11 : 12;
                break;
              case 11:
                // then
                $async$temp1 = $async$self;
                $async$temp2 = connUri;
                $async$temp2 = $async$temp2;
                $async$temp3 = P;
                $async$temp3 = $async$temp3;
                $async$temp4 = J;
                $async$temp2 = $async$temp2.resolveUri$1($async$temp3.Uri_parse($async$temp4.$index$asx(serverConfig, "httpUri"), 0, null));
                $async$temp2 = $async$temp2.toString$0(0) + "?dsId=";
                $async$temp3 = H;
                $async$temp1._httpUpdateUri = $async$temp2 + $async$temp3.S(t1);
              case 12:
                // join
                $async$temp1 = $async$self;
                $async$temp1.initWebsocket$1(false);
                $async$temp1 = $async$self;
                $async$temp1._connDelay = 1;
                $async$temp1 = $async$self;
                $async$temp1._wsDelay = 1;
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                $async$temp1 = H;
                $async$temp1.unwrapException($async$exception);
                $async$temp1 = Q;
                $async$temp1 = $async$temp1;
                $async$temp2 = $async$self;
                $async$temp2 = $async$temp2.get$connect();
                $async$temp3 = J;
                $async$temp3 = $async$temp3;
                $async$temp4 = $async$self;
                $async$temp1.DsTimer_timerOnceAfter($async$temp2, $async$temp3.$mul$ns($async$temp4._connDelay, 1000));
                $async$temp1 = J;
                $async$temp1 = $async$temp1;
                $async$temp2 = $async$self;
                $async$goto = $async$temp1.$lt$n($async$temp2._connDelay, 60) ? 13 : 14;
                break;
              case 13:
                // then
                $async$temp1 = $async$self;
                $async$temp2 = J;
                $async$temp2 = $async$temp2;
                $async$temp3 = $async$self;
                $async$temp1._connDelay = $async$temp2.$add$ns($async$temp3._connDelay, 1);
              case 14:
                // join
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
                // after finally
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$connect$0, $async$completer, null);
      }, "call$0", "get$connect", 0, 0, 1, "connect"],
      initWebsocket$1: [function(reconnect) {
        var t1, t2;
        if (this._browser_client$_closed === true)
          return;
        t1 = Y.WebSocketConnection$(W.WebSocket_WebSocket(H.S(this._wsUpdateUri) + "&auth=" + this._nonce.hashSalt$1(J.$index$asx(this.salts, 0)), null), this, new Y.BrowserECDHLink_initWebsocket_closure(this));
        this._wsConnection = t1;
        t2 = this.responder;
        if (t2 != null)
          J.set$connection$x(t2, t1.get$responderChannel());
        if (this.requester != null)
          this._wsConnection.get$onRequesterReady().then$1(new Y.BrowserECDHLink_initWebsocket_closure0(this));
        this._wsConnection.get$onDisconnected().then$1(new Y.BrowserECDHLink_initWebsocket_closure1(this, reconnect));
      }, function() {
        return this.initWebsocket$1(true);
      }, "initWebsocket$0", "call$1", "call$0", "get$initWebsocket", 0, 2, 112, 30, 84, [], "initWebsocket"],
      close$0: [function(_) {
        var t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [null];
        t1 = new P._AsyncCompleter(t1);
        t1.$builtinTypeInfo = [null];
        this._onConnectedCompleter = t1;
        if (this._browser_client$_closed === true)
          return;
        this._browser_client$_closed = true;
        t1 = this._wsConnection;
        if (t1 != null) {
          J.close$0$x(t1);
          this._wsConnection = null;
        }
      }, "call$0", "get$close", 0, 0, 0, "close"],
      static: {"^": "BrowserECDHLink_saltNameMap<-43", BrowserECDHLink$: [function(_conn, dsIdPrefix, privateKey, isRequester, isResponder, nodeProvider) {
          var t1, t2, t3, t4, t5;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [L.Requester];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [L.Requester];
          t2 = new P._Future(0, $.Zone__current, null);
          t2.$builtinTypeInfo = [null];
          t2 = new P._AsyncCompleter(t2);
          t2.$builtinTypeInfo = [null];
          t3 = Array(3);
          t3.fixed$length = Array;
          t3.$builtinTypeInfo = [P.String];
          t4 = H.S(dsIdPrefix) + H.S(privateKey.get$publicKey().get$qHash64());
          t5 = isRequester === true ? L.Requester$(null) : null;
          return new Y.BrowserECDHLink(t1, t2, t4, t5, isResponder === true && nodeProvider != null ? T.Responder$(nodeProvider, null) : null, privateKey, null, null, t3, null, null, _conn, 1, 1, false);
        }, null, null, 6, 7, 239, 0, 30, 30, 205, [], 211, [], 212, [], 63, [], 60, [], 61, [], "new BrowserECDHLink"]}
    },
    "+BrowserECDHLink": [3, 64],
    BrowserECDHLink_connect_closure: {
      "^": "Closure:4;_browser_client$_captured_this_0,_captured_serverConfig_1",
      call$2: [function($name, idx) {
        J.$indexSet$ax(this._browser_client$_captured_this_0.salts, idx, J.$index$asx(this._captured_serverConfig_1, $name));
      }, null, null, 4, 0, 4, 2, [], 115, [], "call"]
    },
    BrowserECDHLink_initWebsocket_closure: {
      "^": "Closure:1;_browser_client$_captured_this_0",
      call$0: [function() {
        var t1 = this._browser_client$_captured_this_0;
        if (!t1._onConnectedCompleter.get$isCompleted())
          J.complete$0$x(t1._onConnectedCompleter);
      }, null, null, 0, 0, 1, "call"]
    },
    BrowserECDHLink_initWebsocket_closure0: {
      "^": "Closure:2;_browser_client$_captured_this_1",
      call$1: [function(channel) {
        var t1, t2;
        t1 = this._browser_client$_captured_this_1;
        if (t1._browser_client$_closed === true)
          return;
        t2 = t1.requester;
        J.set$connection$x(t2, channel);
        if (!t1._onRequesterReadyCompleter.get$isCompleted())
          J.complete$1$x(t1._onRequesterReadyCompleter, t2);
      }, null, null, 2, 0, 2, 83, [], "call"]
    },
    BrowserECDHLink_initWebsocket_closure1: {
      "^": "Closure:2;_browser_client$_captured_this_2,_captured_reconnect_3",
      call$1: [function(authError) {
        var t1;
        Q.logger().info$1("Disconnected");
        t1 = this._browser_client$_captured_this_2;
        if (t1._browser_client$_closed === true)
          return;
        if (t1._wsConnection.get$_opened() === true) {
          t1._wsDelay = 1;
          if (authError === true)
            t1.connect$0();
          else
            t1.initWebsocket$1(false);
        } else if (this._captured_reconnect_3 === true) {
          Q.DsTimer_timerOnceAfter(t1.get$initWebsocket(), J.$mul$ns(t1._wsDelay, 1000));
          if (J.$lt$n(t1._wsDelay, 60))
            t1._wsDelay = J.$add$ns(t1._wsDelay, 1);
        } else {
          t1._wsDelay = 5;
          Q.DsTimer_timerOnceAfter(t1.get$initWebsocket(), 5000);
        }
      }, null, null, 2, 0, 2, 117, [], "call"]
    },
    BrowserUserLink: {
      "^": "Object;_onRequesterReadyCompleter@-129,session@-5,requester<-20,responder<-37,nonce>-67,privateKey@-52,_wsConnection@-133,wsUpdateUri@-5,httpUpdateUri@-5,_wsDelay@-7",
      get$onRequesterReady: [function() {
        return this._onRequesterReadyCompleter.get$future();
      }, null, null, 1, 0, 68, "onRequesterReady"],
      updateSalt$2: [function(salt, saltId) {
      }, function(salt) {
        return this.updateSalt$2(salt, 0);
      }, "updateSalt$1", "call$2", "call$1", "get$updateSalt", 2, 2, 138, 52, 39, [], 87, [], "updateSalt"],
      connect$0: [function() {
        $._isCryptoProviderLocked = true;
        this.initWebsocket$1(false);
      }, "call$0", "get$connect", 0, 0, 0, "connect"],
      initWebsocket$1: [function(reconnect) {
        var t1, t2;
        t1 = Y.WebSocketConnection$(W.WebSocket_WebSocket(H.S(this.wsUpdateUri) + "?session=" + H.S(this.session), null), this, null);
        this._wsConnection = t1;
        t2 = this.responder;
        if (t2 != null)
          J.set$connection$x(t2, t1.get$responderChannel());
        if (this.requester != null)
          this._wsConnection.get$onRequesterReady().then$1(new Y.BrowserUserLink_initWebsocket_closure(this));
        this._wsConnection.get$onDisconnected().then$1(new Y.BrowserUserLink_initWebsocket_closure0(this, reconnect));
      }, function() {
        return this.initWebsocket$1(true);
      }, "initWebsocket$0", "call$1", "call$0", "get$initWebsocket", 0, 2, 112, 30, 84, [], "initWebsocket"],
      BrowserUserLink$5$httpUpdateUri$isRequester$isResponder$nodeProvider$wsUpdateUri: function(httpUpdateUri, isRequester, isResponder, nodeProvider, wsUpdateUri) {
        if (J.startsWith$1$s(this.wsUpdateUri, "http"))
          this.wsUpdateUri = "ws" + J.substring$1$s(this.wsUpdateUri, 4);
      },
      static: {"^": "BrowserUserLink_saltNameMap<-43", BrowserUserLink$: [function(httpUpdateUri, isRequester, isResponder, nodeProvider, wsUpdateUri) {
          var t1, t2, t3;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [L.Requester];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [L.Requester];
          t2 = C.JSInt_methods.toRadixString$1($.$get$_CRYPTO_PROVIDER().get$random().nextUint16$0(), 16) + C.JSInt_methods.toRadixString$1($.$get$_CRYPTO_PROVIDER().get$random().nextUint16$0(), 16) + C.JSInt_methods.toRadixString$1($.$get$_CRYPTO_PROVIDER().get$random().nextUint16$0(), 16) + C.JSInt_methods.toRadixString$1($.$get$_CRYPTO_PROVIDER().get$random().nextUint16$0(), 16);
          t3 = isRequester === true ? L.Requester$(null) : null;
          t1 = new Y.BrowserUserLink(t1, t2, t3, isResponder === true && nodeProvider != null ? T.Responder$(nodeProvider, null) : null, C.DummyECDH_Zqn, null, null, wsUpdateUri, httpUpdateUri, 1);
          t1.BrowserUserLink$5$httpUpdateUri$isRequester$isResponder$nodeProvider$wsUpdateUri(httpUpdateUri, isRequester, isResponder, nodeProvider, wsUpdateUri);
          return t1;
        }, null, null, 0, 11, 240, 0, 30, 30, 0, 0, 63, [], 60, [], 61, [], 105, [], 106, [], "new BrowserUserLink"]}
    },
    "+BrowserUserLink": [3, 64],
    BrowserUserLink_initWebsocket_closure: {
      "^": "Closure:2;_browser_client$_captured_this_0",
      call$1: [function(channel) {
        var t1, t2;
        t1 = this._browser_client$_captured_this_0;
        t2 = t1.requester;
        J.set$connection$x(t2, channel);
        if (!t1._onRequesterReadyCompleter.get$isCompleted())
          J.complete$1$x(t1._onRequesterReadyCompleter, t2);
      }, null, null, 2, 0, 2, 83, [], "call"]
    },
    BrowserUserLink_initWebsocket_closure0: {
      "^": "Closure:2;_browser_client$_captured_this_1,_captured_reconnect_2",
      call$1: [function(connection) {
        var t1;
        Q.logger().info$1("Disconnected");
        t1 = this._browser_client$_captured_this_1;
        if (t1._wsConnection.get$_opened() === true) {
          t1._wsDelay = 1;
          t1.initWebsocket$1(false);
        } else if (this._captured_reconnect_2 === true) {
          Q.DsTimer_timerOnceAfter(t1.get$initWebsocket(), J.$mul$ns(t1._wsDelay, 1000));
          if (J.$lt$n(t1._wsDelay, 60))
            t1._wsDelay = J.$add$ns(t1._wsDelay, 1);
        } else {
          t1._wsDelay = 5;
          Q.DsTimer_timerOnceAfter(t1.get$initWebsocket(), 5000);
        }
      }, null, null, 2, 0, 2, 118, [], "call"]
    },
    WebSocketConnection: {
      "^": "Connection;_responderChannel@-135,_requesterChannel@-135,_onRequestReadyCompleter@-62,_onDisconnectedCompleter@-344,clientLink<-64,socket<-345,onConnect@-48,pingTimer@-346,_dataSent@-6,_dataReceiveCount@-7,_opened@-6,_msgCommand@-13,binaryInCache@-347,binaryOutCache@-348,msgId@-7,_sending@-6,_authError@-6,pendingAcks-136",
      get$responderChannel: [function() {
        return this._responderChannel;
      }, null, null, 1, 0, 56, "responderChannel"],
      get$requesterChannel: [function() {
        return this._requesterChannel;
      }, null, null, 1, 0, 56, "requesterChannel"],
      get$onRequesterReady: [function() {
        return this._onRequestReadyCompleter.get$future();
      }, null, null, 1, 0, 66, "onRequesterReady"],
      get$onDisconnected: [function() {
        return this._onDisconnectedCompleter.get$future();
      }, null, null, 1, 0, 361, "onDisconnected"],
      onPingTimer$1: [function(t) {
        if (J.$ge$n(this._dataReceiveCount, 3)) {
          this._browser_client$_onDone$0();
          return;
        }
        this._dataReceiveCount = J.$add$ns(this._dataReceiveCount, 1);
        if (this._dataSent === true) {
          this._dataSent = false;
          return;
        }
        this.addConnCommand$2(null, null);
      }, "call$1", "get$onPingTimer", 2, 0, 294, 119, [], "onPingTimer"],
      requireSend$0: [function() {
        if (this._sending !== true) {
          this._sending = true;
          Q.DsTimer_callLater(this.get$_send());
        }
      }, "call$0", "get$requireSend", 0, 0, 0, "requireSend"],
      _onOpen$1: [function(e) {
        Q.logger().info$1("Connected");
        this._opened = true;
        if (this.onConnect != null)
          this.onConnect$0();
        this._responderChannel.updateConnect$0();
        this._requesterChannel.updateConnect$0();
        J.sendString$1$x(this.socket, "{}");
        this.requireSend$0();
      }, "call$1", "get$_onOpen", 2, 0, 353, 29, [], "_onOpen"],
      addConnCommand$2: [function(key, value) {
        var t1 = this._msgCommand;
        if (t1 == null) {
          t1 = P.LinkedHashMap__makeEmpty();
          this._msgCommand = t1;
        }
        if (key != null)
          J.$indexSet$ax(t1, key, value);
        this.requireSend$0();
      }, "call$2", "get$addConnCommand", 4, 0, 86, 11, [], 1, [], "addConnCommand"],
      _browser_client$_onData$1: [function(e) {
        var m, bytes, needAck, msgId, err, stack, needAck0, msgId0, err0, t1, t2, exception;
        Q.logger().fine$1("onData:");
        this._dataReceiveCount = 0;
        m = null;
        if (!!J.getInterceptor(J.get$data$x(e)).$isByteBuffer)
          try {
            bytes = J.asUint8List$0$x(H.interceptedTypeCast(J.get$data$x(e), "$isByteBuffer"));
            if (J.get$length$asx(bytes) !== 0 && J.$index$asx(bytes, 0) === 0) {
              this.binaryInCache.receiveData$1(bytes);
              return;
            }
            t1 = C.Utf8Codec_false.decode$1(bytes);
            t2 = this.binaryInCache;
            m = $.$get$DsJson_instance().decodeJsonFrame$2(t1, t2);
            Q.logger().fine$1(H.S(m));
            t1 = J.$index$asx(m, "salt");
            if (typeof t1 === "string")
              this.clientLink.updateSalt$1(J.$index$asx(m, "salt"));
            needAck = false;
            if (!!J.getInterceptor(J.$index$asx(m, "responses")).$isList && J.$gt$n(J.get$length$asx(H.listTypeCast(J.$index$asx(m, "responses"))), 0)) {
              needAck = true;
              J.add$1$ax(this._requesterChannel.get$onReceiveController(), J.$index$asx(m, "responses"));
            }
            if (!!J.getInterceptor(J.$index$asx(m, "requests")).$isList && J.$gt$n(J.get$length$asx(H.listTypeCast(J.$index$asx(m, "requests"))), 0)) {
              needAck = true;
              J.add$1$ax(this._responderChannel.get$onReceiveController(), J.$index$asx(m, "requests"));
            }
            t1 = J.$index$asx(m, "ack");
            if (typeof t1 === "number" && Math.floor(t1) === t1)
              this.ack$1(J.$index$asx(m, "ack"));
            if (needAck === true) {
              msgId = J.$index$asx(m, "msg");
              if (msgId != null)
                this.addConnCommand$2("ack", msgId);
            }
          } catch (exception) {
            t1 = H.unwrapException(exception);
            err = t1;
            stack = H.getTraceFromException(exception);
            Q.logger().severe$3("error in onData", err, stack);
            this.close$0(0);
            return;
          }
        else {
          t1 = J.get$data$x(e);
          if (typeof t1 === "string")
            try {
              t1 = J.get$data$x(e);
              t2 = this.binaryInCache;
              m = $.$get$DsJson_instance().decodeJsonFrame$2(t1, t2);
              Q.logger().fine$1(H.S(m));
              needAck0 = false;
              if (!!J.getInterceptor(J.$index$asx(m, "responses")).$isList && J.$gt$n(J.get$length$asx(H.listTypeCast(J.$index$asx(m, "responses"))), 0)) {
                needAck0 = true;
                J.add$1$ax(this._requesterChannel.get$onReceiveController(), J.$index$asx(m, "responses"));
              }
              if (!!J.getInterceptor(J.$index$asx(m, "requests")).$isList && J.$gt$n(J.get$length$asx(H.listTypeCast(J.$index$asx(m, "requests"))), 0)) {
                needAck0 = true;
                J.add$1$ax(this._responderChannel.get$onReceiveController(), J.$index$asx(m, "requests"));
              }
              t1 = J.$index$asx(m, "ack");
              if (typeof t1 === "number" && Math.floor(t1) === t1)
                this.ack$1(J.$index$asx(m, "ack"));
              if (needAck0 === true) {
                msgId0 = J.$index$asx(m, "msg");
                if (msgId0 != null)
                  this.addConnCommand$2("ack", msgId0);
              }
            } catch (exception) {
              t1 = H.unwrapException(exception);
              err0 = t1;
              Q.logger().severe$1(err0);
              this.close$0(0);
              return;
            }
        }
      }, "call$1", "get$_browser_client$_onData", 2, 0, 416, 29, [], "_browser_client$_onData"],
      _send$0: [function() {
        var t1, t2, m, needSend, pendingAck, rslt, t3, json;
        this._sending = false;
        t1 = this.socket;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$readyState(t1) !== 1)
          return;
        Q.logger().fine$1("browser sending");
        m = this._msgCommand;
        if (m != null) {
          this._msgCommand = null;
          needSend = true;
        } else {
          m = P.LinkedHashMap__makeEmpty();
          needSend = false;
        }
        pendingAck = [];
        rslt = this._responderChannel.getSendingData$0();
        if (rslt != null) {
          if (J.$gt$n(J.get$length$asx(rslt.messages), 0)) {
            J.$indexSet$ax(m, "responses", rslt.messages);
            needSend = true;
          }
          if (J.$gt$n(J.get$length$asx(rslt.processors), 0))
            C.JSArray_methods.addAll$1(pendingAck, rslt.processors);
        }
        rslt = this._requesterChannel.getSendingData$0();
        if (rslt != null) {
          if (J.$gt$n(J.get$length$asx(rslt.messages), 0)) {
            J.$indexSet$ax(m, "requests", rslt.messages);
            needSend = true;
          }
          if (J.$gt$n(J.get$length$asx(rslt.processors), 0))
            C.JSArray_methods.addAll$1(pendingAck, rslt.processors);
        }
        if (needSend) {
          if (pendingAck.length > 0)
            J.add$1$ax(this.pendingAcks, O.ConnectionAckGroup$(this.msgId, pendingAck));
          t3 = this.msgId;
          this.msgId = J.$add$ns(t3, 1);
          J.$indexSet$ax(m, "msg", t3);
          Q.logger().fine$1("send: " + H.S(m));
          t3 = this.binaryOutCache;
          json = $.$get$DsJson_instance().encodeJsonFrame$3$pretty(m, t3, false);
          if (this.binaryOutCache.get$hasData())
            t2.sendByteBuffer$1(t1, this.binaryOutCache.export$0().buffer);
          t2.send$1(t1, json);
          this._dataSent = true;
        }
      }, "call$0", "get$_send", 0, 0, 0, "_send"],
      _browser_client$_onDone$1: [function(o) {
        var t1;
        if (!!J.getInterceptor(o).$isCloseEvent)
          if (o.code === 1006)
            this._authError = true;
        Q.logger().fine$1("socket disconnected");
        if (this._requesterChannel.get$onReceiveController().get$isClosed() !== true)
          J.close$0$x(this._requesterChannel.get$onReceiveController());
        if (!this._requesterChannel.get$onDisconnectController().get$isCompleted())
          J.complete$1$x(this._requesterChannel.get$onDisconnectController(), this._requesterChannel);
        if (this._responderChannel.get$onReceiveController().get$isClosed() !== true)
          J.close$0$x(this._responderChannel.get$onReceiveController());
        if (!this._responderChannel.get$onDisconnectController().get$isCompleted())
          J.complete$1$x(this._responderChannel.get$onDisconnectController(), this._responderChannel);
        if (!this._onDisconnectedCompleter.get$isCompleted())
          J.complete$1$x(this._onDisconnectedCompleter, this._authError);
        t1 = this.pingTimer;
        if (t1 != null)
          t1.cancel$0();
      }, function() {
        return this._browser_client$_onDone$1(null);
      }, "_browser_client$_onDone$0", "call$1", "call$0", "get$_browser_client$_onDone", 0, 2, 190, 0, 66, [], "_browser_client$_onDone"],
      close$0: [function(_) {
        var t1, t2;
        t1 = this.socket;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$readyState(t1) === 1 || t2.get$readyState(t1) === 0)
          t2.close$0(t1);
        this._browser_client$_onDone$0();
      }, "call$0", "get$close", 0, 0, 0, "close"],
      WebSocketConnection$3$onConnect: function(socket, clientLink, onConnect) {
        var t1, t2, t3, t4, t5;
        t1 = this.socket;
        t2 = J.getInterceptor$x(t1);
        t2.set$binaryType(t1, "arraybuffer");
        t3 = P.StreamController_StreamController(null, null, null, null, false, P.List);
        t4 = new P._Future(0, $.Zone__current, null);
        t4.$builtinTypeInfo = [O.ConnectionChannel];
        t4 = new P._AsyncCompleter(t4);
        t4.$builtinTypeInfo = [O.ConnectionChannel];
        t5 = new P._Future(0, $.Zone__current, null);
        t5.$builtinTypeInfo = [O.ConnectionChannel];
        t5 = new P._AsyncCompleter(t5);
        t5.$builtinTypeInfo = [O.ConnectionChannel];
        this._responderChannel = new O.PassiveChannel(t3, [], this, null, false, false, t4, t5);
        t3 = P.StreamController_StreamController(null, null, null, null, false, P.List);
        t4 = new P._Future(0, $.Zone__current, null);
        t4.$builtinTypeInfo = [O.ConnectionChannel];
        t4 = new P._AsyncCompleter(t4);
        t4.$builtinTypeInfo = [O.ConnectionChannel];
        t5 = new P._Future(0, $.Zone__current, null);
        t5.$builtinTypeInfo = [O.ConnectionChannel];
        t5 = new P._AsyncCompleter(t5);
        t5.$builtinTypeInfo = [O.ConnectionChannel];
        this._requesterChannel = new O.PassiveChannel(t3, [], this, null, false, false, t4, t5);
        t3 = t2.get$onMessage(t1);
        t4 = this.get$_browser_client$_onData();
        this.get$_browser_client$_onDone();
        t4 = new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(t4), t3._useCapture);
        t4.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
        t4._tryResume$0();
        t2.get$onClose(t1).listen$1(this.get$_browser_client$_onDone());
        t1 = t2.get$onOpen(t1);
        t2 = new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$_onOpen()), t1._useCapture);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        t2._tryResume$0();
        t1 = this._onRequestReadyCompleter;
        t2 = this._requesterChannel;
        t3 = new P._Future(0, $.Zone__current, null);
        t3.$builtinTypeInfo = [null];
        t3._asyncComplete$1(t2);
        J.complete$1$x(t1, t3);
        this.pingTimer = P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 0, 0, 20), this.get$onPingTimer());
      },
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      onConnect$0: function() {
        return this.onConnect.call$0();
      },
      static: {WebSocketConnection$: [function(socket, clientLink, onConnect) {
          var t1, t2;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [O.ConnectionChannel];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [O.ConnectionChannel];
          t2 = new P._Future(0, $.Zone__current, null);
          t2.$builtinTypeInfo = [P.bool];
          t2 = new P._AsyncCompleter(t2);
          t2.$builtinTypeInfo = [P.bool];
          t1 = new Y.WebSocketConnection(null, null, t1, t2, clientLink, socket, onConnect, null, false, 0, false, null, new Q.BinaryInCache(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, Q.BinaryData)), new Q.BinaryOutCache(0, P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, Q.BinaryData)), 0, false, false, P.ListQueue$(null, O.ConnectionAckGroup));
          t1.WebSocketConnection$3$onConnect(socket, clientLink, onConnect);
          return t1;
        }, null, null, 4, 3, 241, 0, 107, [], 108, [], 109, [], "new WebSocketConnection"]}
    },
    "+WebSocketConnection": [137]
  }], ["dslink.common", "package:dslink/common.dart",, O, {
    "^": "defaultProfileMap@-13,unspecified<-368",
    Connection: {
      "^": "Object;pendingAcks@-136",
      ack$1: [function(ackId) {
        var findAckGroup, t1, ackGroup;
        t1 = J.get$iterator$ax(this.pendingAcks);
        while (true) {
          if (!t1.moveNext$0()) {
            findAckGroup = null;
            break;
          }
          ackGroup = t1.get$current();
          if (J.$eq$(ackGroup.get$ackId(), ackId)) {
            findAckGroup = ackGroup;
            break;
          }
        }
        for (t1 = findAckGroup != null; t1;) {
          ackGroup = this.pendingAcks.removeFirst$0();
          ackGroup.ackAll$1(ackId);
          if (J.$eq$(ackGroup, findAckGroup))
            break;
        }
      }, "call$1", "get$ack", 2, 0, 14, 23, [], "ack"],
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      static: {Connection$: [function() {
          return new O.Connection(P.ListQueue$(null, O.ConnectionAckGroup));
        }, null, null, 0, 0, 242, "new Connection"]}
    },
    "+Connection": [3],
    ProcessorResult: {
      "^": "Object;messages@-61,processors@-42",
      static: {ProcessorResult$: [function(messages, processors) {
          return new O.ProcessorResult(messages, processors);
        }, null, null, 4, 0, 243, 120, [], 78, [], "new ProcessorResult"]}
    },
    "+ProcessorResult": [3],
    ConnectionAckGroup: {
      "^": "Object;ackId@-7,processors@-42",
      ackAll$1: [function(ackid) {
        var t1;
        for (t1 = J.get$iterator$ax(this.processors); t1.moveNext$0();)
          t1.get$current().ackReceived$1(this.ackId);
      }, "call$1", "get$ackAll", 2, 0, 14, 148, [], "ackAll"],
      ConnectionAckGroup$2: function(ackId, processors) {
        var t1;
        for (t1 = J.get$iterator$ax(this.processors); t1.moveNext$0();)
          t1.get$current().ackWaiting$1(this.ackId);
      },
      static: {ConnectionAckGroup$: [function(ackId, processors) {
          var t1 = new O.ConnectionAckGroup(ackId, processors);
          t1.ConnectionAckGroup$2(ackId, processors);
          return t1;
        }, null, null, 4, 0, 244, 23, [], 78, [], "new ConnectionAckGroup"]}
    },
    "+ConnectionAckGroup": [3],
    ConnectionChannel: {
      "^": "Object;",
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      static: {ConnectionChannel$: [function() {
          return new O.ConnectionChannel();
        }, null, null, 0, 0, 56, "new ConnectionChannel"]}
    },
    "+ConnectionChannel": [3],
    Link: {
      "^": "Object;",
      static: {Link$: [function() {
          return new O.Link();
        }, null, null, 0, 0, 245, "new Link"]}
    },
    "+Link": [3],
    ServerLink: {
      "^": "Link;",
      static: {ServerLink$: [function() {
          return new O.ServerLink();
        }, null, null, 0, 0, 246, "new ServerLink"]}
    },
    "+ServerLink": [166],
    ClientLink: {
      "^": "Link;",
      static: {ClientLink$: [function() {
          return new O.ClientLink();
        }, null, null, 0, 0, 247, "new ClientLink"]}
    },
    "+ClientLink": [166],
    ServerLinkManager: {
      "^": "Object;",
      static: {ServerLinkManager$: [function() {
          return new O.ServerLinkManager();
        }, null, null, 0, 0, 248, "new ServerLinkManager"]}
    },
    "+ServerLinkManager": [3],
    StreamStatus: {
      "^": "Object;",
      static: {"^": "StreamStatus_initialize<-5,StreamStatus_open<-5,StreamStatus_closed<-5", StreamStatus$: [function() {
          return new O.StreamStatus();
        }, null, null, 0, 0, 249, "new StreamStatus"]}
    },
    "+StreamStatus": [3],
    ErrorPhase: {
      "^": "Object;",
      static: {"^": "ErrorPhase_request<-5,ErrorPhase_response<-5", ErrorPhase$: [function() {
          return new O.ErrorPhase();
        }, null, null, 0, 0, 250, "new ErrorPhase"]}
    },
    "+ErrorPhase": [3],
    DSError: {
      "^": "Object;type*-5,detail*-5,msg@-5,path*-5,phase@-5",
      getMessage$0: [function() {
        var t1 = this.msg;
        if (t1 != null)
          return t1;
        t1 = this.type;
        if (t1 != null)
          return t1;
        return "Error";
      }, "call$0", "get$getMessage", 0, 0, 15, "getMessage"],
      serialize$0: [function() {
        var rslt, t1;
        rslt = P.LinkedHashMap__makeEmpty();
        t1 = this.msg;
        if (t1 != null)
          rslt.$indexSet(0, "msg", t1);
        t1 = this.type;
        if (t1 != null)
          rslt.$indexSet(0, "type", t1);
        t1 = this.path;
        if (t1 != null)
          rslt.$indexSet(0, "path", t1);
        if (J.$eq$(this.phase, "request"))
          rslt.$indexSet(0, "phase", "request");
        t1 = this.detail;
        if (t1 != null)
          rslt.$indexSet(0, "detail", t1);
        return rslt;
      }, "call$0", "get$serialize", 0, 0, 29, "serialize"],
      DSError$fromMap$1: function(m) {
        var t1, t2;
        t1 = J.getInterceptor$asx(m);
        t2 = t1.$index(m, "type");
        if (typeof t2 === "string")
          this.type = t1.$index(m, "type");
        t2 = t1.$index(m, "msg");
        if (typeof t2 === "string")
          this.msg = t1.$index(m, "msg");
        t2 = t1.$index(m, "path");
        if (typeof t2 === "string")
          this.path = t1.$index(m, "path");
        t2 = t1.$index(m, "phase");
        if (typeof t2 === "string")
          this.phase = t1.$index(m, "phase");
        t2 = t1.$index(m, "detail");
        if (typeof t2 === "string")
          this.detail = t1.$index(m, "detail");
      },
      static: {"^": "DSError_PERMISSION_DENIED<-21,DSError_INVALID_METHOD<-21,DSError_NOT_IMPLEMENTED<-21,DSError_INVALID_PATH<-21,DSError_INVALID_PATHS<-21,DSError_INVALID_VALUE<-21,DSError_INVALID_PARAMETER<-21,DSError_DISCONNECTED<-21", DSError$: [function(type, detail, msg, path, phase) {
          return new O.DSError(type, detail, msg, path, phase);
        }, null, null, 2, 9, 251, 0, 0, 0, 5, 51, [], 124, [], 125, [], 3, [], 126, [], "new DSError"], DSError$fromMap: [function(m) {
          var t1 = new O.DSError(null, null, null, null, null);
          t1.DSError$fromMap$1(m);
          return t1;
        }, null, null, 2, 0, 55, 4, [], "new DSError$fromMap"]}
    },
    "+DSError": [3],
    Unspecified: {
      "^": "Object;",
      static: {Unspecified$: [function() {
          return new O.Unspecified();
        }, null, null, 0, 0, 1, "new Unspecified"]}
    },
    "+Unspecified": [3],
    PassiveChannel: {
      "^": "Object;onReceiveController<-355,_processors@-356,conn<-137,handler@-72,_isReady@-6,connected@-6,onDisconnectController<-62,onConnectController<-62",
      get$onReceive: [function() {
        return J.get$stream$x(this.onReceiveController);
      }, null, null, 1, 0, 295, "onReceive"],
      sendWhenReady$1: [function(handler) {
        this.handler = handler;
        this.conn.requireSend$0();
      }, "call$1", "get$sendWhenReady", 2, 0, 318, 149, [], "sendWhenReady"],
      getSendingData$0: [function() {
        var t1 = this.handler;
        if (t1 != null)
          return t1.getSendingData$0();
        return;
      }, "call$0", "get$getSendingData", 0, 0, 82, "getSendingData"],
      get$isReady: [function() {
        return this._isReady;
      }, null, null, 1, 0, 8, "isReady"],
      set$isReady: [function(val) {
        this._isReady = val;
      }, null, null, 3, 0, 88, 20, [], "isReady"],
      get$onDisconnected: [function() {
        return this.onDisconnectController.get$future();
      }, null, null, 1, 0, 66, "onDisconnected"],
      get$onConnected: [function() {
        return this.onConnectController.get$future();
      }, null, null, 1, 0, 66, "onConnected"],
      updateConnect$0: [function() {
        if (this.connected === true)
          return;
        this.connected = true;
        J.complete$1$x(this.onConnectController, this);
      }, "call$0", "get$updateConnect", 0, 0, 0, "updateConnect"],
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      $isConnectionChannel: 1,
      static: {PassiveChannel$: [function(conn, connected) {
          var t1, t2, t3;
          t1 = P.StreamController_StreamController(null, null, null, null, false, P.List);
          t2 = new P._Future(0, $.Zone__current, null);
          t2.$builtinTypeInfo = [O.ConnectionChannel];
          t2 = new P._AsyncCompleter(t2);
          t2.$builtinTypeInfo = [O.ConnectionChannel];
          t3 = new P._Future(0, $.Zone__current, null);
          t3.$builtinTypeInfo = [O.ConnectionChannel];
          t3 = new P._AsyncCompleter(t3);
          t3.$builtinTypeInfo = [O.ConnectionChannel];
          return new O.PassiveChannel(t1, [], conn, null, false, connected, t2, t3);
        }, null, null, 2, 2, 252, 46, 54, [], 128, [], "new PassiveChannel"]}
    },
    "+PassiveChannel": [3, 59],
    ConnectionProcessor: {
      "^": "Object;",
      static: {ConnectionProcessor$: [function() {
          return new O.ConnectionProcessor();
        }, null, null, 0, 0, 253, "new ConnectionProcessor"]}
    },
    "+ConnectionProcessor": [3],
    ConnectionHandler: {
      "^": "Object;_conn@-59,_connListener@-12,_beforeSendListener@-12,_toSendList@-61,_processors@-42,_pendingSend@-6",
      get$connection: [function(_) {
        return this._conn;
      }, null, null, 1, 0, 56, "connection"],
      set$connection: [function(_, conn) {
        var t1 = this._connListener;
        if (t1 != null) {
          t1.cancel$0();
          this._connListener = null;
          this._onDisconnected$1(this._conn);
        }
        this._conn = conn;
        this._connListener = conn.get$onReceive().listen$1(this.get$onData());
        this._conn.get$onDisconnected().then$1(this.get$_onDisconnected());
        if (this._conn.get$connected() === true)
          this.onReconnected$0();
        else
          this._conn.get$onConnected().then$1(new O.ConnectionHandler_connection_closure(this));
      }, null, null, 3, 0, 359, 54, [], "connection"],
      _onDisconnected$1: [function(conn) {
        var t1;
        if (J.$eq$(this._conn, conn)) {
          t1 = this._connListener;
          if (t1 != null) {
            t1.cancel$0();
            this._connListener = null;
          }
          this.onDisconnected$0();
          this._conn = null;
        }
      }, "call$1", "get$_onDisconnected", 2, 0, 360, 54, [], "_onDisconnected"],
      onReconnected$0: ["super$ConnectionHandler$onReconnected", function() {
        if (this._pendingSend === true)
          this._conn.sendWhenReady$1(this);
      }, "call$0", "get$onReconnected", 0, 0, 0, "onReconnected"],
      addToSendList$1: [function(m) {
        J.add$1$ax(this._toSendList, m);
        if (this._pendingSend !== true && this._conn != null) {
          this._conn.sendWhenReady$1(this);
          this._pendingSend = true;
        }
      }, "call$1", "get$addToSendList", 2, 0, 11, 4, [], "addToSendList"],
      addProcessor$1: [function(processor) {
        J.add$1$ax(this._processors, processor);
        if (this._pendingSend !== true && this._conn != null) {
          this._conn.sendWhenReady$1(this);
          this._pendingSend = true;
        }
      }, "call$1", "get$addProcessor", 2, 0, 378, 151, [], "addProcessor"],
      getSendingData$0: ["super$ConnectionHandler$getSendingData", function() {
        var processors, t1, rslt;
        this._pendingSend = false;
        processors = this._processors;
        this._processors = [];
        for (t1 = J.get$iterator$ax(processors); t1.moveNext$0();)
          t1.get$current().startSendingData$0();
        rslt = this._toSendList;
        this._toSendList = [];
        return new O.ProcessorResult(rslt, processors);
      }, "call$0", "get$getSendingData", 0, 0, 82, "getSendingData"],
      static: {ConnectionHandler$: [function() {
          var t1 = [];
          t1.$builtinTypeInfo = [P.Map];
          return new O.ConnectionHandler(null, null, null, t1, [], false);
        }, null, null, 0, 0, 254, "new ConnectionHandler"]}
    },
    "+ConnectionHandler": [3],
    ConnectionHandler_connection_closure: {
      "^": "Closure:2;_common$_captured_this_0",
      call$1: [function(conn) {
        return this._common$_captured_this_0.onReconnected$0();
      }, null, null, 2, 0, 2, 54, [], "call"]
    },
    Node0: {
      "^": "Object;profile@-19,attributes*-9,configs@-9,children*-18",
      getAttribute$1: [function(_, $name) {
        var t1;
        if (J.containsKey$1$x(this.attributes, $name) === true)
          return J.$index$asx(this.attributes, $name);
        t1 = this.profile;
        if (t1 != null && J.containsKey$1$x(J.get$attributes$x(t1), $name) === true)
          return J.$index$asx(J.get$attributes$x(this.profile), $name);
        return;
      }, "call$1", "get$getAttribute", 2, 0, 63, 2, [], "getAttribute"],
      getConfig$1: [function($name) {
        var t1;
        if (J.containsKey$1$x(this.configs, $name) === true)
          return J.$index$asx(this.configs, $name);
        t1 = this.profile;
        if (t1 != null && J.containsKey$1$x(t1.get$configs(), $name) === true)
          return J.$index$asx(this.profile.get$configs(), $name);
        return;
      }, "call$1", "get$getConfig", 2, 0, 63, 2, [], "getConfig"],
      addChild$2: ["super$Node$addChild", function($name, node) {
        J.$indexSet$ax(this.children, $name, node);
      }, "call$2", "get$addChild", 4, 0, 35, 2, [], 9, [], "addChild"],
      removeChild$1: ["super$Node$removeChild", function(input) {
        if (typeof input === "string") {
          J.remove$1$ax(this.children, this.getChild$1(input));
          return input;
        } else if (input instanceof O.Node0)
          J.remove$1$ax(this.children, input);
        else
          throw H.wrapException(P.Exception_Exception("Invalid Input"));
        return;
      }, "call$1", "get$removeChild", 2, 0, 90, 45, [], "removeChild"],
      getChild$1: [function($name) {
        var t1;
        if (J.containsKey$1$x(this.children, $name) === true)
          return J.$index$asx(this.children, $name);
        t1 = this.profile;
        if (t1 != null && J.containsKey$1$x(J.get$children$x(t1), $name) === true)
          return J.$index$asx(J.get$children$x(this.profile), $name);
        return;
      }, "call$1", "get$getChild", 2, 0, 173, 2, [], "getChild"],
      $get$1: [function($name) {
        var t1 = J.getInterceptor$s($name);
        if (t1.startsWith$1($name, "$"))
          return this.getConfig$1($name);
        if (t1.startsWith$1($name, "@"))
          return this.getAttribute$1(0, $name);
        return this.getChild$1($name);
      }, "call$1", "get$get", 2, 0, 63, 2, [], "get"],
      forEachChild$1: [function(callback) {
        var t1;
        J.forEach$1$ax(this.children, callback);
        t1 = this.profile;
        if (t1 != null)
          J.forEach$1$ax(J.get$children$x(t1), new O.Node_forEachChild_closure(this, callback));
      }, "call$1", "get$forEachChild", 2, 0, 183, 7, [], "forEachChild"],
      forEachConfig$1: [function(callback) {
        var t1;
        J.forEach$1$ax(this.configs, callback);
        t1 = this.profile;
        if (t1 != null)
          J.forEach$1$ax(t1.get$configs(), new O.Node_forEachConfig_closure(this, callback));
      }, "call$1", "get$forEachConfig", 2, 0, 91, 7, [], "forEachConfig"],
      forEachAttribute$1: [function(callback) {
        var t1;
        J.forEach$1$ax(this.attributes, callback);
        t1 = this.profile;
        if (t1 != null)
          J.forEach$1$ax(J.get$attributes$x(t1), new O.Node_forEachAttribute_closure(this, callback));
      }, "call$1", "get$forEachAttribute", 2, 0, 91, 7, [], "forEachAttribute"],
      getSimpleMap$0: [function() {
        var rslt = P.LinkedHashMap__makeEmpty();
        if (J.containsKey$1$x(this.configs, "$is") === true)
          rslt.$indexSet(0, "$is", J.$index$asx(this.configs, "$is"));
        if (J.containsKey$1$x(this.configs, "$type") === true)
          rslt.$indexSet(0, "$type", J.$index$asx(this.configs, "$type"));
        if (J.containsKey$1$x(this.configs, "$name") === true)
          rslt.$indexSet(0, "$name", J.$index$asx(this.configs, "$name"));
        if (J.containsKey$1$x(this.configs, "$invokable") === true)
          rslt.$indexSet(0, "$invokable", J.$index$asx(this.configs, "$invokable"));
        if (J.containsKey$1$x(this.configs, "$writable") === true)
          rslt.$indexSet(0, "$writable", J.$index$asx(this.configs, "$writable"));
        return rslt;
      }, "call$0", "get$getSimpleMap", 0, 0, 29, "getSimpleMap"],
      static: {Node_getDisplayName: [function(nameOrPath) {
          var t1, names;
          t1 = J.getInterceptor$asx(nameOrPath);
          if (t1.contains$1(nameOrPath, "/") === true) {
            names = t1.split$1(nameOrPath, "/");
            nameOrPath = names.pop();
            while (true) {
              if (!(J.$eq$(nameOrPath, "") && names.length !== 0))
                break;
              nameOrPath = names.pop();
            }
          }
          return J.contains$1$asx(nameOrPath, "%") === true ? P.Uri__uriDecode(nameOrPath, C.Utf8Codec_false, false) : nameOrPath;
        }, "call$1", "common_Node_getDisplayName$closure", 2, 0, 54, 129, [], "getDisplayName"], Node$: [function() {
          return new O.Node0(null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 0, 0, 1, "new Node"]}
    },
    "+Node": [3],
    Node_forEachChild_closure: {
      "^": "Closure:92;_common$_captured_this_0,_common$_captured_callback_1",
      call$2: [function(str, n) {
        if (J.containsKey$1$x(this._common$_captured_this_0.children, str) !== true)
          this._common$_captured_callback_1.call$2(str, n);
      }, null, null, 4, 0, 92, 26, [], 56, [], "call"]
    },
    Node_forEachConfig_closure: {
      "^": "Closure:30;_common$_captured_this_0,_common$_captured_callback_1",
      call$2: [function(str, val) {
        if (J.containsKey$1$x(this._common$_captured_this_0.configs, str) !== true)
          this._common$_captured_callback_1.call$2(str, val);
      }, null, null, 4, 0, 30, 26, [], 20, [], "call"]
    },
    Node_forEachAttribute_closure: {
      "^": "Closure:30;_common$_captured_this_0,_common$_captured_callback_1",
      call$2: [function(str, val) {
        if (J.containsKey$1$x(this._common$_captured_this_0.attributes, str) !== true)
          this._common$_captured_callback_1.call$2(str, val);
      }, null, null, 4, 0, 30, 26, [], 20, [], "call"]
    },
    Path: {
      "^": "Object;path*-5,parentPath@-5,name*-5,valid@-6",
      get$parent: [function(_) {
        var t1 = new O.Path(this.parentPath, null, null, true);
        t1._parse$0();
        return t1;
      }, null, null, 1, 0, 201, "parent"],
      child$1: [function($name) {
        var t1, t2;
        t1 = J.endsWith$1$s(this.path, "/");
        t2 = this.path;
        if (t1) {
          t1 = J.getInterceptor$asx(t2);
          t2 = t1.substring$2(t2, 0, J.$sub$n(t1.get$length(t2), 1));
          t1 = t2;
        } else
          t1 = t2;
        t1 = J.$add$ns(t1, "/");
        t2 = J.getInterceptor$s($name);
        t1 = new O.Path(J.$add$ns(t1, t2.startsWith$1($name, "/") ? t2.substring$1($name, 1) : $name), null, null, true);
        t1._parse$0();
        return t1;
      }, "call$1", "get$child", 2, 0, 202, 2, [], "child"],
      _parse$0: [function() {
        var t1, t2, pos;
        if (J.$eq$(this.path, "") || J.contains$1$asx(this.path, $.$get$Path_invalidChar()) === true || J.contains$1$asx(this.path, "//") === true)
          this.valid = false;
        if (J.$eq$(this.path, "/")) {
          this.valid = true;
          this.name = "/";
          this.parentPath = "";
          return;
        }
        if (J.endsWith$1$s(this.path, "/")) {
          t1 = this.path;
          t2 = J.getInterceptor$asx(t1);
          this.path = t2.substring$2(t1, 0, J.$sub$n(t2.get$length(t1), 1));
        }
        pos = J.lastIndexOf$1$asx(this.path, "/");
        t1 = J.getInterceptor$n(pos);
        if (t1.$lt(pos, 0)) {
          this.name = this.path;
          this.parentPath = "";
        } else if (t1.$eq(pos, 0)) {
          this.parentPath = "/";
          this.name = J.substring$1$s(this.path, 1);
        } else {
          this.parentPath = J.substring$2$s(this.path, 0, pos);
          this.name = J.substring$1$s(this.path, t1.$add(pos, 1));
          if (J.contains$1$asx(this.parentPath, "/$") === true || J.contains$1$asx(this.parentPath, "/@") === true)
            this.valid = false;
        }
      }, "call$0", "get$_parse", 0, 0, 0, "_parse"],
      get$isAbsolute: [function() {
        return J.$eq$(this.name, "/") || J.startsWith$1$s(this.parentPath, "/");
      }, null, null, 1, 0, 8, "isAbsolute"],
      get$isRoot: [function() {
        return J.$eq$(this.name, "/");
      }, null, null, 1, 0, 8, "isRoot"],
      get$isConfig: [function() {
        return J.startsWith$1$s(this.name, "$");
      }, null, null, 1, 0, 8, "isConfig"],
      get$isAttribute: [function() {
        return J.startsWith$1$s(this.name, "@");
      }, null, null, 1, 0, 8, "isAttribute"],
      get$isNode: [function() {
        return !J.startsWith$1$s(this.name, "@") && !J.startsWith$1$s(this.name, "$");
      }, null, null, 1, 0, 8, "isNode"],
      mergeBasePath$2: [function(base, force) {
        var t1;
        if (base == null)
          return;
        if (!(J.$eq$(this.name, "/") || J.startsWith$1$s(this.parentPath, "/"))) {
          if (J.$eq$(this.parentPath, "")) {
            this.parentPath = base;
            t1 = base;
          } else {
            t1 = H.S(base) + "/" + H.S(this.parentPath);
            this.parentPath = t1;
          }
          this.path = H.S(t1) + "/" + H.S(this.name);
        } else if (force === true)
          if (J.$eq$(this.name, "")) {
            this.path = base;
            this._parse$0();
          } else {
            t1 = H.S(base) + H.S(this.parentPath);
            this.parentPath = t1;
            this.path = t1 + "/" + H.S(this.name);
          }
      }, function(base) {
        return this.mergeBasePath$2(base, false);
      }, "mergeBasePath$1", "call$2", "call$1", "get$mergeBasePath", 2, 2, 204, 46, 155, [], 76, [], "mergeBasePath"],
      static: {"^": "Path_invalidChar<-143,Path_invalidNameChar<-143", Path_getValidPath: [function(path, basePath) {
          var p;
          if (typeof path === "string") {
            p = new O.Path(path, null, null, true);
            p._parse$0();
            if (p.valid === true) {
              p.mergeBasePath$1(basePath);
              return p;
            }
          }
          return;
        }, function(path) {
          return O.Path_getValidPath(path, null);
        }, "call$2", "call$1", "common_Path_getValidPath$closure", 2, 2, 47, 0, 3, [], 55, [], "getValidPath"], Path_getValidNodePath: [function(path, basePath) {
          var p;
          if (typeof path === "string") {
            p = new O.Path(path, null, null, true);
            p._parse$0();
            if (p.valid === true && !J.startsWith$1$s(p.name, "@") && !J.startsWith$1$s(p.name, "$")) {
              p.mergeBasePath$1(basePath);
              return p;
            }
          }
          return;
        }, function(path) {
          return O.Path_getValidNodePath(path, null);
        }, "call$2", "call$1", "common_Path_getValidNodePath$closure", 2, 2, 47, 0, 3, [], 55, [], "getValidNodePath"], Path_getValidAttributePath: [function(path, basePath) {
          var p;
          if (typeof path === "string") {
            p = new O.Path(path, null, null, true);
            p._parse$0();
            if (p.valid === true && J.startsWith$1$s(p.name, "@")) {
              p.mergeBasePath$1(basePath);
              return p;
            }
          }
          return;
        }, function(path) {
          return O.Path_getValidAttributePath(path, null);
        }, "call$2", "call$1", "common_Path_getValidAttributePath$closure", 2, 2, 47, 0, 3, [], 55, [], "getValidAttributePath"], Path_getValidConfigPath: [function(path, basePath) {
          var p;
          if (typeof path === "string") {
            p = new O.Path(path, null, null, true);
            p._parse$0();
            if (p.valid === true && J.startsWith$1$s(p.name, "$")) {
              p.mergeBasePath$1(basePath);
              return p;
            }
          }
          return;
        }, function(path) {
          return O.Path_getValidConfigPath(path, null);
        }, "call$2", "call$1", "common_Path_getValidConfigPath$closure", 2, 2, 47, 0, 3, [], 55, [], "getValidConfigPath"], Path$: [function(path) {
          var t1 = new O.Path(path, null, null, true);
          t1._parse$0();
          return t1;
        }, null, null, 2, 0, 16, 3, [], "new Path"]}
    },
    "+Path": [3],
    Permission: {
      "^": "Object;",
      static: {"^": "Permission_NONE<-7,Permission_LIST<-7,Permission_READ<-7,Permission_WRITE<-7,Permission_CONFIG<-7,Permission_NEVER<-7,Permission_names<-36,Permission_nameParser<-43", Permission$: [function() {
          return new O.Permission();
        }, null, null, 0, 0, 256, "new Permission"], Permission_parse: [function(obj, defaultVal) {
          if (typeof obj === "string" && C.Map_cDSDM.containsKey$1(0, obj))
            return C.Map_cDSDM.$index(0, obj);
          return defaultVal;
        }, function(obj) {
          return O.Permission_parse(obj, 5);
        }, "call$2", "call$1", "common_Permission_parse$closure", 2, 2, 257, 131, 77, [], 133, [], "parse"]}
    },
    "+Permission": [3],
    PermissionList: {
      "^": "Object;idMatchs@-43,groupMatchs@-43,defaultPermission@-7,_FORCE_CONFIG@-6",
      updatePermissions$1: [function(data) {
        var t1, obj, t2, t3;
        J.clear$0$ax(this.idMatchs);
        J.clear$0$ax(this.groupMatchs);
        this.defaultPermission = 0;
        for (t1 = J.get$iterator$ax(data); t1.moveNext$0();) {
          obj = t1.get$current();
          t2 = J.getInterceptor(obj);
          if (!!t2.$isMap) {
            t3 = t2.$index(obj, "id");
            if (typeof t3 === "string")
              J.$indexSet$ax(this.idMatchs, t2.$index(obj, "id"), C.Map_cDSDM.$index(0, t2.$index(obj, "permission")));
            else {
              t3 = t2.$index(obj, "group");
              if (typeof t3 === "string")
                if (J.$eq$(t2.$index(obj, "group"), "default"))
                  this.defaultPermission = C.Map_cDSDM.$index(0, t2.$index(obj, "permission"));
                else
                  J.$indexSet$ax(this.groupMatchs, t2.$index(obj, "group"), C.Map_cDSDM.$index(0, t2.$index(obj, "permission")));
            }
          }
        }
      }, "call$1", "get$updatePermissions", 2, 0, 65, 37, [], "updatePermissions"],
      getPermission$1: [function(responder) {
        var t1, rslt, group, v;
        if (this._FORCE_CONFIG === true)
          return 4;
        if (J.containsKey$1$x(this.idMatchs, responder.get$reqId()) === true)
          return J.$index$asx(this.idMatchs, responder.get$reqId());
        for (t1 = J.get$iterator$ax(responder.get$groups()), rslt = 5; t1.moveNext$0();) {
          group = t1.get$current();
          if (J.containsKey$1$x(this.groupMatchs, group) === true) {
            v = J.$index$asx(this.groupMatchs, group);
            if (J.$lt$n(v, rslt))
              rslt = v;
          }
        }
        if (J.$eq$(rslt, 5))
          return this.defaultPermission;
        return rslt;
      }, "call$1", "get$getPermission", 2, 0, 207, 8, [], "getPermission"],
      static: {PermissionList$: [function() {
          return new O.PermissionList(P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), 0, true);
        }, null, null, 0, 0, 258, "new PermissionList"]}
    },
    "+PermissionList": [3],
    TableColumn: {
      "^": "Object;type*-5,name*-5,defaultValue*-3",
      getData$0: [function() {
        var rslt, t1;
        rslt = P.LinkedHashMap__makeLiteral(["type", this.type, "name", this.name]);
        t1 = this.defaultValue;
        if (t1 != null)
          rslt.$indexSet(0, "default", t1);
        return rslt;
      }, "call$0", "get$getData", 0, 0, 29, "getData"],
      static: {TableColumn$: [function($name, type, defaultValue) {
          return new O.TableColumn(type, $name, defaultValue);
        }, null, null, 4, 2, 259, 0, 2, [], 51, [], 75, [], "new TableColumn"], TableColumn_serializeColumns: [function(list) {
          var rslts, t1, m, t2, rslt;
          rslts = [];
          for (t1 = J.get$iterator$ax(list); t1.moveNext$0();) {
            m = t1.get$current();
            t2 = J.getInterceptor(m);
            if (!!t2.$isMap)
              rslts.push(m);
            else if (!!t2.$isTableColumn) {
              rslt = P.LinkedHashMap__makeLiteral(["type", m.type, "name", m.name]);
              t2 = m.defaultValue;
              if (t2 != null)
                rslt.$indexSet(0, "default", t2);
              rslts.push(rslt);
            }
          }
          return rslts;
        }, "call$1", "common_TableColumn_serializeColumns$closure", 2, 0, 260, 57, [], "serializeColumns"], TableColumn_parseColumns: [function(list) {
          var rslt, t1, m, t2, t3, type;
          rslt = [];
          rslt.$builtinTypeInfo = [O.TableColumn];
          for (t1 = J.get$iterator$ax(list); t1.moveNext$0();) {
            m = t1.get$current();
            t2 = J.getInterceptor(m);
            if (!!t2.$isMap) {
              t3 = t2.$index(m, "name");
              t3 = typeof t3 === "string";
            } else
              t3 = false;
            if (t3) {
              t3 = t2.$index(m, "type");
              type = typeof t3 === "string" ? t2.$index(m, "type") : "string";
              rslt.push(new O.TableColumn(type, t2.$index(m, "name"), t2.$index(m, "default")));
            } else if (!!t2.$isTableColumn)
              rslt.push(m);
            else
              return;
          }
          return rslt;
        }, "call$1", "common_TableColumn_parseColumns$closure", 2, 0, 261, 57, [], "parseColumns"]}
    },
    "+TableColumn": [3],
    Table: {
      "^": "Object;columns@-60,rows*-145,meta@-13",
      static: {Table$: [function(columns, rows, meta) {
          return new O.Table(columns, rows, meta);
        }, null, null, 4, 3, 262, 0, 21, [], 74, [], 22, [], "new Table"]}
    },
    "+Table": [3],
    TableColumns: {
      "^": "Object;columns<-60",
      static: {TableColumns$: [function(columns) {
          return new O.TableColumns(columns);
        }, null, null, 2, 0, 263, 21, [], "new TableColumns"]}
    },
    "+TableColumns": [3],
    TableMetadata: {
      "^": "Object;meta<-13",
      static: {TableMetadata$: [function(meta) {
          return new O.TableMetadata(meta);
        }, null, null, 2, 0, 55, 22, [], "new TableMetadata"]}
    },
    "+TableMetadata": [3],
    ValueUpdate: {
      "^": "Object;value*-366,ts@-5,status*-5,count@-7,sum@-71,min*-71,max*-71",
      ValueUpdate$merge$2: function(oldUpdate, newUpdate) {
        var t1, t2, t3;
        t1 = J.getInterceptor$x(newUpdate);
        this.value = t1.get$value(newUpdate);
        this.ts = newUpdate.get$ts();
        this.status = t1.get$status(newUpdate);
        this.count = J.$add$ns(oldUpdate.get$count(), newUpdate.get$count());
        if (!J.get$isNaN$n(oldUpdate.get$sum()))
          this.sum = J.$add$ns(this.sum, oldUpdate.get$sum());
        if (!J.get$isNaN$n(newUpdate.get$sum()))
          this.sum = J.$add$ns(this.sum, newUpdate.get$sum());
        t2 = J.getInterceptor$x(oldUpdate);
        t3 = t2.get$min(oldUpdate);
        this.min = t3;
        if (J.get$isNaN$n(t3) || J.$lt$n(t1.get$min(newUpdate), this.min))
          this.min = t1.get$min(newUpdate);
        t2 = t2.get$min(oldUpdate);
        this.max = t2;
        if (J.get$isNaN$n(t2) || J.$gt$n(t1.get$max(newUpdate), this.max))
          this.max = t1.get$max(newUpdate);
      },
      ValueUpdate$8$count$max$meta$min$status$sum$ts: function(value, count, max, meta, min, $status, sum, ts) {
        var t1, t2;
        if (this.ts == null)
          this.ts = O.ValueUpdate_getTs();
        if (meta != null) {
          t1 = J.getInterceptor$asx(meta);
          t2 = t1.$index(meta, "count");
          if (typeof t2 === "number" && Math.floor(t2) === t2)
            this.count = t1.$index(meta, "count");
          else if (this.value == null)
            this.count = 0;
          t2 = t1.$index(meta, "status");
          if (typeof t2 === "string")
            this.status = t1.$index(meta, "status");
          t2 = t1.$index(meta, "sum");
          if (typeof t2 === "number")
            this.sum = t1.$index(meta, "sum");
          t2 = t1.$index(meta, "max");
          if (typeof t2 === "number")
            this.max = t1.$index(meta, "max");
          t2 = t1.$index(meta, "min");
          if (typeof t2 === "number")
            this.min = t1.$index(meta, "min");
        }
        t1 = this.value;
        if (typeof t1 === "number" && J.$eq$(this.count, 1)) {
          t1 = this.sum;
          if (!J.$eq$(t1, t1))
            this.sum = this.value;
          t1 = this.max;
          if (!J.$eq$(t1, t1))
            this.max = this.value;
          t1 = this.min;
          if (!J.$eq$(t1, t1))
            this.min = this.value;
        }
      },
      static: {"^": "ValueUpdate_TIME_ZONE<-5", ValueUpdate_getTs: [function() {
          return new P.DateTime(Date.now(), false).toIso8601String$0() + H.S($.$get$ValueUpdate_TIME_ZONE());
        }, "call$0", "common_ValueUpdate_getTs$closure", 0, 0, 15, "getTs"], ValueUpdate$: [function(value, count, max, meta, min, $status, sum, ts) {
          var t1 = new O.ValueUpdate(value, ts, $status, count, sum, min, max);
          t1.ValueUpdate$8$count$max$meta$min$status$sum$ts(value, count, max, meta, min, $status, sum, ts);
          return t1;
        }, null, null, 2, 15, 264, 0, 0, 0, 44, 72, 72, 72, 1, [], 140, [], 22, [], 59, [], 142, [], 143, [], 217, [], 145, [], "new ValueUpdate"], ValueUpdate$merge: [function(oldUpdate, newUpdate) {
          var t1 = new O.ValueUpdate(null, null, null, null, 0, null, null);
          t1.ValueUpdate$merge$2(oldUpdate, newUpdate);
          return t1;
        }, null, null, 4, 0, 265, 146, [], 147, [], "new ValueUpdate$merge"]}
    },
    "+ValueUpdate": [3],
    closure0: {
      "^": "Closure:1;",
      call$0: [function() {
        var timeZoneOffset, s, hh, mm, t1;
        timeZoneOffset = C.JSNumber_methods._tdivFast$1(new P.DateTime(Date.now(), false).get$timeZoneOffset()._duration, 60000000);
        if (timeZoneOffset < 0) {
          timeZoneOffset = -timeZoneOffset;
          s = "-";
        } else
          s = "+";
        hh = C.JSNumber_methods._tdivFast$1(timeZoneOffset, 60);
        mm = C.JSNumber_methods.$mod(timeZoneOffset, 60);
        t1 = s + (hh < 10 ? "0" : "") + H.S(hh) + ":";
        return t1 + (mm < 10 ? "0" : "") + H.S(mm);
      }, null, null, 0, 0, 1, "call"]
    }
  }], ["dslink.pk", "package:dslink/src/crypto/pk.dart",, K, {
    "^": "_isCryptoProviderLocked@-6,_CRYPTO_PROVIDER@-147",
    setCryptoProvider: [function(provider) {
      if ($._isCryptoProviderLocked === true)
        throw H.wrapException(new P.StateError("crypto provider is locked"));
      $._CRYPTO_PROVIDER = provider;
      $._isCryptoProviderLocked = true;
    }, "call$1", "pk__setCryptoProvider$closure", 2, 0, 266, 49, [], "setCryptoProvider"],
    lockCryptoProvider: [function() {
      $._isCryptoProviderLocked = true;
      return true;
    }, "call$0", "pk__lockCryptoProvider$closure", 0, 0, 1, "lockCryptoProvider"],
    CryptoProvider: {
      "^": "Object;",
      static: {CryptoProvider$: [function() {
          return new K.CryptoProvider();
        }, null, null, 0, 0, 267, "new CryptoProvider"]}
    },
    "+CryptoProvider": [3],
    ECDH: {
      "^": "Object;",
      verifySalt$2: [function(salt, hash) {
        return this.hashSalt$1(salt) === hash;
      }, "call$2", "get$verifySalt", 4, 0, 46, 39, [], 81, [], "verifySalt"],
      static: {ECDH$: [function() {
          return new K.ECDH();
        }, null, null, 0, 0, 164, "new ECDH"], ECDH_assign: [function(publicKeyRemote, old) {
          var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$temp1;
          function $async$ECDH_assign($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$temp1 = $;
                  $async$temp1 = $async$temp1.$get$_CRYPTO_PROVIDER();
                  $async$returnValue = $async$temp1.assign$2(publicKeyRemote, old);
                  // goto return
                  $async$goto = 1;
                  break;
                case 1:
                  // return
                  return H.asyncHelper($async$returnValue, 0, $async$completer, null);
                case 2:
                  // rethrow
                  return H.asyncHelper($async$currentError, 1, $async$completer);
              }
          }
          return H.asyncHelper(null, $async$ECDH_assign, $async$completer, null);
        }, "call$2", "pk_ECDH_assign$closure", 4, 0, 268, 67, [], 79, [], "assign"]}
    },
    "+ECDH": [3],
    PublicKey: {
      "^": "Object;",
      getDsId$1: [function(prefix) {
        return H.S(prefix) + H.S(this.get$qHash64());
      }, "call$1", "get$getDsId", 2, 0, 54, 88, [], "getDsId"],
      verifyDsId$1: [function(dsId) {
        var t1 = J.getInterceptor$asx(dsId);
        return J.$ge$n(t1.get$length(dsId), 43) && t1.substring$1(dsId, J.$sub$n(t1.get$length(dsId), 43)) === this.get$qHash64();
      }, "call$1", "get$verifyDsId", 2, 0, 73, 82, [], "verifyDsId"],
      static: {PublicKey$: [function() {
          return new K.PublicKey();
        }, null, null, 0, 0, 1, "new PublicKey"], PublicKey_PublicKey$fromBytes: [function(bytes) {
          return $.$get$_CRYPTO_PROVIDER().getKeyFromBytes$1(bytes);
        }, null, null, 2, 0, 96, 80, [], "new PublicKey$fromBytes"]}
    },
    "+PublicKey": [3],
    PrivateKey: {
      "^": "Object;",
      static: {PrivateKey_generate: [function() {
          var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$temp1;
          function $async$PrivateKey_generate($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$temp1 = $;
                  $async$temp1 = $async$temp1.$get$_CRYPTO_PROVIDER();
                  $async$returnValue = $async$temp1.generate$0();
                  // goto return
                  $async$goto = 1;
                  break;
                case 1:
                  // return
                  return H.asyncHelper($async$returnValue, 0, $async$completer, null);
                case 2:
                  // rethrow
                  return H.asyncHelper($async$currentError, 1, $async$completer);
              }
          }
          return H.asyncHelper(null, $async$PrivateKey_generate, $async$completer, null);
        }, "call$0", "pk_PrivateKey_generate$closure", 0, 0, 93, "generate"], PrivateKey_PrivateKey$generateSync: [function() {
          return $.$get$_CRYPTO_PROVIDER().generateSync$0();
        }, null, null, 0, 0, 94, "new PrivateKey$generateSync"], PrivateKey_PrivateKey$loadFromString: [function(str) {
          return $.$get$_CRYPTO_PROVIDER().loadFromString$1(str);
        }, null, null, 2, 0, 95, 26, [], "new PrivateKey$loadFromString"]}
    },
    "+PrivateKey": [3],
    DSRandom: {
      "^": "Object;",
      nextUint16$0: [function() {
        var data = new DataView(new ArrayBuffer(H._checkLength(2)));
        data.setUint8(0, this.nextUint8$0());
        data.setUint8(1, this.nextUint8$0());
        return data.getUint16(0, false);
      }, "call$0", "get$nextUint16", 0, 0, 24, "nextUint16"],
      static: {DSRandom$: [function() {
          return new K.DSRandom();
        }, null, null, 0, 0, 118, "new DSRandom"], DSRandom_instance: [function() {
          return $.$get$_CRYPTO_PROVIDER().get$random();
        }, null, null, 1, 0, 118, "instance"]}
    },
    "+DSRandom": [3],
    DummyECDH: {
      "^": "Object;encodedPublicKey<-5",
      hashSalt$1: [function(salt) {
        return "";
      }, "call$1", "get$hashSalt", 2, 0, 54, 39, [], "hashSalt"],
      verifySalt$2: [function(salt, hash) {
        return true;
      }, "call$2", "get$verifySalt", 4, 0, 46, 39, [], 81, [], "verifySalt"],
      static: {DummyECDH$: [function() {
          return new K.DummyECDH("");
        }, null, null, 0, 0, 1, "new DummyECDH"]}
    },
    "+DummyECDH": [3, 67]
  }], ["dslink.pk.node", "package:dslink/src/crypto/node/pk.dart",, M, {
    "^": "",
    require: function(input) {
      return $.$get$context().callMethod$2("require", [input]);
    },
    _toObj: function(obj) {
      if (obj instanceof P.JsObject || obj == null)
        return obj;
      if (typeof obj === "number" || typeof obj === "string" || typeof obj === "boolean" || obj == null)
        H.throwExpression(P.ArgumentError$("object cannot be a num, string, bool, or null"));
      return P._wrapToDart(P._convertToJS(obj));
    },
    _hash: function(obj) {
      var hash, t1;
      hash = $.$get$_crypto().callMethod$2("createHash", ["sha256"]);
      hash.callMethod$2("update", [obj]);
      t1 = J.replaceAll$2$s(hash.callMethod$2("digest", ["base64"]), "+", "-");
      H.checkString("_");
      t1 = H.stringReplaceAllUnchecked(t1, "/", "_");
      H.checkString("");
      return H.stringReplaceAllUnchecked(t1, "=", "");
    },
    listToBuf: function(bytes) {
      var t1, $length, buf, offset, $byte;
      t1 = J.getInterceptor$asx(bytes);
      $length = t1.get$length(bytes);
      buf = P.JsObject_JsObject(J.$index$asx($.$get$context(), "Buffer"), [$length]);
      for (t1 = t1.get$iterator(bytes), offset = 0; t1.moveNext$0();) {
        $byte = t1.get$current();
        if (offset >= $length)
          break;
        buf.callMethod$2("writeUInt8", [$byte, offset]);
        ++offset;
      }
      return buf;
    },
    NodeCryptoProvider: {
      "^": "Object;random<-370,_cachedPrivate@-52,_cachedTime@-7",
      assign$2: [function(publicKeyRemote, old) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, t1, t2, t3, $async$temp1, $async$temp2;
        function $async$assign$2($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = Date.now();
                $async$temp1 = $async$self;
                t2 = $async$temp1._cachedPrivate;
                $async$goto = t2 != null ? 3 : 5;
                break;
              case 3:
                // then
                $async$temp1 = t1;
                $async$temp2 = $async$self;
                $async$goto = !($async$temp1 - $async$temp2._cachedTime > 60000) ? 6 : 8;
                break;
              case 6:
                // then
                $async$temp1 = old;
                $async$temp2 = M;
                $async$temp1 = $async$temp1 instanceof $async$temp2.ECDHImpl;
                if ($async$temp1) {
                  // goto then
                  $async$goto = 9;
                  break;
                } else
                  $async$result = $async$temp1;
                // goto join
                $async$goto = 10;
                break;
              case 9:
                // then
                $async$temp1 = old;
                $async$result = $async$temp1.privateKey === t2;
              case 10:
                // join
                t3 = $async$result;
                // goto join
                $async$goto = 7;
                break;
              case 8:
                // else
                t3 = true;
              case 7:
                // join
                // goto join
                $async$goto = 4;
                break;
              case 5:
                // else
                t3 = true;
              case 4:
                // join
                $async$goto = t3 ? 11 : 13;
                break;
              case 11:
                // then
                $async$temp1 = $async$self;
                t2 = $async$temp1.generateSync$0();
                $async$temp1 = $async$self;
                $async$temp1._cachedPrivate = t2;
                $async$temp1 = $async$self;
                $async$temp1._cachedTime = t1;
                t1 = t2;
                // goto join
                $async$goto = 12;
                break;
              case 13:
                // else
                t1 = t2;
              case 12:
                // join
                $async$temp1 = t1;
                $async$temp1 = $async$temp1;
                $async$temp2 = publicKeyRemote;
                $async$returnValue = $async$temp1.getSecret$1($async$temp2.get$qBase64());
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$assign$2, $async$completer, null);
      }, "call$2", "get$assign", 4, 0, 269, 67, [], 79, [], "assign"],
      getSecret$1: [function(publicKeyRemote) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, $async$temp1, $async$temp2;
        function $async$getSecret$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = $async$self;
                $async$temp1 = $async$temp1.generateSync$0();
                $async$temp1 = $async$temp1;
                $async$temp2 = publicKeyRemote;
                $async$returnValue = $async$temp1.getSecret$1($async$temp2.get$qBase64());
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$getSecret$1, $async$completer, null);
      }, "call$1", "get$getSecret", 2, 0, 278, 67, [], "getSecret"],
      generate$0: [function() {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, $async$temp1;
        function $async$generate$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = $async$self;
                $async$returnValue = $async$temp1.generateSync$0();
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$generate$0, $async$completer, null);
      }, "call$0", "get$generate", 0, 0, 93, "generate"],
      generateSync$0: [function() {
        var keys, t1;
        keys = $.$get$_curve().callMethod$2("generateKeyPair", ["prime256v1"]);
        t1 = J.getInterceptor$asx(keys);
        return new M.PrivateKeyImpl(M.PublicKeyImpl$(M._toObj(t1.$index(keys, "publicKey"))), M._toObj(t1.$index(keys, "privateKey")));
      }, "call$0", "get$generateSync", 0, 0, 94, "generateSync"],
      loadFromString$1: [function(str) {
        var parts, privateKeyBuf, privateKey;
        parts = J.split$1$s(str, " ");
        privateKeyBuf = P.JsObject_JsObject(J.$index$asx($.$get$context(), "Buffer"), [parts[0], "base64"]);
        privateKey = P.JsObject_JsObject(J.$index$asx($.$get$_curve(), "PrivateKey"), ["prime256v1", privateKeyBuf]);
        return new M.PrivateKeyImpl(M.PublicKeyImpl$(M._toObj(privateKey.callMethod$2("getPublicKey", []))), M._toObj(privateKey));
      }, "call$1", "get$loadFromString", 2, 0, 95, 26, [], "loadFromString"],
      getKeyFromBytes$1: [function(bytes) {
        var buf = M.listToBuf(bytes);
        return M.PublicKeyImpl$(M._toObj(J.$index$asx($.$get$_curve(), "Point").callMethod$2("fromEncoded", ["prime256v1", buf])));
      }, "call$1", "get$getKeyFromBytes", 2, 0, 96, 80, [], "getKeyFromBytes"],
      static: {"^": "NodeCryptoProvider_INSTANCE<-371", NodeCryptoProvider$: [function() {
          return new M.NodeCryptoProvider(new M.DSRandomImpl(), null, -1);
        }, null, null, 0, 0, 270, "new NodeCryptoProvider"]}
    },
    "+NodeCryptoProvider": [3, 147],
    ECDHImpl: {
      "^": "ECDH;publicKey@,privateKey@,_node$_buffer",
      get$encodedPublicKey: [function() {
        return this.publicKey.get$_point().callMethod$1("toEncoded");
      }, null, null, 1, 0, 15, "encodedPublicKey"],
      hashSalt$1: [function(salt) {
        var t1, saltBuffer, t2, t3, newBuffer;
        t1 = $.$get$context();
        saltBuffer = P.JsObject_JsObject(J.$index$asx(t1, "Buffer"), [salt]);
        t2 = J.getInterceptor$asx(saltBuffer);
        t3 = this._node$_buffer;
        newBuffer = P.JsObject_JsObject(J.$index$asx(t1, "Buffer"), [J.$add$ns(t2.$index(saltBuffer, "length"), J.$index$asx(t3, "length"))]);
        saltBuffer.callMethod$2("copy", [newBuffer, 0]);
        t3.callMethod$2("copy", [newBuffer, t2.$index(saltBuffer, "length")]);
        return M._hash(newBuffer);
      }, "call$1", "get$hashSalt", 2, 0, 54, 39, [], "hashSalt"]
    },
    PublicKeyImpl: {
      "^": "PublicKey;_point<,qBase64@-,qHash64@-",
      PublicKeyImpl$1: function(_point) {
        var encoded, t1;
        encoded = M._toObj(this._point.callMethod$2("getEncoded", []));
        t1 = J.replaceAll$2$s(encoded.callMethod$2("toString", ["base64"]), "+", "-");
        H.checkString("_");
        t1 = H.stringReplaceAllUnchecked(t1, "/", "_");
        H.checkString("");
        this.qBase64 = H.stringReplaceAllUnchecked(t1, "=", "");
        this.qHash64 = M._hash(encoded);
      },
      static: {PublicKeyImpl$: function(_point) {
          var t1 = new M.PublicKeyImpl(_point, null, null);
          t1.PublicKeyImpl$1(_point);
          return t1;
        }}
    },
    PrivateKeyImpl: {
      "^": "Object;publicKey@-,_privateKey",
      saveToString$0: [function() {
        var t1 = J.replaceAll$2$s(M._toObj(J.$index$asx(this._privateKey, "d")).callMethod$2("toString", ["base64"]), "+", "-");
        H.checkString("_");
        t1 = H.stringReplaceAllUnchecked(t1, "/", "_");
        H.checkString("");
        return H.stringReplaceAllUnchecked(t1, "=", "") + (" " + H.S(this.publicKey.get$qBase64()));
      }, "call$0", "get$saveToString", 0, 0, 15, "saveToString"],
      getSecret$1: [function(key) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, buf, t1, t2, $async$temp1, $async$temp2, $async$temp3, $async$temp4;
        function $async$getSecret$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = P;
                $async$temp1 = $async$temp1;
                $async$temp2 = J;
                $async$temp2 = $async$temp2;
                $async$temp3 = $;
                buf = $async$temp1.JsObject_JsObject($async$temp2.$index$asx($async$temp3.$get$context(), "Buffer"), [key, "base64"]);
                $async$temp1 = M;
                $async$temp1 = $async$temp1;
                $async$temp2 = $async$self;
                $async$temp2 = $async$temp2._privateKey;
                $async$temp2 = $async$temp2;
                $async$temp3 = J;
                $async$temp3 = $async$temp3;
                $async$temp4 = $;
                $async$temp3 = $async$temp3.$index$asx($async$temp4.$get$_curve(), "Point");
                t1 = $async$temp1._toObj($async$temp2.callMethod$2("getSharedSecret", [$async$temp3.callMethod$2("fromEncoded", ["prime256v1", buf])]));
                $async$temp1 = P;
                $async$temp1 = $async$temp1;
                $async$temp2 = $;
                t2 = new $async$temp1._Future(0, $async$temp2.Zone__current, null);
                t2.$builtinTypeInfo = [null];
                $async$temp1 = t2;
                $async$temp1 = $async$temp1;
                $async$temp2 = M;
                $async$temp2 = $async$temp2;
                $async$temp3 = $async$self;
                $async$temp1._asyncComplete$1(new $async$temp2.ECDHImpl($async$temp3.publicKey, $async$self, t1));
                $async$returnValue = t2;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($async$returnValue, 0, $async$completer, null);
              case 2:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$getSecret$1, $async$completer, null);
      }, "call$1", "get$getSecret", 2, 0, 326, 11, [], "getSecret"]
    },
    DSRandomImpl: {
      "^": "DSRandom;",
      get$needsEntropy: [function() {
        return false;
      }, null, null, 1, 0, 8, "needsEntropy"],
      nextUint8$0: [function() {
        return $.$get$_crypto().callMethod$2("randomBytes", [1]).callMethod$2("readUInt8", [0]);
      }, "call$0", "get$nextUint8", 0, 0, 24, "nextUint8"],
      addEntropy$1: [function(str) {
      }, "call$1", "get$addEntropy", 2, 0, 17, 26, [], "addEntropy"]
    }
  }], ["dslink.requester", "package:dslink/requester.dart",, L, {
    "^": "",
    DefaultDefNodes: {
      "^": "Object;",
      static: {"^": "DefaultDefNodes__defaultDefs<-13,DefaultDefNodes_nameMap<-18,DefaultDefNodes_pathMap<-18", DefaultDefNodes$: [function() {
          return new L.DefaultDefNodes();
        }, null, null, 0, 0, 271, "new DefaultDefNodes"]}
    },
    "+DefaultDefNodes": [3],
    closure: {
      "^": "Closure:1;",
      call$0: [function() {
        var rslt = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.Node0);
        $.$get$DefaultDefNodes__defaultDefs().forEach$1(0, new L._closure(rslt));
        return rslt;
      }, null, null, 0, 0, 1, "call"]
    },
    _closure: {
      "^": "Closure:77;_captured_rslt_0",
      call$2: [function(k, m) {
        var node = new L.RemoteDefNode("/defs/profile/" + H.S(k), false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        node._getRawName$0();
        J.forEach$1$ax(m, new L.__closure(node));
        node.listed = true;
        this._captured_rslt_0.$indexSet(0, k, node);
      }, null, null, 4, 0, 77, 40, [], 4, [], "call"]
    },
    __closure: {
      "^": "Closure:30;_captured_node_1",
      call$2: [function(n, v) {
        var t1 = J.getInterceptor$s(n);
        if (t1.startsWith$1(n, "$"))
          J.$indexSet$ax(this._captured_node_1.configs, n, v);
        else if (t1.startsWith$1(n, "@"))
          J.$indexSet$ax(this._captured_node_1.attributes, n, v);
      }, null, null, 4, 0, 30, 56, [], 28, [], "call"]
    },
    closure1: {
      "^": "Closure:1;",
      call$0: [function() {
        var rslt = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.Node0);
        J.forEach$1$ax($.$get$DefaultDefNodes_nameMap(), new L._closure0(rslt));
        return rslt;
      }, null, null, 0, 0, 1, "call"]
    },
    _closure0: {
      "^": "Closure:4;_captured_rslt_0",
      call$2: [function(k, node) {
        this._captured_rslt_0.$indexSet(0, node.get$remotePath(), node);
      }, null, null, 4, 0, 4, 40, [], 9, [], "call"]
    },
    RemoteNodeCache: {
      "^": "Object;_nodes@-372",
      getRemoteNode$1: [function(path) {
        var t1, t2;
        if (J.containsKey$1$x(this._nodes, path) !== true) {
          t1 = J.startsWith$1$s(path, "defs");
          t2 = this._nodes;
          if (t1) {
            t1 = new L.RemoteDefNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
            t1._getRawName$0();
            J.$indexSet$ax(t2, path, t1);
          } else {
            t1 = new L.RemoteNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
            t1._getRawName$0();
            J.$indexSet$ax(t2, path, t1);
          }
        }
        return J.$index$asx(this._nodes, path);
      }, "call$1", "get$getRemoteNode", 2, 0, 328, 3, [], "getRemoteNode"],
      getDefNode$2: [function(path, defName) {
        var t1 = $.$get$DefaultDefNodes_nameMap();
        if (J.containsKey$1$x(t1, defName) === true)
          return J.$index$asx(t1, defName);
        return this.getRemoteNode$1(path);
      }, "call$2", "get$getDefNode", 4, 0, 329, 3, [], 92, [], "getDefNode"],
      updateRemoteChildNode$3: [function($parent, $name, m) {
        var path, rslt;
        path = J.$eq$($parent.get$remotePath(), "/") ? "/" + H.S($name) : H.S($parent.get$remotePath()) + "/" + H.S($name);
        if (J.containsKey$1$x(this._nodes, path) === true) {
          rslt = J.$index$asx(this._nodes, path);
          rslt.updateRemoteChildData$2(m, this);
        } else {
          rslt = new L.RemoteNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
          rslt._getRawName$0();
          J.$indexSet$ax(this._nodes, path, rslt);
          rslt.updateRemoteChildData$2(m, this);
        }
        return rslt;
      }, "call$3", "get$updateRemoteChildNode", 6, 0, 330, 17, [], 2, [], 4, [], "updateRemoteChildNode"],
      static: {RemoteNodeCache$: [function() {
          return new L.RemoteNodeCache(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.RemoteNode));
        }, null, null, 0, 0, 1, "new RemoteNodeCache"]}
    },
    "+RemoteNodeCache": [3],
    RemoteNode: {
      "^": "Node0;remotePath<-5,listed@-6,name*-5,_listController@-148,_subscribeController@-149,profile-19,attributes-9,configs-9,children-18",
      _getRawName$0: [function() {
        var t1, t2;
        t1 = this.remotePath;
        t2 = J.getInterceptor(t1);
        if (t2.$eq(t1, "/"))
          this.name = "/";
        else
          this.name = C.JSArray_methods.get$last(t2.split$1(t1, "/"));
      }, "call$0", "get$_getRawName", 0, 0, 0, "_getRawName"],
      isUpdated$0: [function() {
        var t1 = this._listController;
        if (!(t1 != null && t1.get$initialized()))
          return false;
        t1 = this.profile;
        if (t1 instanceof L.RemoteNode) {
          t1 = H.interceptedTypeCast(t1, "$isRemoteNode")._listController;
          t1 = !(t1 != null && t1.get$initialized());
        } else
          t1 = false;
        if (t1)
          return false;
        return true;
      }, "call$0", "get$isUpdated", 0, 0, 8, "isUpdated"],
      isSelfUpdated$0: [function() {
        var t1 = this._listController;
        return t1 != null && t1.get$initialized();
      }, "call$0", "get$isSelfUpdated", 0, 0, 8, "isSelfUpdated"],
      _list$1: [function(requester) {
        var t1 = this._listController;
        if (t1 == null) {
          t1 = new L.ListController(this, requester, null, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null, true, false);
          t1._requester$_controller = Q.BroadcastStreamController$(t1.get$onStartListen(), t1.get$_requester$_onAllCancel(), t1.get$_requester$_onListen(), L.RequesterListUpdate);
          this._listController = t1;
        }
        return J.get$stream$x(t1);
      }, "call$1", "get$_list", 2, 0, 332, 18, [], "_list"],
      createListController$1: [function(requester) {
        var t1 = new L.ListController(this, requester, null, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null, true, false);
        t1._requester$_controller = Q.BroadcastStreamController$(t1.get$onStartListen(), t1.get$_requester$_onAllCancel(), t1.get$_requester$_onListen(), L.RequesterListUpdate);
        return t1;
      }, "call$1", "get$createListController", 2, 0, 334, 18, [], "createListController"],
      _requester$_subscribe$3: [function(requester, callback, cacheLevel) {
        var t1, t2;
        t1 = this._subscribeController;
        if (t1 == null) {
          t1 = new L.ReqSubscribeController(this, requester, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), 0, null, null);
          t2 = requester.get$nextSid();
          requester.set$nextSid(J.$add$ns(t2, 1));
          t1.sid = t2;
          this._subscribeController = t1;
        }
        t1.listen$2(callback, cacheLevel);
      }, "call$3", "get$_requester$_subscribe", 6, 0, 335, 18, [], 7, [], 35, [], "_requester$_subscribe"],
      _unsubscribe$2: [function(requester, callback) {
        var t1 = this._subscribeController;
        if (t1 != null)
          t1.unlisten$1(callback);
      }, "call$2", "get$_unsubscribe", 4, 0, 336, 18, [], 7, [], "_unsubscribe"],
      _requester$_invoke$3: [function(params, requester, maxPermission) {
        var t1, t2, reqMap;
        t1 = new L.InvokeController(this, requester, null, null, null, null);
        t2 = P.StreamController_StreamController(null, null, null, null, false, L.RequesterInvokeUpdate);
        t1._requester$_controller = t2;
        t2.get$done().then$1(t1.get$_onUnsubscribe());
        t1._requester$_stream = J.get$stream$x(t1._requester$_controller);
        reqMap = P.LinkedHashMap__makeLiteral(["method", "invoke", "path", this.remotePath, "params", params]);
        if (!J.$eq$(maxPermission, 4))
          reqMap.$indexSet(0, "permit", C.List_cD9[maxPermission]);
        t1._cachedColumns = L.InvokeController_getNodeColumns(this);
        t1._request = requester._sendRequest$2(reqMap, t1);
        return t1._requester$_stream;
      }, function(params, requester) {
        return this._requester$_invoke$3(params, requester, 4);
      }, "_requester$_invoke$2", "call$3", "call$2", "get$_requester$_invoke", 4, 2, 337, 25, 34, [], 18, [], 24, [], "_requester$_invoke"],
      updateRemoteChildData$2: [function(m, cache) {
        var t1, t2;
        t1 = {};
        t1._captured_childPathPre_0 = null;
        t2 = this.remotePath;
        if (J.$eq$(t2, "/"))
          t1._captured_childPathPre_0 = "/";
        else
          t1._captured_childPathPre_0 = H.S(t2) + "/";
        J.forEach$1$ax(m, new L.RemoteNode_updateRemoteChildData_closure(t1, this, cache));
      }, "call$2", "get$updateRemoteChildData", 4, 0, 341, 4, [], 91, [], "updateRemoteChildData"],
      resetNodeCache$0: [function() {
        J.clear$0$ax(this.configs);
        J.clear$0$ax(this.attributes);
        J.clear$0$ax(this.children);
      }, "call$0", "get$resetNodeCache", 0, 0, 0, "resetNodeCache"],
      static: {RemoteNode$: [function(remotePath) {
          var t1 = new L.RemoteNode(remotePath, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
          t1._getRawName$0();
          return t1;
        }, null, null, 2, 0, 16, 163, [], "new RemoteNode"]}
    },
    "+RemoteNode": [19],
    RemoteNode_updateRemoteChildData_closure: {
      "^": "Closure:25;_requester$_box_0,_requester$_captured_this_1,_captured_cache_2",
      call$2: [function(key, value) {
        var t1, node;
        t1 = J.getInterceptor$s(key);
        if (t1.startsWith$1(key, "$"))
          J.$indexSet$ax(this._requester$_captured_this_1.configs, key, value);
        else if (t1.startsWith$1(key, "@"))
          J.$indexSet$ax(this._requester$_captured_this_1.attributes, key, value);
        else if (!!J.getInterceptor(value).$isMap) {
          t1 = this._captured_cache_2;
          node = t1.getRemoteNode$1(H.S(this._requester$_box_0._captured_childPathPre_0) + "/" + H.S(key));
          J.$indexSet$ax(this._requester$_captured_this_1.children, key, node);
          if (node instanceof L.RemoteNode)
            node.updateRemoteChildData$2(value, t1);
        }
      }, null, null, 4, 0, 25, 11, [], 1, [], "call"]
    },
    RemoteDefNode: {
      "^": "RemoteNode;remotePath-5,listed-6,name-5,_listController-148,_subscribeController-149,profile-19,attributes-9,configs-9,children-18",
      static: {RemoteDefNode$: [function(path) {
          var t1 = new L.RemoteDefNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
          t1._getRawName$0();
          return t1;
        }, null, null, 2, 0, 16, 3, [], "new RemoteDefNode"]}
    },
    "+RemoteDefNode": [33],
    Request: {
      "^": "Object;requester<-20,rid<-7,data>-13,updater<-27,_requester$_isClosed@-6,streamStatus@-5",
      get$isClosed: [function() {
        return this._requester$_isClosed;
      }, null, null, 1, 0, 8, "isClosed"],
      resend$0: [function() {
        this.requester.addToSendList$1(this.data);
      }, "call$0", "get$resend", 0, 0, 0, "resend"],
      _update$1: [function(m) {
        var t1, t2, updates, columns, meta, error;
        t1 = J.getInterceptor$asx(m);
        t2 = t1.$index(m, "stream");
        if (typeof t2 === "string")
          this.streamStatus = t1.$index(m, "stream");
        updates = !!J.getInterceptor(t1.$index(m, "updates")).$isList ? t1.$index(m, "updates") : null;
        columns = !!J.getInterceptor(t1.$index(m, "columns")).$isList ? t1.$index(m, "columns") : null;
        meta = !!J.getInterceptor(t1.$index(m, "meta")).$isMap ? t1.$index(m, "meta") : null;
        if (J.$eq$(this.streamStatus, "closed"))
          J.remove$1$ax(this.requester.get$_requests(), this.rid);
        if (t1.containsKey$1(m, "error") === true && !!J.getInterceptor(t1.$index(m, "error")).$isMap) {
          error = new O.DSError(null, null, null, null, null);
          error.DSError$fromMap$1(t1.$index(m, "error"));
        } else
          error = null;
        this.updater.onUpdate$5(this.streamStatus, updates, columns, meta, error);
      }, "call$1", "get$_update", 2, 0, 11, 4, [], "_update"],
      _requester$_close$1: [function(error) {
        if (!J.$eq$(this.streamStatus, "closed")) {
          this.streamStatus = "closed";
          this.updater.onUpdate$5("closed", null, null, null, error);
        }
      }, function() {
        return this._requester$_close$1(null);
      }, "_requester$_close$0", "call$1", "call$0", "get$_requester$_close", 0, 2, 50, 0, 6, [], "_requester$_close"],
      close$0: [function(_) {
        this.requester.closeRequest$1(this);
      }, "call$0", "get$close", 0, 0, 0, "close"],
      static: {Request$: [function(requester, rid, updater, data) {
          return new L.Request(requester, rid, data, updater, false, "initialize");
        }, null, null, 8, 0, 272, 18, [], 38, [], 85, [], 37, [], "new Request"]}
    },
    "+Request": [3],
    RequesterInvokeUpdate: {
      "^": "RequesterUpdate;rawColumns@-23,columns@-60,updates@-23,error*-21,meta@-13,_rows*-145,streamStatus-5",
      get$rows: [function(_) {
        var t1, colLen, t2, obj, t3, row, i, t4, column, t5;
        t1 = this.columns;
        colLen = t1 != null ? J.get$length$asx(t1) : -1;
        if (this._rows == null) {
          this._rows = [];
          for (t1 = J.get$iterator$ax(this.updates), t2 = J.getInterceptor(colLen); t1.moveNext$0();) {
            obj = t1.get$current();
            t3 = J.getInterceptor(obj);
            if (!!t3.$isList)
              if (J.$lt$n(t3.get$length(obj), colLen)) {
                row = t3.toList$0(obj);
                for (i = t3.get$length(obj); t3 = J.getInterceptor$n(i), t3.$lt(i, colLen); i = t3.$add(i, 1))
                  C.JSArray_methods.add$1(row, J.get$defaultValue$x(J.$index$asx(this.columns, i)));
              } else if (J.$gt$n(t3.get$length(obj), colLen))
                row = t2.$eq(colLen, -1) ? t3.toList$0(obj) : t3.sublist$2(obj, 0, colLen);
              else
                row = obj;
            else if (!!t3.$isMap) {
              row = [];
              t4 = this.columns;
              if (t4 != null)
                for (t4 = J.get$iterator$ax(t4); t4.moveNext$0();) {
                  column = t4.get$current();
                  t5 = J.getInterceptor$x(column);
                  if (t3.containsKey$1(obj, t5.get$name(column)) === true)
                    row.push(t3.$index(obj, t5.get$name(column)));
                  else
                    row.push(t5.get$defaultValue(column));
                }
            } else
              row = null;
            J.add$1$ax(this._rows, row);
          }
        }
        return this._rows;
      }, null, null, 1, 0, 349, "rows"],
      static: {RequesterInvokeUpdate$: [function(updates, rawColumns, columns, streamStatus, error, meta) {
          return new L.RequesterInvokeUpdate(rawColumns, columns, updates, error, meta, null, streamStatus);
        }, null, null, 8, 5, 273, 0, 0, 31, [], 168, [], 21, [], 36, [], 22, [], 6, [], "new RequesterInvokeUpdate"]}
    },
    "+RequesterInvokeUpdate": [150],
    InvokeController: {
      "^": "Object;node<-33,requester<-20,_requester$_controller@-379,_requester$_stream@-380,_request@-44,_cachedColumns@-60",
      _onUnsubscribe$1: [function(obj) {
        var t1 = this._request;
        if (t1 != null && !J.$eq$(t1.get$streamStatus(), "closed"))
          J.close$0$x(this._request);
      }, "call$1", "get$_onUnsubscribe", 2, 0, 350, 77, [], "_onUnsubscribe"],
      _onNodeUpdate$1: [function(listUpdate) {
      }, "call$1", "get$_onNodeUpdate", 2, 0, 97, 176, [], "_onNodeUpdate"],
      onUpdate$5: [function(streamStatus, updates, columns, meta, error) {
        if (columns != null)
          this._cachedColumns = O.TableColumn_parseColumns(columns);
        if (error != null) {
          J.add$1$ax(this._requester$_controller, new L.RequesterInvokeUpdate(null, null, null, error, meta, null, "closed"));
          streamStatus = "closed";
        } else if (updates != null)
          J.add$1$ax(this._requester$_controller, new L.RequesterInvokeUpdate(columns, this._cachedColumns, updates, null, meta, null, streamStatus));
        if (J.$eq$(streamStatus, "closed"))
          J.close$0$x(this._requester$_controller);
      }, "call$5", "get$onUpdate", 10, 0, 45, 36, [], 31, [], 21, [], 22, [], 6, [], "onUpdate"],
      onDisconnect$0: [function(_) {
      }, "call$0", "get$onDisconnect", 0, 0, 0, "onDisconnect"],
      onReconnect$0: [function() {
      }, "call$0", "get$onReconnect", 0, 0, 0, "onReconnect"],
      static: {InvokeController_getNodeColumns: [function(node) {
          var columns = node.getConfig$1("$columns");
          if (!J.getInterceptor(columns).$isList && node.get$profile() != null)
            columns = node.get$profile().getConfig$1("$columns");
          if (!!J.getInterceptor(columns).$isList)
            return O.TableColumn_parseColumns(columns);
          return;
        }, "call$1", "requester_InvokeController_getNodeColumns$closure", 2, 0, 274, 9, [], "getNodeColumns"], InvokeController$: [function(node, requester, params, maxPermission) {
          var t1, t2, reqMap;
          t1 = new L.InvokeController(node, requester, null, null, null, null);
          t2 = P.StreamController_StreamController(null, null, null, null, false, L.RequesterInvokeUpdate);
          t1._requester$_controller = t2;
          t2.get$done().then$1(t1.get$_onUnsubscribe());
          t1._requester$_stream = J.get$stream$x(t1._requester$_controller);
          reqMap = P.LinkedHashMap__makeLiteral(["method", "invoke", "path", node.get$remotePath(), "params", params]);
          if (!J.$eq$(maxPermission, 4))
            reqMap.$indexSet(0, "permit", C.List_cD9[maxPermission]);
          t1._cachedColumns = L.InvokeController_getNodeColumns(node);
          t1._request = requester._sendRequest$2(reqMap, t1);
          return t1;
        }, null, null, 6, 2, 275, 25, 9, [], 18, [], 34, [], 24, [], "new InvokeController"]}
    },
    "+InvokeController": [3, 27],
    RequesterListUpdate: {
      "^": "RequesterUpdate;changes@-36,node@-33,streamStatus-5",
      static: {RequesterListUpdate$: [function(node, changes, streamStatus) {
          return new L.RequesterListUpdate(changes, node, streamStatus);
        }, null, null, 6, 0, 276, 9, [], 173, [], 36, [], "new RequesterListUpdate"]}
    },
    "+RequesterListUpdate": [150],
    ListDefListener: {
      "^": "Object;node<-33,requester<-20,listener@-12,ready@-6",
      cancel$0: [function() {
        this.listener.cancel$0();
      }, "call$0", "get$cancel", 0, 0, 0, "cancel"],
      ListDefListener$3: function(node, requester, callback) {
        this.listener = J.list$1$x(this.requester, this.node.get$remotePath()).listen$1(new L.ListDefListener_closure(this, callback));
      },
      static: {ListDefListener$: [function(node, requester, callback) {
          var t1 = new L.ListDefListener(node, requester, null, false);
          t1.ListDefListener$3(node, requester, callback);
          return t1;
        }, null, null, 6, 0, 277, 9, [], 18, [], 7, [], "new ListDefListener"]}
    },
    "+ListDefListener": [3],
    ListDefListener_closure: {
      "^": "Closure:98;_requester$_captured_this_0,_requester$_captured_callback_1",
      call$1: [function(update) {
        this._requester$_captured_this_0.ready = !J.$eq$(update.get$streamStatus(), "initialize");
        this._requester$_captured_callback_1.call$1(update);
      }, null, null, 2, 0, 98, 43, [], "call"]
    },
    ListController: {
      "^": "Object;node<-33,requester<-20,_requester$_controller@-382,request*-44,disconnectTs@-5,changes@-151,_profileLoader@-384,_ready@-6,_pendingRemoveDef@-6",
      get$stream: [function(_) {
        return J.get$stream$x(this._requester$_controller);
      }, null, null, 1, 0, 255, "stream"],
      get$initialized: [function() {
        var t1 = this.request;
        return t1 != null && !J.$eq$(t1.get$streamStatus(), "initialize");
      }, null, null, 1, 0, 8, "initialized"],
      onDisconnect$0: [function(_) {
        var t1;
        this.disconnectTs = O.ValueUpdate_getTs();
        t1 = this.node;
        J.$indexSet$ax(t1.get$configs(), "$disconnectedTs", this.disconnectTs);
        J.add$1$ax(this._requester$_controller, new L.RequesterListUpdate(["$disconnectedTs"], t1, this.request.get$streamStatus()));
      }, "call$0", "get$onDisconnect", 0, 0, 0, "onDisconnect"],
      onReconnect$0: [function() {
        if (this.disconnectTs != null) {
          J.remove$1$ax(this.node.get$configs(), "$disconnectedTs");
          this.disconnectTs = null;
          J.add$1$ax(this.changes, "$disconnectedTs");
        }
      }, "call$0", "get$onReconnect", 0, 0, 0, "onReconnect"],
      onUpdate$5: [function(streamStatus, updates, columns, meta, error) {
        var t1, t2, t3, t4, reseted, update, t5, t6, $name, value, removed;
        if (updates != null) {
          for (t1 = J.get$iterator$ax(updates), t2 = this.node, t3 = J.getInterceptor$x(t2), t4 = this.requester, reseted = false; t1.moveNext$0();) {
            update = t1.get$current();
            t5 = J.getInterceptor(update);
            if (!!t5.$isMap) {
              t6 = t5.$index(update, "name");
              if (typeof t6 === "string")
                $name = t5.$index(update, "name");
              else
                continue;
              if (J.$eq$(t5.$index(update, "change"), "remove")) {
                value = null;
                removed = true;
              } else {
                value = t5.$index(update, "value");
                removed = false;
              }
            } else {
              if (!!t5.$isList) {
                if (J.$gt$n(t5.get$length(update), 0)) {
                  t6 = t5.$index(update, 0);
                  t6 = typeof t6 === "string";
                } else
                  t6 = false;
                if (t6) {
                  $name = t5.$index(update, 0);
                  value = J.$gt$n(t5.get$length(update), 1) ? t5.$index(update, 1) : null;
                } else
                  continue;
              } else
                continue;
              removed = false;
            }
            t5 = J.getInterceptor$s($name);
            if (t5.startsWith$1($name, "$")) {
              if (!reseted)
                if (!t5.$eq($name, "$is"))
                  if (!t5.$eq($name, "$base"))
                    t6 = t5.$eq($name, "$disconnectedTs") && typeof value === "string";
                  else
                    t6 = true;
                else
                  t6 = true;
              else
                t6 = false;
              if (t6) {
                t2.resetNodeCache$0();
                reseted = true;
              }
              if (t5.$eq($name, "$is"))
                this.loadProfile$1(value);
              J.add$1$ax(this.changes, $name);
              if (removed)
                J.remove$1$ax(t2.get$configs(), $name);
              else
                J.$indexSet$ax(t2.get$configs(), $name, value);
            } else {
              t5 = t5.startsWith$1($name, "@");
              t6 = this.changes;
              if (t5) {
                J.add$1$ax(t6, $name);
                if (removed)
                  J.remove$1$ax(t3.get$attributes(t2), $name);
                else
                  J.$indexSet$ax(t3.get$attributes(t2), $name, value);
              } else {
                J.add$1$ax(t6, $name);
                if (removed)
                  J.remove$1$ax(t3.get$children(t2), $name);
                else if (!!J.getInterceptor(value).$isMap)
                  J.$indexSet$ax(t3.get$children(t2), $name, t4.get$nodeCache().updateRemoteChildNode$3(t2, $name, value));
              }
            }
          }
          if (!J.$eq$(this.request.get$streamStatus(), "initialize"))
            t2.set$listed(true);
          if (this._pendingRemoveDef === true)
            this._pendingRemoveDef = false;
          this.onProfileUpdated$0();
        }
      }, "call$5", "get$onUpdate", 10, 0, 45, 36, [], 31, [], 21, [], 22, [], 6, [], "onUpdate"],
      loadProfile$1: [function(defName) {
        var t1, defPath, t2, t3;
        this._ready = true;
        t1 = J.getInterceptor$s(defName);
        defPath = !t1.startsWith$1(defName, "/") ? "/defs/profile/" + H.S(defName) : defName;
        t2 = this.node;
        if (t2.get$profile() instanceof L.RemoteNode && J.$eq$(H.interceptedTypeCast(t2.get$profile(), "$isRemoteNode").remotePath, defPath))
          return;
        t3 = this.requester;
        t2.set$profile(t3.get$nodeCache().getDefNode$2(defPath, defName));
        if (t1.$eq(defName, "node"))
          return;
        if (t2.get$profile() instanceof L.RemoteNode && H.interceptedTypeCast(t2.get$profile(), "$isRemoteNode").listed !== true) {
          this._ready = false;
          this._profileLoader = L.ListDefListener$(t2.get$profile(), t3, this.get$_onProfileUpdate());
        }
      }, "call$1", "get$loadProfile", 2, 0, 17, 92, [], "loadProfile"],
      _onProfileUpdate$1: [function(update) {
        J.addAll$1$ax(this.changes, J.where$1$ax(update.get$changes(), new L.ListController__onProfileUpdate_closure()));
        this._ready = true;
        this.onProfileUpdated$0();
        Q.logger().fine$1("_onDefUpdated");
      }, "call$1", "get$_onProfileUpdate", 2, 0, 97, 43, [], "_onProfileUpdate"],
      onProfileUpdated$0: [function() {
        if (this._ready === true) {
          if (!J.$eq$(this.request.get$streamStatus(), "initialize")) {
            J.add$1$ax(this._requester$_controller, new L.RequesterListUpdate(J.toList$0$ax(this.changes), this.node, this.request.get$streamStatus()));
            J.clear$0$ax(this.changes);
          }
          if (J.$eq$(this.request.get$streamStatus(), "closed"))
            J.close$0$x(this._requester$_controller);
        }
      }, "call$0", "get$onProfileUpdated", 0, 0, 0, "onProfileUpdated"],
      _checkRemoveDef$0: [function() {
        this._pendingRemoveDef = false;
      }, "call$0", "get$_checkRemoveDef", 0, 0, 0, "_checkRemoveDef"],
      onStartListen$0: [function() {
        if (this.request == null)
          this.request = this.requester._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "list", "path", this.node.get$remotePath()]), this);
      }, "call$0", "get$onStartListen", 0, 0, 0, "onStartListen"],
      _requester$_onListen$1: [function(callback) {
        if (this._ready === true && this.request != null)
          Q.DsTimer_callLater(new L.ListController__onListen_closure(this, callback));
      }, "call$1", "get$_requester$_onListen", 2, 0, 100, 7, [], "_requester$_onListen"],
      _requester$_onAllCancel$0: [function() {
        this._destroy$0();
      }, "call$0", "get$_requester$_onAllCancel", 0, 0, 0, "_requester$_onAllCancel"],
      _destroy$0: [function() {
        var t1 = this._profileLoader;
        if (t1 != null) {
          t1.cancel$0();
          this._profileLoader = null;
        }
        t1 = this.request;
        if (t1 != null) {
          this.requester.closeRequest$1(t1);
          this.request = null;
        }
        J.close$0$x(this._requester$_controller);
        this.node.set$_listController(null);
      }, "call$0", "get$_destroy", 0, 0, 0, "_destroy"],
      static: {"^": "ListController__ignoreProfileProps<-36", ListController$: [function(node, requester) {
          var t1 = new L.ListController(node, requester, null, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null, true, false);
          t1._requester$_controller = Q.BroadcastStreamController$(t1.get$onStartListen(), t1.get$_requester$_onAllCancel(), t1.get$_requester$_onListen(), L.RequesterListUpdate);
          return t1;
        }, null, null, 4, 0, 119, 9, [], 18, [], "new ListController"]}
    },
    "+ListController": [3, 27],
    ListController__onProfileUpdate_closure: {
      "^": "Closure:2;",
      call$1: [function(str) {
        return !C.JSArray_methods.contains$1(C.List_$is_$permission_$settings, str);
      }, null, null, 2, 0, 2, 26, [], "call"]
    },
    ListController__onListen_closure: {
      "^": "Closure:1;_requester$_captured_this_0,_requester$_captured_callback_1",
      call$0: [function() {
        var changes, t1, t2, t3;
        changes = [];
        t1 = this._requester$_captured_this_0;
        t2 = t1.node;
        C.JSArray_methods.addAll$1(changes, J.get$keys$x(t2.get$configs()));
        t3 = J.getInterceptor$x(t2);
        C.JSArray_methods.addAll$1(changes, J.get$keys$x(t3.get$attributes(t2)));
        C.JSArray_methods.addAll$1(changes, J.get$keys$x(t3.get$children(t2)));
        this._requester$_captured_callback_1.call$1(new L.RequesterListUpdate(changes, t2, t1.request.get$streamStatus()));
      }, null, null, 0, 0, 1, "call"]
    },
    RemoveController: {
      "^": "Object;completer<-152,requester<-20,path>-5,_request@-44",
      get$future: [function() {
        return this.completer.get$future();
      }, null, null, 1, 0, 83, "future"],
      onUpdate$5: [function($status, updates, columns, meta, error) {
        J.complete$1$x(this.completer, new L.RequesterUpdate($status));
      }, "call$5", "get$onUpdate", 10, 0, 45, 59, [], 31, [], 21, [], 22, [], 6, [], "onUpdate"],
      onDisconnect$0: [function(_) {
      }, "call$0", "get$onDisconnect", 0, 0, 0, "onDisconnect"],
      onReconnect$0: [function() {
      }, "call$0", "get$onReconnect", 0, 0, 0, "onReconnect"],
      static: {RemoveController$: [function(requester, path) {
          var t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [L.RequesterUpdate];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [L.RequesterUpdate];
          t1 = new L.RemoveController(t1, requester, path, null);
          t1._request = requester._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "remove", "path", path]), t1);
          return t1;
        }, null, null, 4, 0, 279, 18, [], 3, [], "new RemoveController"]}
    },
    "+RemoveController": [3, 27],
    SetController: {
      "^": "Object;completer<-152,requester<-20,path>-5,value>-3,_request@-44",
      get$future: [function() {
        return this.completer.get$future();
      }, null, null, 1, 0, 83, "future"],
      onUpdate$5: [function($status, updates, columns, meta, error) {
        J.complete$1$x(this.completer, new L.RequesterUpdate($status));
      }, "call$5", "get$onUpdate", 10, 0, 45, 59, [], 31, [], 21, [], 22, [], 6, [], "onUpdate"],
      onDisconnect$0: [function(_) {
      }, "call$0", "get$onDisconnect", 0, 0, 0, "onDisconnect"],
      onReconnect$0: [function() {
      }, "call$0", "get$onReconnect", 0, 0, 0, "onReconnect"],
      static: {SetController$: [function(requester, path, value, maxPermission) {
          var t1, reqMap;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [L.RequesterUpdate];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [L.RequesterUpdate];
          t1 = new L.SetController(t1, requester, path, value, null);
          reqMap = P.LinkedHashMap__makeLiteral(["method", "set", "path", path, "value", value]);
          if (!J.$eq$(maxPermission, 4))
            reqMap.$indexSet(0, "permit", C.List_cD9[maxPermission]);
          t1._request = requester._sendRequest$2(reqMap, t1);
          return t1;
        }, null, null, 6, 2, 280, 25, 18, [], 3, [], 1, [], 24, [], "new SetController"]}
    },
    "+SetController": [3, 27],
    ReqSubscribeListener: {
      "^": "Object;callback@-48,requester@-20,path*-5",
      cancel$0: [function() {
        var t1 = this.callback;
        if (t1 != null) {
          this.requester.unsubscribe$2(this.path, t1);
          this.callback = null;
        }
        return;
      }, "call$0", "get$cancel", 0, 0, 22, "cancel"],
      asFuture$1: [function(futureValue) {
        return;
      }, function() {
        return this.asFuture$1(null);
      }, "asFuture$0", "call$1", "call$0", "get$asFuture", 0, 2, 364, 0, 177, [], "asFuture"],
      get$isPaused: [function() {
        return false;
      }, null, null, 1, 0, 8, "isPaused"],
      onData$1: [function(handleData) {
      }, "call$1", "get$onData", 2, 0, 365, 178, [], "onData"],
      onDone$1: [function(handleDone) {
      }, "call$1", "get$onDone", 2, 0, 40, 179, [], "onDone"],
      onError$1: [function(_, handleError) {
      }, "call$1", "get$onError", 2, 0, 367, 180, [], "onError"],
      pause$1: [function(_, resumeSignal) {
      }, function($receiver) {
        return this.pause$1($receiver, null);
      }, "pause$0", "call$1", "call$0", "get$pause", 0, 2, 369, 0, 181, [], "pause"],
      resume$0: [function() {
      }, "call$0", "get$resume", 0, 0, 0, "resume"],
      callback$0: function() {
        return this.callback.call$0();
      },
      static: {ReqSubscribeListener$: [function(requester, path, callback) {
          return new L.ReqSubscribeListener(callback, requester, path);
        }, null, null, 6, 0, 281, 18, [], 3, [], 7, [], "new ReqSubscribeListener"]}
    },
    "+ReqSubscribeListener": [3, 12],
    SubscribeController: {
      "^": "Object;request*-153",
      onDisconnect$0: [function(_) {
      }, "call$0", "get$onDisconnect", 0, 0, 0, "onDisconnect"],
      onReconnect$0: [function() {
      }, "call$0", "get$onReconnect", 0, 0, 0, "onReconnect"],
      onUpdate$5: [function($status, updates, columns, meta, error) {
      }, "call$5", "get$onUpdate", 10, 0, 45, 59, [], 31, [], 21, [], 22, [], 6, [], "onUpdate"],
      static: {SubscribeController$: [function() {
          return new L.SubscribeController(null);
        }, null, null, 0, 0, 1, "new SubscribeController"]}
    },
    "+SubscribeController": [3, 27],
    SubscribeRequest: {
      "^": "Request;subsriptions<-387,subsriptionids<-154,_changedPaths@-389,toRemove@-154,_requester$_waitingAck@-6,_requester$_pendingSend@-6,_requester$_sendAfterAck@-6,requester-20,rid-7,data-13,updater-27,_requester$_isClosed-6,streamStatus-5",
      resend$0: [function() {
        this.prepareSending$0();
      }, "call$0", "get$resend", 0, 0, 0, "resend", 12],
      _requester$_close$1: [function(error) {
        var t1, t2;
        t1 = this.subsriptions;
        t2 = J.getInterceptor$asx(t1);
        if (t2.get$isNotEmpty(t1))
          t2.forEach$1(t1, new L.SubscribeRequest__close_closure(this));
      }, function() {
        return this._requester$_close$1(null);
      }, "_requester$_close$0", "call$1", "call$0", "get$_requester$_close", 0, 2, 50, 0, 6, [], "_requester$_close", 12],
      _update$1: [function(m) {
        var updates, t1, t2, t3, t4, t5, update, t6, t7, path, ts, sid, value, meta;
        updates = J.$index$asx(m, "updates");
        t1 = J.getInterceptor(updates);
        if (!!t1.$isList)
          for (t1 = t1.get$iterator(updates), t2 = this.subsriptions, t3 = J.getInterceptor$asx(t2), t4 = this.subsriptionids, t5 = J.getInterceptor$asx(t4); t1.moveNext$0();) {
            update = t1.get$current();
            t6 = J.getInterceptor(update);
            if (!!t6.$isMap) {
              t7 = t6.$index(update, "ts");
              if (typeof t7 === "string") {
                path = t6.$index(update, "path");
                ts = t6.$index(update, "ts");
                t7 = t6.$index(update, "path");
                if (typeof t7 === "string") {
                  path = t6.$index(update, "path");
                  sid = -1;
                } else {
                  t7 = t6.$index(update, "sid");
                  if (typeof t7 === "number" && Math.floor(t7) === t7)
                    sid = t6.$index(update, "sid");
                  else
                    continue;
                }
              } else {
                path = null;
                sid = -1;
                ts = null;
              }
              value = t6.$index(update, "value");
              meta = update;
            } else {
              if (!!t6.$isList && J.$gt$n(t6.get$length(update), 2)) {
                t7 = t6.$index(update, 0);
                if (typeof t7 === "string") {
                  path = t6.$index(update, 0);
                  sid = -1;
                } else {
                  t7 = t6.$index(update, 0);
                  if (typeof t7 === "number" && Math.floor(t7) === t7)
                    sid = t6.$index(update, 0);
                  else
                    continue;
                  path = null;
                }
                value = t6.$index(update, 1);
                ts = t6.$index(update, 2);
              } else
                continue;
              meta = null;
            }
            if (path != null && t3.containsKey$1(t2, path) === true)
              t3.$index(t2, path).addValue$1(O.ValueUpdate$(value, 1, 0 / 0, meta, 0 / 0, null, 0 / 0, ts));
            else if (J.$gt$n(sid, -1) && t5.containsKey$1(t4, sid) === true)
              t5.$index(t4, sid).addValue$1(O.ValueUpdate$(value, 1, 0 / 0, meta, 0 / 0, null, 0 / 0, ts));
          }
      }, "call$1", "get$_update", 2, 0, 11, 4, [], "_update", 12],
      addSubscription$2: [function(controller, level) {
        var path = controller.get$node().get$remotePath();
        J.$indexSet$ax(this.subsriptions, path, controller);
        J.$indexSet$ax(this.subsriptionids, controller.get$sid(), controller);
        this.prepareSending$0();
        J.add$1$ax(this._changedPaths, path);
      }, "call$2", "get$addSubscription", 4, 0, 373, 47, [], 94, [], "addSubscription"],
      removeSubscription$1: [function(controller) {
        var path, t1, t2;
        path = controller.get$node().get$remotePath();
        t1 = this.subsriptions;
        t2 = J.getInterceptor$x(t1);
        if (t2.containsKey$1(t1, path) === true) {
          J.$indexSet$ax(this.toRemove, t2.$index(t1, path).get$sid(), t2.$index(t1, path));
          this.prepareSending$0();
        } else if (J.containsKey$1$x(this.subsriptionids, controller.get$sid()) === true)
          Q.logger().severe$1("unexpected remoteSubscription in the requester, sid: " + H.S(controller.get$sid()));
      }, "call$1", "get$removeSubscription", 2, 0, 374, 47, [], "removeSubscription"],
      startSendingData$0: [function() {
        var t1, toAdd, processingPaths, t2, t3, t4, path, sub, m, removeSids;
        this._requester$_pendingSend = false;
        t1 = this.requester;
        if (J.get$connection$x(t1) == null)
          return;
        toAdd = [];
        processingPaths = this._changedPaths;
        this._changedPaths = P.HashSet_HashSet(null, null, null, P.String);
        for (t2 = J.get$iterator$ax(processingPaths), t3 = this.subsriptions, t4 = J.getInterceptor$x(t3); t2.moveNext$0();) {
          path = t2.get$current();
          if (t4.containsKey$1(t3, path) === true) {
            sub = t4.$index(t3, path);
            m = P.LinkedHashMap__makeLiteral(["path", path, "sid", sub.get$sid()]);
            if (J.$gt$n(sub.get$maxCache(), 1))
              m.$indexSet(0, "cache", sub.get$maxCache());
            toAdd.push(m);
          }
        }
        if (toAdd.length !== 0)
          t1._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "subscribe", "paths", toAdd]), null);
        if (J.get$isEmpty$asx(this.toRemove) !== true) {
          removeSids = [];
          J.forEach$1$ax(this.toRemove, new L.SubscribeRequest_startSendingData_closure(this, removeSids));
          t1._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "unsubscribe", "sids", removeSids]), null);
          J.clear$0$ax(this.toRemove);
        }
      }, "call$0", "get$startSendingData", 0, 0, 0, "startSendingData"],
      ackWaiting$1: [function(ackId) {
        this._requester$_waitingAck = true;
      }, "call$1", "get$ackWaiting", 2, 0, 14, 23, [], "ackWaiting"],
      ackReceived$1: [function(ackId) {
        this._requester$_waitingAck = false;
        if (this._requester$_sendAfterAck === true) {
          this._requester$_sendAfterAck = false;
          this.prepareSending$0();
        }
      }, "call$1", "get$ackReceived", 2, 0, 14, 23, [], "ackReceived"],
      prepareSending$0: [function() {
        if (this._requester$_pendingSend !== true) {
          this._requester$_pendingSend = true;
          this.requester.addProcessor$1(this);
        }
      }, "call$0", "get$prepareSending", 0, 0, 0, "prepareSending"],
      static: {SubscribeRequest$: [function(requester, rid) {
          var t1, t2;
          t1 = new L.SubscribeController(null);
          t2 = new L.SubscribeRequest(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.ReqSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.ReqSubscribeController), P.HashSet_HashSet(null, null, null, P.String), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.ReqSubscribeController), false, false, false, requester, rid, null, t1, false, "initialize");
          t1.request = t2;
          return t2;
        }, null, null, 4, 0, 282, 18, [], 38, [], "new SubscribeRequest"]}
    },
    "+SubscribeRequest": [44, 155],
    SubscribeRequest__close_closure: {
      "^": "Closure:101;_requester$_captured_this_0",
      call$2: [function(path, controller) {
        J.add$1$ax(this._requester$_captured_this_0._changedPaths, path);
      }, null, null, 4, 0, 101, 3, [], 47, [], "call"]
    },
    SubscribeRequest_startSendingData_closure: {
      "^": "Closure:102;_requester$_captured_this_0,_captured_removeSids_1",
      call$2: [function(sid, sub) {
        var t1;
        if (J.get$isEmpty$asx(sub.get$callbacks()) === true) {
          this._captured_removeSids_1.push(sid);
          t1 = this._requester$_captured_this_0;
          J.remove$1$ax(t1.subsriptions, sub.get$node().get$remotePath());
          J.remove$1$ax(t1.subsriptionids, sub.get$sid());
          sub._destroy$0();
        }
      }, null, null, 4, 0, 102, 50, [], 185, [], "call"]
    },
    ReqSubscribeController: {
      "^": "Object;node<-33,requester<-20,callbacks@-28,maxCache@-7,sid@-7,_lastUpdate@-26",
      listen$2: [function(callback, cacheLevel) {
        var t1, t2;
        if (J.$lt$n(cacheLevel, 1))
          cacheLevel = 1;
        if (J.$gt$n(cacheLevel, 1000000))
          cacheLevel = 1000000;
        t1 = J.getInterceptor$n(cacheLevel);
        if (t1.$gt(cacheLevel, this.maxCache)) {
          this.maxCache = cacheLevel;
          this.requester.get$_subsciption().addSubscription$2(this, this.maxCache);
        }
        if (J.containsKey$1$x(this.callbacks, callback) === true) {
          t1 = J.$eq$(J.$index$asx(this.callbacks, callback), this.maxCache) && t1.$lt(cacheLevel, this.maxCache);
          t2 = this.callbacks;
          if (t1) {
            J.$indexSet$ax(t2, callback, cacheLevel);
            this.updateCacheLevel$0();
          } else
            J.$indexSet$ax(t2, callback, cacheLevel);
        } else {
          J.$indexSet$ax(this.callbacks, callback, cacheLevel);
          t1 = this._lastUpdate;
          if (t1 != null)
            callback.call$1(t1);
        }
      }, "call$2", "get$listen", 4, 0, 385, 7, [], 35, [], "listen"],
      unlisten$1: [function(callback) {
        var cacheLevel;
        if (J.containsKey$1$x(this.callbacks, callback) === true) {
          cacheLevel = J.remove$1$ax(this.callbacks, callback);
          if (J.get$isEmpty$asx(this.callbacks) === true)
            this.requester.get$_subsciption().removeSubscription$1(this);
          else if (J.$eq$(cacheLevel, this.maxCache) && J.$gt$n(this.maxCache, 1))
            this.updateCacheLevel$0();
        }
      }, "call$1", "get$unlisten", 2, 0, 100, 7, [], "unlisten"],
      updateCacheLevel$0: [function() {
        var t1 = {};
        t1._captured_maxCacheLevel_0 = 1;
        J.forEach$1$ax(this.callbacks, new L.ReqSubscribeController_updateCacheLevel_closure(t1));
        if (!J.$eq$(t1._captured_maxCacheLevel_0, this.maxCache)) {
          this.maxCache = t1._captured_maxCacheLevel_0;
          this.requester.get$_subsciption().addSubscription$2(this, this.maxCache);
        }
      }, "call$0", "get$updateCacheLevel", 0, 0, 0, "updateCacheLevel"],
      addValue$1: [function(update) {
        var t1, t2, _i;
        this._lastUpdate = update;
        for (t1 = J.toList$0$ax(J.get$keys$x(this.callbacks)), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].call$1(this._lastUpdate);
      }, "call$1", "get$addValue", 2, 0, 103, 43, [], "addValue"],
      _destroy$0: [function() {
        J.clear$0$ax(this.callbacks);
        this.node.set$_subscribeController(null);
      }, "call$0", "get$_destroy", 0, 0, 0, "_destroy"],
      static: {ReqSubscribeController$: [function(node, requester) {
          var t1, t2;
          t1 = new L.ReqSubscribeController(node, requester, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), 0, null, null);
          t2 = requester.get$nextSid();
          requester.set$nextSid(J.$add$ns(t2, 1));
          t1.sid = t2;
          return t1;
        }, null, null, 4, 0, 119, 9, [], 18, [], "new ReqSubscribeController"]}
    },
    "+ReqSubscribeController": [3],
    ReqSubscribeController_updateCacheLevel_closure: {
      "^": "Closure:4;_requester$_box_0",
      call$2: [function(callback, level) {
        var t1 = this._requester$_box_0;
        if (J.$gt$n(level, t1._captured_maxCacheLevel_0))
          t1._captured_maxCacheLevel_0 = level;
      }, null, null, 4, 0, 4, 7, [], 94, [], "call"]
    },
    RequestUpdater: {
      "^": "Object;",
      static: {RequestUpdater$: [function() {
          return new L.RequestUpdater();
        }, null, null, 0, 0, 283, "new RequestUpdater"]}
    },
    "+RequestUpdater": [3],
    RequesterUpdate: {
      "^": "Object;streamStatus<-5",
      static: {RequesterUpdate$: [function(streamStatus) {
          return new L.RequesterUpdate(streamStatus);
        }, null, null, 2, 0, 16, 36, [], "new RequesterUpdate"]}
    },
    "+RequesterUpdate": [3],
    Requester: {
      "^": "ConnectionHandler;_requests@-393,nodeCache<-394,_subsciption@-153,nextRid@-7,nextSid@-7,lastSentId@-7,_connected@-6,_conn-59,_connListener-12,_beforeSendListener-12,_toSendList-61,_processors-42,_pendingSend-6",
      onData$1: [function(list) {
        var t1, resp, t2, t3;
        for (t1 = J.get$iterator$ax(list); t1.moveNext$0();) {
          resp = t1.get$current();
          t2 = J.getInterceptor(resp);
          if (!!t2.$isMap) {
            t3 = t2.$index(resp, "rid");
            if (typeof t3 === "number" && Math.floor(t3) === t3 && J.containsKey$1$x(this._requests, t2.$index(resp, "rid")) === true)
              J.$index$asx(this._requests, t2.$index(resp, "rid"))._update$1(resp);
          }
        }
      }, "call$1", "get$onData", 2, 0, 65, 57, [], "onData"],
      _onReceiveUpdate$1: [function(m) {
        var t1, t2;
        t1 = J.getInterceptor$asx(m);
        t2 = t1.$index(m, "rid");
        if (typeof t2 === "number" && Math.floor(t2) === t2 && J.containsKey$1$x(this._requests, t1.$index(m, "rid")) === true)
          J.$index$asx(this._requests, t1.$index(m, "rid"))._update$1(m);
      }, "call$1", "get$_onReceiveUpdate", 2, 0, 11, 4, [], "_onReceiveUpdate"],
      getSendingData$0: [function() {
        var rslt = this.super$ConnectionHandler$getSendingData();
        this.lastSentId = J.$sub$n(this.nextRid, 1);
        return rslt;
      }, "call$0", "get$getSendingData", 0, 0, 82, "getSendingData"],
      _sendRequest$2: [function(m, updater) {
        var t1, req;
        J.$indexSet$ax(m, "rid", this.nextRid);
        if (updater != null) {
          t1 = this.nextRid;
          req = new L.Request(this, t1, m, updater, false, "initialize");
          J.$indexSet$ax(this._requests, t1, req);
        } else
          req = null;
        this.addToSendList$1(m);
        this.nextRid = J.$add$ns(this.nextRid, 1);
        return req;
      }, "call$2", "get$_sendRequest", 4, 0, 388, 4, [], 85, [], "_sendRequest"],
      subscribe$3: [function(path, callback, cacheLevel) {
        this.nodeCache.getRemoteNode$1(path)._requester$_subscribe$3(this, callback, cacheLevel);
        return new L.ReqSubscribeListener(callback, this, path);
      }, function(path, callback) {
        return this.subscribe$3(path, callback, 1);
      }, "subscribe$2", "call$3", "call$2", "get$subscribe", 4, 2, 390, 44, 3, [], 7, [], 35, [], "subscribe"],
      unsubscribe$2: [function(path, callback) {
        this.nodeCache.getRemoteNode$1(path)._unsubscribe$2(this, callback);
      }, "call$2", "get$unsubscribe", 4, 0, 391, 3, [], 7, [], "unsubscribe"],
      list$1: [function(_, path) {
        return this.nodeCache.getRemoteNode$1(path)._list$1(this);
      }, "call$1", "get$list", 2, 0, 392, 3, [], "list"],
      invoke$3: [function(path, params, maxPermission) {
        return this.nodeCache.getRemoteNode$1(path)._requester$_invoke$3(params, this, maxPermission);
      }, function(path, params) {
        return this.invoke$3(path, params, 4);
      }, "invoke$2", "call$3", "call$2", "get$invoke", 4, 2, 399, 25, 3, [], 34, [], 24, [], "invoke"],
      $set$3: [function(path, value, maxPermission) {
        var t1, t2, reqMap;
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [L.RequesterUpdate];
        t1 = new P._AsyncCompleter(t1);
        t1.$builtinTypeInfo = [L.RequesterUpdate];
        t2 = new L.SetController(t1, this, path, value, null);
        reqMap = P.LinkedHashMap__makeLiteral(["method", "set", "path", path, "value", value]);
        if (!J.$eq$(maxPermission, 4))
          reqMap.$indexSet(0, "permit", C.List_cD9[maxPermission]);
        t2._request = this._sendRequest$2(reqMap, t2);
        return t1.future;
      }, function(path, value) {
        return this.$set$3(path, value, 4);
      }, "$set$2", "call$3", "call$2", "get$set", 4, 2, 400, 25, 3, [], 1, [], 24, [], "set"],
      remove$1: [function(_, path) {
        var t1, t2;
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [L.RequesterUpdate];
        t1 = new P._AsyncCompleter(t1);
        t1.$builtinTypeInfo = [L.RequesterUpdate];
        t2 = new L.RemoveController(t1, this, path, null);
        t2._request = this._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "remove", "path", path]), t2);
        return t1.future;
      }, "call$1", "get$remove", 2, 0, 402, 3, [], "remove"],
      closeRequest$1: [function(request) {
        if (J.containsKey$1$x(this._requests, request.get$rid()) === true) {
          if (!J.$eq$(request.get$streamStatus(), "closed"))
            this.addToSendList$1(P.LinkedHashMap__makeLiteral(["method", "close", "rid", request.get$rid()]));
          J.remove$1$ax(this._requests, request.get$rid());
          request._requester$_close$0();
        }
      }, "call$1", "get$closeRequest", 2, 0, 404, 186, [], "closeRequest"],
      onDisconnected$0: [function() {
        if (this._connected !== true)
          return;
        this._connected = false;
        var newRequests = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.Request);
        newRequests.$indexSet(0, 0, this._subsciption);
        J.forEach$1$ax(this._requests, new L.Requester_onDisconnected_closure(this, newRequests));
        this._requests = newRequests;
      }, "call$0", "get$onDisconnected", 0, 0, 0, "onDisconnected"],
      onReconnected$0: [function() {
        if (this._connected === true)
          return;
        this._connected = true;
        this.super$ConnectionHandler$onReconnected();
        J.forEach$1$ax(this._requests, new L.Requester_onReconnected_closure());
      }, "call$0", "get$onReconnected", 0, 0, 0, "onReconnected"],
      Requester$1: function(cache) {
        var t1, t2;
        t1 = new L.SubscribeController(null);
        t2 = new L.SubscribeRequest(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.ReqSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.ReqSubscribeController), P.HashSet_HashSet(null, null, null, P.String), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.ReqSubscribeController), false, false, false, this, 0, null, t1, false, "initialize");
        t1.request = t2;
        this._subsciption = t2;
        J.$indexSet$ax(this._requests, 0, t2);
      },
      static: {Requester$: [function(cache) {
          var t1, t2, t3;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.Request);
          t2 = cache != null ? cache : new L.RemoteNodeCache(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.RemoteNode));
          t3 = [];
          t3.$builtinTypeInfo = [P.Map];
          t1 = new L.Requester(t1, t2, null, 1, 1, 0, false, null, null, null, t3, [], false);
          t1.Requester$1(cache);
          return t1;
        }, null, null, 0, 2, 284, 0, 91, [], "new Requester"]}
    },
    "+Requester": [72],
    Requester_onDisconnected_closure: {
      "^": "Closure:4;_requester$_captured_this_0,_captured_newRequests_1",
      call$2: [function(n, req) {
        if (J.$le$n(req.get$rid(), this._requester$_captured_this_0.lastSentId) && !(req.get$updater() instanceof L.ListController))
          req._requester$_close$1($.$get$DSError_DISCONNECTED());
        else {
          this._captured_newRequests_1.$indexSet(0, req.get$rid(), req);
          J.onDisconnect$0$x(req.get$updater());
        }
      }, null, null, 4, 0, 4, 56, [], 96, [], "call"]
    },
    Requester_onReconnected_closure: {
      "^": "Closure:4;",
      call$2: [function(n, req) {
        req.get$updater().onReconnect$0();
        req.resend$0();
      }, null, null, 4, 0, 4, 56, [], 96, [], "call"]
    }
  }], ["dslink.responder", "package:dslink/responder.dart",, T, {
    "^": "",
    ConfigSetting: {
      "^": "Object;name>-5,type>-5,defaultValue>-3",
      setConfig$3: [function(value, node, responder) {
        var t1 = this.name;
        if (!J.$eq$(J.$index$asx(node.get$configs(), t1), value)) {
          J.$indexSet$ax(node.get$configs(), t1, value);
          node.updateList$1(t1);
        }
        return;
      }, "call$3", "get$setConfig", 6, 0, 405, 1, [], 9, [], 8, [], "setConfig"],
      removeConfig$2: [function(node, responder) {
        var t1 = this.name;
        if (J.containsKey$1$x(node.get$configs(), t1) === true) {
          J.remove$1$ax(node.get$configs(), t1);
          node.updateList$1(t1);
        }
        return;
      }, "call$2", "get$removeConfig", 4, 0, 406, 9, [], 8, [], "removeConfig"],
      static: {ConfigSetting$: [function($name, type, defaultValue) {
          return new T.ConfigSetting($name, type, defaultValue);
        }, null, null, 4, 3, 357, 0, 2, [], 51, [], 75, [], "new ConfigSetting"], ConfigSetting$fromMap: [function($name, m) {
          var t1, t2;
          t1 = J.getInterceptor$x(m);
          t2 = t1.containsKey$1(m, "type") === true ? t1.$index(m, "type") : "string";
          return new T.ConfigSetting($name, t2, t1.containsKey$1(m, "default") === true ? t1.$index(m, "default") : null);
        }, null, null, 4, 0, 77, 2, [], 4, [], "new ConfigSetting$fromMap"]}
    },
    "+ConfigSetting": [3],
    Configs: {
      "^": "Object;configs@-395",
      load$1: [function(_, inputs) {
        J.forEach$1$ax(inputs, new T.Configs_load_closure(this));
      }, "call$1", "get$load", 2, 0, 11, 192, [], "load"],
      static: {"^": "Configs__globalConfigs<-13,Configs_global<-396,Configs_defaultConfig<-397", Configs$: [function() {
          return new T.Configs(P.LinkedHashMap__makeEmpty());
        }, null, null, 0, 0, 286, "new Configs"], Configs_getConfig: [function($name, profile) {
          var t1 = $.$get$Configs_global();
          if (J.containsKey$1$x(t1.configs, $name) === true)
            return J.$index$asx(t1.configs, $name);
          if (profile instanceof T.DefinitionNode && J.containsKey$1$x(profile.configs, $name) === true)
            return J.$index$asx(profile.get$configs(), $name);
          return $.$get$Configs_defaultConfig();
        }, "call$2", "responder_Configs_getConfig$closure", 4, 0, 287, 2, [], 188, [], "getConfig"]}
    },
    "+Configs": [3],
    Configs_load_closure: {
      "^": "Closure:4;_responder$_captured_this_0",
      call$2: [function($name, m) {
        if (!!J.getInterceptor(m).$isMap)
          J.$indexSet$ax(this._responder$_captured_this_0.configs, $name, T.ConfigSetting$fromMap($name, m));
      }, null, null, 4, 0, 4, 2, [], 4, [], "call"]
    },
    DefinitionNode: {
      "^": "LocalNodeImpl;provider<-51,_invokeCallback@-398,_loaded-6,_listChangeController-38,_listReqListener-12,path-5,callbacks-28,_lastValueUpdate-26,profile-19,attributes-9,configs-9,children-18",
      setInvokeCallback$1: [function(callback) {
        this._invokeCallback = callback;
      }, "call$1", "get$setInvokeCallback", 2, 0, 415, 7, [], "setInvokeCallback"],
      invoke$5: [function(params, responder, response, parentNode, maxPermission) {
        var permission;
        if (this._invokeCallback == null) {
          J.close$1$x(response, $.$get$DSError_NOT_IMPLEMENTED());
          return response;
        }
        permission = responder.get$nodeProvider().get$permissions().getPermission$2(J.get$path$x(parentNode), responder);
        if (J.$lt$n(maxPermission, permission))
          permission = maxPermission;
        if (J.$le$n(O.Permission_parse(this.getConfig$1("$invokable"), 5), permission)) {
          this._invokeCallback$4(params, responder, response, parentNode);
          return response;
        } else {
          J.close$1$x(response, $.$get$DSError_PERMISSION_DENIED());
          return response;
        }
      }, function(params, responder, response, parentNode) {
        return this.invoke$5(params, responder, response, parentNode, 4);
      }, "invoke$4", "call$5", "call$4", "get$invoke", 8, 2, 104, 25, 34, [], 8, [], 5, [], 71, [], 24, [], "invoke"],
      _invokeCallback$4: function(arg0, arg1, arg2, arg3) {
        return this._invokeCallback.call$4(arg0, arg1, arg2, arg3);
      },
      static: {DefinitionNode$: [function(path, provider) {
          var t1, t2, t3, t4;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
          t2 = P.LinkedHashMap__makeEmpty();
          t3 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
          t4 = P.LinkedHashMap__makeEmpty();
          t3.$indexSet(0, "$is", "static");
          return new T.DefinitionNode(provider, null, false, null, null, path, t1, null, null, t2, t3, t4);
        }, null, null, 4, 0, 288, 3, [], 49, [], "new DefinitionNode"]}
    },
    "+DefinitionNode": [159],
    NodeProviderImpl: {
      "^": "NodeProvider;",
      static: {NodeProviderImpl$: [function() {
          return new T.NodeProviderImpl();
        }, null, null, 0, 0, 289, "new NodeProviderImpl"]}
    },
    "+NodeProviderImpl": [51],
    LocalNodeImpl: {
      "^": "LocalNode;_loaded@-6,_listChangeController-38,_listReqListener-12,path-5,callbacks-28,_lastValueUpdate-26,profile-19,attributes-9,configs-9,children-18",
      serialize$1: [function(withChildren) {
        var rslt = P.LinkedHashMap__makeEmpty();
        J.forEach$1$ax(this.configs, new T.LocalNodeImpl_serialize_closure(rslt));
        J.forEach$1$ax(this.attributes, new T.LocalNodeImpl_serialize_closure0(rslt));
        J.forEach$1$ax(this.children, new T.LocalNodeImpl_serialize_closure1(withChildren, rslt));
        return rslt;
      }, "call$1", "get$serialize", 2, 0, 418, 194, [], "serialize"],
      get$loaded: [function(_) {
        return this._loaded;
      }, null, null, 1, 0, 8, "loaded"],
      load$1: [function(_, m) {
        var t1, t2;
        t1 = {};
        if (this._loaded === true) {
          J.clear$0$ax(this.configs);
          J.clear$0$ax(this.attributes);
          J.clear$0$ax(this.children);
        }
        t1._captured_childPathPre_0 = null;
        t2 = this.path;
        if (J.$eq$(t2, "/"))
          t1._captured_childPathPre_0 = "/";
        else
          t1._captured_childPathPre_0 = H.S(t2) + "/";
        J.forEach$1$ax(m, new T.LocalNodeImpl_load_closure(t1, this));
        this._loaded = true;
      }, "call$1", "get$load", 2, 0, 11, 4, [], "load"],
      updateList$1: [function($name) {
        J.add$1$ax(this.get$listChangeController(), $name);
      }, "call$1", "get$updateList", 2, 0, 17, 2, [], "updateList"],
      setAttribute$4: ["super$LocalNodeImpl$setAttribute", function(_, $name, value, responder, response) {
        if (J.containsKey$1$x(this.attributes, $name) !== true || !J.$eq$(J.$index$asx(this.attributes, $name), value)) {
          J.$indexSet$ax(this.attributes, $name, value);
          J.add$1$ax(this.get$listChangeController(), $name);
        }
        J.close$0$x(response);
        return response;
      }, "call$4", "get$setAttribute", 8, 0, 39, 2, [], 1, [], 8, [], 5, [], "setAttribute"],
      removeAttribute$3: [function($name, responder, response) {
        if (J.containsKey$1$x(this.attributes, $name) === true) {
          J.remove$1$ax(this.attributes, $name);
          J.add$1$ax(this.get$listChangeController(), $name);
        }
        J.close$0$x(response);
        return response;
      }, "call$3", "get$removeAttribute", 6, 0, 49, 2, [], 8, [], 5, [], "removeAttribute"],
      setConfig$4: ["super$LocalNodeImpl$setConfig", function($name, value, responder, response) {
        J.close$1$x(response, T.Configs_getConfig($name, this.profile).setConfig$3(value, this, responder));
        return response;
      }, "call$4", "get$setConfig", 8, 0, 39, 2, [], 1, [], 8, [], 5, [], "setConfig"],
      removeConfig$3: [function($name, responder, response) {
        J.close$1$x(response, T.Configs_getConfig($name, this.profile).removeConfig$2(this, responder));
        return response;
      }, "call$3", "get$removeConfig", 6, 0, 49, 2, [], 8, [], 5, [], "removeConfig"],
      setValue$4: ["super$LocalNodeImpl$setValue", function(value, responder, response, maxPermission) {
        this.updateValue$1(value);
        J.close$0$x(response);
        return response;
      }, function(value, responder, response) {
        return this.setValue$4(value, responder, response, 4);
      }, "setValue$3", "call$4", "call$3", "get$setValue", 6, 2, 70, 25, 1, [], 8, [], 5, [], 24, [], "setValue"],
      static: {LocalNodeImpl$: [function(path) {
          return new T.LocalNodeImpl(false, null, null, path, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 2, 0, 16, 3, [], "new LocalNodeImpl"]}
    },
    "+LocalNodeImpl": [41],
    LocalNodeImpl_serialize_closure: {
      "^": "Closure:4;_responder$_captured_rslt_0",
      call$2: [function(key, val) {
        this._responder$_captured_rslt_0.$indexSet(0, key, val);
      }, null, null, 4, 0, 4, 11, [], 20, [], "call"]
    },
    LocalNodeImpl_serialize_closure0: {
      "^": "Closure:4;_captured_rslt_1",
      call$2: [function(key, val) {
        this._captured_rslt_1.$indexSet(0, key, val);
      }, null, null, 4, 0, 4, 11, [], 20, [], "call"]
    },
    LocalNodeImpl_serialize_closure1: {
      "^": "Closure:4;_captured_withChildren_2,_captured_rslt_3",
      call$2: [function(key, val) {
        if (this._captured_withChildren_2 === true)
          this._captured_rslt_3.$indexSet(0, key, val.serialize$1(true));
      }, null, null, 4, 0, 4, 11, [], 20, [], "call"]
    },
    LocalNodeImpl_load_closure: {
      "^": "Closure:25;_responder$_box_0,_captured_this_1",
      call$2: [function(key, value) {
        var t1, node, t2;
        t1 = J.getInterceptor$s(key);
        if (t1.startsWith$1(key, "$"))
          J.$indexSet$ax(this._captured_this_1.configs, key, value);
        else if (t1.startsWith$1(key, "@"))
          J.$indexSet$ax(this._captured_this_1.attributes, key, value);
        else if (!!J.getInterceptor(value).$isMap) {
          t1 = this._captured_this_1;
          node = t1.get$provider().getOrCreateNode$2(H.S(this._responder$_box_0._captured_childPathPre_0) + H.S(key), false);
          t2 = J.getInterceptor(node);
          if (!!t2.$isLocalNodeImpl)
            t2.load$1(node, value);
          J.$indexSet$ax(t1.children, key, node);
        }
      }, null, null, 4, 0, 25, 11, [], 1, [], "call"]
    },
    IPermissionManager: {
      "^": "Object;",
      static: {IPermissionManager$: [function() {
          return new T.IPermissionManager();
        }, null, null, 0, 0, 290, "new IPermissionManager"]}
    },
    "+IPermissionManager": [3],
    DummyPermissionManager: {
      "^": "Object;",
      getPermission$2: [function(path, resp) {
        return 4;
      }, "call$2", "get$getPermission", 4, 0, 170, 3, [], 70, [], "getPermission"],
      static: {DummyPermissionManager$: [function() {
          return new T.DummyPermissionManager();
        }, null, null, 0, 0, 291, "new DummyPermissionManager"]}
    },
    "+DummyPermissionManager": [3, 160],
    LocalNode: {
      "^": "Node0;_listChangeController@-38,_listReqListener@-12,path>-5,callbacks@-28,_lastValueUpdate@-26,profile-19,attributes-9,configs-9,children-18",
      get$listChangeController: [function() {
        var t1 = this._listChangeController;
        if (t1 == null) {
          t1 = Q.BroadcastStreamController$(this.get$onStartListListen(), this.get$onAllListCancel(), null, P.String);
          this._listChangeController = t1;
        }
        return t1;
      }, null, null, 1, 0, 171, "listChangeController"],
      get$listStream: [function() {
        return J.get$stream$x(this.get$listChangeController());
      }, null, null, 1, 0, 172, "listStream"],
      onStartListListen$0: [function() {
      }, "call$0", "get$onStartListListen", 0, 0, 0, "onStartListListen"],
      onAllListCancel$0: [function() {
      }, "call$0", "get$onAllListCancel", 0, 0, 0, "onAllListCancel"],
      subscribe$2: ["super$LocalNode$subscribe", function(callback, cachelevel) {
        J.$indexSet$ax(this.callbacks, callback, cachelevel);
        return new T.RespSubscribeListener(callback, this);
      }, function(callback) {
        return this.subscribe$2(callback, 1);
      }, "subscribe$1", "call$2", "call$1", "get$subscribe", 2, 2, 105, 44, 7, [], 65, [], "subscribe"],
      unsubscribe$1: [function(callback) {
        if (J.containsKey$1$x(this.callbacks, callback) === true)
          J.remove$1$ax(this.callbacks, callback);
      }, "call$1", "get$unsubscribe", 2, 0, 174, 7, [], "unsubscribe"],
      get$lastValueUpdate: [function() {
        var t1 = this._lastValueUpdate;
        if (t1 == null) {
          t1 = O.ValueUpdate$(null, 1, 0 / 0, null, 0 / 0, null, 0 / 0, null);
          this._lastValueUpdate = t1;
        }
        return t1;
      }, null, null, 1, 0, 175, "lastValueUpdate"],
      get$value: [function(_) {
        var t1 = this._lastValueUpdate;
        if (t1 != null)
          return J.get$value$x(t1);
        return;
      }, null, null, 1, 0, 1, "value"],
      updateValue$2$force: [function(update, force) {
        var t1;
        if (update instanceof O.ValueUpdate) {
          this._lastValueUpdate = update;
          J.forEach$1$ax(this.callbacks, new T.LocalNode_updateValue_closure(this));
        } else {
          t1 = this._lastValueUpdate;
          if (t1 == null || !J.$eq$(J.get$value$x(t1), update) || force === true) {
            this._lastValueUpdate = O.ValueUpdate$(update, 1, 0 / 0, null, 0 / 0, null, 0 / 0, null);
            J.forEach$1$ax(this.callbacks, new T.LocalNode_updateValue_closure0(this));
          }
        }
      }, function(update) {
        return this.updateValue$2$force(update, false);
      }, "updateValue$1", "call$2$force", "call$1", "get$updateValue", 2, 3, 176, 46, 43, [], 76, [], "updateValue"],
      get$exists: [function() {
        return true;
      }, null, null, 1, 0, 8, "exists"],
      get$listReady: [function() {
        return true;
      }, null, null, 1, 0, 8, "listReady"],
      get$disconnected: [function() {
        return;
      }, null, null, 1, 0, 15, "disconnected"],
      get$valueReady: [function() {
        return true;
      }, null, null, 1, 0, 8, "valueReady"],
      get$hasSubscriber: [function() {
        return J.get$isNotEmpty$asx(this.callbacks);
      }, null, null, 1, 0, 8, "hasSubscriber"],
      getInvokePermission$0: [function() {
        return O.Permission_parse(this.getConfig$1("$invokable"), 5);
      }, "call$0", "get$getInvokePermission", 0, 0, 24, "getInvokePermission"],
      getSetPermission$0: [function() {
        return O.Permission_parse(this.getConfig$1("$writable"), 5);
      }, "call$0", "get$getSetPermission", 0, 0, 24, "getSetPermission"],
      invoke$5: [function(params, responder, response, parentNode, maxPermission) {
        J.close$0$x(response);
        return response;
      }, function(params, responder, response, parentNode) {
        return this.invoke$5(params, responder, response, parentNode, 4);
      }, "invoke$4", "call$5", "call$4", "get$invoke", 8, 2, 177, 25, 34, [], 8, [], 5, [], 71, [], 24, [], "invoke"],
      setAttribute$4: [function(_, $name, value, responder, response) {
        if (response != null) {
          J.close$0$x(response);
          return response;
        } else {
          if (!J.startsWith$1$s($name, "@"))
            $name = "@" + H.S($name);
          J.$indexSet$ax(this.attributes, $name, value);
          return;
        }
      }, "call$4", "get$setAttribute", 8, 0, 39, 2, [], 1, [], 8, [], 5, [], "setAttribute"],
      removeAttribute$3: [function($name, responder, response) {
        if (response != null) {
          J.close$0$x(response);
          return response;
        } else {
          if (!J.startsWith$1$s($name, "@"))
            $name = "@" + H.S($name);
          J.remove$1$ax(this.attributes, $name);
          return;
        }
      }, "call$3", "get$removeAttribute", 6, 0, 49, 2, [], 8, [], 5, [], "removeAttribute"],
      setConfig$4: [function($name, value, responder, response) {
        if (response != null) {
          J.close$0$x(response);
          return response;
        } else {
          if (!J.startsWith$1$s($name, "$"))
            $name = "$" + H.S($name);
          J.$indexSet$ax(this.configs, $name, value);
          return;
        }
      }, "call$4", "get$setConfig", 8, 0, 39, 2, [], 1, [], 8, [], 5, [], "setConfig"],
      removeConfig$3: [function($name, responder, response) {
        if (response != null) {
          J.close$0$x(response);
          return response;
        } else {
          if (!J.startsWith$1$s($name, "$"))
            $name = "$" + H.S($name);
          J.remove$1$ax(this.configs, $name);
          return;
        }
      }, "call$3", "get$removeConfig", 6, 0, 49, 2, [], 8, [], 5, [], "removeConfig"],
      setValue$4: [function(value, responder, response, maxPermission) {
        J.close$0$x(response);
        return response;
      }, function(value, responder, response) {
        return this.setValue$4(value, responder, response, 4);
      }, "setValue$3", "call$4", "call$3", "get$setValue", 6, 2, 70, 25, 1, [], 8, [], 5, [], 24, [], "setValue"],
      $index: [function(_, $name) {
        return this.$get$1($name);
      }, null, "get$[]", 2, 0, 16, 2, [], "[]"],
      $indexSet: [function(_, $name, value) {
        var t1 = J.getInterceptor$s($name);
        if (t1.startsWith$1($name, "$"))
          J.$indexSet$ax(this.configs, $name, value);
        else if (t1.startsWith$1($name, "@"))
          J.$indexSet$ax(this.attributes, $name, value);
        else if (value instanceof O.Node0)
          this.addChild$2($name, value);
      }, null, "get$[]=", 4, 0, 30, 2, [], 1, [], "[]="],
      static: {LocalNode$: [function(path) {
          return new T.LocalNode(null, null, path, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 2, 0, 16, 3, [], "new LocalNode"]}
    },
    "+LocalNode": [19],
    LocalNode_updateValue_closure: {
      "^": "Closure:4;_responder$_captured_this_0",
      call$2: [function(callback, cachelevel) {
        callback.call$1(this._responder$_captured_this_0._lastValueUpdate);
      }, null, null, 4, 0, 4, 7, [], 65, [], "call"]
    },
    LocalNode_updateValue_closure0: {
      "^": "Closure:4;_captured_this_1",
      call$2: [function(callback, cachelevel) {
        callback.call$1(this._captured_this_1._lastValueUpdate);
      }, null, null, 4, 0, 4, 7, [], 65, [], "call"]
    },
    NodeProvider: {
      "^": "Object;",
      $index: [function(_, path) {
        return this.getNode$1(path);
      }, null, "get$[]", 2, 0, 58, 3, [], "[]"],
      $not: [function(_) {
        return this.getOrCreateNode$2("/", false);
      }, null, "get$~", 0, 0, 156, "~"],
      static: {NodeProvider$: [function() {
          return new T.NodeProvider();
        }, null, null, 0, 0, 292, "new NodeProvider"]}
    },
    "+NodeProvider": [3],
    Responder: {
      "^": "ConnectionHandler;reqId@-5,groups@-36,_responses<-403,_responder$_subscription@-161,nodeProvider<-51,_conn-59,_connListener-12,_beforeSendListener-12,_toSendList-61,_processors-42,_pendingSend-6",
      updateGroups$1: [function(vals) {
        var t1;
        if (J.$lt$n(J.get$length$asx(this.reqId), 43) && J.contains$1$asx(vals, this.reqId) !== true) {
          t1 = [this.reqId];
          C.JSArray_methods.addAll$1(t1, vals);
          this.groups = t1;
        }
      }, "call$1", "get$updateGroups", 2, 0, 178, 197, [], "updateGroups"],
      addResponse$1: [function(response) {
        if (!J.$eq$(response.get$_sentStreamStatus(), "closed"))
          J.$indexSet$ax(this._responses, response.get$rid(), response);
        return response;
      }, "call$1", "get$addResponse", 2, 0, 179, 5, [], "addResponse"],
      onData$1: [function(list) {
        var t1, resp;
        for (t1 = J.get$iterator$ax(list); t1.moveNext$0();) {
          resp = t1.get$current();
          if (!!J.getInterceptor(resp).$isMap)
            this._onReceiveRequest$1(resp);
        }
      }, "call$1", "get$onData", 2, 0, 65, 57, [], "onData"],
      _onReceiveRequest$1: [function(m) {
        var t1, t2;
        t1 = J.getInterceptor$asx(m);
        t2 = t1.$index(m, "method");
        if (typeof t2 === "string") {
          t2 = t1.$index(m, "rid");
          t2 = typeof t2 === "number" && Math.floor(t2) === t2;
        } else
          t2 = false;
        if (t2) {
          if (J.containsKey$1$x(this._responses, t1.$index(m, "rid")) === true) {
            if (J.$eq$(t1.$index(m, "method"), "close"))
              this.close$1(0, m);
            return;
          }
          switch (t1.$index(m, "method")) {
            case "list":
              this.list$1(0, m);
              return;
            case "subscribe":
              this.subscribe$1(m);
              return;
            case "unsubscribe":
              this.unsubscribe$1(m);
              return;
            case "invoke":
              this.invoke$1(m);
              return;
            case "set":
              this.$set$1(m);
              return;
            case "remove":
              this.remove$1(0, m);
              return;
          }
        }
        t2 = t1.$index(m, "rid");
        if (typeof t2 === "number" && Math.floor(t2) === t2 && !J.$eq$(t1.$index(m, "method"), "close"))
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_METHOD());
      }, "call$1", "get$_onReceiveRequest", 2, 0, 11, 4, [], "_onReceiveRequest"],
      _closeResponse$3$error$response: [function(rid, error, response) {
        var m;
        if (response != null) {
          if (!J.$eq$(J.$index$asx(this._responses, response.get$rid()), response))
            return;
          response.set$_sentStreamStatus("closed");
          rid = response.get$rid();
        }
        m = P.LinkedHashMap__makeLiteral(["rid", rid, "stream", "closed"]);
        if (error != null)
          m.$indexSet(0, "error", error.serialize$0());
        this.addToSendList$1(m);
      }, function(rid) {
        return this._closeResponse$3$error$response(rid, null, null);
      }, "_closeResponse$1", function(rid, error) {
        return this._closeResponse$3$error$response(rid, error, null);
      }, "_closeResponse$2$error", "call$3$error$response", "call$1", "call$2$error", "get$_closeResponse", 2, 5, 180, 0, 0, 38, [], 5, [], 6, [], "_closeResponse"],
      updateResponse$5$columns$meta$streamStatus: [function(response, updates, columns, meta, streamStatus) {
        var t1, t2, m;
        t1 = this._responses;
        t2 = J.getInterceptor$asx(t1);
        if (J.$eq$(t2.$index(t1, response.get$rid()), response)) {
          m = P.LinkedHashMap__makeLiteral(["rid", response.get$rid()]);
          if (streamStatus != null && !J.$eq$(streamStatus, response.get$_sentStreamStatus())) {
            response.set$_sentStreamStatus(streamStatus);
            m.$indexSet(0, "stream", streamStatus);
          }
          if (columns != null)
            m.$indexSet(0, "columns", columns);
          if (updates != null)
            m.$indexSet(0, "updates", updates);
          if (meta != null)
            m.$indexSet(0, "meta", meta);
          this.addToSendList$1(m);
          if (J.$eq$(response.get$_sentStreamStatus(), "closed"))
            t2.remove$1(t1, response.get$rid());
        }
      }, function(response, updates) {
        return this.updateResponse$5$columns$meta$streamStatus(response, updates, null, null, null);
      }, "updateResponse$2", function(response, updates, streamStatus) {
        return this.updateResponse$5$columns$meta$streamStatus(response, updates, null, null, streamStatus);
      }, "updateResponse$3$streamStatus", "call$5$columns$meta$streamStatus", "call$2", "call$3$streamStatus", "get$updateResponse", 4, 7, 181, 0, 0, 0, 5, [], 31, [], 36, [], 21, [], 22, [], "updateResponse"],
      list$1: [function(_, m) {
        var t1, path, t2, rid, node;
        t1 = J.getInterceptor$asx(m);
        path = O.Path_getValidNodePath(t1.$index(m, "path"), null);
        if (path != null)
          t2 = J.$eq$(path.name, "/") || J.startsWith$1$s(path.parentPath, "/");
        else
          t2 = false;
        if (t2) {
          rid = t1.$index(m, "rid");
          t1 = this.nodeProvider;
          node = t1.getOrCreateNode$2(path.path, false);
          t2 = new T.ListResponse(node, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), true, false, false, false, this, rid, "initialize", false);
          t2._permission = t1.get$permissions().getPermission$2(J.get$path$x(node), this);
          t2._nodeChangeListener = node.get$listStream().listen$1(t2.get$changed());
          if (node.get$listReady())
            t2.prepareSending$0();
          else
            node.get$disconnected();
          this.addResponse$1(t2);
        } else
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_PATH());
      }, "call$1", "get$list", 2, 0, 11, 4, [], "list"],
      subscribe$1: [function(m) {
        var t1, t2, t3, p, t4, t5, pathstr, sid, cacheLevel, path, node;
        t1 = J.getInterceptor$asx(m);
        if (!!J.getInterceptor(t1.$index(m, "paths")).$isList) {
          t1.$index(m, "rid");
          for (t2 = J.get$iterator$ax(t1.$index(m, "paths")), t3 = this.nodeProvider; t2.moveNext$0();) {
            p = t2.get$current();
            t4 = J.getInterceptor(p);
            if (!!t4.$isMap) {
              t5 = t4.$index(p, "path");
              if (typeof t5 === "string")
                pathstr = t4.$index(p, "path");
              else
                continue;
              t5 = t4.$index(p, "sid");
              if (typeof t5 === "number" && Math.floor(t5) === t5)
                sid = t4.$index(p, "sid");
              else
                continue;
              t5 = t4.$index(p, "cache");
              cacheLevel = typeof t5 === "number" && Math.floor(t5) === t5 ? t4.$index(p, "cache") : 1;
            } else {
              pathstr = null;
              cacheLevel = 1;
              sid = -1;
            }
            path = O.Path_getValidNodePath(pathstr, null);
            node = t3.getOrCreateNode$2(path.path, false);
            if (path != null)
              t4 = J.$eq$(path.name, "/") || J.startsWith$1$s(path.parentPath, "/");
            else
              t4 = false;
            if (t4)
              J.add$4$ax(this._responder$_subscription, path.path, node, sid, cacheLevel);
          }
          this._closeResponse$1(t1.$index(m, "rid"));
        } else
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_PATHS());
      }, "call$1", "get$subscribe", 2, 0, 11, 4, [], "subscribe"],
      unsubscribe$1: [function(m) {
        var t1, t2, sid;
        t1 = J.getInterceptor$asx(m);
        if (!!J.getInterceptor(t1.$index(m, "sids")).$isList) {
          t1.$index(m, "rid");
          for (t2 = J.get$iterator$ax(t1.$index(m, "sids")); t2.moveNext$0();) {
            sid = t2.get$current();
            if (typeof sid === "number" && Math.floor(sid) === sid)
              J.remove$1$ax(this._responder$_subscription, sid);
          }
          this._closeResponse$1(t1.$index(m, "rid"));
        } else
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_PATHS());
      }, "call$1", "get$unsubscribe", 2, 0, 11, 4, [], "unsubscribe"],
      invoke$1: [function(m) {
        var t1, path, t2, rid, parentNode, node, permission, maxPermit;
        t1 = J.getInterceptor$asx(m);
        path = O.Path_getValidNodePath(t1.$index(m, "path"), null);
        if (path != null)
          t2 = J.$eq$(path.name, "/") || J.startsWith$1$s(path.parentPath, "/");
        else
          t2 = false;
        if (t2) {
          rid = t1.$index(m, "rid");
          t2 = this.nodeProvider;
          parentNode = t2.getOrCreateNode$2(path.parentPath, false);
          node = parentNode.getChild$1(path.name);
          if (node == null) {
            this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_PERMISSION_DENIED());
            return;
          }
          permission = t2.get$permissions().getPermission$2(path.path, this);
          maxPermit = O.Permission_parse(t1.$index(m, "permit"), 5);
          if (J.$lt$n(maxPermit, permission))
            permission = maxPermit;
          if (J.$le$n(node.getInvokePermission$0(), permission))
            node.invoke$5(t1.$index(m, "params"), this, this.addResponse$1(new T.InvokeResponse(node, 0, null, null, "initialize", null, null, false, null, null, -1, this, rid, "initialize", false)), parentNode, permission);
          else
            this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_PERMISSION_DENIED());
        } else
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_PATH());
      }, "call$1", "get$invoke", 2, 0, 11, 4, [], "invoke"],
      $set$1: [function(m) {
        var t1, path, t2, value, rid, node, permission, maxPermit, t3;
        t1 = J.getInterceptor$asx(m);
        path = O.Path_getValidPath(t1.$index(m, "path"), null);
        if (path != null)
          t2 = !(J.$eq$(path.name, "/") || J.startsWith$1$s(path.parentPath, "/"));
        else
          t2 = true;
        if (t2) {
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_PATH());
          return;
        }
        if (t1.containsKey$1(m, "value") !== true) {
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_VALUE());
          return;
        }
        value = t1.$index(m, "value");
        rid = t1.$index(m, "rid");
        if (path.get$isNode()) {
          t2 = this.nodeProvider;
          node = t2.getOrCreateNode$2(path.path, false);
          permission = t2.get$permissions().getPermission$2(J.get$path$x(node), this);
          maxPermit = O.Permission_parse(t1.$index(m, "permit"), 5);
          if (J.$lt$n(maxPermit, permission))
            permission = maxPermit;
          if (J.$le$n(node.getSetPermission$0(), permission))
            node.setValue$3(value, this, this.addResponse$1(new T.Response(this, rid, "initialize", false)));
          else
            this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_PERMISSION_DENIED());
        } else if (J.startsWith$1$s(path.name, "$")) {
          t2 = this.nodeProvider;
          node = t2.getOrCreateNode$2(path.parentPath, false);
          if (t2.get$permissions().getPermission$2(J.get$path$x(node), this) < 4)
            this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_PERMISSION_DENIED());
          else
            node.setConfig$4(path.name, value, this, this.addResponse$1(new T.Response(this, rid, "initialize", false)));
        } else if (J.startsWith$1$s(path.name, "@")) {
          t2 = this.nodeProvider;
          node = t2.getOrCreateNode$2(path.parentPath, false);
          t3 = J.getInterceptor$x(node);
          if (t2.get$permissions().getPermission$2(t3.get$path(node), this) < 3)
            this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_PERMISSION_DENIED());
          else
            t3.setAttribute$4(node, path.name, value, this, this.addResponse$1(new T.Response(this, rid, "initialize", false)));
        } else
          throw H.wrapException("unexpected case");
      }, "call$1", "get$set", 2, 0, 11, 4, [], "set"],
      remove$1: [function(_, m) {
        var t1, path, rid, t2, node;
        t1 = J.getInterceptor$asx(m);
        path = O.Path_getValidPath(t1.$index(m, "path"), null);
        if (path == null || J.$eq$(path.name, "/") || J.startsWith$1$s(path.parentPath, "/")) {
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_PATH());
          return;
        }
        rid = t1.$index(m, "rid");
        if (path.get$isNode())
          this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_INVALID_METHOD());
        else if (J.startsWith$1$s(path.name, "$")) {
          t2 = this.nodeProvider;
          node = t2.getOrCreateNode$2(path.parentPath, false);
          if (t2.get$permissions().getPermission$2(J.get$path$x(node), this) < 4)
            this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_PERMISSION_DENIED());
          else
            node.removeConfig$3(path.name, this, this.addResponse$1(new T.Response(this, rid, "initialize", false)));
        } else if (J.startsWith$1$s(path.name, "@")) {
          t2 = this.nodeProvider;
          node = t2.getOrCreateNode$2(path.parentPath, false);
          if (t2.get$permissions().getPermission$2(J.get$path$x(node), this) < 3)
            this._closeResponse$2$error(t1.$index(m, "rid"), $.$get$DSError_PERMISSION_DENIED());
          else
            node.removeAttribute$3(path.name, this, this.addResponse$1(new T.Response(this, rid, "initialize", false)));
        } else
          throw H.wrapException("unexpected case");
      }, "call$1", "get$remove", 2, 0, 11, 4, [], "remove"],
      close$1: [function(_, m) {
        var t1, t2, rid;
        t1 = J.getInterceptor$asx(m);
        t2 = t1.$index(m, "rid");
        if (typeof t2 === "number" && Math.floor(t2) === t2) {
          rid = t1.$index(m, "rid");
          t1 = this._responses;
          t2 = J.getInterceptor$x(t1);
          if (t2.containsKey$1(t1, rid) === true) {
            t2.$index(t1, rid)._responder$_close$0();
            t2.remove$1(t1, rid);
          }
        }
      }, "call$1", "get$close", 2, 0, 11, 4, [], "close"],
      onDisconnected$0: [function() {
        var t1, t2;
        t1 = this._responses;
        t2 = J.getInterceptor$ax(t1);
        t2.forEach$1(t1, new T.Responder_onDisconnected_closure());
        t2.clear$0(t1);
        t2.$indexSet(t1, 0, this._responder$_subscription);
      }, "call$0", "get$onDisconnected", 0, 0, 0, "onDisconnected"],
      onReconnected$0: [function() {
        this.super$ConnectionHandler$onReconnected();
      }, "call$0", "get$onReconnected", 0, 0, 0, "onReconnected"],
      Responder$2: function(nodeProvider, reqId) {
        var t1 = new T.SubscribeResponse(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.RespSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.RespSubscribeController), P.LinkedHashSet_LinkedHashSet(null, null, null, T.RespSubscribeController), false, false, this, 0, "initialize", false);
        this._responder$_subscription = t1;
        J.$indexSet$ax(this._responses, 0, t1);
        t1 = this.reqId;
        if (t1 != null && J.$lt$n(J.get$length$asx(t1), 43))
          this.groups = [this.reqId];
      },
      static: {Responder$: [function(nodeProvider, reqId) {
          var t1, t2;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.Response);
          t2 = [];
          t2.$builtinTypeInfo = [P.Map];
          t1 = new T.Responder(reqId, [], t1, null, nodeProvider, null, null, null, t2, [], false);
          t1.Responder$2(nodeProvider, reqId);
          return t1;
        }, null, null, 2, 2, 293, 0, 63, [], 189, [], "new Responder"]}
    },
    "+Responder": [72],
    Responder_onDisconnected_closure: {
      "^": "Closure:4;",
      call$2: [function(id, resp) {
        resp._responder$_close$0();
      }, null, null, 4, 0, 4, 198, [], 70, [], "call"]
    },
    Response: {
      "^": "Object;responder<-37,rid<-7,_sentStreamStatus@-5,_pendingSending@-6",
      close$1: [function(_, err) {
        this._sentStreamStatus = "closed";
        this.responder._closeResponse$3$error$response(this.rid, err, this);
      }, function($receiver) {
        return this.close$1($receiver, null);
      }, "close$0", "call$1", "call$0", "get$close", 0, 2, 50, 0, 100, [], "close"],
      _responder$_close$0: [function() {
      }, "call$0", "get$_responder$_close", 0, 0, 0, "_responder$_close"],
      prepareSending$0: [function() {
        if (this._pendingSending !== true) {
          this._pendingSending = true;
          this.responder.addProcessor$1(this);
        }
      }, "call$0", "get$prepareSending", 0, 0, 0, "prepareSending"],
      startSendingData$0: [function() {
        this._pendingSending = false;
      }, "call$0", "get$startSendingData", 0, 0, 0, "startSendingData"],
      ackWaiting$1: [function(ackId) {
      }, "call$1", "get$ackWaiting", 2, 0, 14, 23, [], "ackWaiting"],
      ackReceived$1: [function(ackId) {
      }, "call$1", "get$ackReceived", 2, 0, 14, 23, [], "ackReceived"],
      static: {Response$: [function(responder, rid) {
          return new T.Response(responder, rid, "initialize", false);
        }, null, null, 4, 0, 120, 8, [], 38, [], "new Response"]}
    },
    "+Response": [3, 155],
    InvokeResponse: {
      "^": "Response;node<-41,_pendingInitializeLength@-7,_columns@-23,_updates@-23,_sendingStreamStatus@-5,_meta@-13,_err@-21,_closed@-6,onClose*-162,onAck@-163,_waitingAckId@-7,responder-37,rid-7,_sentStreamStatus-5,_pendingSending-6",
      updateStream$4$columns$meta$streamStatus: [function(updates, columns, meta, streamStatus) {
        var t1;
        if (columns != null)
          this._columns = columns;
        this._meta = meta;
        t1 = this._updates;
        if (t1 == null)
          this._updates = updates;
        else
          J.addAll$1$ax(t1, updates);
        if (J.$eq$(this._sendingStreamStatus, "initialize"))
          this._pendingInitializeLength = J.$add$ns(this._pendingInitializeLength, J.get$length$asx(updates));
        this._sendingStreamStatus = streamStatus;
        this.prepareSending$0();
      }, function(updates) {
        return this.updateStream$4$columns$meta$streamStatus(updates, null, null, "open");
      }, "updateStream$1", function(updates, streamStatus) {
        return this.updateStream$4$columns$meta$streamStatus(updates, null, null, streamStatus);
      }, "updateStream$2$streamStatus", function(updates, columns, streamStatus) {
        return this.updateStream$4$columns$meta$streamStatus(updates, columns, null, streamStatus);
      }, "updateStream$3$columns$streamStatus", "call$4$columns$meta$streamStatus", "call$1", "call$2$streamStatus", "call$3$columns$streamStatus", "get$updateStream", 2, 7, 182, 0, 200, 0, 31, [], 21, [], 36, [], 22, [], "updateStream"],
      startSendingData$0: [function() {
        var t1, t2, t3;
        this._pendingSending = false;
        t1 = this._err;
        if (t1 != null) {
          this.responder._closeResponse$3$error$response(this.rid, t1, this);
          if (J.$eq$(this._sentStreamStatus, "closed"))
            this._responder$_close$0();
          return;
        }
        t1 = this._columns;
        if (t1 != null) {
          t1 = O.TableColumn_serializeColumns(t1);
          this._columns = t1;
        }
        t2 = this._updates;
        t3 = this._sendingStreamStatus;
        this.responder.updateResponse$5$columns$meta$streamStatus(this, t2, t1, this._meta, t3);
        this._columns = null;
        this._updates = null;
        if (J.$eq$(this._sentStreamStatus, "closed"))
          this._responder$_close$0();
      }, "call$0", "get$startSendingData", 0, 0, 0, "startSendingData", 12],
      close$1: [function(_, err) {
        if (err != null)
          this._err = err;
        this._sendingStreamStatus = "closed";
        this.prepareSending$0();
      }, function($receiver) {
        return this.close$1($receiver, null);
      }, "close$0", "call$1", "call$0", "get$close", 0, 2, 50, 0, 100, [], "close"],
      _responder$_close$0: [function() {
        this._closed = true;
        if (this.onClose != null)
          this.onClose$1(0, this);
      }, "call$0", "get$_responder$_close", 0, 0, 0, "_responder$_close"],
      ackWaiting$1: [function(ackId) {
        this._waitingAckId = ackId;
      }, "call$1", "get$ackWaiting", 2, 0, 14, 23, [], "ackWaiting"],
      ackReceived$1: [function(ackId) {
        if (this.onAck != null && this._closed !== true)
          this.onAck$3(this, this._waitingAckId, ackId);
      }, "call$1", "get$ackReceived", 2, 0, 14, 23, [], "ackReceived"],
      onClose$1: function($receiver, arg0) {
        return this.onClose.call$1(arg0);
      },
      onAck$3: function(arg0, arg1, arg2) {
        return this.onAck.call$3(arg0, arg1, arg2);
      },
      static: {InvokeResponse$: [function(responder, rid, node) {
          return new T.InvokeResponse(node, 0, null, null, "initialize", null, null, false, null, null, -1, responder, rid, "initialize", false);
        }, null, null, 6, 0, 121, 8, [], 38, [], 9, [], "new InvokeResponse"]}
    },
    "+InvokeResponse": [80],
    ListResponse: {
      "^": "Response;node<-41,_nodeChangeListener@-12,_permission@-7,changes@-151,initialResponse@-6,_disconnectSent@-6,_waitingAck@-6,_sendAfterAck@-6,responder-37,rid-7,_sentStreamStatus-5,_pendingSending-6",
      changed$1: [function(key) {
        var t1, t2;
        if (J.$eq$(this._permission, 0))
          return;
        if (J.$lt$n(this._permission, 4) && J.startsWith$1$s(key, "$$"))
          return;
        t1 = J.get$isEmpty$asx(this.changes);
        t2 = this.changes;
        if (t1 === true) {
          J.add$1$ax(t2, key);
          this.prepareSending$0();
        } else
          J.add$1$ax(t2, key);
      }, "call$1", "get$changed", 2, 0, 17, 11, [], "changed"],
      startSendingData$0: [function() {
        var t1, updateConfigs, updateAttributes, updateChildren, t2, t3, t4, change, t5, update, updates;
        t1 = {};
        this._pendingSending = false;
        t1._captured_updateIs_0 = null;
        t1._captured_updateBase_1 = null;
        updateConfigs = [];
        updateAttributes = [];
        updateChildren = [];
        t2 = this.node;
        t2.get$disconnected();
        if (this._disconnectSent === true && J.contains$1$asx(this.changes, "$disconnectedTs") !== true) {
          this._disconnectSent = false;
          updateConfigs.push(P.LinkedHashMap__makeLiteral(["name", "$disconnectedTs", "change", "remove"]));
          if (J.containsKey$1$x(t2.get$configs(), "$disconnectedTs") === true)
            J.remove$1$ax(t2.get$configs(), "$disconnectedTs");
        }
        if (this.initialResponse === true || J.contains$1$asx(this.changes, "$is") === true) {
          this.initialResponse = false;
          J.forEach$1$ax(t2.get$configs(), new T.ListResponse_startSendingData_closure(t1, this, updateConfigs));
          t3 = J.getInterceptor$x(t2);
          J.forEach$1$ax(t3.get$attributes(t2), new T.ListResponse_startSendingData_closure0(updateAttributes));
          J.forEach$1$ax(t3.get$children(t2), new T.ListResponse_startSendingData_closure1(updateChildren));
          if (t1._captured_updateIs_0 == null)
            t1._captured_updateIs_0 = ["$is", "node"];
        } else
          for (t3 = J.get$iterator$ax(this.changes), t4 = J.getInterceptor$x(t2); t3.moveNext$0();) {
            change = t3.get$current();
            t5 = J.getInterceptor$s(change);
            if (t5.startsWith$1(change, "$")) {
              update = J.containsKey$1$x(t2.get$configs(), change) === true ? [change, J.$index$asx(t2.get$configs(), change)] : P.LinkedHashMap__makeLiteral(["name", change, "change", "remove"]);
              if (J.$eq$(this._permission, 4) || !t5.startsWith$1(change, "$$"))
                updateConfigs.push(update);
            } else if (t5.startsWith$1(change, "@"))
              updateAttributes.push(J.containsKey$1$x(t4.get$attributes(t2), change) === true ? [change, J.$index$asx(t4.get$attributes(t2), change)] : P.LinkedHashMap__makeLiteral(["name", change, "change", "remove"]));
            else
              updateChildren.push(J.containsKey$1$x(t4.get$children(t2), change) === true ? [change, J.$index$asx(t4.get$children(t2), change).getSimpleMap$0()] : P.LinkedHashMap__makeLiteral(["name", change, "change", "remove"]));
          }
        J.clear$0$ax(this.changes);
        updates = [];
        t2 = t1._captured_updateBase_1;
        if (t2 != null)
          updates.push(t2);
        t1 = t1._captured_updateIs_0;
        if (t1 != null)
          updates.push(t1);
        C.JSArray_methods.addAll$1(updates, updateConfigs);
        C.JSArray_methods.addAll$1(updates, updateAttributes);
        C.JSArray_methods.addAll$1(updates, updateChildren);
        this.responder.updateResponse$3$streamStatus(this, updates, "open");
      }, "call$0", "get$startSendingData", 0, 0, 0, "startSendingData", 12],
      ackWaiting$1: [function(ackId) {
        this._waitingAck = true;
      }, "call$1", "get$ackWaiting", 2, 0, 14, 23, [], "ackWaiting"],
      ackReceived$1: [function(ackId) {
        this._waitingAck = false;
        if (this._sendAfterAck === true) {
          this._sendAfterAck = false;
          this.prepareSending$0();
        }
      }, "call$1", "get$ackReceived", 2, 0, 14, 23, [], "ackReceived"],
      _responder$_close$0: [function() {
        this._nodeChangeListener.cancel$0();
      }, "call$0", "get$_responder$_close", 0, 0, 0, "_responder$_close"],
      static: {ListResponse$: [function(responder, rid, node) {
          var t1 = new T.ListResponse(node, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), true, false, false, false, responder, rid, "initialize", false);
          t1._permission = responder.get$nodeProvider().get$permissions().getPermission$2(J.get$path$x(node), responder);
          t1._nodeChangeListener = node.get$listStream().listen$1(t1.get$changed());
          if (node.get$listReady())
            t1.prepareSending$0();
          else
            node.get$disconnected();
          return t1;
        }, null, null, 6, 0, 121, 8, [], 38, [], 9, [], "new ListResponse"]}
    },
    "+ListResponse": [80],
    ListResponse_startSendingData_closure: {
      "^": "Closure:4;_responder$_box_0,_captured_this_1,_captured_updateConfigs_2",
      call$2: [function($name, value) {
        var update, t1;
        update = [$name, value];
        t1 = J.getInterceptor($name);
        if (t1.$eq($name, "$is"))
          this._responder$_box_0._captured_updateIs_0 = update;
        else if (t1.$eq($name, "$base"))
          this._responder$_box_0._captured_updateBase_1 = update;
        else if (J.$eq$(this._captured_this_1._permission, 4) || !t1.startsWith$1($name, "$$"))
          this._captured_updateConfigs_2.push(update);
      }, null, null, 4, 0, 4, 2, [], 1, [], "call"]
    },
    ListResponse_startSendingData_closure0: {
      "^": "Closure:4;_captured_updateAttributes_3",
      call$2: [function($name, value) {
        this._captured_updateAttributes_3.push([$name, value]);
      }, null, null, 4, 0, 4, 2, [], 1, [], "call"]
    },
    ListResponse_startSendingData_closure1: {
      "^": "Closure:106;_captured_updateChildren_4",
      call$2: [function($name, value) {
        this._captured_updateChildren_4.push([$name, value.getSimpleMap$0()]);
      }, null, null, 4, 0, 106, 2, [], 1, [], "call"]
    },
    RespSubscribeListener: {
      "^": "Object;callback@-48,node@-41",
      cancel$0: [function() {
        var t1 = this.callback;
        if (t1 != null) {
          this.node.unsubscribe$1(t1);
          this.callback = null;
        }
      }, "call$0", "get$cancel", 0, 0, 0, "cancel"],
      callback$0: function() {
        return this.callback.call$0();
      },
      static: {RespSubscribeListener$: [function(node, callback) {
          return new T.RespSubscribeListener(callback, node);
        }, null, null, 4, 0, 296, 9, [], 7, [], "new RespSubscribeListener"]}
    },
    "+RespSubscribeListener": [3],
    SubscribeResponse: {
      "^": "Response;subsriptions<-408,subsriptionids<-409,changed<-410,_waitingAck@-6,_sendAfterAck@-6,responder-37,rid-7,_sentStreamStatus-5,_pendingSending-6",
      add$4: [function(_, path, node, sid, cacheLevel) {
        var t1, t2, controller, t3;
        t1 = this.subsriptions;
        t2 = J.getInterceptor$asx(t1);
        if (t2.$index(t1, path) != null) {
          controller = t2.$index(t1, path);
          if (!J.$eq$(controller.get$sid(), sid)) {
            t1 = this.subsriptionids;
            t2 = J.getInterceptor$ax(t1);
            t2.remove$1(t1, controller.get$sid());
            J.$eq$(controller.get$sid(), sid);
            t2.$indexSet(t1, sid, controller);
          }
          controller.set$cacheLevel(cacheLevel);
        } else {
          t3 = this.responder;
          controller = new T.RespSubscribeController(node, this, null, sid, t3.get$nodeProvider().get$permissions().getPermission$2(J.get$path$x(node), t3) >= 2, P.ListQueue$(null, O.ValueUpdate), null);
          controller.set$cacheLevel(cacheLevel);
          controller._listener = node.subscribe$2(controller.get$addValue(), controller._cachedLevel);
          if (node.get$valueReady() && node.get$lastValueUpdate() != null)
            controller.addValue$1(node.get$lastValueUpdate());
          t2.$indexSet(t1, path, controller);
          J.$indexSet$ax(this.subsriptionids, sid, controller);
        }
      }, "call$4", "get$add", 8, 0, 184, 3, [], 9, [], 50, [], 35, [], "add"],
      remove$1: [function(_, sid) {
        var t1, t2, controller;
        t1 = this.subsriptionids;
        t2 = J.getInterceptor$asx(t1);
        if (t2.$index(t1, sid) != null) {
          controller = t2.$index(t1, sid);
          t2.$index(t1, sid).destroy$0();
          t2.remove$1(t1, sid);
          J.remove$1$ax(this.subsriptions, J.get$path$x(controller.get$node()));
        }
      }, "call$1", "get$remove", 2, 0, 14, 50, [], "remove"],
      subscriptionChanged$1: [function(controller) {
        J.add$1$ax(this.changed, controller);
        this.prepareSending$0();
      }, "call$1", "get$subscriptionChanged", 2, 0, 185, 47, [], "subscriptionChanged"],
      startSendingData$0: [function() {
        var updates, t1, t2, t3;
        this._pendingSending = false;
        updates = [];
        for (t1 = this.changed, t2 = J.getInterceptor$ax(t1), t3 = t2.get$iterator(t1); t3.moveNext$0();)
          C.JSArray_methods.addAll$1(updates, t3.get$current().process$0());
        this.responder.updateResponse$2(this, updates);
        t2.clear$0(t1);
      }, "call$0", "get$startSendingData", 0, 0, 0, "startSendingData", 12],
      ackWaiting$1: [function(ackId) {
        this._waitingAck = true;
      }, "call$1", "get$ackWaiting", 2, 0, 14, 23, [], "ackWaiting"],
      ackReceived$1: [function(ackId) {
        this._waitingAck = false;
        if (this._sendAfterAck === true) {
          this._sendAfterAck = false;
          this.prepareSending$0();
        }
      }, "call$1", "get$ackReceived", 2, 0, 14, 23, [], "ackReceived"],
      _responder$_close$0: [function() {
        var t1, t2;
        t1 = this.subsriptions;
        t2 = J.getInterceptor$ax(t1);
        t2.forEach$1(t1, new T.SubscribeResponse__close_closure());
        t2.clear$0(t1);
      }, "call$0", "get$_responder$_close", 0, 0, 0, "_responder$_close"],
      changed$1: function(arg0) {
        return this.changed.call$1(arg0);
      },
      static: {SubscribeResponse$: [function(responder, rid) {
          return new T.SubscribeResponse(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.RespSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.RespSubscribeController), P.LinkedHashSet_LinkedHashSet(null, null, null, T.RespSubscribeController), false, false, responder, rid, "initialize", false);
        }, null, null, 4, 0, 120, 8, [], 38, [], "new SubscribeResponse"]}
    },
    "+SubscribeResponse": [80],
    SubscribeResponse__close_closure: {
      "^": "Closure:4;",
      call$2: [function(path, controller) {
        controller.destroy$0();
      }, null, null, 4, 0, 4, 3, [], 47, [], "call"]
    },
    RespSubscribeController: {
      "^": "Object;node<-41,response>-161,_listener@-411,sid@-7,_permitted@-6,lastValues@-412,_cachedLevel@-7",
      set$permitted: [function(val) {
        if (J.$eq$(val, this._permitted))
          return;
        this._permitted = val;
        if (val === true && J.$gt$n(J.get$length$asx(this.lastValues), 0))
          this.response.subscriptionChanged$1(this);
      }, null, null, 3, 0, 88, 20, [], "permitted"],
      get$cacheLevel: [function() {
        return this._cachedLevel;
      }, null, null, 1, 0, 24, "cacheLevel"],
      set$cacheLevel: [function(v) {
        this._cachedLevel = J.$lt$n(v, 1) ? 1 : v;
      }, null, null, 3, 0, 14, 28, [], "cacheLevel"],
      addValue$1: [function(val) {
        J.add$1$ax(this.lastValues, val);
        if (J.$gt$n(J.get$length$asx(this.lastValues), this._cachedLevel))
          this.mergeValues$0();
        if (this._permitted === true)
          this.response.subscriptionChanged$1(this);
      }, "call$1", "get$addValue", 2, 0, 103, 20, [], "addValue"],
      mergeValues$0: [function() {
        var toRemove, rslt, i, t1, rslt0, t2, t3, t4;
        toRemove = J.$sub$n(J.get$length$asx(this.lastValues), this._cachedLevel);
        rslt = this.lastValues.removeFirst$0();
        for (i = 0; i < toRemove; ++i, rslt = rslt0) {
          t1 = this.lastValues.removeFirst$0();
          rslt0 = new O.ValueUpdate(null, null, null, null, 0, null, null);
          t2 = J.getInterceptor$x(t1);
          rslt0.value = t2.get$value(t1);
          rslt0.ts = t1.get$ts();
          rslt0.status = t2.get$status(t1);
          rslt0.count = J.$add$ns(rslt.get$count(), t1.get$count());
          if (!J.get$isNaN$n(rslt.get$sum())) {
            t3 = 0 + rslt.get$sum();
            rslt0.sum = t3;
          } else
            t3 = 0;
          if (!J.get$isNaN$n(t1.get$sum()))
            rslt0.sum = t3 + t1.get$sum();
          t3 = J.getInterceptor$x(rslt);
          t4 = t3.get$min(rslt);
          rslt0.min = t4;
          if (J.get$isNaN$n(t4) || J.$lt$n(t2.get$min(t1), t4))
            rslt0.min = t2.get$min(t1);
          t3 = t3.get$min(rslt);
          rslt0.max = t3;
          if (J.get$isNaN$n(t3) || J.$gt$n(t2.get$max(t1), t3))
            rslt0.max = t2.get$max(t1);
        }
        this.lastValues.addFirst$1(rslt);
      }, "call$0", "get$mergeValues", 0, 0, 0, "mergeValues"],
      process$0: [function() {
        var rslts, t1, lastValue, t2, t3, m;
        rslts = [];
        for (t1 = J.get$iterator$ax(this.lastValues); t1.moveNext$0();) {
          lastValue = t1.get$current();
          t2 = J.$gt$n(lastValue.get$count(), 1) || J.get$status$x(lastValue) != null;
          t3 = J.getInterceptor$x(lastValue);
          if (t2) {
            m = P.LinkedHashMap__makeLiteral(["ts", lastValue.get$ts(), "value", t3.get$value(lastValue), "sid", this.sid]);
            if (J.$eq$(lastValue.get$count(), 0))
              ;
            else if (J.$gt$n(lastValue.get$count(), 1)) {
              m.$indexSet(0, "count", lastValue.get$count());
              if (J.get$isFinite$n(lastValue.get$sum()))
                m.$indexSet(0, "sum", lastValue.get$sum());
              if (J.get$isFinite$n(t3.get$max(lastValue)))
                m.$indexSet(0, "max", t3.get$max(lastValue));
              if (J.get$isFinite$n(t3.get$min(lastValue)))
                m.$indexSet(0, "min", t3.get$min(lastValue));
            }
            rslts.push(m);
          } else
            rslts.push([this.sid, t3.get$value(lastValue), lastValue.get$ts()]);
        }
        J.clear$0$ax(this.lastValues);
        return rslts;
      }, "call$0", "get$process", 0, 0, 186, "process"],
      destroy$0: [function() {
        this._listener.cancel$0();
      }, "call$0", "get$destroy", 0, 0, 0, "destroy"],
      static: {RespSubscribeController$: [function(response, node, sid, _permitted, cacheLevel) {
          var t1 = new T.RespSubscribeController(node, response, null, sid, _permitted, P.ListQueue$(null, O.ValueUpdate), null);
          t1.set$cacheLevel(cacheLevel);
          t1._listener = node.subscribe$2(t1.get$addValue(), t1._cachedLevel);
          if (node.get$valueReady() && node.get$lastValueUpdate() != null)
            t1.addValue$1(node.get$lastValueUpdate());
          return t1;
        }, null, null, 10, 0, 297, 5, [], 9, [], 50, [], 190, [], 35, [], "new RespSubscribeController"]}
    },
    "+RespSubscribeController": [3],
    SimpleTableResult: {
      "^": "Object;columns@-23,rows*-23",
      static: {SimpleTableResult$: [function(rows, columns) {
          return new T.SimpleTableResult(columns, rows);
        }, null, null, 0, 4, 298, 0, 0, 74, [], 21, [], "new SimpleTableResult"]}
    },
    "+SimpleTableResult": [3],
    AsyncTableResult: {
      "^": "Object;response*-413,columns@-23,rows*-23,status*-5,meta@-13,onClose*-162,onAck@-163",
      update$3: [function(rows, stat, meta) {
        var t1 = this.rows;
        if (t1 == null)
          this.rows = rows;
        else
          J.addAll$1$ax(t1, rows);
        this.meta = meta;
        if (stat != null)
          this.status = stat;
        this.write$0();
      }, function(rows) {
        return this.update$3(rows, null, null);
      }, "update$1", function(rows, stat) {
        return this.update$3(rows, stat, null);
      }, "update$2", "call$3", "call$1", "call$2", "get$update", 2, 4, 187, 0, 0, 74, [], 201, [], 22, [], "update"],
      write$1: [function(resp) {
        var t1, t2, t3, t4;
        if (resp != null)
          if (this.response == null)
            this.response = resp;
          else
            Q.logger().warning$1("can not use same AsyncTableResult twice");
        if (this.response != null)
          t1 = this.rows != null || J.$eq$(this.status, "closed");
        else
          t1 = false;
        if (t1) {
          t1 = this.response;
          t2 = this.rows;
          t3 = this.columns;
          t4 = this.status;
          t1.updateStream$4$columns$meta$streamStatus(t2, t3, this.meta, t4);
          this.rows = null;
          this.columns = null;
        }
      }, function() {
        return this.write$1(null);
      }, "write$0", "call$1", "call$0", "get$write", 0, 2, 188, 0, 70, [], "write"],
      close$0: [function(_) {
        var t1 = this.response;
        if (t1 != null)
          J.close$0$x(t1);
        else
          this.status = "closed";
      }, "call$0", "get$close", 0, 0, 0, "close"],
      onClose$1: function($receiver, arg0) {
        return this.onClose.call$1(arg0);
      },
      onAck$3: function(arg0, arg1, arg2) {
        return this.onAck.call$3(arg0, arg1, arg2);
      },
      static: {AsyncTableResult$: [function(columns) {
          return new T.AsyncTableResult(null, columns, null, "initialize", null, null, null);
        }, null, null, 0, 2, 299, 0, 21, [], "new AsyncTableResult"]}
    },
    "+AsyncTableResult": [3],
    SerializableNodeProvider: {
      "^": "Object;",
      static: {SerializableNodeProvider$: [function() {
          return new T.SerializableNodeProvider();
        }, null, null, 0, 0, 300, "new SerializableNodeProvider"]}
    },
    "+SerializableNodeProvider": [3],
    MutableNodeProvider: {
      "^": "Object;",
      static: {MutableNodeProvider$: [function() {
          return new T.MutableNodeProvider();
        }, null, null, 0, 0, 301, "new MutableNodeProvider"]}
    },
    "+MutableNodeProvider": [3],
    SimpleNodeProvider: {
      "^": "NodeProviderImpl;nodes>-414,root@-81,defs@-165,sys@-165,_profileFactories@-417,permissions@-160",
      getNode$1: [function(path) {
        var t1, t2;
        t1 = this.nodes;
        t2 = J.getInterceptor$x(t1);
        if (t2.containsKey$1(t1, path) === true)
          return t2.$index(t1, path);
        return;
      }, "call$1", "get$getNode", 2, 0, 58, 3, [], "getNode", 12],
      getOrCreateNode$2: [function(path, addToTree) {
        var t1, t2, p, t3, t4, t5, t6, node, pnode;
        t1 = this.nodes;
        t2 = J.getInterceptor$x(t1);
        if (t2.containsKey$1(t1, path) === true)
          return t2.$index(t1, path);
        if (addToTree === true) {
          p = new O.Path(path, null, null, true);
          p._parse$0();
          if (t2.containsKey$1(t1, path) === true)
            H.throwExpression(P.Exception_Exception("Node at " + H.S(path) + " already exists."));
          t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
          t4 = P.LinkedHashMap__makeEmpty();
          t5 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
          t6 = P.LinkedHashMap__makeEmpty();
          node = new T.SimpleNode(this, false, true, false, null, null, path, t3, null, null, t4, t5, t6);
          t2.$indexSet(t1, path, node);
          pnode = !J.$eq$(p.parentPath, "") ? this.getNode$1(p.parentPath) : null;
          if (pnode != null) {
            J.$indexSet$ax(J.get$children$x(pnode), p.name, node);
            pnode.onChildAdded$2(p.name, node);
            pnode.updateList$1(p.name);
          }
          return node;
        } else {
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
          t2 = P.LinkedHashMap__makeEmpty();
          t3 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
          t4 = P.LinkedHashMap__makeEmpty();
          return new T.SimpleNode(this, false, true, false, null, null, path, t1, null, null, t2, t3, t4);
        }
      }, function(path) {
        return this.getOrCreateNode$2(path, true);
      }, "getOrCreateNode$1", "call$2", "call$1", "get$getOrCreateNode", 2, 2, 189, 30, 3, [], 202, [], "getOrCreateNode"],
      createNode$1: [function(path) {
        var p, t1, t2, t3, t4, t5, t6, node, pnode;
        p = new O.Path(path, null, null, true);
        p._parse$0();
        t1 = this.nodes;
        t2 = J.getInterceptor$x(t1);
        if (t2.containsKey$1(t1, path) === true)
          throw H.wrapException(P.Exception_Exception("Node at " + H.S(path) + " already exists."));
        t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
        t4 = P.LinkedHashMap__makeEmpty();
        t5 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
        t6 = P.LinkedHashMap__makeEmpty();
        node = new T.SimpleNode(this, false, true, false, null, null, path, t3, null, null, t4, t5, t6);
        t2.$indexSet(t1, path, node);
        pnode = !J.$eq$(p.parentPath, "") ? this.getNode$1(p.parentPath) : null;
        if (pnode != null) {
          J.$indexSet$ax(J.get$children$x(pnode), p.name, node);
          pnode.onChildAdded$2(p.name, node);
          pnode.updateList$1(p.name);
        }
        return node;
      }, "call$1", "get$createNode", 2, 0, 107, 3, [], "createNode"],
      init$2: [function(m, profiles) {
        if (profiles != null)
          this._registerProfiles$1(profiles);
        if (m != null)
          J.load$1$x(this.root, m);
      }, function() {
        return this.init$2(null, null);
      }, "init$0", function(m) {
        return this.init$2(m, null);
      }, "init$1", "call$2", "call$0", "call$1", "get$init", 0, 4, 191, 0, 0, 4, [], 73, [], "init", 12],
      save$0: [function() {
        return this.root.save$0();
      }, "call$0", "get$save", 0, 0, 29, "save", 12],
      updateValue$2: [function(path, value) {
        this.getNode$1(path).updateValue$1(value);
      }, "call$2", "get$updateValue", 4, 0, 86, 3, [], 1, [], "updateValue", 12],
      setNode$2: [function(path, node) {
        var t1, p, pnode;
        t1 = J.getInterceptor(path);
        if (t1.$eq(path, "/") || !t1.startsWith$1(path, "/"))
          return;
        p = new O.Path(path, null, null, true);
        p._parse$0();
        pnode = this.getNode$1(p.parentPath);
        J.$indexSet$ax(this.nodes, path, node);
        node.onCreated$0();
        J.$indexSet$ax(J.get$children$x(pnode), p.name, node);
        pnode.onChildAdded$2(p.name, node);
        pnode.updateList$1(p.name);
      }, "call$2", "get$setNode", 4, 0, 192, 3, [], 9, [], "setNode"],
      addNode$2: [function(path, m) {
        var t1, p, pnode, profile, node;
        t1 = J.getInterceptor(path);
        if (t1.$eq(path, "/") || !t1.startsWith$1(path, "/"))
          return;
        p = new O.Path(path, null, null, true);
        p._parse$0();
        pnode = this.getNode$1(p.parentPath);
        t1 = pnode != null;
        if (t1)
          pnode.onLoadChild$3(p.name, m, this);
        profile = J.$index$asx(m, "$is");
        node = J.containsKey$1$x(this._profileFactories, profile) === true ? J.$index$asx(this._profileFactories, profile).call$1(path) : this.getOrCreateNode$1(path);
        J.$indexSet$ax(this.nodes, path, node);
        J.load$1$x(node, m);
        node.onCreated$0();
        if (t1) {
          J.$indexSet$ax(J.get$children$x(pnode), p.name, node);
          pnode.onChildAdded$2(p.name, node);
          pnode.updateList$1(p.name);
        }
        return node;
      }, "call$2", "get$addNode", 4, 0, 193, 3, [], 4, [], "addNode", 12],
      removeNode$1: [function(path) {
        var t1, node, p, pnode;
        t1 = J.getInterceptor(path);
        if (t1.$eq(path, "/") || !t1.startsWith$1(path, "/"))
          return;
        node = this.getNode$1(path);
        if (node == null)
          return;
        node.onRemoving$0();
        node.set$removed(true);
        p = new O.Path(path, null, null, true);
        p._parse$0();
        pnode = this.getNode$1(p.parentPath);
        if (pnode != null) {
          J.remove$1$ax(J.get$children$x(pnode), p.name);
          pnode.onChildRemoved$2(p.name, node);
          pnode.updateList$1(p.name);
        }
      }, "call$1", "get$removeNode", 2, 0, 17, 3, [], "removeNode", 12],
      _registerProfiles$1: [function(m) {
        J.forEach$1$ax(m, new T.SimpleNodeProvider__registerProfiles_closure(this));
      }, "call$1", "get$_registerProfiles", 2, 0, 11, 4, [], "_registerProfiles"],
      createResponder$1: [function(dsId) {
        return T.Responder$(this, dsId);
      }, "call$1", "get$createResponder", 2, 0, 194, 82, [], "createResponder"],
      SimpleNodeProvider$2: function(m, profiles) {
        var t1, t2, t3, t4, t5, t6;
        if ($.SimpleNodeProvider_instance == null)
          $.SimpleNodeProvider_instance = this;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
        t2 = P.LinkedHashMap__makeEmpty();
        t3 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
        t4 = P.LinkedHashMap__makeEmpty();
        t1 = new T.SimpleNode(this, false, true, false, null, null, "/", t1, null, null, t2, t3, t4);
        this.root = t1;
        t2 = this.nodes;
        t3 = J.getInterceptor$ax(t2);
        t3.$indexSet(t2, "/", t1);
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
        t4 = P.LinkedHashMap__makeEmpty();
        t5 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
        t6 = P.LinkedHashMap__makeEmpty();
        t1 = new T.SimpleHiddenNode(this, false, true, false, null, null, "/defs", t1, null, null, t4, t5, t6);
        t5.$indexSet(0, "$hidden", true);
        this.defs = t1;
        t3.$indexSet(t2, t1.path, this.defs);
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
        t5 = P.LinkedHashMap__makeEmpty();
        t4 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
        t6 = P.LinkedHashMap__makeEmpty();
        t1 = new T.SimpleHiddenNode(this, false, true, false, null, null, "/sys", t1, null, null, t5, t4, t6);
        t4.$indexSet(0, "$hidden", true);
        this.sys = t1;
        t3.$indexSet(t2, t1.path, this.sys);
        this.init$2(m, profiles);
      },
      $isMutableNodeProvider: 1,
      $isSerializableNodeProvider: 1,
      static: {"^": "SimpleNodeProvider_instance@-53", SimpleNodeProvider$: [function(m, profiles) {
          var t1 = new T.SimpleNodeProvider(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.LocalNode), null, null, null, P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, {func: 1, ret: T.SimpleNode, args: [P.String]}), new T.DummyPermissionManager());
          t1.SimpleNodeProvider$2(m, profiles);
          return t1;
        }, null, null, 0, 4, 302, 0, 0, 4, [], 73, [], "new SimpleNodeProvider"]}
    },
    "+SimpleNodeProvider": [419, 420, 421],
    SimpleNodeProvider__registerProfiles_closure: {
      "^": "Closure:4;_responder$_captured_this_0",
      call$2: [function(key, val) {
        var t1;
        if (typeof key === "string") {
          t1 = H.buildFunctionType(H.buildInterfaceType(T.SimpleNode), [H.buildInterfaceType(P.String)])._isTest$1(val);
          t1 = t1;
        } else
          t1 = false;
        if (t1)
          J.$indexSet$ax(this._responder$_captured_this_0._profileFactories, key, val);
      }, null, null, 4, 0, 4, 11, [], 20, [], "call"]
    },
    SimpleNode: {
      "^": "LocalNodeImpl;provider<-53,removed@-6,serializable@-6,_loaded-6,_listChangeController-38,_listReqListener-12,path-5,callbacks-28,_lastValueUpdate-26,profile-19,attributes-9,configs-9,children-18",
      load$1: [function(_, m) {
        var t1, t2;
        t1 = {};
        if (this._loaded === true) {
          J.clear$0$ax(this.configs);
          J.clear$0$ax(this.attributes);
          J.clear$0$ax(this.children);
        }
        t1._captured_childPathPre_0 = null;
        t2 = this.path;
        if (J.$eq$(t2, "/"))
          t1._captured_childPathPre_0 = "/";
        else
          t1._captured_childPathPre_0 = H.S(t2) + "/";
        J.forEach$1$ax(m, new T.SimpleNode_load_closure(t1, this));
        this._loaded = true;
      }, "call$1", "get$load", 2, 0, 11, 4, [], "load"],
      save$0: [function() {
        var rslt, t1;
        rslt = P.LinkedHashMap__makeEmpty();
        J.forEach$1$ax(this.configs, new T.SimpleNode_save_closure(rslt));
        J.forEach$1$ax(this.attributes, new T.SimpleNode_save_closure0(rslt));
        t1 = this._lastValueUpdate;
        if (t1 != null && J.get$value$x(t1) != null)
          rslt.$indexSet(0, "?value", J.get$value$x(this._lastValueUpdate));
        J.forEach$1$ax(this.children, new T.SimpleNode_save_closure1(rslt));
        return rslt;
      }, "call$0", "get$save", 0, 0, 29, "save"],
      invoke$5: [function(params, responder, response, parentNode, maxPermission) {
        var t1, e, stack, error, rslt, t2, exception, rtype, t3, r, list, onError, result;
        t1 = {};
        t1._captured_rslt_1 = null;
        try {
          rslt = this.onInvoke$1(params);
          t1._captured_rslt_1 = rslt;
          t2 = rslt;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          stack = H.getTraceFromException(exception);
          error = new O.DSError("invokeException", null, J.toString$0$(e), null, "response");
          try {
            J.set$detail$x(error, J.toString$0$(stack));
          } catch (exception) {
            H.unwrapException(exception);
          }
          J.close$1$x(response, error);
          return response;
        }
        rtype = J.containsKey$1$x(this.configs, "$result") === true ? J.$index$asx(this.configs, "$result") : "values";
        if (t2 == null) {
          t3 = J.getInterceptor(rtype);
          if (t3.$eq(rtype, "values")) {
            rslt = P.LinkedHashMap__makeEmpty();
            t1._captured_rslt_1 = rslt;
            t2 = rslt;
          } else if (t3.$eq(rtype, "table"))
            rtype = [];
          else if (t3.$eq(rtype, "stream"))
            rtype = [];
        }
        t3 = J.getInterceptor(t2);
        if (!!t3.$isIterable)
          response.updateStream$2$streamStatus(t3.toList$0(t2), "closed");
        else if (!!t3.$isMap)
          response.updateStream$2$streamStatus([t2], "closed");
        else if (!!t3.$isSimpleTableResult)
          response.updateStream$3$columns$streamStatus(t3.get$rows(t2), t2.get$columns(), "closed");
        else if (!!t3.$isAsyncTableResult) {
          H.interceptedTypeCast(t2, "$isAsyncTableResult").write$1(response);
          J.set$onClose$x(response, new T.SimpleNode_invoke_closure(t1));
          response.set$onAck(new T.SimpleNode_invoke_closure0(t1));
          return response;
        } else if (!!t3.$isTable)
          response.updateStream$3$columns$streamStatus(t3.get$rows(t2), t2.get$columns(), "closed");
        else if (!!t3.$isStream) {
          r = new T.AsyncTableResult(null, null, null, "initialize", null, null, null);
          J.set$onClose$x(response, new T.SimpleNode_invoke_closure1(r));
          if (J.$eq$(rtype, "stream")) {
            t1._captured_sub_2 = null;
            r.onClose = new T.SimpleNode_invoke_closure2(t1);
            t1._captured_sub_2 = t2.listen$4$cancelOnError$onDone$onError(new T.SimpleNode_invoke_closure3(r), true, new T.SimpleNode_invoke_closure4(r), new T.SimpleNode_invoke_closure5(response));
            r.write$1(response);
            return response;
          } else {
            list = [];
            t1._captured_sub_3 = null;
            r.onClose = new T.SimpleNode_invoke_closure6(t1);
            t1._captured_sub_3 = t2.listen$4$cancelOnError$onDone$onError(new T.SimpleNode_invoke_closure7(r, list), true, new T.SimpleNode_invoke_closure8(r, list), new T.SimpleNode_invoke_closure9(response));
          }
          r.write$1(response);
          return response;
        } else if (!!t3.$isFuture) {
          r = new T.AsyncTableResult(null, null, null, "initialize", null, null, null);
          J.set$onClose$x(response, new T.SimpleNode_invoke_closure10(r));
          t1 = t2.then$1(new T.SimpleNode_invoke_closure11(response, r));
          onError = new T.SimpleNode_invoke_closure12(response);
          t2 = $.Zone__current;
          result = new P._Future(0, t2, null);
          result.$builtinTypeInfo = [null];
          if (t2 !== C.C__RootZone)
            onError = P._registerErrorHandler(onError, t2);
          t1._addListener$1(new P._FutureListener(null, result, 2, null, onError));
          r.write$1(response);
          return response;
        } else
          J.close$0$x(response);
        return response;
      }, function(params, responder, response, parentNode) {
        return this.invoke$5(params, responder, response, parentNode, 4);
      }, "invoke$4", "call$5", "call$4", "get$invoke", 8, 2, 104, 25, 34, [], 8, [], 5, [], 71, [], 24, [], "invoke"],
      onInvoke$1: [function(params) {
        return;
      }, "call$1", "get$onInvoke", 2, 0, 55, 34, [], "onInvoke"],
      get$parent: [function(_) {
        var t1 = new O.Path(this.path, null, null, true);
        t1._parse$0();
        return this.provider.getNode$1(t1.parentPath);
      }, null, null, 1, 0, 196, "parent"],
      onSetValue$1: [function(val) {
        return false;
      }, "call$1", "get$onSetValue", 2, 0, 197, 20, [], "onSetValue"],
      onSetConfig$2: [function($name, value) {
        return false;
      }, "call$2", "get$onSetConfig", 4, 0, 46, 2, [], 1, [], "onSetConfig"],
      onSetAttribute$2: [function($name, value) {
        return false;
      }, "call$2", "get$onSetAttribute", 4, 0, 46, 2, [], 1, [], "onSetAttribute"],
      onSubscribe$0: [function() {
      }, "call$0", "get$onSubscribe", 0, 0, 0, "onSubscribe"],
      onCreated$0: [function() {
      }, "call$0", "get$onCreated", 0, 0, 0, "onCreated"],
      onRemoving$0: [function() {
      }, "call$0", "get$onRemoving", 0, 0, 0, "onRemoving"],
      onChildRemoved$2: [function($name, node) {
      }, "call$2", "get$onChildRemoved", 4, 0, 35, 2, [], 9, [], "onChildRemoved"],
      onChildAdded$2: [function($name, node) {
      }, "call$2", "get$onChildAdded", 4, 0, 35, 2, [], 9, [], "onChildAdded"],
      subscribe$2: [function(callback, cacheLevel) {
        this.onSubscribe$0();
        return this.super$LocalNode$subscribe(callback, cacheLevel);
      }, function(callback) {
        return this.subscribe$2(callback, 1);
      }, "subscribe$1", "call$2", "call$1", "get$subscribe", 2, 2, 105, 44, 7, [], 35, [], "subscribe", 12],
      onLoadChild$3: [function($name, data, provider) {
        return;
      }, "call$3", "get$onLoadChild", 6, 0, 167, 2, [], 37, [], 49, [], "onLoadChild"],
      createChild$2: [function($name, m) {
        var t1, t2, tp;
        t1 = new O.Path(this.path, null, null, true);
        t1._parse$0();
        t2 = J.endsWith$1$s(t1.path, "/");
        t1 = t1.path;
        if (t2) {
          t2 = J.getInterceptor$asx(t1);
          t1 = t2.substring$2(t1, 0, J.$sub$n(t2.get$length(t1), 1));
        }
        t1 = J.$add$ns(t1, "/");
        t2 = J.getInterceptor$s($name);
        t1 = new O.Path(J.$add$ns(t1, t2.startsWith$1($name, "/") ? t2.substring$1($name, 1) : $name), null, null, true);
        t1._parse$0();
        tp = t1.path;
        t1 = m == null ? P.LinkedHashMap__makeEmpty() : m;
        return this.provider.addNode$2(tp, t1);
      }, function($name) {
        return this.createChild$2($name, null);
      }, "createChild$1", "call$2", "call$1", "get$createChild", 2, 2, 199, 0, 2, [], 4, [], "createChild"],
      get$name: [function(_) {
        var t1 = new O.Path(this.path, null, null, true);
        t1._parse$0();
        return t1.name;
      }, null, null, 1, 0, 15, "name"],
      get$displayName: [function() {
        return J.$index$asx(this.configs, "$name");
      }, null, null, 1, 0, 15, "displayName"],
      set$displayName: [function(value) {
        var t1 = this.configs;
        if (value == null)
          J.remove$1$ax(t1, "$name");
        else
          J.$indexSet$ax(t1, "$name", value);
        J.add$1$ax(this.get$listChangeController(), "$name");
      }, null, null, 3, 0, 16, 1, [], "displayName"],
      get$type: [function(_) {
        return J.$index$asx(this.configs, "$type");
      }, null, null, 1, 0, 15, "type"],
      set$type: [function(_, value) {
        var t1 = this.configs;
        if (value == null)
          J.remove$1$ax(t1, "$type");
        else
          J.$indexSet$ax(t1, "$type", value);
        J.add$1$ax(this.get$listChangeController(), "$type");
      }, null, null, 3, 0, 16, 1, [], "type"],
      get$writable: [function() {
        return J.$index$asx(this.configs, "$writable");
      }, null, null, 1, 0, 15, "writable"],
      set$writable: [function(value) {
        var t1 = this.configs;
        if (value == null)
          J.remove$1$ax(t1, "$writable");
        else
          J.$indexSet$ax(t1, "$writable", typeof value === "boolean" ? "write" : value);
        J.add$1$ax(this.get$listChangeController(), "$writable");
      }, null, null, 3, 0, 2, 1, [], "writable"],
      hasConfig$1: [function($name) {
        var t1 = this.configs;
        return J.containsKey$1$x(t1, J.startsWith$1$s($name, "$") ? $name : C.JSString_methods.$add("$", $name));
      }, "call$1", "get$hasConfig", 2, 0, 73, 2, [], "hasConfig"],
      hasAttribute$1: [function($name) {
        var t1 = this.attributes;
        return J.containsKey$1$x(t1, J.startsWith$1$s($name, "@") ? $name : C.JSString_methods.$add("@", $name));
      }, "call$1", "get$hasAttribute", 2, 0, 73, 2, [], "hasAttribute"],
      remove$0: [function(_) {
        this.provider.removeNode$1(this.path);
      }, "call$0", "get$remove", 0, 0, 0, "remove"],
      attach$2$name: [function(input, $name) {
        var t1;
        if ($name == null) {
          t1 = new O.Path(this.path, null, null, true);
          t1._parse$0();
          $name = t1.name;
        }
        if (typeof input === "string")
          this.provider.getNode$1(input).addChild$2($name, this);
        else if (input instanceof T.SimpleNode) {
          input.super$Node$addChild($name, this);
          J.add$1$ax(input.get$listChangeController(), $name);
        } else
          throw H.wrapException("Invalid Input");
      }, function(input) {
        return this.attach$2$name(input, null);
      }, "attach$1", "call$2$name", "call$1", "get$attach", 2, 3, 200, 0, 45, [], 2, [], "attach"],
      addChild$2: [function($name, node) {
        this.super$Node$addChild($name, node);
        J.add$1$ax(this.get$listChangeController(), $name);
      }, "call$2", "get$addChild", 4, 0, 35, 2, [], 9, [], "addChild"],
      removeChild$1: [function(input) {
        var $name = this.super$Node$removeChild(input);
        if ($name != null)
          J.add$1$ax(this.get$listChangeController(), $name);
        return $name;
      }, "call$1", "get$removeChild", 2, 0, 90, 45, [], "removeChild"],
      setAttribute$4: [function(_, $name, value, responder, response) {
        if (this.onSetAttribute$2($name, value) !== true)
          this.super$LocalNodeImpl$setAttribute(this, $name, value, responder, response);
        return response;
      }, "call$4", "get$setAttribute", 8, 0, 39, 2, [], 1, [], 8, [], 5, [], "setAttribute"],
      setConfig$4: [function($name, value, responder, response) {
        if (this.onSetConfig$2($name, value) !== true)
          this.super$LocalNodeImpl$setConfig($name, value, responder, response);
        return response;
      }, "call$4", "get$setConfig", 8, 0, 39, 2, [], 1, [], 8, [], 5, [], "setConfig"],
      setValue$4: [function(value, responder, response, maxPermission) {
        if (this.onSetValue$1(value) !== true)
          this.super$LocalNodeImpl$setValue(value, responder, response, maxPermission);
        return response;
      }, function(value, responder, response) {
        return this.setValue$4(value, responder, response, 4);
      }, "setValue$3", "call$4", "call$3", "get$setValue", 6, 2, 70, 25, 1, [], 8, [], 5, [], 24, [], "setValue"],
      $index: [function(_, $name) {
        return this.$get$1($name);
      }, null, "get$[]", 2, 0, 16, 2, [], "[]"],
      $indexSet: [function(_, $name, value) {
        var t1, t2, t3, tp;
        t1 = J.getInterceptor$s($name);
        if (t1.startsWith$1($name, "$") || t1.startsWith$1($name, "@"))
          if (t1.startsWith$1($name, "$"))
            J.$indexSet$ax(this.configs, $name, value);
          else
            J.$indexSet$ax(this.attributes, $name, value);
        else if (value == null) {
          $name = this.super$Node$removeChild($name);
          if ($name != null)
            J.add$1$ax(this.get$listChangeController(), $name);
          return $name;
        } else if (!!J.getInterceptor(value).$isMap) {
          t2 = new O.Path(this.path, null, null, true);
          t2._parse$0();
          t3 = J.endsWith$1$s(t2.path, "/");
          t2 = t2.path;
          if (t3) {
            t3 = J.getInterceptor$asx(t2);
            t2 = t3.substring$2(t2, 0, J.$sub$n(t3.get$length(t2), 1));
          }
          t2 = J.$add$ns(t2, "/");
          t1 = new O.Path(J.$add$ns(t2, t1.startsWith$1($name, "/") ? t1.substring$1($name, 1) : $name), null, null, true);
          t1._parse$0();
          tp = t1.path;
          return this.provider.addNode$2(tp, value);
        } else {
          this.super$Node$addChild($name, value);
          J.add$1$ax(this.get$listChangeController(), $name);
          return value;
        }
      }, null, "get$[]=", 4, 0, 25, 2, [], 1, [], "[]="],
      static: {SimpleNode$: [function(path, nodeprovider) {
          var t1, t2, t3, t4;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
          t2 = P.LinkedHashMap__makeEmpty();
          t3 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
          t4 = P.LinkedHashMap__makeEmpty();
          return new T.SimpleNode(nodeprovider == null ? $.SimpleNodeProvider_instance : nodeprovider, false, true, false, null, null, path, t1, null, null, t2, t3, t4);
        }, null, null, 2, 2, 303, 0, 3, [], 191, [], "new SimpleNode"]}
    },
    "+SimpleNode": [159],
    SimpleNode_load_closure: {
      "^": "Closure:25;_responder$_box_0,_captured_this_1",
      call$2: [function(key, value) {
        var t1 = J.getInterceptor$s(key);
        if (t1.startsWith$1(key, "?")) {
          if (t1.$eq(key, "?value"))
            this._captured_this_1.updateValue$1(value);
        } else if (t1.startsWith$1(key, "$"))
          J.$indexSet$ax(this._captured_this_1.configs, key, value);
        else if (t1.startsWith$1(key, "@"))
          J.$indexSet$ax(this._captured_this_1.attributes, key, value);
        else if (!!J.getInterceptor(value).$isMap)
          this._captured_this_1.provider.addNode$2(H.S(this._responder$_box_0._captured_childPathPre_0) + H.S(key), value);
      }, null, null, 4, 0, 25, 11, [], 1, [], "call"]
    },
    SimpleNode_save_closure: {
      "^": "Closure:4;_responder$_captured_rslt_0",
      call$2: [function(str, val) {
        this._responder$_captured_rslt_0.$indexSet(0, str, val);
      }, null, null, 4, 0, 4, 26, [], 20, [], "call"]
    },
    SimpleNode_save_closure0: {
      "^": "Closure:4;_captured_rslt_1",
      call$2: [function(str, val) {
        this._captured_rslt_1.$indexSet(0, str, val);
      }, null, null, 4, 0, 4, 26, [], 20, [], "call"]
    },
    SimpleNode_save_closure1: {
      "^": "Closure:110;_captured_rslt_2",
      call$2: [function(str, node) {
        if (node instanceof T.SimpleNode && J.$eq$(node.serializable, true))
          this._captured_rslt_2.$indexSet(0, str, node.save$0());
      }, null, null, 4, 0, 110, 26, [], 9, [], "call"]
    },
    SimpleNode_invoke_closure: {
      "^": "Closure:2;_responder$_box_1",
      call$1: [function(response) {
        var t1 = H.interceptedTypeCast(this._responder$_box_1._captured_rslt_1, "$isAsyncTableResult");
        if (t1.onClose != null)
          t1.onClose$1(0, response);
      }, null, null, 2, 0, 2, 5, [], "call"]
    },
    SimpleNode_invoke_closure0: {
      "^": "Closure:111;_responder$_box_1",
      call$3: [function(response, waitingAckId, receivedAckId) {
        var t1 = H.interceptedTypeCast(this._responder$_box_1._captured_rslt_1, "$isAsyncTableResult");
        if (t1.onAck != null)
          t1.onAck$3(response, waitingAckId, receivedAckId);
      }, null, null, 6, 0, 111, 5, [], 203, [], 204, [], "call"]
    },
    SimpleNode_invoke_closure1: {
      "^": "Closure:2;_captured_r_2",
      call$1: [function(response) {
        var t1 = this._captured_r_2;
        if (t1.onClose != null)
          t1.onClose$1(0, response);
      }, null, null, 2, 0, 2, 5, [], "call"]
    },
    SimpleNode_invoke_closure2: {
      "^": "Closure:2;_responder$_box_1",
      call$1: [function(_) {
        var t1 = this._responder$_box_1._captured_sub_2;
        if (t1 != null)
          t1.cancel$0();
      }, null, null, 2, 0, 2, 32, [], "call"]
    },
    SimpleNode_invoke_closure3: {
      "^": "Closure:2;_captured_r_3",
      call$1: [function(v) {
        var t1, meta;
        t1 = J.getInterceptor(v);
        if (!!t1.$isTableMetadata) {
          this._captured_r_3.meta = v.meta;
          return;
        } else if (!!t1.$isTableColumns) {
          this._captured_r_3.columns = J.map$1$ax(v.columns, new T.SimpleNode_invoke__closure5()).toList$0(0);
          return;
        }
        if (!!t1.$isIterable)
          this._captured_r_3.update$1(t1.toList$0(v));
        else if (!!t1.$isMap) {
          meta = t1.containsKey$1(v, "__META__") === true ? t1.$index(v, "__META__") : null;
          this._captured_r_3.update$3([v], null, meta);
        } else
          throw H.wrapException(P.Exception_Exception("Unknown Value from Stream"));
      }, null, null, 2, 0, 2, 28, [], "call"]
    },
    SimpleNode_invoke__closure5: {
      "^": "Closure:2;",
      call$1: [function(x) {
        return x.getData$0();
      }, null, null, 2, 0, 2, 42, [], "call"]
    },
    SimpleNode_invoke_closure4: {
      "^": "Closure:1;_captured_r_4",
      call$0: [function() {
        this._captured_r_4.close$0(0);
      }, null, null, 0, 0, 1, "call"]
    },
    SimpleNode_invoke_closure5: {
      "^": "Closure:4;_captured_response_5",
      call$2: [function(e, stack) {
        var error, exception;
        error = new O.DSError("invokeException", null, J.toString$0$(e), null, "response");
        try {
          J.set$detail$x(error, J.toString$0$(stack));
        } catch (exception) {
          H.unwrapException(exception);
        }
        J.close$1$x(this._captured_response_5, error);
      }, null, null, 4, 0, 4, 29, [], 53, [], "call"]
    },
    SimpleNode_invoke_closure6: {
      "^": "Closure:2;_responder$_box_1",
      call$1: [function(_) {
        var t1 = this._responder$_box_1._captured_sub_3;
        if (t1 != null)
          t1.cancel$0();
      }, null, null, 2, 0, 2, 32, [], "call"]
    },
    SimpleNode_invoke_closure7: {
      "^": "Closure:2;_captured_r_6,_captured_list_7",
      call$1: [function(v) {
        var t1 = J.getInterceptor(v);
        if (!!t1.$isTableMetadata) {
          this._captured_r_6.meta = v.meta;
          return;
        } else if (!!t1.$isTableColumns) {
          this._captured_r_6.columns = J.map$1$ax(v.columns, new T.SimpleNode_invoke__closure4()).toList$0(0);
          return;
        }
        if (!!t1.$isIterable)
          C.JSArray_methods.addAll$1(this._captured_list_7, v);
        else if (!!t1.$isMap)
          this._captured_list_7.push(v);
        else
          throw H.wrapException(P.Exception_Exception("Unknown Value from Stream"));
      }, null, null, 2, 0, 2, 28, [], "call"]
    },
    SimpleNode_invoke__closure4: {
      "^": "Closure:2;",
      call$1: [function(x) {
        return x.getData$0();
      }, null, null, 2, 0, 2, 42, [], "call"]
    },
    SimpleNode_invoke_closure8: {
      "^": "Closure:1;_captured_r_8,_captured_list_9",
      call$0: [function() {
        var t1 = this._captured_r_8;
        t1.update$1(this._captured_list_9);
        t1.close$0(0);
      }, null, null, 0, 0, 1, "call"]
    },
    SimpleNode_invoke_closure9: {
      "^": "Closure:4;_captured_response_10",
      call$2: [function(e, stack) {
        var error, exception;
        error = new O.DSError("invokeException", null, J.toString$0$(e), null, "response");
        try {
          J.set$detail$x(error, J.toString$0$(stack));
        } catch (exception) {
          H.unwrapException(exception);
        }
        J.close$1$x(this._captured_response_10, error);
      }, null, null, 4, 0, 4, 29, [], 53, [], "call"]
    },
    SimpleNode_invoke_closure10: {
      "^": "Closure:2;_captured_r_11",
      call$1: [function(response) {
        var t1 = this._captured_r_11;
        if (t1.onClose != null)
          t1.onClose$1(0, response);
      }, null, null, 2, 0, 2, 5, [], "call"]
    },
    SimpleNode_invoke_closure11: {
      "^": "Closure:2;_captured_response_12,_captured_r_13",
      call$1: [function(value) {
        var t1, t2;
        t1 = {};
        t2 = J.getInterceptor(value);
        if (!!t2.$isStream) {
          t1._captured_sub_0 = null;
          t2 = this._captured_r_13;
          t2.onClose = new T.SimpleNode_invoke__closure(t1);
          t1._captured_sub_0 = value.listen$4$cancelOnError$onDone$onError(new T.SimpleNode_invoke__closure0(t2), true, new T.SimpleNode_invoke__closure1(t2), new T.SimpleNode_invoke__closure2(this._captured_response_12));
        } else {
          t1 = this._captured_r_13;
          if (!!t2.$isTable) {
            t1.columns = J.map$1$ax(value.columns, new T.SimpleNode_invoke__closure3()).toList$0(0);
            t1.update$3(value.rows, "closed", value.meta);
            t1.close$0(0);
          } else {
            t1.update$1(!!t2.$isIterable ? t2.toList$0(value) : [value]);
            t1.close$0(0);
          }
        }
      }, null, null, 2, 0, 2, 1, [], "call"]
    },
    SimpleNode_invoke__closure: {
      "^": "Closure:2;_responder$_box_0",
      call$1: [function(_) {
        var t1 = this._responder$_box_0._captured_sub_0;
        if (t1 != null)
          t1.cancel$0();
      }, null, null, 2, 0, 2, 32, [], "call"]
    },
    SimpleNode_invoke__closure0: {
      "^": "Closure:2;_captured_r_14",
      call$1: [function(v) {
        var t1, meta;
        t1 = J.getInterceptor(v);
        if (!!t1.$isTableMetadata) {
          this._captured_r_14.meta = v.meta;
          return;
        } else if (!!t1.$isTableColumns) {
          this._captured_r_14.columns = J.map$1$ax(v.columns, new T.SimpleNode_invoke___closure()).toList$0(0);
          return;
        }
        if (!!t1.$isIterable)
          this._captured_r_14.update$1(t1.toList$0(v));
        else if (!!t1.$isMap) {
          meta = t1.containsKey$1(v, "__META__") === true ? t1.$index(v, "__META__") : null;
          this._captured_r_14.update$3([v], null, meta);
        } else
          throw H.wrapException(P.Exception_Exception("Unknown Value from Stream"));
      }, null, null, 2, 0, 2, 28, [], "call"]
    },
    SimpleNode_invoke___closure: {
      "^": "Closure:2;",
      call$1: [function(x) {
        return x.getData$0();
      }, null, null, 2, 0, 2, 42, [], "call"]
    },
    SimpleNode_invoke__closure1: {
      "^": "Closure:1;_captured_r_15",
      call$0: [function() {
        this._captured_r_15.close$0(0);
      }, null, null, 0, 0, 1, "call"]
    },
    SimpleNode_invoke__closure2: {
      "^": "Closure:4;_captured_response_16",
      call$2: [function(e, stack) {
        var error, exception;
        error = new O.DSError("invokeException", null, J.toString$0$(e), null, "response");
        try {
          J.set$detail$x(error, J.toString$0$(stack));
        } catch (exception) {
          H.unwrapException(exception);
        }
        J.close$1$x(this._captured_response_16, error);
      }, null, null, 4, 0, 4, 29, [], 53, [], "call"]
    },
    SimpleNode_invoke__closure3: {
      "^": "Closure:2;",
      call$1: [function(x) {
        return x.getData$0();
      }, null, null, 2, 0, 2, 42, [], "call"]
    },
    SimpleNode_invoke_closure12: {
      "^": "Closure:4;_captured_response_17",
      call$2: [function(e, stack) {
        var error, exception;
        error = new O.DSError("invokeException", null, J.toString$0$(e), null, "response");
        try {
          J.set$detail$x(error, J.toString$0$(stack));
        } catch (exception) {
          H.unwrapException(exception);
        }
        J.close$1$x(this._captured_response_17, error);
      }, null, null, 4, 0, 4, 29, [], 53, [], "call"]
    },
    SimpleHiddenNode: {
      "^": "SimpleNode;provider-53,removed-6,serializable-6,_loaded-6,_listChangeController-38,_listReqListener-12,path-5,callbacks-28,_lastValueUpdate-26,profile-19,attributes-9,configs-9,children-18",
      getSimpleMap$0: [function() {
        var rslt = P.LinkedHashMap__makeLiteral(["$hidden", true]);
        if (J.containsKey$1$x(this.configs, "$is") === true)
          rslt.$indexSet(0, "$is", J.$index$asx(this.configs, "$is"));
        if (J.containsKey$1$x(this.configs, "$type") === true)
          rslt.$indexSet(0, "$type", J.$index$asx(this.configs, "$type"));
        if (J.containsKey$1$x(this.configs, "$name") === true)
          rslt.$indexSet(0, "$name", J.$index$asx(this.configs, "$name"));
        if (J.containsKey$1$x(this.configs, "$invokable") === true)
          rslt.$indexSet(0, "$invokable", J.$index$asx(this.configs, "$invokable"));
        if (J.containsKey$1$x(this.configs, "$writable") === true)
          rslt.$indexSet(0, "$writable", J.$index$asx(this.configs, "$writable"));
        return rslt;
      }, "call$0", "get$getSimpleMap", 0, 0, 29, "getSimpleMap"],
      static: {SimpleHiddenNode$: [function(path, provider) {
          var t1, t2, t3, t4, t5;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
          t2 = P.LinkedHashMap__makeEmpty();
          t3 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
          t4 = P.LinkedHashMap__makeEmpty();
          t5 = provider == null ? $.SimpleNodeProvider_instance : provider;
          t3.$indexSet(0, "$hidden", true);
          return new T.SimpleHiddenNode(t5, false, true, false, null, null, path, t1, null, null, t2, t3, t4);
        }, null, null, 4, 0, 304, 3, [], 49, [], "new SimpleHiddenNode"]}
    },
    "+SimpleHiddenNode": [81],
    InvokeCallback: {
      "^": "",
      $typedefType: 426,
      $$isTypedef: true
    },
    "+InvokeCallback": "",
    OnInvokeClosed: {
      "^": "",
      $typedefType: 312,
      $$isTypedef: true
    },
    "+OnInvokeClosed": "",
    OnInvokeAcked: {
      "^": "",
      $typedefType: 285,
      $$isTypedef: true
    },
    "+OnInvokeAcked": "",
    _NodeFactory: {
      "^": "",
      $typedefType: 107,
      $$isTypedef: true
    },
    "+_NodeFactory": ""
  }], ["dslink.stub", "../../tool/browser_stub.dart",, L, {
    "^": "",
    main: [function(args) {
    }, "call$1", "stub__main$closure", 2, 0, 305],
    NodeStub: {
      "^": "SimpleNode;provider-53,removed-6,serializable-6,_loaded-6,_listChangeController-38,_listReqListener-12,path-5,callbacks-28,_lastValueUpdate-26,profile-19,attributes-9,configs-9,children-18",
      onInvoke$1: [function(params) {
        return params;
      }, "call$1", "get$onInvoke", 2, 0, 55, 34, [], "onInvoke"],
      onSubscribe$0: [function() {
        P.print(this.path);
      }, "call$0", "get$onSubscribe", 0, 0, 0, "onSubscribe"],
      onCreated$0: [function() {
        P.print(P.LinkedHashMap__makeLiteral(["path", this.path]));
      }, "call$0", "get$onCreated", 0, 0, 0, "onCreated"],
      onRemoving$0: [function() {
        P.print(J.get$values$x(C.JsonCodec_null_null.decode$1("{\"a\":\"hello\"}")));
      }, "call$0", "get$onRemoving", 0, 0, 0, "onRemoving"],
      onChildRemoved$2: [function($name, node) {
        P.print(J.get$keys$x(C.JsonCodec_null_null.decode$1("{\"a\":\"hello\"}")));
      }, "call$2", "get$onChildRemoved", 4, 0, 35, 2, [], 9, [], "onChildRemoved"],
      onChildAdded$2: [function($name, node) {
        P.print($name);
      }, "call$2", "get$onChildAdded", 4, 0, 35, 2, [], 9, [], "onChildAdded"],
      onSetValue$1: [function(val) {
        P.print(val);
      }, "call$1", "get$onSetValue", 2, 0, 203, 20, [], "onSetValue"],
      onSetConfig$2: [function($name, value) {
        P.print($name);
      }, "call$2", "get$onSetConfig", 4, 0, 84, 2, [], 1, [], "onSetConfig"],
      onSetAttribute$2: [function($name, value) {
        P.print($name);
      }, "call$2", "get$onSetAttribute", 4, 0, 84, 2, [], 1, [], "onSetAttribute"],
      static: {NodeStub$: [function(path) {
          var t1, t2, t3, t4;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
          t2 = P.LinkedHashMap__makeEmpty();
          t3 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
          t4 = P.LinkedHashMap__makeEmpty();
          return new L.NodeStub($.SimpleNodeProvider_instance, false, true, false, null, null, path, t1, null, null, t2, t3, t4);
        }, null, null, 2, 0, 16, 3, [], "new NodeStub"]}
    },
    "+NodeStub": [81]
  }, 1], ["dslink.utils", "package:dslink/utils.dart",, Q, {
    "^": "",
    ByteDataUtil_mergeBytes: function(bytesList) {
      var t1, totalLen, _i, t2, output, pos, bytes, t3, t4, t5;
      t1 = bytesList.length;
      if (t1 === 1)
        return bytesList[0];
      for (totalLen = 0, _i = 0; t2 = bytesList.length, _i < t2; t2 === t1 || (0, H.throwConcurrentModificationError)(bytesList), ++_i)
        totalLen += bytesList[_i].byteLength;
      output = new DataView(new ArrayBuffer(totalLen));
      for (t1 = bytesList.length, pos = 0, _i = 0; _i < bytesList.length; bytesList.length === t1 || (0, H.throwConcurrentModificationError)(bytesList), ++_i) {
        bytes = bytesList[_i];
        t2 = output.buffer;
        t2.toString;
        H._checkViewArguments(t2, pos, null);
        t2 = new Uint8Array(t2, pos);
        t3 = bytes.buffer;
        t4 = bytes.byteOffset;
        t5 = bytes.byteLength;
        t3.toString;
        H._checkViewArguments(t3, t4, t5);
        C.NativeUint8List_methods.setAll$2(t2, 0, t5 == null ? new Uint8Array(t3, t4) : new Uint8Array(t3, t4, t5));
        pos += bytes.byteLength;
      }
      return output;
    },
    DsTimer__startTimer: [function() {
      P.Timer_Timer(C.Duration_0, Q.utils_DsTimer__dsLoop$closure());
      $.DsTimer__pending = true;
    }, "call$0", "utils_DsTimer__startTimer$closure", 0, 0, 0],
    DsTimer_callLater: function(callback) {
      if (!$.DsTimer__pending) {
        P.Timer_Timer(C.Duration_0, Q.utils_DsTimer__dsLoop$closure());
        $.DsTimer__pending = true;
      }
      $.$get$DsTimer__callbacks().push(callback);
    },
    DsTimer__getTimerFunctions: function(time50) {
      var t1, tf, it;
      if ($.$get$DsTimer__pendingTimerMap().containsKey$1(0, time50))
        return $.$get$DsTimer__pendingTimerMap().$index(0, time50);
      t1 = [];
      t1.$builtinTypeInfo = [P.Function];
      tf = new Q.TimerFunctions(time50, t1, null, null, null);
      $.$get$DsTimer__pendingTimerMap().$indexSet(0, time50, tf);
      t1 = $.$get$DsTimer__pendingTimer();
      if (!t1.get$isEmpty(t1)) {
        t1 = $.$get$DsTimer__pendingTimer();
        it = t1.get$first(t1);
      } else
        it = null;
      for (; t1 = it == null, !t1;)
        if (it.get$ts50() > time50) {
          J.insertBefore$1$x(it, tf);
          break;
        } else
          it = !J.$eq$(it.get$next(), $.$get$DsTimer__pendingTimer()) ? it.get$next() : null;
      if (t1) {
        t1 = $.$get$DsTimer__pendingTimer();
        t1._insertAfter$2(t1._collection$_previous, tf);
      }
      if (!$.DsTimer__pending) {
        P.Timer_Timer(C.Duration_0, Q.utils_DsTimer__dsLoop$closure());
        $.DsTimer__pending = true;
      }
      return tf;
    },
    DsTimer__removeTimerFunctions: function(time50) {
      var t1, t2, t3, _i, fun;
      t1 = $.$get$DsTimer__pendingTimer();
      if (!t1.get$isEmpty(t1)) {
        t1 = $.$get$DsTimer__pendingTimer();
        t2 = t1._collection$_next;
        if (t2 == null ? t1 == null : t2 === t1)
          H.throwExpression(new P.StateError("No such element"));
        t1 = t2.get$ts50() <= time50;
      } else
        t1 = false;
      if (t1) {
        t1 = $.$get$DsTimer__pendingTimer();
        t2 = t1._collection$_next;
        if (t2 == null ? t1 == null : t2 === t1)
          H.throwExpression(new P.StateError("No such element"));
        $.$get$DsTimer__pendingTimerMap().remove$1(0, t2.get$ts50());
        t2.unlink$0();
        for (t1 = t2.get$_utils$_functions(), t3 = t1.length, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          fun = t1[_i];
          $.$get$DsTimer__functionsMap().remove$1(0, fun);
          fun.call$0();
        }
        return t2;
      }
      return;
    },
    DsTimer_timerOnceAfter: function(callback, ms) {
      var desiredTime50, existTf, tf;
      desiredTime50 = C.JSNumber_methods.toInt$0(Math.ceil((Date.now() + ms) / 50));
      if ($.$get$DsTimer__functionsMap().containsKey$1(0, callback)) {
        existTf = $.$get$DsTimer__functionsMap().$index(0, callback);
        if (existTf.get$ts50() >= desiredTime50)
          return;
        else
          J.remove$1$ax(existTf, callback);
      }
      if (desiredTime50 <= $.DsTimer__lastTimeRun) {
        Q.DsTimer_callLater(callback);
        return;
      }
      tf = Q.DsTimer__getTimerFunctions(desiredTime50);
      J.add$1$ax(tf, callback);
      $.$get$DsTimer__functionsMap().$indexSet(0, callback, tf);
    },
    DsTimer__dsLoop: [function() {
      var runnings, t1, t2, t3;
      $.DsTimer__pending = false;
      $.DsTimer__looping = true;
      runnings = $.$get$DsTimer__callbacks();
      $.DsTimer__callbacks = [];
      C.JSArray_methods.forEach$1(runnings, new Q.DsTimer__dsLoop_closure());
      t1 = Date.now();
      $.DsTimer__lastTimeRun = C.JSNumber_methods.toInt$0(Math.floor(t1 / 50));
      for (; Q.DsTimer__removeTimerFunctions($.DsTimer__lastTimeRun) != null;)
        ;
      $.DsTimer__looping = false;
      if ($.DsTimer__mergeCycle) {
        $.DsTimer__mergeCycle = false;
        Q.DsTimer__dsLoop();
      }
      t2 = $.$get$DsTimer__pendingTimer();
      if (!t2.get$isEmpty(t2)) {
        if (!$.DsTimer__pending) {
          t2 = $.DsTimer_timerTs50;
          t3 = $.$get$DsTimer__pendingTimer();
          if (t2 !== t3.get$first(t3).get$ts50()) {
            t2 = $.$get$DsTimer__pendingTimer();
            $.DsTimer_timerTs50 = t2.get$first(t2).get$ts50();
            t2 = $.DsTimer_timerTimer;
            if (t2 != null && t2.get$isActive())
              $.DsTimer_timerTimer.cancel$0();
            $.DsTimer_timerTimer = P.Timer_Timer(P.Duration$(0, 0, 0, $.DsTimer_timerTs50 * 50 + 1 - t1, 0, 0), Q.utils_DsTimer__startTimer$closure());
          }
        }
      } else {
        t1 = $.DsTimer_timerTimer;
        if (t1 != null) {
          if (t1.get$isActive())
            $.DsTimer_timerTimer.cancel$0();
          $.DsTimer_timerTimer = null;
        }
      }
    }, "call$0", "utils_DsTimer__dsLoop$closure", 0, 0, 0],
    logger: function() {
      var t1 = $._logger;
      if (t1 != null)
        return t1;
      $.hierarchicalLoggingEnabled = true;
      t1 = N.Logger_Logger("DSA");
      $._logger = t1;
      t1.get$onRecord().listen$1(new Q.logger_closure());
      $._logger.set$level(C.Level_INFO_800);
      return $._logger;
    },
    updateLogLevel: [function($name) {
      var levels, _i, l;
      $name = J.trim$0$s($name).toUpperCase();
      if ($name === "debug")
        $name = "ALL";
      levels = P.LinkedHashMap__makeEmpty();
      for (_i = 0; _i < 10; ++_i) {
        l = C.List_O1R[_i];
        levels.$indexSet(0, l.name, l);
      }
      l = levels.$index(0, $name);
      if (l != null)
        Q.logger().set$level(l);
    }, "call$1", "utils__updateLogLevel$closure", 2, 0, 17, 2, [], "updateLogLevel"],
    buildEnumType: [function(values) {
      return "enum[" + H.S(J.join$1$ax(values, ",")) + "]";
    }, "call$1", "utils__buildEnumType$closure", 2, 0, 316, 93, [], "buildEnumType"],
    buildActionIO: [function(types) {
      return J.map$1$ax(J.get$keys$x(types), new Q.buildActionIO_closure(types)).toList$0(0);
    }, "call$1", "utils__buildActionIO$closure", 2, 0, 317, 213, [], "buildActionIO"],
    DSLinkJSON: {
      "^": "Object;_json@-13,name*-5,version*-5,description@-5,main@-5,engines@-422,configs@-423,getDependencies@-36",
      verify$0: [function() {
        if (this.name == null)
          throw H.wrapException(P.Exception_Exception("DSLink Name is required."));
        if (this.main == null)
          throw H.wrapException(P.Exception_Exception("DSLink Main Script is required."));
      }, "call$0", "get$verify", 0, 0, 0, "verify"],
      save$0: [function() {
        var t1, map, t2, _i, key;
        if (this.name == null)
          H.throwExpression(P.Exception_Exception("DSLink Name is required."));
        if (this.main == null)
          H.throwExpression(P.Exception_Exception("DSLink Main Script is required."));
        t1 = this._json;
        t1 = t1 != null ? t1 : P.LinkedHashMap__makeEmpty();
        map = P.LinkedHashMap_LinkedHashMap$from(t1, P.String, null);
        map.$indexSet(0, "name", this.name);
        map.$indexSet(0, "version", this.version);
        map.$indexSet(0, "description", this.description);
        map.$indexSet(0, "main", this.main);
        map.$indexSet(0, "engines", this.engines);
        map.$indexSet(0, "configs", this.configs);
        map.$indexSet(0, "getDependencies", this.getDependencies);
        for (t1 = map.get$keys(map), t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0)), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          if (map.$index(0, key) == null)
            map.remove$1(0, key);
        }
        return map;
      }, "call$0", "get$save", 0, 0, 29, "save"],
      static: {DSLinkJSON$: [function() {
          return new Q.DSLinkJSON(null, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), []);
        }, null, null, 0, 0, 1, "new DSLinkJSON"], DSLinkJSON_DSLinkJSON$from: [function(map) {
          var j, t1;
          j = new Q.DSLinkJSON(null, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), []);
          j._json = map;
          t1 = J.getInterceptor$asx(map);
          j.name = t1.$index(map, "name");
          j.version = t1.$index(map, "version");
          j.description = t1.$index(map, "description");
          j.main = t1.$index(map, "main");
          j.engines = t1.$index(map, "engines");
          j.configs = t1.$index(map, "configs");
          j.getDependencies = t1.$index(map, "getDependencies");
          return j;
        }, null, null, 2, 0, 306, 206, [], "new DSLinkJSON$from"]}
    },
    "+DSLinkJSON": [3],
    BinaryData: {
      "^": "Object;mergingList@,bytes@"
    },
    BinaryInCache: {
      "^": "Object;caches",
      fetchData$1: function(id) {
        var t1, data;
        t1 = this.caches;
        data = t1.$index(0, id);
        if (data != null && data.get$bytes() != null) {
          t1.remove$1(0, id);
          return data.get$bytes();
        }
        return;
      },
      receiveData$1: function(inputList) {
        var t1, bytedata, headerSize, end, t2, i, start, end0, t3, t4, t5, bytes, id, finished, data;
        t1 = inputList.buffer;
        bytedata = (t1 && C.NativeByteBuffer_methods).asByteData$2(t1, inputList.byteOffset, inputList.byteLength);
        headerSize = bytedata.getUint32(0, false);
        for (t1 = this.caches, end = inputList.length, t2 = headerSize - 9, i = 0; i < headerSize; i += 9) {
          start = bytedata.getUint32(i, false);
          end0 = i < t2 ? bytedata.getUint32(i + 9, false) : end;
          t3 = inputList.buffer;
          t4 = start + inputList.byteOffset;
          t5 = end0 - start;
          t3.toString;
          H._checkViewArguments(t3, t4, t5);
          bytes = new DataView(t3, t4, t5);
          id = C.JSInt_methods.toString$0(bytedata.getUint32(i + 4, false));
          finished = bytedata.getUint8(i + 8) === 0;
          data = t1.$index(0, id);
          if (data == null) {
            data = new Q.BinaryData(null, null);
            data.bytes = null;
            if (finished)
              data.bytes = bytes;
            else
              data.mergingList = [bytes];
            t1.$indexSet(0, id, data);
          } else {
            if (data.get$mergingList() != null)
              data.get$mergingList().push(bytes);
            else
              data.set$mergingList([bytes]);
            if (finished) {
              data.set$bytes(Q.ByteDataUtil_mergeBytes(data.get$mergingList()));
              data.set$mergingList(null);
            }
          }
        }
      }
    },
    BinaryOutCache: {
      "^": "Object;id,caches",
      get$hasData: function() {
        var t1 = this.caches;
        return !t1.get$isEmpty(t1);
      },
      addBinaryData$1: function(data) {
        var t1, t2;
        t1 = ++this.id;
        t2 = new Q.BinaryData(null, null);
        t2.bytes = data;
        this.caches.$indexSet(0, t1, t2);
        return t1;
      },
      export$0: function() {
        var t1, t2, datapos, output, t3, idToRemove, _i;
        t1 = {};
        t1._captured_count_0 = 0;
        t1._captured_totalLength_1 = 0;
        t2 = this.caches;
        t2.forEach$1(0, new Q.BinaryOutCache_export_closure(t1));
        t1._captured_headpos_2 = 0;
        datapos = t1._captured_count_0 * 9;
        t1._captured_datapos_3 = datapos;
        output = new Uint8Array(H._checkLength(t1._captured_totalLength_1 + datapos));
        t3 = output.buffer;
        idToRemove = [];
        t2.forEach$1(0, new Q.BinaryOutCache_export_closure0(t1, output, (t3 && C.NativeByteBuffer_methods).asByteData$2(t3, 0, null), idToRemove));
        for (t1 = idToRemove.length, _i = 0; _i < idToRemove.length; idToRemove.length === t1 || (0, H.throwConcurrentModificationError)(idToRemove), ++_i)
          t2.remove$1(0, idToRemove[_i]);
        return output;
      }
    },
    BinaryOutCache_export_closure: {
      "^": "Closure:113;_utils$_box_0",
      call$2: function(id, data) {
        var t1 = this._utils$_box_0;
        ++t1._captured_count_0;
        t1._captured_totalLength_1 = t1._captured_totalLength_1 + J.get$lengthInBytes$x(data.get$bytes());
      }
    },
    BinaryOutCache_export_closure0: {
      "^": "Closure:113;_utils$_box_0,_captured_output_1,_captured_bytedata_2,_captured_idToRemove_3",
      call$2: function(id, data) {
        var t1, t2, t3, t4, t5;
        t1 = this._captured_bytedata_2;
        t2 = this._utils$_box_0;
        t1.setUint32(t2._captured_headpos_2, t2._captured_datapos_3, false);
        t1.setUint32(t2._captured_headpos_2 + 4, id, false);
        this._captured_idToRemove_3.push(id);
        t1 = t2._captured_headpos_2;
        t3 = data.get$bytes();
        t4 = J.get$buffer$x(t3);
        t5 = t3.byteOffset;
        t3 = t3.byteLength;
        t4.toString;
        C.NativeUint8List_methods.setAll$2(this._captured_output_1, t1 + 9, H.NativeUint8List_NativeUint8List$view(t4, t5, t3));
        t2._captured_headpos_2 += 9;
        t2._captured_datapos_3 = t2._captured_datapos_3 + J.get$lengthInBytes$x(data.get$bytes());
      }
    },
    DsJsonCodecImpl: {
      "^": "Object;encoder,decoder,_prettyEncoder",
      encodeJson$2$pretty: function(val, pretty) {
        var t1;
        if (pretty) {
          t1 = this._prettyEncoder;
          if (t1 == null) {
            t1 = new P.JsonEncoder("  ", Q.utils_DsJsonCodecImpl__safeEncoder$closure());
            this.encoder = t1;
            this._prettyEncoder = t1;
          } else
            this.encoder = t1;
        }
        t1 = this.encoder;
        return P._JsonStringStringifier_stringify(val, t1._toEncodable, t1.indent);
      },
      decodeJsonFrame$2: function(str, cache) {
        return P._parseJson(str, new Q.DsJsonCodecImpl_decodeJsonFrame__reviver(cache));
      },
      encodeJsonFrame$3$pretty: function(val, cache, pretty) {
        var t1, encoder;
        t1 = new Q.DsJsonCodecImpl_encodeJsonFrame__encoder(cache);
        encoder = pretty ? new P.JsonEncoder("  ", t1) : new P.JsonEncoder(null, t1);
        return P._JsonStringStringifier_stringify(val, encoder._toEncodable, encoder.indent);
      },
      static: {DsJsonCodecImpl__safeEncoder: [function(value) {
          return;
        }, "call$1", "utils_DsJsonCodecImpl__safeEncoder$closure", 2, 0, 2, 1, []]}
    },
    DsJsonCodecImpl_decodeJsonFrame__reviver: {
      "^": "Closure:4;_captured_cache_0",
      call$2: function(key, value) {
        if (typeof value === "string" && C.JSString_methods.startsWith$1(value, "\u001bbytes,"))
          return this._captured_cache_0.fetchData$1(J.substring$1$s(value, 7));
        return value;
      }
    },
    DsJsonCodecImpl_encodeJsonFrame__encoder: {
      "^": "Closure:2;_captured_cache_0",
      call$1: [function(value) {
        if (!!J.getInterceptor(value).$isByteData)
          return "\u001bbytes," + this._captured_cache_0.addBinaryData$1(value);
        return;
      }, null, null, 2, 0, null, 1, [], "call"]
    },
    BroadcastStreamController: {
      "^": "Object;_controller,_stream,_onStartListen,_onAllCancel,_listening,_listenState,_delayedCheckCanceling",
      get$stream: function(_) {
        return this._stream;
      },
      _onListen$1: [function(subscription) {
        if (!this._listenState) {
          if (this._onStartListen != null)
            this._onStartListen$0();
          this._listenState = true;
        }
        this._listening = true;
      }, "call$1", "get$_onListen", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [[P.StreamSubscription, T]]};
        }, this.$receiver, "BroadcastStreamController");
      }, 90, []],
      _onCancel$1: [function(subscription) {
        this._listening = false;
        if (this._onAllCancel != null) {
          if (!this._delayedCheckCanceling) {
            this._delayedCheckCanceling = true;
            Q.DsTimer_callLater(this.get$delayedCheckCancel());
          }
        } else
          this._listenState = false;
      }, "call$1", "get$_onCancel", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [[P.StreamSubscription, T]]};
        }, this.$receiver, "BroadcastStreamController");
      }, 90, []],
      delayedCheckCancel$0: [function() {
        this._delayedCheckCanceling = false;
        if (!this._listening && this._listenState) {
          this._onAllCancel$0();
          this._listenState = false;
        }
      }, "call$0", "get$delayedCheckCancel", 0, 0, 0],
      add$1: function(_, t) {
        var t1 = this._controller;
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(t);
        this._stream.lastValue = t;
      },
      close$0: function(_) {
        return this._controller.close$0(0);
      },
      get$isClosed: function() {
        return (this._controller._state & 4) !== 0;
      },
      get$isPaused: function() {
        var t1, t2;
        t1 = this._controller;
        t2 = t1._state;
        return (t2 & 1) !== 0 ? t1.get$_subscription().get$_isInputPaused() : (t2 & 2) === 0;
      },
      BroadcastStreamController$3: function(onStartListen, onAllCancel, onListen, $T) {
        var t1, t2, t3, t4;
        t1 = this._controller;
        t2 = new P._ControllerStream(t1);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        t1 = this.get$_onListen();
        t3 = this.get$_onCancel();
        t4 = H.getRuntimeTypeArgument(t2, "Stream", 0);
        t3 = new P._AsBroadcastStream(t2, $.Zone__current.registerUnaryCallback$1(t1), $.Zone__current.registerUnaryCallback$1(t3), $.Zone__current, null, null);
        t3.$builtinTypeInfo = [t4];
        t1 = new P._AsBroadcastStreamController(null, t3.get$_async$_onListen(), t3.get$_async$_onCancel(), 0, null, null, null, null);
        t1.$builtinTypeInfo = [t4];
        t1._async$_previous = t1;
        t1._async$_next = t1;
        t3._async$_controller = t1;
        t1 = new Q.CachedStreamWrapper(null, t3, onListen);
        t1.$builtinTypeInfo = [null];
        this._stream = t1;
        this._onStartListen = onStartListen;
        this._onAllCancel = onAllCancel;
      },
      _onStartListen$0: function() {
        return this._onStartListen.call$0();
      },
      _onAllCancel$0: function() {
        return this._onAllCancel.call$0();
      },
      static: {BroadcastStreamController$: function(onStartListen, onAllCancel, onListen, $T) {
          var t1 = new Q.BroadcastStreamController(P.StreamController_StreamController(null, null, null, null, false, $T), null, null, null, false, false, false);
          t1.$builtinTypeInfo = [$T];
          t1.BroadcastStreamController$3(onStartListen, onAllCancel, onListen, $T);
          return t1;
        }}
    },
    CachedStreamWrapper: {
      "^": "Object;lastValue,_stream,_onListen",
      contains$1: function(_, needle) {
        return this._stream.contains$1(0, needle);
      },
      elementAt$1: function(_, index) {
        return this._stream.elementAt$1(0, index);
      },
      forEach$1: function(_, action) {
        return this._stream.forEach$1(0, action);
      },
      get$isEmpty: function(_) {
        var t1 = this._stream;
        return t1.get$isEmpty(t1);
      },
      join$1: function(_, separator) {
        return this._stream.join$1(0, separator);
      },
      get$last: function(_) {
        var t1 = this._stream;
        return t1.get$last(t1);
      },
      get$length: function(_) {
        var t1 = this._stream;
        return t1.get$length(t1);
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        if (this._onListen != null)
          this._onListen$1(onData);
        return this._stream.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      map$1: function(_, convert) {
        var t1, t2;
        t1 = this._stream;
        t2 = new P._MapStream(convert, t1);
        t2.$builtinTypeInfo = [H.getRuntimeTypeArgument(t1, "Stream", 0), null];
        return t2;
      },
      get$single: function(_) {
        var t1 = this._stream;
        return t1.get$single(t1);
      },
      timeout$2$onTimeout: function(_, timeLimit, onTimeout) {
        return this._stream.timeout$2$onTimeout(0, timeLimit, onTimeout);
      },
      toList$0: function(_) {
        return this._stream.toList$0(0);
      },
      where$1: function(_, test) {
        var t1, t2;
        t1 = this._stream;
        t2 = new P._WhereStream(test, t1);
        t2.$builtinTypeInfo = [H.getRuntimeTypeArgument(t1, "Stream", 0)];
        return t2;
      },
      _onListen$1: function(arg0) {
        return this._onListen.call$1(arg0);
      },
      $isStream: 1
    },
    TimerFunctions: {
      "^": "LinkedListEntry;ts50<,_utils$_functions<,_collection$_list,_collection$_next,_collection$_previous",
      add$1: function(_, foo) {
        var t1 = this._utils$_functions;
        if (!C.JSArray_methods.contains$1(t1, foo))
          t1.push(foo);
      },
      remove$1: function(_, foo) {
        C.JSArray_methods.remove$1(this._utils$_functions, foo);
      },
      $asLinkedListEntry: Isolate.functionThatReturnsNull
    },
    DsTimer__dsLoop_closure: {
      "^": "Closure:206;",
      call$1: function(f) {
        f.call$0();
      }
    },
    logger_closure: {
      "^": "Closure:2;",
      call$1: [function(record) {
        var t1 = J.getInterceptor$x(record);
        P.print("[DSA][" + H.S(J.get$name$x(record.get$level())) + "] " + H.S(t1.get$message(record)));
        if (t1.get$error(record) != null)
          P.print(t1.get$error(record));
        if (record.get$stackTrace() != null)
          P.print(record.get$stackTrace());
      }, null, null, 2, 0, null, 215, [], "call"]
    },
    Interval: {
      "^": "Object;duration>-424",
      get$inMilliseconds: [function() {
        return this.duration.get$inMilliseconds();
      }, null, null, 1, 0, 24, "inMilliseconds"],
      static: {"^": "Interval_ONE_MILLISECOND<-10,Interval_TWO_MILLISECONDS<-10,Interval_FOUR_MILLISECONDS<-10,Interval_EIGHT_MILLISECONDS<-10,Interval_SIXTEEN_MILLISECONDS<-10,Interval_THIRTY_MILLISECONDS<-10,Interval_FIFTY_MILLISECONDS<-10,Interval_ONE_HUNDRED_MILLISECONDS<-10,Interval_TWO_HUNDRED_MILLISECONDS<-10,Interval_THREE_HUNDRED_MILLISECONDS<-10,Interval_QUARTER_SECOND<-10,Interval_HALF_SECOND<-10,Interval_ONE_SECOND<-10,Interval_TWO_SECONDS<-10,Interval_THREE_SECONDS<-10,Interval_FOUR_SECONDS<-10,Interval_FIVE_SECONDS<-10,Interval_ONE_MINUTE<-10", Interval$: [function(duration) {
          return new Q.Interval(duration);
        }, null, null, 2, 0, 307, 41, [], "new Interval"], Interval$forMilliseconds: [function(ms) {
          return new Q.Interval(P.Duration$(0, 0, 0, ms, 0, 0));
        }, null, null, 2, 0, 34, 207, [], "new Interval$forMilliseconds"], Interval$forSeconds: [function(seconds) {
          return new Q.Interval(P.Duration$(0, 0, 0, 0, 0, seconds));
        }, null, null, 2, 0, 34, 208, [], "new Interval$forSeconds"], Interval$forMinutes: [function(minutes) {
          return new Q.Interval(P.Duration$(0, 0, 0, 0, minutes, 0));
        }, null, null, 2, 0, 34, 209, [], "new Interval$forMinutes"], Interval$forHours: [function(hours) {
          return new Q.Interval(P.Duration$(0, hours, 0, 0, 0, 0));
        }, null, null, 2, 0, 34, 210, [], "new Interval$forHours"]}
    },
    "+Interval": [3],
    Scheduler: {
      "^": "Object;",
      static: {Scheduler$: [function() {
          return new Q.Scheduler();
        }, null, null, 0, 0, 308, "new Scheduler"], Scheduler_currentTimer: [function() {
          return J.$index$asx($.Zone__current, "dslink.scheduler.timer");
        }, null, null, 1, 0, 309, "currentTimer"], Scheduler_cancelCurrentTimer: [function() {
          J.$index$asx($.Zone__current, "dslink.scheduler.timer").cancel$0();
        }, "call$0", "utils_Scheduler_cancelCurrentTimer$closure", 0, 0, 0, "cancelCurrentTimer"], Scheduler_every: [function(interval, action) {
          var t1, duration;
          t1 = J.getInterceptor(interval);
          if (!!t1.$isDuration)
            duration = interval;
          else if (typeof interval === "number" && Math.floor(interval) === interval)
            duration = P.Duration$(0, 0, 0, interval, 0, 0);
          else if (!!t1.$isInterval)
            duration = interval.duration;
          else
            throw H.wrapException(P.Exception_Exception("Invalid Interval: " + H.S(interval)));
          return P.Timer_Timer$periodic(duration, new Q.Scheduler_every_closure(action));
        }, "call$2", "utils_Scheduler_every$closure", 4, 0, 310, 102, [], 33, [], "every"], Scheduler_repeat: [function(times, action) {
          var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$handler = 1, $async$currentError, i, $async$temp1;
          function $async$Scheduler_repeat($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  i = 1;
                case 2:
                  // for condition
                  if (!(i <= times)) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  $async$temp1 = action;
                  $async$goto = 5;
                  return H.asyncHelper($async$temp1.call$0(), $async$Scheduler_repeat, $async$completer);
                case 5:
                  // returning from await.
                case 3:
                  // for update
                  ++i;
                  // goto for condition
                  $async$goto = 2;
                  break;
                case 4:
                  // after for
                  // implicit return
                  return H.asyncHelper(null, 0, $async$completer, null);
                case 1:
                  // rethrow
                  return H.asyncHelper($async$currentError, 1, $async$completer);
              }
          }
          return H.asyncHelper(null, $async$Scheduler_repeat, $async$completer, null);
        }, "call$2", "utils_Scheduler_repeat$closure", 4, 0, 311, 103, [], 33, [], "repeat"], Scheduler_tick: [function(times, interval, action) {
          var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$handler = 1, $async$currentError, i, $async$temp1, $async$temp2, $async$temp3;
          function $async$Scheduler_tick($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  i = 1;
                case 2:
                  // for condition
                  if (!(i <= times)) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  $async$temp1 = P;
                  $async$temp1 = $async$temp1;
                  $async$temp2 = P;
                  $async$temp2 = $async$temp2;
                  $async$temp3 = interval;
                  $async$goto = 5;
                  return H.asyncHelper($async$temp1.Future_Future$delayed(new $async$temp2.Duration(1000 * $async$temp3.get$inMilliseconds()), null, null), $async$Scheduler_tick, $async$completer);
                case 5:
                  // returning from await.
                  $async$temp1 = action;
                  $async$goto = 6;
                  return H.asyncHelper($async$temp1.call$0(), $async$Scheduler_tick, $async$completer);
                case 6:
                  // returning from await.
                case 3:
                  // for update
                  ++i;
                  // goto for condition
                  $async$goto = 2;
                  break;
                case 4:
                  // after for
                  // implicit return
                  return H.asyncHelper(null, 0, $async$completer, null);
                case 1:
                  // rethrow
                  return H.asyncHelper($async$currentError, 1, $async$completer);
              }
          }
          return H.asyncHelper(null, $async$Scheduler_tick, $async$completer, null);
        }, "call$3", "utils_Scheduler_tick$closure", 6, 0, 427, 103, [], 102, [], 33, [], "tick"], Scheduler_runLater: [function(action) {
          P.Timer_Timer(C.Duration_0, action);
        }, "call$1", "utils_Scheduler_runLater$closure", 2, 0, 313, 33, [], "runLater"], Scheduler_later: [function(action) {
          return P.Future_Future(action, null);
        }, "call$1", "utils_Scheduler_later$closure", 2, 0, 116, 33, [], "later"], Scheduler_after: [function(duration, action) {
          return P.Future_Future$delayed(duration, action, null);
        }, "call$2", "utils_Scheduler_after$closure", 4, 0, 314, 41, [], 33, [], "after"], Scheduler_runAfter: [function(duration, action) {
          return P.Timer_Timer(duration, action);
        }, "call$2", "utils_Scheduler_runAfter$closure", 4, 0, 315, 41, [], 33, [], "runAfter"]}
    },
    "+Scheduler": [3],
    Scheduler_every_closure: {
      "^": "Closure:114;_captured_action_0",
      call$1: [function(timer) {
        var $async$goto = 0, $async$completer = new P.Completer_Completer(), $async$handler = 1, $async$currentError, $async$self = this, $async$temp1, $async$temp2, $async$temp3;
        function $async$call$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$temp1 = P;
                $async$temp1 = $async$temp1;
                $async$temp2 = $async$self;
                $async$temp2 = $async$temp2._captured_action_0;
                $async$temp3 = P;
                $async$goto = 2;
                return H.asyncHelper($async$temp1.runZoned($async$temp2, null, null, $async$temp3.LinkedHashMap__makeLiteral(["dslink.scheduler.timer", timer])), $async$call$1, $async$completer);
              case 2:
                // returning from await.
                // implicit return
                return H.asyncHelper(null, 0, $async$completer, null);
              case 1:
                // rethrow
                return H.asyncHelper($async$currentError, 1, $async$completer);
            }
        }
        return H.asyncHelper(null, $async$call$1, $async$completer, null);
      }, null, null, 2, 0, 114, 216, [], "call"]
    },
    buildActionIO_closure: {
      "^": "Closure:2;_captured_types_0",
      call$1: [function(it) {
        return P.LinkedHashMap__makeLiteral(["name", it, "type", J.$index$asx(this._captured_types_0, it)]);
      }, null, null, 2, 0, 2, 144, [], "call"]
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
      var copies = [];
      return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
    },
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null) {
        t1 = $.Device__isOpera;
        if (t1 == null) {
          t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
          $.Device__isOpera = t1;
        }
        t1 = t1 !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
        $.Device__isWebKit = t1;
      }
      return t1;
    },
    convertNativeToDart_AcceptStructuredClone_findSlot: {
      "^": "Closure:115;_html_common$_captured_values_0,_captured_copies_1",
      call$1: function(value) {
        var t1, $length, i, t2;
        t1 = this._html_common$_captured_values_0;
        $length = t1.length;
        for (i = 0; i < $length; ++i) {
          t2 = t1[i];
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        t1.push(value);
        this._captured_copies_1.push(null);
        return $length;
      }
    },
    convertNativeToDart_AcceptStructuredClone_readSlot: {
      "^": "Closure:34;_captured_copies_2",
      call$1: function(i) {
        return this._captured_copies_2[i];
      }
    },
    convertNativeToDart_AcceptStructuredClone_writeSlot: {
      "^": "Closure:209;_captured_copies_3",
      call$2: function(i, x) {
        this._captured_copies_3[i] = x;
      }
    },
    convertNativeToDart_AcceptStructuredClone_walk: {
      "^": "Closure:2;_captured_mustCopy_4,_captured_findSlot_5,_captured_readSlot_6,_captured_writeSlot_7",
      call$1: function(e) {
        var proto, slot, copy, t1, t2, _i, key, $length, i;
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
        if (e instanceof RegExp)
          throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
        proto = Object.getPrototypeOf(e);
        if (proto === Object.prototype || proto === null) {
          slot = this._captured_findSlot_5.call$1(e);
          copy = this._captured_readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = P.LinkedHashMap__makeEmpty();
          this._captured_writeSlot_7.call$2(slot, copy);
          for (t1 = Object.keys(e), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            key = t1[_i];
            copy.$indexSet(0, key, this.call$1(e[key]));
          }
          return copy;
        }
        if (e instanceof Array) {
          slot = this._captured_findSlot_5.call$1(e);
          copy = this._captured_readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          t1 = J.getInterceptor$asx(e);
          $length = t1.get$length(e);
          copy = this._captured_mustCopy_4 ? new Array($length) : e;
          this._captured_writeSlot_7.call$2(slot, copy);
          for (t2 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
            t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
          return copy;
        }
        return e;
      }
    },
    FilteredElementList: {
      "^": "ListBase;_node,_childNodes",
      get$_filtered: function() {
        var t1 = this._childNodes;
        return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, H.getTypeArgumentByIndex(this, 0));
      },
      forEach$1: function(_, f) {
        C.JSArray_methods.forEach$1(this.get$_filtered(), f);
      },
      $indexSet: function(_, index, value) {
        J.replaceWith$1$x(this.get$_filtered()[index], value);
      },
      set$length: function(_, newLength) {
        var len, t1;
        len = this.get$_filtered().length;
        t1 = J.getInterceptor$n(newLength);
        if (t1.$ge(newLength, len))
          return;
        else if (t1.$lt(newLength, 0))
          throw H.wrapException(P.ArgumentError$("Invalid list length"));
        this.removeRange$2(0, newLength, len);
      },
      add$1: function(_, value) {
        this._childNodes._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2;
        for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      contains$1: function(_, needle) {
        if (!J.getInterceptor(needle).$isElement)
          return false;
        return needle.parentNode === this._node;
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on filtered list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      removeRange$2: function(_, start, end) {
        C.JSArray_methods.forEach$1(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._childNodes._this);
      },
      remove$1: function(_, element) {
        var i, indexElement;
        if (!J.getInterceptor(element).$isElement)
          return false;
        for (i = 0; i < this.get$_filtered().length; ++i) {
          indexElement = this.get$_filtered()[i];
          if (indexElement === element) {
            J.remove$0$ax(indexElement);
            return true;
          }
        }
        return false;
      },
      get$length: function(_) {
        return this.get$_filtered().length;
      },
      $index: function(_, index) {
        return this.get$_filtered()[index];
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.get$_filtered();
        t2 = new J.ArrayIterator(t1, t1.length, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        return t2;
      }
    },
    FilteredElementList__filtered_closure: {
      "^": "Closure:2;",
      call$1: function(n) {
        return !!J.getInterceptor(n).$isElement;
      }
    },
    FilteredElementList_removeRange_closure: {
      "^": "Closure:2;",
      call$1: function(el) {
        return J.remove$0$ax(el);
      }
    }
  }], ["logging", "package:logging/logging.dart",, N, {
    "^": "",
    Logger: {
      "^": "Object;name>,parent>,_level,_children>,children>,_logging$_controller",
      get$fullName: function() {
        var t1, t2, t3;
        t1 = this.parent;
        t2 = t1 == null || J.$eq$(J.get$name$x(t1), "");
        t3 = this.name;
        return t2 ? t3 : t1.get$fullName() + "." + t3;
      },
      get$level: function() {
        if ($.hierarchicalLoggingEnabled) {
          var t1 = this._level;
          if (t1 != null)
            return t1;
          t1 = this.parent;
          if (t1 != null)
            return t1.get$level();
        }
        return $._rootLevel;
      },
      set$level: function(value) {
        if ($.hierarchicalLoggingEnabled && this.parent != null)
          this._level = value;
        else {
          if (this.parent != null)
            throw H.wrapException(new P.UnsupportedError("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
          $._rootLevel = value;
        }
      },
      get$onRecord: function() {
        return this._getStream$0();
      },
      log$5: function(logLevel, message, error, stackTrace, zone) {
        var t, t1, exception, t2, t3, record, target;
        t1 = this.get$level();
        if (J.$ge$n(J.get$value$x(logLevel), J.get$value$x(t1))) {
          if (!!J.getInterceptor(message).$isFunction)
            message = message.call$0();
          t1 = message;
          if (typeof t1 !== "string")
            message = J.toString$0$(message);
          if (stackTrace == null) {
            t1 = $.recordStackTraceAtLevel;
            t1 = J.get$value$x(logLevel) >= t1.value;
          } else
            t1 = false;
          if (t1)
            try {
              t1 = "autogenerated stack trace for " + H.S(logLevel) + " " + H.S(message);
              throw H.wrapException(t1);
            } catch (exception) {
              H.unwrapException(exception);
              t = H.getTraceFromException(exception);
              stackTrace = t;
            }
          zone = $.Zone__current;
          t1 = this.get$fullName();
          t2 = Date.now();
          t3 = $.LogRecord__nextNumber;
          $.LogRecord__nextNumber = t3 + 1;
          record = new N.LogRecord(logLevel, message, t1, new P.DateTime(t2, false), t3, error, stackTrace, zone);
          if ($.hierarchicalLoggingEnabled)
            for (target = this; target != null;) {
              target._publish$1(record);
              target = J.get$parent$x(target);
            }
          else
            N.Logger_Logger("")._publish$1(record);
        }
      },
      log$4: function(logLevel, message, error, stackTrace) {
        return this.log$5(logLevel, message, error, stackTrace, null);
      },
      fine$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_FINE_500, message, error, stackTrace);
      },
      fine$1: function(message) {
        return this.fine$3(message, null, null);
      },
      info$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_INFO_800, message, error, stackTrace);
      },
      info$1: function(message) {
        return this.info$3(message, null, null);
      },
      warning$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
      },
      warning$1: function(message) {
        return this.warning$3(message, null, null);
      },
      severe$3: function(message, error, stackTrace) {
        return this.log$4(C.Level_SEVERE_1000, message, error, stackTrace);
      },
      severe$1: function(message) {
        return this.severe$3(message, null, null);
      },
      _getStream$0: function() {
        var t1, t2;
        if ($.hierarchicalLoggingEnabled || this.parent == null) {
          t1 = this._logging$_controller;
          if (t1 == null) {
            t1 = P.StreamController_StreamController$broadcast(null, null, true, N.LogRecord);
            this._logging$_controller = t1;
          }
          t1.toString;
          t2 = new P._BroadcastStream(t1);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
          return t2;
        } else
          return N.Logger_Logger("")._getStream$0();
      },
      _publish$1: function(record) {
        var t1 = this._logging$_controller;
        if (t1 != null) {
          if (!t1.get$_mayAddEvent())
            H.throwExpression(t1._addEventError$0());
          t1._sendData$1(record);
        }
      },
      static: {Logger_Logger: function($name) {
          return $.$get$Logger__loggers().putIfAbsent$2(0, $name, new N.Logger_Logger_closure($name));
        }}
    },
    Logger_Logger_closure: {
      "^": "Closure:1;_captured_name_0",
      call$0: function() {
        var thisName, dot, $parent, t1, t2;
        thisName = this._captured_name_0;
        if (C.JSString_methods.startsWith$1(thisName, "."))
          H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
        dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
        if (dot === -1)
          $parent = thisName !== "" ? N.Logger_Logger("") : null;
        else {
          $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
          thisName = C.JSString_methods.substring$1(thisName, dot + 1);
        }
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, N.Logger);
        t2 = new P.UnmodifiableMapView(t1);
        t2.$builtinTypeInfo = [null, null];
        t1 = new N.Logger(thisName, $parent, null, t1, t2, null);
        if ($parent != null)
          J.get$_children$x($parent).$indexSet(0, thisName, t1);
        return t1;
      }
    },
    Level: {
      "^": "Object;name>,value>",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof N.Level && this.value === other.value;
      },
      $lt: function(_, other) {
        return this.value < J.get$value$x(other);
      },
      $le: function(_, other) {
        return this.value <= J.get$value$x(other);
      },
      $gt: function(_, other) {
        return this.value > J.get$value$x(other);
      },
      $ge: function(_, other) {
        return this.value >= J.get$value$x(other);
      },
      get$hashCode: function(_) {
        return this.value;
      },
      toString$0: function(_) {
        return this.name;
      }
    },
    LogRecord: {
      "^": "Object;level<,message>,loggerName,time,sequenceNumber,error>,stackTrace<,zone<",
      toString$0: function(_) {
        return "[" + this.level.name + "] " + this.loggerName + ": " + H.S(this.message);
      }
    }
  }], ["metadata", "dart:_metadata",, H, {
    "^": "",
    SupportedBrowser: {
      "^": "Object;browserName,minimumVersion"
    },
    Experimental: {
      "^": "Object;"
    },
    DomName: {
      "^": "Object;name>"
    },
    DocsEditable: {
      "^": "Object;"
    },
    Unstable: {
      "^": "Object;"
    }
  }]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.set$connection$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$connection(receiver, value);
  };
  J.set$detail$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$detail(receiver, value);
  };
  J.set$length$asx = function(receiver, value) {
    return J.getInterceptor$asx(receiver).set$length(receiver, value);
  };
  J.set$onClose$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$onClose(receiver, value);
  };
  J.get$_children$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$_children(receiver);
  };
  J.get$attributes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$attributes(receiver);
  };
  J.get$buffer$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$buffer(receiver);
  };
  J.get$children$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$children(receiver);
  };
  J.get$connection$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$connection(receiver);
  };
  J.get$data$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$data(receiver);
  };
  J.get$defaultValue$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$defaultValue(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$isFinite$n = function(receiver) {
    return J.getInterceptor$n(receiver).get$isFinite(receiver);
  };
  J.get$isNaN$n = function(receiver) {
    return J.getInterceptor$n(receiver).get$isNaN(receiver);
  };
  J.get$isNotEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$keys$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$keys(receiver);
  };
  J.get$last$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$last(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$lengthInBytes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$lengthInBytes(receiver);
  };
  J.get$list$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$list(receiver);
  };
  J.get$name$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$name(receiver);
  };
  J.get$parent$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$parent(receiver);
  };
  J.get$path$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$path(receiver);
  };
  J.get$print$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$print(receiver);
  };
  J.get$responseText$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$responseText(receiver);
  };
  J.get$result$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$result(receiver);
  };
  J.get$single$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$single(receiver);
  };
  J.get$status$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$status(receiver);
  };
  J.get$stream$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$stream(receiver);
  };
  J.get$value$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$value(receiver);
  };
  J.get$values$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$values(receiver);
  };
  J.$add$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ns(receiver).$add(receiver, a0);
  };
  J.$and$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver & a0) >>> 0;
    return J.getInterceptor$n(receiver).$and(receiver, a0);
  };
  J.$ge$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver >= a0;
    return J.getInterceptor$n(receiver).$ge(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
      if (a0 >>> 0 === a0 && a0 < receiver.length)
        return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$indexSet$ax = function(receiver, a0, a1) {
    if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0] = a1;
    return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
  };
  J.$le$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver <= a0;
    return J.getInterceptor$n(receiver).$le(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.$mul$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver * a0;
    return J.getInterceptor$ns(receiver).$mul(receiver, a0);
  };
  J.$shl$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).$shl(receiver, a0);
  };
  J.$sub$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver - a0;
    return J.getInterceptor$n(receiver).$sub(receiver, a0);
  };
  J.$xor$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver ^ a0) >>> 0;
    return J.getInterceptor$n(receiver).$xor(receiver, a0);
  };
  J._clearChildren$0$x = function(receiver) {
    return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
  };
  J._replaceChild$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
  };
  J.add$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).add$1(receiver, a0);
  };
  J.add$4$ax = function(receiver, a0, a1, a2, a3) {
    return J.getInterceptor$ax(receiver).add$4(receiver, a0, a1, a2, a3);
  };
  J.addAll$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.asByteData$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).asByteData$2(receiver, a0, a1);
  };
  J.asUint8List$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).asUint8List$0(receiver);
  };
  J.clear$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).clear$0(receiver);
  };
  J.close$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).close$0(receiver);
  };
  J.close$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).close$1(receiver, a0);
  };
  J.codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
  };
  J.complete$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).complete$0(receiver);
  };
  J.complete$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).complete$1(receiver, a0);
  };
  J.contains$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.containsKey$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.endsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.indexOf$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
  };
  J.insertBefore$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).insertBefore$1(receiver, a0);
  };
  J.join$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).join$1(receiver, a0);
  };
  J.lastIndexOf$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).lastIndexOf$1(receiver, a0);
  };
  J.lastIndexOf$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).lastIndexOf$2(receiver, a0, a1);
  };
  J.list$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).list$1(receiver, a0);
  };
  J.load$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).load$1(receiver, a0);
  };
  J.map$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).map$1(receiver, a0);
  };
  J.matchAsPrefix$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
  };
  J.onDisconnect$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).onDisconnect$0(receiver);
  };
  J.print$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).print$1(receiver, a0);
  };
  J.remove$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).remove$0(receiver);
  };
  J.remove$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
  };
  J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
  };
  J.replaceAll$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
  };
  J.replaceWith$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
  };
  J.send$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).send$1(receiver, a0);
  };
  J.sendString$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).sendString$1(receiver, a0);
  };
  J.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
    return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.startsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
  };
  J.substring$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).substring$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.toList$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).toList$0(receiver);
  };
  J.toRadixString$1$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.where$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).where$1(receiver, a0);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.noSuchMethod$1$ = function(receiver, a0) {
    return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.HttpRequest_methods = W.HttpRequest.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNull_methods = J.JSNull.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.NativeByteBuffer_methods = H.NativeByteBuffer.prototype;
  C.NativeUint8List_methods = H.NativeUint8List.prototype;
  C.NodeList_methods = W.NodeList.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.Storage_methods = W.Storage.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C_Unspecified = new O.Unspecified();
  C.C__DelayedDone = new P._DelayedDone();
  C.C__Override = new P._Override();
  C.C__RootZone = new P._RootZone();
  C.DummyECDH_Zqn = new K.DummyECDH("");
  C.Duration_0 = new P.Duration(0);
  C.Endianness_false = new P.Endianness(false);
  C.Endianness_true = new P.Endianness(true);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JsonCodec_null_null = new P.JsonCodec(null, null);
  C.JsonDecoder_null = new P.JsonDecoder(null);
  C.Level_FINE_500 = new N.Level("FINE", 500);
  C.Level_INFO_800 = new N.Level("INFO", 800);
  C.Level_OFF_2000 = new N.Level("OFF", 2000);
  C.Level_SEVERE_1000 = new N.Level("SEVERE", 1000);
  C.Level_WARNING_900 = new N.Level("WARNING", 900);
  C.List_$is_$permission_$settings = Isolate.makeConstantList(["$is", "$permission", "$settings"]);
  C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.$int]);
  C.List_2Vk = Isolate.makeConstantList([0, 0, 32776, 33792, 1, 10240, 0, 0]);
  C.List_CVk = Isolate.makeConstantList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]);
  C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
  C.Level_ALL_0 = new N.Level("ALL", 0);
  C.Level_FINEST_300 = new N.Level("FINEST", 300);
  C.Level_FINER_400 = new N.Level("FINER", 400);
  C.Level_CONFIG_700 = new N.Level("CONFIG", 700);
  C.Level_SHOUT_1200 = new N.Level("SHOUT", 1200);
  C.List_O1R = Isolate.makeConstantList([C.Level_ALL_0, C.Level_FINEST_300, C.Level_FINER_400, C.Level_FINE_500, C.Level_CONFIG_700, C.Level_INFO_800, C.Level_WARNING_900, C.Level_SEVERE_1000, C.Level_SHOUT_1200, C.Level_OFF_2000]);
  C.List_cD9 = Isolate.makeConstantList(["none", "list", "read", "write", "config", "never"]);
  C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.$int]);
  C.List_empty1 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeVariableMirror]);
  C.List_empty = Isolate.makeConstantList([]);
  C.List_empty2 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeMirror]);
  C.List_gRj = Isolate.makeConstantList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]);
  C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
  C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
  C.List_qg40 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
  C.List_qg4 = Isolate.makeConstantList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]);
  C.List_salt_saltS = Isolate.makeConstantList(["salt", "saltS"]);
  C.Map_I543h = new H.ConstantStringMap(2, {salt: 0, saltS: 1}, C.List_salt_saltS);
  C.List_QoX = Isolate.makeConstantList(["$is", "$interface", "$permissions", "$name", "$type", "$invokable", "$writable", "$settings", "$params", "$columns", "$streamMeta"]);
  C.List_type = Isolate.makeConstantList(["type"]);
  C.Map_P3wDc = new H.ConstantStringMap(1, {type: "profile"}, C.List_type);
  C.Map_P3KlV = new H.ConstantStringMap(1, {type: "interface"}, C.List_type);
  C.List_type_require_writable = Isolate.makeConstantList(["type", "require", "writable"]);
  C.Map_yuSoH = new H.ConstantStringMap(3, {type: "list", require: 4, writable: 4}, C.List_type_require_writable);
  C.Map_P3Gh9 = new H.ConstantStringMap(1, {type: "string"}, C.List_type);
  C.Map_P3R1M = new H.ConstantStringMap(1, {type: "type"}, C.List_type);
  C.List_type_default = Isolate.makeConstantList(["type", "default"]);
  C.Map_c0Q8F = new H.ConstantStringMap(2, {type: "permission", default: "read"}, C.List_type_default);
  C.Map_c02Xj = new H.ConstantStringMap(2, {type: "permission", default: "never"}, C.List_type_default);
  C.Map_P37BY = new H.ConstantStringMap(1, {type: "map"}, C.List_type);
  C.Map_P3P1M = new H.ConstantStringMap(1, {type: "list"}, C.List_type);
  C.Map_QoUOt = new H.ConstantStringMap(11, {$is: C.Map_P3wDc, $interface: C.Map_P3KlV, $permissions: C.Map_yuSoH, $name: C.Map_P3Gh9, $type: C.Map_P3R1M, $invokable: C.Map_c0Q8F, $writable: C.Map_c02Xj, $settings: C.Map_P37BY, $params: C.Map_P3P1M, $columns: C.Map_P3P1M, $streamMeta: C.Map_P3P1M}, C.List_QoX);
  C.Map_cDSDM = new H.ConstantStringMap(6, {none: 0, list: 1, read: 2, write: 3, config: 4, never: 5}, C.List_cD9);
  C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty);
  C.List_empty3 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.Symbol0]);
  C.Map_empty0 = H.setRuntimeTypeInfo(new H.ConstantStringMap(0, {}, C.List_empty3), [P.Symbol0, null]);
  C.List_salt_saltS_saltL = Isolate.makeConstantList(["salt", "saltS", "saltL"]);
  C.Map_gVGBQ = new H.ConstantStringMap(3, {salt: 0, saltS: 1, saltL: 2}, C.List_salt_saltS_saltL);
  C.Symbol_call = new H.Symbol("call");
  C.Symbol_dynamic = new H.Symbol("dynamic");
  C.Symbol_void = new H.Symbol("void");
  C.Type_mTw = H.createRuntimeType("LinkedHashMap");
  C.TypeVariable_RrL = new H.TypeVariable(C.Type_mTw, "V", 3);
  C.Type_CNi = H.createRuntimeType("Completer");
  C.TypeVariable_ivX = new H.TypeVariable(C.Type_CNi, "T", 3);
  C.Type_JO4 = H.createRuntimeType("Future");
  C.TypeVariable_ssf = new H.TypeVariable(C.Type_JO4, "T", 3);
  C.TypeVariable_yHZ = new H.TypeVariable(C.Type_mTw, "K", 3);
  C.Type_2bx0 = H.createRuntimeType("Uint32List");
  C.Type_2bx = H.createRuntimeType("Uint16List");
  C.Type_3bx = H.createRuntimeType("Function");
  C.Type_8k0 = H.createRuntimeType("JSObject");
  C.Type_Jik = H.createRuntimeType("Uint8ClampedList");
  C.Type_K1J = H.createRuntimeType("$double");
  C.Type_LB70 = H.createRuntimeType("Float64List");
  C.Type_LB7 = H.createRuntimeType("Float32List");
  C.Type_O50 = H.createRuntimeType("Int32List");
  C.Type_RkP = H.createRuntimeType("ByteBuffer");
  C.Type_WLA = H.createRuntimeType("Uint8List");
  C.Type_Yyn = H.createRuntimeType("Null");
  C.Type_cv7 = H.createRuntimeType("num");
  C.Type_dynamic = H.createRuntimeType("dynamic");
  C.Type_ekJ = H.createRuntimeType("Int8List");
  C.Type_gT2 = H.createRuntimeType("JsTypeVariableMirror");
  C.Type_k8F = H.createRuntimeType("String");
  C.Type_lhE = H.createRuntimeType("bool");
  C.Type_tHn = H.createRuntimeType("$int");
  C.Type_uXf = H.createRuntimeType("Int16List");
  C.Type_zNC = H.createRuntimeType("ByteData");
  C.Utf8Codec_false = new P.Utf8Codec(false);
  C._ZoneFunction_3bB = new P._ZoneFunction(C.C__RootZone, P.async___rootCreatePeriodicTimer$closure());
  C._ZoneFunction_7G2 = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterBinaryCallback$closure());
  C._ZoneFunction_Eeh = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterUnaryCallback$closure());
  C._ZoneFunction_NMc = new P._ZoneFunction(C.C__RootZone, P.async___rootHandleUncaughtError$closure());
  C._ZoneFunction__RootZone__rootCreateTimer = new P._ZoneFunction(C.C__RootZone, P.async___rootCreateTimer$closure());
  C._ZoneFunction__RootZone__rootErrorCallback = new P._ZoneFunction(C.C__RootZone, P.async___rootErrorCallback$closure());
  C._ZoneFunction__RootZone__rootFork = new P._ZoneFunction(C.C__RootZone, P.async___rootFork$closure());
  C._ZoneFunction__RootZone__rootPrint = new P._ZoneFunction(C.C__RootZone, P.async___rootPrint$closure());
  C._ZoneFunction__RootZone__rootRegisterCallback = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterCallback$closure());
  C._ZoneFunction__RootZone__rootRun = new P._ZoneFunction(C.C__RootZone, P.async___rootRun$closure());
  C._ZoneFunction__RootZone__rootRunBinary = new P._ZoneFunction(C.C__RootZone, P.async___rootRunBinary$closure());
  C._ZoneFunction__RootZone__rootRunUnary = new P._ZoneFunction(C.C__RootZone, P.async___rootRunUnary$closure());
  C._ZoneFunction__RootZone__rootScheduleMicrotask = new P._ZoneFunction(C.C__RootZone, P.async___rootScheduleMicrotask$closure());
  C._ZoneSpecification_ALf = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  $.Primitives_mirrorFunctionCacheName = "$cachedFunction";
  $.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $.deferredLoadHook = null;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $.printToZone = null;
  $.JsMirrorSystem__librariesByName = null;
  $.JsMirrorSystem__hasInstalledDeferredLoadHook = false;
  $.classMirrors = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $._RootZone__rootDelegate = null;
  $.Expando__keyCount = 0;
  $._isCryptoProviderLocked = false;
  $.SimpleNodeProvider_instance = null;
  $.DsTimer__lastTimeRun = -1;
  $.DsTimer__pending = false;
  $.DsTimer__looping = false;
  $.DsTimer__mergeCycle = false;
  $.DsTimer_timerTs50 = -1;
  $.DsTimer_timerTimer = null;
  $._logger = null;
  $.Device__isOpera = null;
  $.Device__isWebKit = null;
  $.hierarchicalLoggingEnabled = false;
  $.recordStackTraceAtLevel = C.Level_OFF_2000;
  $._rootLevel = C.Level_INFO_800;
  $.LogRecord__nextNumber = 0;
  $.JSON = C.JsonCodec_null_null;
  $.unspecified = C.C_Unspecified;
  $.ListController__ignoreProfileProps = C.List_$is_$permission_$settings;
  $.Permission_NONE = 0;
  $.Permission_LIST = 1;
  $.Permission_READ = 2;
  $.Permission_WRITE = 3;
  $.Permission_CONFIG = 4;
  $.Permission_NEVER = 5;
  $.Permission_names = C.List_cD9;
  $.Permission_nameParser = C.Map_cDSDM;
  $.ErrorPhase_request = "request";
  $.ErrorPhase_response = "response";
  $.StreamStatus_initialize = "initialize";
  $.StreamStatus_open = "open";
  $.StreamStatus_closed = "closed";
  $.Configs__globalConfigs = C.Map_QoUOt;
  $.BrowserECDHLink_saltNameMap = C.Map_gVGBQ;
  $.BrowserUserLink_saltNameMap = C.Map_I543h;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash]($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var staticName = lazies[i++];
      var lazyValue = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["IsolateNatives_thisScript", "$get$IsolateNatives_thisScript", "thisScript", function() {
    return H.IsolateNatives_computeThisScript();
  }, "IsolateNatives_workerIds", "$get$IsolateNatives_workerIds", "workerIds", function() {
    var t1 = new P.Expando(null);
    t1.$builtinTypeInfo = [P.$int];
    return t1;
  }, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", "noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
        return "$receiver$";
      }}));
  }, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", "notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
        return "$receiver$";
      }}));
  }, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", "nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", "nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", "undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", "undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", "nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", "nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", "undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", "undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "Symbol_publicSymbolPattern", "$get$Symbol_publicSymbolPattern", "publicSymbolPattern", function() {
    return P.RegExp_RegExp("^(?:(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)$|(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*(?:=?$|[.](?!$)))+?$", true, false);
  }, "JsMirrorSystem__dynamicType", "$get$JsMirrorSystem__dynamicType", "_dynamicType", function() {
    return H.JsTypeMirror$(C.Symbol_dynamic);
  }, "JsMirrorSystem__voidType", "$get$JsMirrorSystem__voidType", "_voidType", function() {
    return H.JsTypeMirror$(C.Symbol_void);
  }, "currentJsMirrorSystem", "$get$currentJsMirrorSystem", "currentJsMirrorSystem", function() {
    return new H.JsMirrorSystem(null, new H.JsIsolateMirror(H._globalState().currentContext));
  }, "mangledNames", "$get$mangledNames", "mangledNames", function() {
    return new H._LazyMangledInstanceNamesMap(init.mangledNames);
  }, "reflectiveNames", "$get$reflectiveNames", "reflectiveNames", function() {
    return new H._LazyReflectiveNamesMap(init.mangledNames, true, 0, null);
  }, "mangledGlobalNames", "$get$mangledGlobalNames", "mangledGlobalNames", function() {
    return new H._LazyMangledNamesMap(init.mangledGlobalNames);
  }, "_AsyncRun_scheduleImmediateClosure", "$get$_AsyncRun_scheduleImmediateClosure", "scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "Future__nullFuture", "$get$Future__nullFuture", "_nullFuture", function() {
    return P.Future_Future$value(null, null);
  }, "_RootZone__rootMap", "$get$_RootZone__rootMap", "_rootMap", function() {
    return P.HashMap_HashMap(null, null, null, null, null);
  }, "_toStringVisiting", "$get$_toStringVisiting", "_toStringVisiting", function() {
    return [];
  }, "context", "$get$context", "context", function() {
    return P._wrapToDart(self);
  }, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartObject");
  }, "_DART_CLOSURE_PROPERTY_NAME", "$get$_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "_dartProxyCtor", "$get$_dartProxyCtor", "_dartProxyCtor", function() {
    return function DartObject(o) {
      this.o = o;
    };
  }, "LocalDataStorage_INSTANCE", "$get$LocalDataStorage_INSTANCE", "INSTANCE", function() {
    return new Y.LocalDataStorage();
  }, "DSError_PERMISSION_DENIED", "$get$DSError_PERMISSION_DENIED", "PERMISSION_DENIED", function() {
    return new O.DSError("permissionDenied", null, null, null, "response");
  }, "DSError_INVALID_METHOD", "$get$DSError_INVALID_METHOD", "INVALID_METHOD", function() {
    return new O.DSError("invalidMethod", null, null, null, "response");
  }, "DSError_NOT_IMPLEMENTED", "$get$DSError_NOT_IMPLEMENTED", "NOT_IMPLEMENTED", function() {
    return new O.DSError("notImplemented", null, null, null, "response");
  }, "DSError_INVALID_PATH", "$get$DSError_INVALID_PATH", "INVALID_PATH", function() {
    return new O.DSError("invalidPath", null, null, null, "response");
  }, "DSError_INVALID_PATHS", "$get$DSError_INVALID_PATHS", "INVALID_PATHS", function() {
    return new O.DSError("invalidPaths", null, null, null, "response");
  }, "DSError_INVALID_VALUE", "$get$DSError_INVALID_VALUE", "INVALID_VALUE", function() {
    return new O.DSError("invalidValue", null, null, null, "response");
  }, "DSError_INVALID_PARAMETER", "$get$DSError_INVALID_PARAMETER", "INVALID_PARAMETER", function() {
    return new O.DSError("invalidParameter", null, null, null, "response");
  }, "DSError_DISCONNECTED", "$get$DSError_DISCONNECTED", "DISCONNECTED", function() {
    return new O.DSError("disconnected", null, null, null, "request");
  }, "defaultProfileMap", "$get$defaultProfileMap", "defaultProfileMap", function() {
    return P.LinkedHashMap__makeLiteral(["node", P.LinkedHashMap__makeEmpty(), "static", P.LinkedHashMap__makeEmpty(), "getHistory", P.LinkedHashMap__makeLiteral(["$invokable", "read", "$result", "table", "$params", [P.LinkedHashMap__makeLiteral(["name", "Timerange", "type", "string", "editor", "daterange"]), P.LinkedHashMap__makeLiteral(["name", "Interval", "type", "enum", "editor", Q.buildEnumType(["default", "none", "1Y", "3N", "1N", "1W", "1D", "12H", "6H", "4H", "3H", "2H", "1H", "30M", "15M", "10M", "5M", "1M", "30S", "15S", "10S", "5S", "1S"])]), P.LinkedHashMap__makeLiteral(["name", "Rollup", "type", Q.buildEnumType(["avg", "min", "max", "sum", "first", "last", "count"])])], "$columns", [P.LinkedHashMap__makeLiteral(["name", "timestamp", "type", "time"]), P.LinkedHashMap__makeLiteral(["name", "value", "type", "dynamic"])]]), "broker", P.LinkedHashMap__makeLiteral(["unode", P.LinkedHashMap__makeLiteral(["addChild", P.LinkedHashMap__makeLiteral(["$invokable", "config", "$params", [P.LinkedHashMap__makeLiteral(["name", "Name", "type", "string"])]]), "addLink", P.LinkedHashMap__makeLiteral(["$invokable", "config", "$params", [P.LinkedHashMap__makeLiteral(["name", "Name", "type", "string"]), P.LinkedHashMap__makeLiteral(["name", "Id", "type", "string"])]]), "remove", P.LinkedHashMap__makeLiteral(["$invokable", "config"])]), "unoderoot", P.LinkedHashMap__makeLiteral(["addChild", P.LinkedHashMap__makeLiteral(["$invokable", "config", "$params", [P.LinkedHashMap__makeLiteral(["name", "Name", "type", "string"])]]), "addLink", P.LinkedHashMap__makeLiteral(["$invokable", "config", "$params", [P.LinkedHashMap__makeLiteral(["name", "Name", "type", "string"]), P.LinkedHashMap__makeLiteral(["name", "Id", "type", "string"])]])])])]);
  }, "Path_invalidChar", "$get$Path_invalidChar", "invalidChar", function() {
    return P.RegExp_RegExp("[\\.\\\\\\?\\*:|\"<>]", true, false);
  }, "Path_invalidNameChar", "$get$Path_invalidNameChar", "invalidNameChar", function() {
    return P.RegExp_RegExp("[\\/\\.\\\\\\?\\*:|\"<>]", true, false);
  }, "ValueUpdate_TIME_ZONE", "$get$ValueUpdate_TIME_ZONE", "TIME_ZONE", function() {
    return new O.closure0().call$0();
  }, "_CRYPTO_PROVIDER", "$get$_CRYPTO_PROVIDER", "_CRYPTO_PROVIDER", function() {
    return $.$get$NodeCryptoProvider_INSTANCE();
  }, "_crypto", "$get$_crypto", "_crypto", function() {
    return M.require("crypto");
  }, "_curve", "$get$_curve", "_curve", function() {
    return M.require("dhcurve");
  }, "NodeCryptoProvider_INSTANCE", "$get$NodeCryptoProvider_INSTANCE", "INSTANCE", function() {
    return new M.NodeCryptoProvider(new M.DSRandomImpl(), null, -1);
  }, "DefaultDefNodes__defaultDefs", "$get$DefaultDefNodes__defaultDefs", "_defaultDefs", function() {
    return P.LinkedHashMap__makeLiteral(["node", P.LinkedHashMap__makeEmpty(), "static", P.LinkedHashMap__makeEmpty(), "getHistory", P.LinkedHashMap__makeLiteral(["$invokable", "read", "$result", "table", "$params", [P.LinkedHashMap__makeLiteral(["name", "Timerange", "type", "string", "editor", "daterange"]), P.LinkedHashMap__makeLiteral(["name", "Interval", "type", "enum", "editor", Q.buildEnumType(["default", "none", "1Y", "3N", "1N", "1W", "1D", "12H", "6H", "4H", "3H", "2H", "1H", "30M", "15M", "10M", "5M", "1M", "30S", "15S", "10S", "5S", "1S"])]), P.LinkedHashMap__makeLiteral(["name", "Rollup", "type", Q.buildEnumType(["avg", "min", "max", "sum", "first", "last", "count"])])], "$columns", [P.LinkedHashMap__makeLiteral(["name", "timestamp", "type", "time"]), P.LinkedHashMap__makeLiteral(["name", "value", "type", "dynamic"])]])]);
  }, "DefaultDefNodes_nameMap", "$get$DefaultDefNodes_nameMap", "nameMap", function() {
    return new L.closure().call$0();
  }, "DefaultDefNodes_pathMap", "$get$DefaultDefNodes_pathMap", "pathMap", function() {
    return new L.closure1().call$0();
  }, "Configs_global", "$get$Configs_global", "global", function() {
    var t1 = new T.Configs(P.LinkedHashMap__makeEmpty());
    t1.load$1(0, C.Map_QoUOt);
    return t1;
  }, "Configs_defaultConfig", "$get$Configs_defaultConfig", "defaultConfig", function() {
    return T.ConfigSetting$fromMap("", C.Map_empty);
  }, "DsJson_instance", "$get$DsJson_instance", "instance", function() {
    return new Q.DsJsonCodecImpl(P.JsonEncoder$(Q.utils_DsJsonCodecImpl__safeEncoder$closure()), P.JsonDecoder$(null), null);
  }, "DsTimer__callbacks", "$get$DsTimer__callbacks", "_callbacks", function() {
    return [];
  }, "DsTimer__pendingTimer", "$get$DsTimer__pendingTimer", "_pendingTimer", function() {
    var t1, t2;
    t1 = Q.TimerFunctions;
    t2 = new P.LinkedList(0, 0, null, null);
    t2.$builtinTypeInfo = [t1];
    t2.LinkedList$0(t1);
    return t2;
  }, "DsTimer__pendingTimerMap", "$get$DsTimer__pendingTimerMap", "_pendingTimerMap", function() {
    return P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, Q.TimerFunctions);
  }, "DsTimer__functionsMap", "$get$DsTimer__functionsMap", "_functionsMap", function() {
    return P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, Q.TimerFunctions);
  }, "Interval_ONE_MILLISECOND", "$get$Interval_ONE_MILLISECOND", "ONE_MILLISECOND", function() {
    return Q.Interval$forMilliseconds(1);
  }, "Interval_TWO_MILLISECONDS", "$get$Interval_TWO_MILLISECONDS", "TWO_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(2);
  }, "Interval_FOUR_MILLISECONDS", "$get$Interval_FOUR_MILLISECONDS", "FOUR_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(4);
  }, "Interval_EIGHT_MILLISECONDS", "$get$Interval_EIGHT_MILLISECONDS", "EIGHT_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(8);
  }, "Interval_SIXTEEN_MILLISECONDS", "$get$Interval_SIXTEEN_MILLISECONDS", "SIXTEEN_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(16);
  }, "Interval_THIRTY_MILLISECONDS", "$get$Interval_THIRTY_MILLISECONDS", "THIRTY_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(30);
  }, "Interval_FIFTY_MILLISECONDS", "$get$Interval_FIFTY_MILLISECONDS", "FIFTY_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(50);
  }, "Interval_ONE_HUNDRED_MILLISECONDS", "$get$Interval_ONE_HUNDRED_MILLISECONDS", "ONE_HUNDRED_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(100);
  }, "Interval_TWO_HUNDRED_MILLISECONDS", "$get$Interval_TWO_HUNDRED_MILLISECONDS", "TWO_HUNDRED_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(200);
  }, "Interval_THREE_HUNDRED_MILLISECONDS", "$get$Interval_THREE_HUNDRED_MILLISECONDS", "THREE_HUNDRED_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(300);
  }, "Interval_QUARTER_SECOND", "$get$Interval_QUARTER_SECOND", "QUARTER_SECOND", function() {
    return Q.Interval$forMilliseconds(250);
  }, "Interval_HALF_SECOND", "$get$Interval_HALF_SECOND", "HALF_SECOND", function() {
    return Q.Interval$forMilliseconds(500);
  }, "Interval_ONE_SECOND", "$get$Interval_ONE_SECOND", "ONE_SECOND", function() {
    return Q.Interval$forSeconds(1);
  }, "Interval_TWO_SECONDS", "$get$Interval_TWO_SECONDS", "TWO_SECONDS", function() {
    return Q.Interval$forSeconds(2);
  }, "Interval_THREE_SECONDS", "$get$Interval_THREE_SECONDS", "THREE_SECONDS", function() {
    return Q.Interval$forSeconds(3);
  }, "Interval_FOUR_SECONDS", "$get$Interval_FOUR_SECONDS", "FOUR_SECONDS", function() {
    return Q.Interval$forSeconds(4);
  }, "Interval_FIVE_SECONDS", "$get$Interval_FIVE_SECONDS", "FIVE_SECONDS", function() {
    return Q.Interval$forSeconds(5);
  }, "Interval_ONE_MINUTE", "$get$Interval_ONE_MINUTE", "ONE_MINUTE", function() {
    return new Q.Interval(P.Duration$(0, 0, 0, 0, 1, 0));
  }, "Logger__loggers", "$get$Logger__loggers", "_loggers", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
  }]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = [null, "value", "name", "path", "m", "response", "error", "callback", "responder", "node", "byteOffset", "key", C.C__Override, C.Endianness_false, "endian", "stackTrace", "self", "parent", "requester", "zone", "val", "columns", "meta", "ackId", "maxPermission", 4, "str", "f", "v", "e", true, "updates", "_", "action", "params", "cacheLevel", "streamStatus", "data", "rid", "salt", "k", "duration", "x", "update", 1, "input", false, "controller", "arg", "provider", "sid", "type", 0, "stack", "conn", "basePath", "n", "list", "computation", "status", "isRequester", "isResponder", "invocation", "nodeProvider", "element", "cachelevel", "o", "publicKeyRemote", "each", "other", "resp", "parentNode", 0 / 0, "profiles", "rows", "defaultValue", "force", "obj", "processors", "old", "bytes", "hash", "dsId", "channel", "reconnect", "updater", C.TypeVariable_yHZ, "saltId", "prefix", "length", "subscription", "cache", "defName", "values", "level", "onError", "req", "arg2", "arg1", "object", "err", C.TypeVariable_RrL, "interval", "times", "captureThis", "wsUpdateUri", "httpUpdateUri", "socket", "clientLink", "onConnect", "onTimeout", "ignored", "arg3", "s", "arg4", "idx", "event", "authError", "connection", "t", "messages", "keyValuePairs", "a", "equals", "msg", "detail", "phase", "hashCode", "connected", "nameOrPath", "isValidKey", 5, "iterable", "defaultVal", "keys", "futures", "eagerError", "entry", "cleanUp", "byteString", "ts", "xhr", "count", "sum", "it", "max", "oldUpdate", "newUpdate", "ackid", "handler", C.TypeVariable_ivX, "processor", "arguments", "parameter", "index", "base", "buffer", "offsetInBytes", "closure", "result", "isolate", "numberOfArguments", "brokerUrl", "remotePath", "line", "defaultNodes", "specification", "zoneValues", "rawColumns", "dataStore", "loadNodes", "reflectee", "i", "changes", "theError", "otherwise", "listUpdate", "futureValue", "handleData", "handleDone", "handleError", "resumeSignal", "application/octet-stream", "theStackTrace", "keepGoing", "sub", "request", "sender", "profile", "reqId", "_permitted", "nodeprovider", "inputs", "test", "withChildren", C.C_Unspecified, C.TypeVariable_ssf, "vals", "id", "storage", "open", "stat", "addToTree", "waitingAckId", "receivedAckId", "_conn", "map", "ms", "seconds", "minutes", "hours", "dsIdPrefix", "privateKey", "types", "timeLimit", "record", "timer", "min"];
  init.types = [{func: 1, void: true}, {func: 1}, {func: 1, args: [,]}, P.Object, {func: 1, args: [,,]}, P.String, P.bool, P.$int, {func: 1, ret: P.bool}, [P.Map, P.String, P.Object], Q.Interval, {func: 1, void: true, args: [P.Map]}, P.StreamSubscription, P.Map, {func: 1, void: true, args: [P.$int]}, {func: 1, ret: P.String}, {func: 1, args: [P.String]}, {func: 1, void: true, args: [P.String]}, [P.Map, P.String, O.Node0], O.Node0, L.Requester, O.DSError, {func: 1, ret: P.Future}, P.List, {func: 1, ret: P.$int}, {func: 1, args: [P.String,,]}, O.ValueUpdate, L.RequestUpdater, [P.Map, P.Function, P.$int], {func: 1, ret: P.Map}, {func: 1, args: [P.String, P.Object]}, {func: 1, ret: P.$int, args: [P.$int], opt: [P.Endianness]}, {func: 1, void: true, args: [P.$int, P.$int], opt: [P.Endianness]}, L.RemoteNode, {func: 1, args: [P.$int]}, {func: 1, void: true, args: [P.String, O.Node0]}, [P.List, P.String], T.Responder, [Q.BroadcastStreamController, P.String], {func: 1, ret: T.Response, args: [P.String, P.Object, T.Responder, T.Response]}, {func: 1, void: true, args: [{func: 1, void: true}]}, T.LocalNode, [P.List, O.ConnectionProcessor], [P.Map, P.String, P.$int], L.Request, {func: 1, void: true, args: [P.String, P.List, P.List, P.Map, O.DSError]}, {func: 1, ret: P.bool, args: [P.String, P.String]}, {func: 1, ret: O.Path, args: [P.Object], opt: [P.String]}, P.Function, {func: 1, ret: T.Response, args: [P.String, T.Responder, T.Response]}, {func: 1, void: true, opt: [O.DSError]}, T.NodeProvider, K.PrivateKey, T.SimpleNodeProvider, {func: 1, ret: P.String, args: [P.String]}, {func: 1, args: [P.Map]}, {func: 1, ret: O.ConnectionChannel}, {func: 1, args: [, P.StackTrace]}, {func: 1, ret: T.LocalNode, args: [P.String]}, O.ConnectionChannel, [P.List, O.TableColumn], [P.List, P.Map], [P.Completer, O.ConnectionChannel], {func: 1, ret: P.Object, args: [P.String]}, O.ClientLink, {func: 1, void: true, args: [P.List]}, {func: 1, ret: [P.Future, O.ConnectionChannel]}, K.ECDH, {func: 1, ret: [P.Future, L.Requester]}, {func: 1, void: true, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: T.Response, args: [P.Object, T.Responder, T.Response], opt: [P.$int]}, P.num, O.ConnectionHandler, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, void: true, args: [P.$int, P.$int]}, {func: 1, args: [P.bool]}, {func: 1, ret: P.String, args: [P.$int]}, {func: 1, args: [P.String, P.Map]}, {func: 1, ret: P.$int, args: [P.$int]}, {func: 1, void: true, args: [, P.StackTrace]}, T.Response, T.SimpleNode, {func: 1, ret: O.ProcessorResult}, {func: 1, ret: [P.Future, L.RequesterUpdate]}, {func: 1, void: true, args: [P.String, P.String]}, {func: 1, void: true, opt: [,]}, {func: 1, void: true, args: [P.String, P.Object]}, {func: 1, void: true, args: [,], opt: [P.StackTrace]}, {func: 1, void: true, args: [P.bool]}, {func: 1, args: [,], opt: [,]}, {func: 1, ret: P.String, args: [,]}, {func: 1, void: true, args: [{func: 1, void: true, args: [P.String, P.Object]}]}, {func: 1, args: [P.String, O.Node0]}, {func: 1, ret: [P.Future, K.PrivateKey]}, {func: 1, ret: K.PrivateKey}, {func: 1, ret: K.PrivateKey, args: [P.String]}, {func: 1, ret: K.PublicKey, args: [P.Uint8List]}, {func: 1, void: true, args: [L.RequesterListUpdate]}, {func: 1, args: [L.RequesterListUpdate]}, {func: 1, args: [{func: 1}]}, {func: 1, void: true, args: [{func: 1, args: [,]}]}, {func: 1, args: [P.String, L.ReqSubscribeController]}, {func: 1, args: [P.$int, L.ReqSubscribeController]}, {func: 1, void: true, args: [O.ValueUpdate]}, {func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, T.LocalNode], opt: [P.$int]}, {func: 1, ret: T.RespSubscribeListener, args: [{func: 1, args: [,]}], opt: [P.$int]}, {func: 1, args: [, T.LocalNode]}, {func: 1, ret: T.SimpleNode, args: [P.String]}, {func: 1, ret: P.Zone, named: {specification: P.ZoneSpecification, zoneValues: P.Map}}, {func: 1, args: [P.Symbol0,,]}, {func: 1, args: [, O.Node0]}, {func: 1, args: [, P.$int, P.$int]}, {func: 1, opt: [P.bool]}, {func: 1, args: [P.$int, Q.BinaryData]}, {func: 1, ret: P.Future, args: [,]}, {func: 1, ret: P.$int, args: [,]}, {func: 1, ret: P.Future, args: [{func: 1}]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: K.DSRandom}, {func: 1, args: [L.RemoteNode, L.Requester]}, {func: 1, args: [T.Responder, P.$int]}, {func: 1, args: [T.Responder, P.$int, T.LocalNode]}, {func: 1, args: [{func: 1, args: [,]},,]}, {func: 1, args: [{func: 1, args: [,,]},,,]}, {func: 1, ret: {func: 1}, args: [{func: 1}]}, {func: 1, ret: {func: 1, args: [,]}, args: [{func: 1, args: [,]}]}, Y.DataStorage, {func: 1, ret: {func: 1, args: [,,]}, args: [{func: 1, args: [,,]}]}, {func: 1, ret: P.AsyncError, args: [P.Object, P.StackTrace]}, [P.Completer, L.Requester], {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.Timer, args: [P.Duration, {func: 1, void: true}]}, {func: 1, ret: P.Timer, args: [P.Duration, {func: 1, void: true, args: [P.Timer]}]}, Y.WebSocketConnection, {func: 1, ret: P.Type}, O.PassiveChannel, [P.ListQueue, O.ConnectionAckGroup], O.Connection, {func: 1, args: [P.String], opt: [P.$int]}, {func: 1, ret: P.num, args: [P.$int], opt: [P.Endianness]}, {func: 1, args: [P.Invocation]}, {func: 1, void: true, args: [P.$int, P.num], opt: [P.Endianness]}, {func: 1, ret: [P.List, P.String], args: [[P.List, P.$int]]}, P.RegExp, {func: 1, void: true, args: [,,]}, [P.List, P.List], {func: 1, args: [P.Object]}, K.CryptoProvider, L.ListController, L.ReqSubscribeController, L.RequesterUpdate, [P.LinkedHashSet, P.String], [P.Completer, L.RequesterUpdate], L.SubscribeRequest, [P.Map, P.$int, L.ReqSubscribeController], O.ConnectionProcessor, {func: 1, ret: T.LocalNode}, {func: 1, args: [O.ValueUpdate]}, {func: 1, ret: [P.Future, P.String], args: [P.String]}, T.LocalNodeImpl, T.IPermissionManager, T.SubscribeResponse, {func: 1, void: true, args: [T.InvokeResponse], typedef: T.OnInvokeClosed}, {func: 1, void: true, args: [T.InvokeResponse, P.$int, P.$int], typedef: T.OnInvokeAcked}, {func: 1, ret: K.ECDH}, T.SimpleHiddenNode, O.Link, {func: 1, ret: T.SimpleNode, args: [P.String, P.Map, T.SimpleNodeProvider]}, {func: 1, void: true, args: [P.Zone, P.String]}, {func: 1, ret: P.Zone, args: [P.Zone, P.ZoneSpecification, P.Map]}, {func: 1, ret: P.$int, args: [P.String, T.Responder]}, {func: 1, ret: [Q.BroadcastStreamController, P.String]}, {func: 1, ret: [P.Stream, P.String]}, {func: 1, ret: O.Node0, args: [P.String]}, {func: 1, void: true, args: [{func: 1, args: [O.ValueUpdate]}]}, {func: 1, ret: O.ValueUpdate}, {func: 1, void: true, args: [P.Object], named: {force: P.bool}}, {func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, O.Node0], opt: [P.$int]}, {func: 1, void: true, args: [[P.List, P.String]]}, {func: 1, ret: T.Response, args: [T.Response]}, {func: 1, void: true, args: [P.$int], named: {error: O.DSError, response: T.Response}}, {func: 1, void: true, args: [T.Response, P.List], named: {columns: [P.List, O.TableColumn], meta: P.Map, streamStatus: P.String}}, {func: 1, void: true, args: [P.List], named: {columns: P.List, meta: P.Map, streamStatus: P.String}}, {func: 1, void: true, args: [{func: 1, void: true, args: [P.String, O.Node0]}]}, {func: 1, void: true, args: [P.String, T.LocalNode, P.$int, P.$int]}, {func: 1, void: true, args: [T.RespSubscribeController]}, {func: 1, ret: P.List}, {func: 1, void: true, args: [P.List], opt: [P.String, P.Map]}, {func: 1, void: true, opt: [T.InvokeResponse]}, {func: 1, ret: T.LocalNode, args: [P.String], opt: [P.bool]}, {func: 1, void: true, opt: [P.Object]}, {func: 1, void: true, opt: [P.Map, P.Map]}, {func: 1, void: true, args: [P.String, T.SimpleNode]}, {func: 1, ret: T.SimpleNode, args: [P.String, P.Map]}, {func: 1, ret: T.Responder, args: [P.String]}, {func: 1, ret: P.Future, args: [P.Function], named: {test: {func: 1, ret: P.bool, args: [,]}}}, {func: 1, ret: T.SimpleNode}, {func: 1, ret: P.bool, args: [P.Object]}, {func: 1, args: [P.Zone, {func: 1}]}, {func: 1, ret: T.SimpleNode, args: [P.String], opt: [P.Map]}, {func: 1, void: true, args: [,], named: {name: P.String}}, {func: 1, ret: O.Path}, {func: 1, ret: O.Path, args: [P.String]}, {func: 1, void: true, args: [P.Object]}, {func: 1, void: true, args: [P.String], opt: [P.bool]}, {func: 1, args: [P.Zone, {func: 1, args: [,]},,]}, {func: 1, args: [P.Function]}, {func: 1, ret: P.$int, args: [T.Responder]}, {func: 1, args: [P.Zone, {func: 1, args: [,,]},,,]}, {func: 1, args: [P.$int,,]}, {func: 1, ret: P.InstanceMirror, args: [P.Object]}, {func: 1, ret: [P.Future, P.List], args: [[P.Iterable, P.Future]], named: {cleanUp: {func: 1, void: true, args: [,]}, eagerError: P.bool}}, {func: 1, ret: P.Future, args: [P.Iterable, {func: 1, args: [,]}]}, {func: 1, ret: {func: 1}, args: [P.Zone, {func: 1}]}, {func: 1, ret: T.LocalNode, args: [P.String, P.Map]}, {func: 1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1}]}, {func: 1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, args: [,]},,]}, {func: 1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, args: [,,]},,,]}, {func: 1, ret: {func: 1}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1}]}, {func: 1, ret: {func: 1, args: [,]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, args: [,]}]}, {func: 1, ret: {func: 1, args: [,,]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, args: [,,]}]}, {func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}, {func: 1, void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1}]}, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, void: true}]}, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, void: true, args: [P.Timer]}]}, {func: 1, void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}, {func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, P.Map]}, {func: 1, ret: P.bool, args: [,,]}, {func: 1, ret: {func: 1, args: [,]}, args: [P.Zone, {func: 1, args: [,]}]}, {func: 1, ret: P.bool, args: [P.Object, P.Object]}, {func: 1, ret: P.$int, args: [P.Object]}, {func: 1, ret: P.ByteData, args: [P.$int]}, {func: 1, ret: P.ByteData, args: [P.ByteBuffer], opt: [P.$int, P.$int]}, {func: 1, args: [P.String, P.String], named: {dataStore: Y.DataStorage, defaultNodes: P.Map, isRequester: P.bool, isResponder: P.bool, loadNodes: P.bool, profiles: P.Map, provider: T.NodeProvider}}, {func: 1, ret: B.BrowserUtils}, {func: 1, ret: [P.Future, P.String], args: [P.String, P.String]}, {func: 1, ret: P.String, args: [P.ByteData], named: {type: P.String}}, {func: 1, ret: Y.DataStorage}, {func: 1, ret: [P.Future, K.PrivateKey], named: {storage: Y.DataStorage}}, {func: 1, args: [P.String, P.String, K.PrivateKey], named: {isRequester: P.bool, isResponder: P.bool, nodeProvider: T.NodeProvider}}, {func: 1, named: {httpUpdateUri: P.String, isRequester: P.bool, isResponder: P.bool, nodeProvider: T.NodeProvider, wsUpdateUri: P.String}}, {func: 1, args: [W.WebSocket, O.ClientLink], named: {onConnect: P.Function}}, {func: 1, ret: O.Connection}, {func: 1, args: [[P.List, P.Map], [P.List, O.ConnectionProcessor]]}, {func: 1, args: [P.$int, [P.List, O.ConnectionProcessor]]}, {func: 1, ret: O.Link}, {func: 1, ret: O.ServerLink}, {func: 1, ret: O.ClientLink}, {func: 1, ret: O.ServerLinkManager}, {func: 1, ret: O.StreamStatus}, {func: 1, ret: O.ErrorPhase}, {func: 1, args: [P.String], named: {detail: P.String, msg: P.String, path: P.String, phase: P.String}}, {func: 1, args: [O.Connection], opt: [P.bool]}, {func: 1, ret: O.ConnectionProcessor}, {func: 1, ret: O.ConnectionHandler}, {func: 1, ret: [P.Stream, L.RequesterListUpdate]}, {func: 1, ret: O.Permission}, {func: 1, ret: P.$int, args: [P.Object], opt: [P.$int]}, {func: 1, ret: O.PermissionList}, {func: 1, args: [P.String, P.String], opt: [P.Object]}, {func: 1, ret: P.List, args: [P.List]}, {func: 1, ret: [P.List, O.TableColumn], args: [P.List]}, {func: 1, args: [[P.List, O.TableColumn], [P.List, P.List]], named: {meta: P.Map}}, {func: 1, args: [[P.List, O.TableColumn]]}, {func: 1, args: [,], named: {count: P.$int, max: P.num, meta: P.Map, min: P.num, status: P.String, sum: P.num, ts: P.String}}, {func: 1, args: [O.ValueUpdate, O.ValueUpdate]}, {func: 1, args: [K.CryptoProvider]}, {func: 1, ret: K.CryptoProvider}, {func: 1, ret: [P.Future, K.ECDH], args: [K.PublicKey, K.ECDH]}, {func: 1, ret: [P.Future, K.ECDH], args: [M.PublicKeyImpl, K.ECDH]}, {func: 1, ret: M.NodeCryptoProvider}, {func: 1, ret: L.DefaultDefNodes}, {func: 1, args: [L.Requester, P.$int, L.RequestUpdater, P.Map]}, {func: 1, args: [P.List, P.List, [P.List, O.TableColumn], P.String], named: {error: O.DSError, meta: P.Map}}, {func: 1, ret: [P.List, O.TableColumn], args: [L.RemoteNode]}, {func: 1, args: [L.RemoteNode, L.Requester, P.Map], opt: [P.$int]}, {func: 1, args: [L.RemoteNode, [P.List, P.String], P.String]}, {func: 1, args: [L.RemoteNode, L.Requester, {func: 1, void: true, args: [,]}]}, {func: 1, ret: [P.Future, K.ECDH], args: [M.PublicKeyImpl]}, {func: 1, args: [L.Requester, P.String]}, {func: 1, args: [L.Requester, P.String, P.Object], opt: [P.$int]}, {func: 1, args: [L.Requester, P.String, P.Function]}, {func: 1, args: [L.Requester, P.$int]}, {func: 1, ret: L.RequestUpdater}, {func: 1, opt: [L.RemoteNodeCache]}, {func: 1, void: true, args: [T.InvokeResponse, P.$int, P.$int]}, {func: 1, ret: T.Configs}, {func: 1, ret: T.ConfigSetting, args: [P.String, O.Node0]}, {func: 1, args: [P.String, T.NodeProvider]}, {func: 1, ret: T.NodeProviderImpl}, {func: 1, ret: T.IPermissionManager}, {func: 1, ret: T.DummyPermissionManager}, {func: 1, ret: T.NodeProvider}, {func: 1, args: [T.NodeProvider], opt: [P.String]}, {func: 1, void: true, args: [P.Timer]}, {func: 1, ret: [P.Stream, P.List]}, {func: 1, args: [T.LocalNode, P.Function]}, {func: 1, args: [T.SubscribeResponse, T.LocalNode, P.$int, P.bool, P.$int]}, {func: 1, opt: [P.List, P.List]}, {func: 1, opt: [P.List]}, {func: 1, ret: T.SerializableNodeProvider}, {func: 1, ret: T.MutableNodeProvider}, {func: 1, opt: [P.Map, P.Map]}, {func: 1, args: [P.String], opt: [T.SimpleNodeProvider]}, {func: 1, args: [P.String, T.SimpleNodeProvider]}, {func: 1, args: [[P.List, P.String]]}, {func: 1, ret: Q.DSLinkJSON, args: [[P.Map, P.String,,]]}, {func: 1, args: [P.Duration]}, {func: 1, ret: Q.Scheduler}, {func: 1, ret: P.Timer}, {func: 1, ret: P.Timer, args: [, {func: 1}]}, {func: 1, ret: P.Future, args: [P.$int, {func: 1}]}, {func: 1, void: true, args: [T.InvokeResponse]}, {func: 1, void: true, args: [{func: 1}]}, {func: 1, ret: P.Future, args: [P.Duration, {func: 1}]}, {func: 1, ret: P.Timer, args: [P.Duration, {func: 1}]}, {func: 1, ret: P.String, args: [[P.Iterable, P.String]]}, {func: 1, ret: [P.List, [P.Map, P.String,,]], args: [[P.Map, P.String, P.String]]}, {func: 1, void: true, args: [O.ConnectionHandler]}, H.TearOffClosure, P._Future, [P.HashMap, 86, 101], P.JsonCodec, P.TypedData, Y.BrowserECDHLink, {func: 1, ret: P.Future, args: [P.Duration], named: {onTimeout: {func: 1}}}, {func: 1, ret: [P.Future, K.ECDH], args: [P.String]}, {func: 1, ret: {func: 1, args: [,,]}, args: [P.Zone, {func: 1, args: [,,]}]}, {func: 1, ret: L.RemoteNode, args: [P.String]}, {func: 1, ret: O.Node0, args: [P.String, P.String]}, {func: 1, ret: L.RemoteNode, args: [L.RemoteNode, P.String, P.Map]}, Y.LocalDataStorage, {func: 1, ret: [P.Stream, L.RequesterListUpdate], args: [L.Requester]}, P.Completer, {func: 1, ret: L.ListController, args: [L.Requester]}, {func: 1, void: true, args: [L.Requester, {func: 1, args: [,]}, P.$int]}, {func: 1, void: true, args: [L.Requester, {func: 1, args: [,]}]}, {func: 1, ret: [P.Stream, L.RequesterInvokeUpdate], args: [P.Map, L.Requester], opt: [P.$int]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.$int, args: [, P.$int]}, {func: 1, args: [{func: 1, void: true}]}, {func: 1, void: true, args: [P.Map, L.RemoteNodeCache]}, {func: 1, ret: P.AsyncError, args: [P.Zone, P.Object, P.StackTrace]}, {func: 1, ret: P.$int, args: [,,]}, [P.Completer, P.bool], W.WebSocket, P.Timer, Q.BinaryInCache, Q.BinaryOutCache, {func: 1, ret: [P.List, P.List]}, {func: 1, void: true, args: [,]}, {func: 1, void: true, args: [P.String], opt: [,]}, {func: 1, ret: P.$int, args: [P.$int, P.$int]}, {func: 1, void: true, args: [W.Event]}, {func: 1, args: [W.HttpRequest]}, [P.StreamController, P.List], [P.List, P.Function], {func: 1, args: [P.String, P.String], named: {defaultValue: P.Object}}, {func: 1, void: true, args: [P.Zone, {func: 1}]}, {func: 1, args: [O.ConnectionChannel]}, {func: 1, void: true, args: [O.ConnectionChannel]}, {func: 1, ret: [P.Future, P.bool]}, {func: 1, ret: [P.Stream, O.ValueUpdate], args: [P.String], named: {cacheLevel: P.$int}}, {func: 1, ret: P.Timer, args: [P.Zone, P.Duration, {func: 1, void: true}]}, {func: 1, ret: P.Future, opt: [,]}, {func: 1, void: true, args: [{func: 1, void: true, args: [,]}]}, null, {func: 1, void: true, args: [P.Function]}, O.Unspecified, {func: 1, void: true, opt: [P.Future]}, K.DSRandom, M.NodeCryptoProvider, [P.Map, P.String, L.RemoteNode], {func: 1, void: true, args: [L.ReqSubscribeController, P.$int]}, {func: 1, void: true, args: [L.ReqSubscribeController]}, {func: 1, void: true, args: [P.String,,]}, {func: 1, args: [P.String], opt: [,]}, {func: 1, ret: L.Requester}, {func: 1, void: true, args: [O.ConnectionProcessor]}, [P.StreamController, L.RequesterInvokeUpdate], [P.Stream, L.RequesterInvokeUpdate], {func: 1, args: [P.Symbol0, P.Mirror]}, [Q.BroadcastStreamController, L.RequesterListUpdate], {func: 1, ret: P.TypeMirror, args: [P.$int]}, L.ListDefListener, {func: 1, void: true, args: [{func: 1, args: [,]}, P.$int]}, {func: 1, args: [P.Zone,, P.StackTrace]}, [P.Map, P.String, L.ReqSubscribeController], {func: 1, ret: L.Request, args: [P.Map, L.RequestUpdater]}, [P.HashSet, P.String], {func: 1, ret: L.ReqSubscribeListener, args: [P.String, {func: 1, args: [,]}], opt: [P.$int]}, {func: 1, void: true, args: [P.String, {func: 1, args: [,]}]}, {func: 1, ret: [P.Stream, L.RequesterListUpdate], args: [P.String]}, [P.Map, P.$int, L.Request], L.RemoteNodeCache, [P.Map, P.String, T.ConfigSetting], T.Configs, T.ConfigSetting, {func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, T.LocalNode], typedef: T.InvokeCallback}, {func: 1, ret: [P.Stream, L.RequesterInvokeUpdate], args: [P.String, P.Map], opt: [P.$int]}, {func: 1, ret: [P.Future, L.RequesterUpdate], args: [P.String, P.Object], opt: [P.$int]}, {func: 1, ret: [P.Future, P.bool], args: [P.String]}, {func: 1, ret: [P.Future, L.RequesterUpdate], args: [P.String]}, [P.Map, P.$int, T.Response], {func: 1, void: true, args: [L.Request]}, {func: 1, ret: O.DSError, args: [P.Object, T.LocalNodeImpl, T.Responder]}, {func: 1, ret: O.DSError, args: [T.LocalNodeImpl, T.Responder]}, {func: 1, ret: P.Future, args: [P.String, P.String]}, [P.Map, P.String, T.RespSubscribeController], [P.Map, P.$int, T.RespSubscribeController], [P.LinkedHashSet, T.RespSubscribeController], T.RespSubscribeListener, [P.ListQueue, O.ValueUpdate], T.InvokeResponse, [P.Map, P.String, T.LocalNode], {func: 1, void: true, args: [{func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, T.LocalNode], typedef: T.InvokeCallback}]}, {func: 1, void: true, args: [W.MessageEvent]}, [P.Map, P.String, {func: 1, ret: T.SimpleNode, args: [P.String], typedef: T._NodeFactory}], {func: 1, ret: P.Map, args: [P.bool]}, T.NodeProviderImpl, T.MutableNodeProvider, T.SerializableNodeProvider, [P.Map, P.String,,], [P.Map, P.String, [P.Map, P.String,,]], P.Duration, {func: 1, ret: P.Timer, args: [P.Zone, P.Duration, {func: 1, void: true, args: [P.Timer]}]}, {func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, T.LocalNode]}, {func: 1, ret: P.Future, args: [P.$int, Q.Interval, {func: 1}]}, {func: 1, void: true, args: [P.Zone, P.ZoneDelegate, P.Zone,, P.StackTrace]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          } else
            if (result === sentinelInProgress)
              H.throwCyclicInit(staticName || fieldName);
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    function intern(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    }
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (document.currentScript) {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(function(a) {
        H.startRootIsolate(L.stub__main$closure(), a);
      }, []);
    else
      (function(a) {
        H.startRootIsolate(L.stub__main$closure(), a);
      })([]);
  });
function Stream(t){EventEmitter.call(this),t.listen$4$cancelOnError$onDone$onError({call$1:function(t){this.emit("data",dynamicFrom(t))}.bind(this)},!0,{call$0:function(){this.emit("done")}.bind(this)},{call$1:function(t){this.emit("error",t)}.bind(this)})}function objEach(t,e,n){void 0!==n&&(e=e.bind(n));for(var c=0,i=Object.keys(t),o=i.length;o>c;c++){var r=i[c];e(t[r],r,t)}}function overrideFunc(t,e,n,c){t[n]!==e[n]&&(t[clOb][c]=function(){for(var e=Array(arguments.length),c=e.length,i=0;c>i;++i)e[i]=dynamicFrom(arguments[i]);return dynamicTo(t[n].apply(t,e))})}function dynamicTo(t){function e(t){for(var e=new ArrayBuffer(t.length),n=new Uint8Array(e),c=0;c<t.length;++c)n[c]=t[c];return e}if(void 0===t||null===t)return t;if(t[clIw])return t[clOb];if(t&&"function"==typeof t.then&&"function"==typeof t.catch){var n=new P.Completer_Completer$sync;return t.then(function(t){n.complete$1(null,dynamicTo(t))}).catch(function(t){n._completeError$2(t)}),n.future}if("function"==typeof t){var c=RegExp(/function[ a-zA-Z0-9$]*\(([, a-zA-Z0-9$_]*)\)[ ]*{/).exec(""+t)[0].split(",").filter(function(t){return t.length>0}).length,i={};return i["call$"+c]=function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicTo(t.apply(this,e))},i}if(t instanceof Buffer)return new DataView(e(t));if(Array.isArray(t))return t.map(function(t){return dynamicTo(t)});if("Object"===t.constructor.name){var o=Object.keys(t),r=[];o.forEach(function(e){r.push(dynamicTo(t[e]))});var l=new P.LinkedHashMap_LinkedHashMap$fromIterables(o,r);return l.$builtinTypeInfo=[P.String,null],l}if(t.forEach&&t.get&&t.has&&t.set&&t.keys&&t.values){var o=[],r=[];t.forEach(function(t,e){o.push(dynamicTo(e)),r.push(dynamicTo(t))});var l=new P.LinkedHashMap_LinkedHashMap$fromIterables(o,r);return l.$builtinTypeInfo=[null,null],l}return t}function dynamicFrom(t){function e(t){for(var e=new Buffer(t.byteLength),n=new Uint8Array(t),c=0;c<e.length;++c)e[c]=n[c];return e}if(void 0===t||null===t)return t;if(t[clId])return t[clId];if(void 0!==module.exports[init.mangledGlobalNames[t.constructor.name]]){var n=Object.create(module.exports[init.mangledGlobalNames[t.constructor.name]].prototype);return n[clOb]=t,n}if(t.get$_mayComplete&&t.get$_hasError&&t.set$_isChained&&t.then$2$onError&&t.catchError$2$test&&t.whenComplete$1&&t.asStream$0&&t._markPendingCompletion$0&&t.get$_value&&t.get$_error&&t._setValue$1&&t._setErrorObject$1&&t._setError$2&&t._addListener$1&&t._removeListeners$0&&t._complete$1&&t._completeWithValue$1&&t._completeError$2&&t._asyncComplete$1&&t._asyncCompleteError$2&&t.timeout$2$onTimeout){var c=new $Promise(function(e,n){t.then$2$onError({call$1:function(t){e(dynamicFrom(t))}},{call$1:function(t){n(t)},call$2:function(t){n(t)}})});return c}if(t instanceof DataView)return e(t.buffer);if(t.listen$4$cancelOnError$onDone$onError)return new module.exports.Stream(t);if(Array.isArray(t))return t.map(function(t){return dynamicFrom(t)});if(t.get$keys&&t.get$values){var i=t.get$keys(),o=t.get$values(),r=0,l={};return i.forEach$1(null,{call$1:function(t){l[dynamicFrom(t)]=dynamicFrom(o.elementAt$1(null,r)),r++}}),l}return t}var $Promise="undefined"!=typeof Promise?Promise:require("es6-promises"),EventEmitter=require("events").EventEmitter;Stream.prototype=Object.create(EventEmitter.prototype),module.exports.Stream=Stream;var sSym="function"==typeof Symbol,mdex=module.exports,obdp=Object.defineProperty,obfr=Object.freeze,clIw=sSym?Symbol.for("calzone.isWrapped"):"__isWrapped__",clOb=sSym?Symbol.for("calzone.obj"):"__obj__",clId=sSym?Symbol.for("calzone.id"):"__calzone_id__",stat=Isolate.$isolateProperties;if(sSym){var symTo=Symbol.for("calzone.dynamicTo"),symFrom=Symbol.for("calzone.dynamicFrom");module.exports[symTo]=dynamicTo,module.exports[symFrom]=dynamicFrom}mdex.BrowserUtils=function(){this[clOb]=function(){return B.BrowserUtils$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.BrowserUtils.prototype[clIw]=!0,mdex.BrowserUtils.class=function(){function t(){mdex.BrowserUtils.apply(this,arguments);mdex.BrowserUtils.prototype}return t.prototype=Object.create(mdex.BrowserUtils.prototype),t.prototype.constructor=t,t}(),mdex.BrowserUtils.fetchBrokerUrlFromPath=function(t,e){return dynamicFrom(init.allClasses.BrowserUtils_fetchBrokerUrlFromPath.call(this,t,e))},mdex.BrowserUtils.createBinaryUrl=function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.type?"application/octet-stream":e.type;return init.allClasses.BrowserUtils_createBinaryUrl.call(this,t,n)},mdex.LinkProvider=function(){this[clOb]=function(t,e,n){n=n||{};var c=void 0===n.dataStore?null:n.dataStore;null!==c&&(c=dynamicTo(c));var i=void 0===n.defaultNodes?null:n.defaultNodes;null!==i&&(i=dynamicTo(i));var o=void 0===n.isRequester?!0:n.isRequester,r=void 0===n.isResponder?!0:n.isResponder,l=void 0===n.loadNodes?!1:n.loadNodes,s=void 0===n.profiles?null:n.profiles;null!==s&&(s=dynamicTo(s));var u=void 0===n.provider?null:n.provider;return null!==u&&(u=dynamicTo(u)),B.LinkProvider$.call(this,t,e,c,i,o,r,l,s,u)}.apply(this,arguments),this[clOb][clId]=this},mdex.LinkProvider.prototype={get link(){return dynamicFrom(this[clOb].link)},set link(t){t=dynamicTo(t),this[clOb].link=t},get defaultNodes(){return dynamicFrom(this[clOb].defaultNodes)},set defaultNodes(t){t=dynamicTo(t),this[clOb].defaultNodes=t},get profiles(){return dynamicFrom(this[clOb].profiles)},set profiles(t){t=dynamicTo(t),this[clOb].profiles=t},get loadNodes(){return this[clOb].loadNodes},set loadNodes(t){this[clOb].loadNodes=t},get provider(){return dynamicFrom(this[clOb].provider)},set provider(t){t=dynamicTo(t),this[clOb].provider=t},get dataStore(){return dynamicFrom(this[clOb].dataStore)},set dataStore(t){t=dynamicTo(t),this[clOb].dataStore=t},get privateKey(){return dynamicFrom(this[clOb].privateKey)},set privateKey(t){t=dynamicTo(t),this[clOb].privateKey=t},get brokerUrl(){return this[clOb].brokerUrl},set brokerUrl(t){this[clOb].brokerUrl=t},get prefix(){return this[clOb].prefix},set prefix(t){this[clOb].prefix=t},get isRequester(){return this[clOb].isRequester},set isRequester(t){this[clOb].isRequester=t},get isResponder(){return this[clOb].isResponder},set isResponder(t){this[clOb].isResponder=t},init:function(){return dynamicFrom(this[clOb].init$0.call(this[clOb],null))},resetSavedNodes:function(){return dynamicFrom(this[clOb].resetSavedNodes$0.call(this[clOb],null))},onValueChange:function(t,e){e=e||{};var n=void 0===e.cacheLevel?1:e.cacheLevel;return dynamicFrom(this[clOb].onValueChange$2$cacheLevel.call(this[clOb],t,n))},save:function(){return dynamicFrom(this[clOb].save$0.call(this[clOb],null))},syncValue:function(t){return dynamicFrom(this[clOb].syncValue$1.call(this[clOb],t))},connect:function(){return dynamicFrom(this[clOb].connect$0.call(this[clOb],null))},close:function(){return dynamicFrom(this[clOb].close$0.call(this[clOb],null))},getNode:function(t){return dynamicFrom(this[clOb].getNode$1.call(this[clOb],t))},addNode:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addNode$2.call(this[clOb],t,e))},removeNode:function(t){return dynamicFrom(this[clOb].removeNode$1.call(this[clOb],t))},updateValue:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].updateValue$2.call(this[clOb],t,e))},val:function(t,e){return e=void 0===e?stat.unspecified:e,null!==e&&(e=dynamicTo(e)),dynamicFrom(this[clOb].val$2.call(this[clOb],t,e))},get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},bitwiseNegate:function(){return dynamicFrom(this[clOb].$not.call(this[clOb],null))},get requester(){return dynamicFrom(function(){return this[clOb].get$requester.call(this[clOb],null)}.apply(this,arguments))},set requester(t){t=dynamicTo(t),this[clOb].get$requester=function(){return t}},get onRequesterReady(){return dynamicFrom(function(){return this[clOb].get$onRequesterReady.call(this[clOb],null)}.apply(this,arguments))},set onRequesterReady(t){t=dynamicTo(t),this[clOb].get$onRequesterReady=function(){return t}}},mdex.LinkProvider.prototype[clIw]=!0,mdex.LinkProvider.class=function(){function t(){mdex.LinkProvider.apply(this,arguments);var t=mdex.LinkProvider.prototype;overrideFunc(this,t,"init","init$0"),overrideFunc(this,t,"resetSavedNodes","resetSavedNodes$0"),overrideFunc(this,t,"onValueChange","onValueChange$2$cacheLevel"),overrideFunc(this,t,"save","save$0"),overrideFunc(this,t,"syncValue","syncValue$1"),overrideFunc(this,t,"connect","connect$0"),overrideFunc(this,t,"close","close$0"),overrideFunc(this,t,"getNode","getNode$1"),overrideFunc(this,t,"addNode","addNode$2"),overrideFunc(this,t,"removeNode","removeNode$1"),overrideFunc(this,t,"updateValue","updateValue$2"),overrideFunc(this,t,"val","val$2"),overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"bitwiseNegate","$not")}return t.prototype=Object.create(mdex.LinkProvider.prototype),t.prototype.constructor=t,t}(),mdex.DefaultDefNodes=function(){this[clOb]=function(){return L.DefaultDefNodes$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.DefaultDefNodes.prototype[clIw]=!0,mdex.DefaultDefNodes.class=function(){function t(){mdex.DefaultDefNodes.apply(this,arguments);mdex.DefaultDefNodes.prototype}return t.prototype=Object.create(mdex.DefaultDefNodes.prototype),t.prototype.constructor=t,t}(),mdex.RemoveController=function(){this[clOb]=function(t,e){return t=dynamicTo(t),L.RemoveController$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.RemoveController.prototype={get completer(){return dynamicFrom(this[clOb].completer)},set completer(t){t=dynamicTo(t),this[clOb].completer=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get path(){return this[clOb].path},set path(t){this[clOb].path=t},onUpdate:function(t,e,e,n,c){return e=dynamicTo(e),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].onUpdate$5.call(this[clOb],t,e,e,n,c))},onDisconnect:function(){return dynamicFrom(this[clOb].onDisconnect$0.call(this[clOb],null))},onReconnect:function(){return dynamicFrom(this[clOb].onReconnect$0.call(this[clOb],null))},get future(){return dynamicFrom(function(){return this[clOb].get$future.call(this[clOb],null)}.apply(this,arguments))},set future(t){t=dynamicTo(t),this[clOb].get$future=function(){return t}}},mdex.RemoveController.prototype[clIw]=!0,mdex.RemoveController.class=function(){function t(){mdex.RemoveController.apply(this,arguments);var t=mdex.RemoveController.prototype;overrideFunc(this,t,"onUpdate","onUpdate$5"),overrideFunc(this,t,"onDisconnect","onDisconnect$0"),overrideFunc(this,t,"onReconnect","onReconnect$0")}return t.prototype=Object.create(mdex.RemoveController.prototype),t.prototype.constructor=t,t}(),mdex.SetController=function(){this[clOb]=function(t,e,n,c){return t=dynamicTo(t),n=dynamicTo(n),c=void 0===c?stat.Permission_CONFIG:c,L.SetController$.call(this,t,e,n,c)}.apply(this,arguments),this[clOb][clId]=this},mdex.SetController.prototype={get completer(){return dynamicFrom(this[clOb].completer)},set completer(t){t=dynamicTo(t),this[clOb].completer=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get path(){return this[clOb].path},set path(t){this[clOb].path=t},get value(){return dynamicFrom(this[clOb].value)},set value(t){t=dynamicTo(t),this[clOb].value=t},onUpdate:function(t,e,e,n,c){return e=dynamicTo(e),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].onUpdate$5.call(this[clOb],t,e,e,n,c))},onDisconnect:function(){return dynamicFrom(this[clOb].onDisconnect$0.call(this[clOb],null))},onReconnect:function(){return dynamicFrom(this[clOb].onReconnect$0.call(this[clOb],null))},get future(){return dynamicFrom(function(){return this[clOb].get$future.call(this[clOb],null)}.apply(this,arguments))},set future(t){t=dynamicTo(t),this[clOb].get$future=function(){return t}}},mdex.SetController.prototype[clIw]=!0,mdex.SetController.class=function(){function t(){mdex.SetController.apply(this,arguments);var t=mdex.SetController.prototype;overrideFunc(this,t,"onUpdate","onUpdate$5"),overrideFunc(this,t,"onDisconnect","onDisconnect$0"),overrideFunc(this,t,"onReconnect","onReconnect$0")}return t.prototype=Object.create(mdex.SetController.prototype),t.prototype.constructor=t,t}(),mdex.InvokeController=function(){this[clOb]=function(t,e,n,c){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=void 0===c?stat.Permission_CONFIG:c,L.InvokeController$.call(this,t,e,n,c)}.apply(this,arguments),this[clOb][clId]=this},mdex.InvokeController.prototype={get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},onUpdate:function(t,e,e,n,c){return e=dynamicTo(e),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].onUpdate$5.call(this[clOb],t,e,e,n,c))},onDisconnect:function(){return dynamicFrom(this[clOb].onDisconnect$0.call(this[clOb],null))},onReconnect:function(){return dynamicFrom(this[clOb].onReconnect$0.call(this[clOb],null))}},mdex.InvokeController.prototype[clIw]=!0,mdex.InvokeController.class=function(){function t(){mdex.InvokeController.apply(this,arguments);var t=mdex.InvokeController.prototype;overrideFunc(this,t,"onUpdate","onUpdate$5"),overrideFunc(this,t,"onDisconnect","onDisconnect$0"),overrideFunc(this,t,"onReconnect","onReconnect$0")}return t.prototype=Object.create(mdex.InvokeController.prototype),t.prototype.constructor=t,t}(),mdex.InvokeController.getNodeColumns=function(t){return t=dynamicTo(t),dynamicFrom(init.allClasses.InvokeController_getNodeColumns.call(this,t))},mdex.RequesterInvokeUpdate=function(){this[clOb]=function(t,e,n,c,i){i=i||{},t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n);var o=void 0===i.error?null:i.error;null!==o&&(o=dynamicTo(o));var r=void 0===i.meta?null:i.meta;return null!==r&&(r=dynamicTo(r)),L.RequesterInvokeUpdate$.call(this,t,e,n,c,o,r)}.apply(this,arguments),this[clOb][clId]=this},mdex.RequesterInvokeUpdate.prototype={get rawColumns(){return dynamicFrom(this[clOb].rawColumns)},set rawColumns(t){t=dynamicTo(t),this[clOb].rawColumns=t},get columns(){return dynamicFrom(this[clOb].columns)},set columns(t){t=dynamicTo(t),this[clOb].columns=t},get updates(){return dynamicFrom(this[clOb].updates)},set updates(t){t=dynamicTo(t),this[clOb].updates=t},get error(){return dynamicFrom(this[clOb].error)},set error(t){t=dynamicTo(t),this[clOb].error=t},get meta(){return dynamicFrom(this[clOb].meta)},set meta(t){t=dynamicTo(t),this[clOb].meta=t},get rows(){return dynamicFrom(function(){return this[clOb].get$rows.call(this[clOb],null)}.apply(this,arguments))},set rows(t){t=dynamicTo(t),this[clOb].get$rows=function(){return t}},get streamStatus(){return this[clOb].streamStatus},set streamStatus(t){this[clOb].streamStatus=t}},mdex.RequesterInvokeUpdate.prototype[clIw]=!0,mdex.RequesterInvokeUpdate.class=function(){function t(){mdex.RequesterInvokeUpdate.apply(this,arguments);mdex.RequesterInvokeUpdate.prototype}return t.prototype=Object.create(mdex.RequesterInvokeUpdate.prototype),t.prototype.constructor=t,t}(),mdex.ReqSubscribeController=function(){this[clOb]=function(t,e){return t=dynamicTo(t),e=dynamicTo(e),L.ReqSubscribeController$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.ReqSubscribeController.prototype={get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get callbacks(){return dynamicFrom(this[clOb].callbacks)},set callbacks(t){t=dynamicTo(t),this[clOb].callbacks=t},get maxCache(){return this[clOb].maxCache},set maxCache(t){this[clOb].maxCache=t},get sid(){return this[clOb].sid},set sid(t){this[clOb].sid=t},listen:function(t,e){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].listen$2.call(this[clOb],t,e))},unlisten:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].unlisten$1.call(this[clOb],t))},updateCacheLevel:function(){return dynamicFrom(this[clOb].updateCacheLevel$0.call(this[clOb],null))},addValue:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addValue$1.call(this[clOb],t))}},mdex.ReqSubscribeController.prototype[clIw]=!0,mdex.ReqSubscribeController.class=function(){function t(){mdex.ReqSubscribeController.apply(this,arguments);var t=mdex.ReqSubscribeController.prototype;overrideFunc(this,t,"listen","listen$2"),overrideFunc(this,t,"unlisten","unlisten$1"),overrideFunc(this,t,"updateCacheLevel","updateCacheLevel$0"),overrideFunc(this,t,"addValue","addValue$1")}return t.prototype=Object.create(mdex.ReqSubscribeController.prototype),t.prototype.constructor=t,t}(),mdex.SubscribeRequest=function(){this[clOb]=function(t,e){return t=dynamicTo(t),L.SubscribeRequest$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.SubscribeRequest.prototype={get subsriptions(){return dynamicFrom(this[clOb].subsriptions)},set subsriptions(t){t=dynamicTo(t),this[clOb].subsriptions=t},get subsriptionids(){return dynamicFrom(this[clOb].subsriptionids)},set subsriptionids(t){t=dynamicTo(t),this[clOb].subsriptionids=t},resend:function(){return dynamicFrom(this[clOb].resend$0.call(this[clOb],null))},addSubscription:function(t,e){return t=dynamicTo(t),dynamicFrom(this[clOb].addSubscription$2.call(this[clOb],t,e))},removeSubscription:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].removeSubscription$1.call(this[clOb],t))},get toRemove(){return dynamicFrom(this[clOb].toRemove)},set toRemove(t){t=dynamicTo(t),this[clOb].toRemove=t},startSendingData:function(){return dynamicFrom(this[clOb].startSendingData$0.call(this[clOb],null))},ackWaiting:function(t){return dynamicFrom(this[clOb].ackWaiting$1.call(this[clOb],t))},ackReceived:function(t){return dynamicFrom(this[clOb].ackReceived$1.call(this[clOb],t))},prepareSending:function(){return dynamicFrom(this[clOb].prepareSending$0.call(this[clOb],null))},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get rid(){return this[clOb].rid},set rid(t){this[clOb].rid=t},get data(){return dynamicFrom(this[clOb].data)},set data(t){t=dynamicTo(t),this[clOb].data=t},get updater(){return dynamicFrom(this[clOb].updater)},set updater(t){t=dynamicTo(t),this[clOb].updater=t},get streamStatus(){return this[clOb].streamStatus},set streamStatus(t){this[clOb].streamStatus=t},close:function(){return dynamicFrom(this[clOb].close$0.call(this[clOb],null))},get isClosed(){return dynamicFrom(function(){return this[clOb].get$isClosed.call(this[clOb],null)}.apply(this,arguments))},set isClosed(t){this[clOb].get$isClosed=function(){return t}}},mdex.SubscribeRequest.prototype[clIw]=!0,mdex.SubscribeRequest.class=function(){function t(){mdex.SubscribeRequest.apply(this,arguments);var t=mdex.SubscribeRequest.prototype;overrideFunc(this,t,"resend","resend$0"),overrideFunc(this,t,"addSubscription","addSubscription$2"),overrideFunc(this,t,"removeSubscription","removeSubscription$1"),overrideFunc(this,t,"startSendingData","startSendingData$0"),overrideFunc(this,t,"ackWaiting","ackWaiting$1"),overrideFunc(this,t,"ackReceived","ackReceived$1"),overrideFunc(this,t,"prepareSending","prepareSending$0"),overrideFunc(this,t,"close","close$0")}return t.prototype=Object.create(mdex.SubscribeRequest.prototype),t.prototype.constructor=t,t}(),mdex.SubscribeController=function(){this[clOb]=function(){return L.SubscribeController$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.SubscribeController.prototype={get request(){return dynamicFrom(this[clOb].request)},set request(t){t=dynamicTo(t),this[clOb].request=t},onDisconnect:function(){return dynamicFrom(this[clOb].onDisconnect$0.call(this[clOb],null))},onReconnect:function(){return dynamicFrom(this[clOb].onReconnect$0.call(this[clOb],null))},onUpdate:function(t,e,e,n,c){return e=dynamicTo(e),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].onUpdate$5.call(this[clOb],t,e,e,n,c))}},mdex.SubscribeController.prototype[clIw]=!0,mdex.SubscribeController.class=function(){function t(){mdex.SubscribeController.apply(this,arguments);var t=mdex.SubscribeController.prototype;overrideFunc(this,t,"onDisconnect","onDisconnect$0"),overrideFunc(this,t,"onReconnect","onReconnect$0"),overrideFunc(this,t,"onUpdate","onUpdate$5")}return t.prototype=Object.create(mdex.SubscribeController.prototype),t.prototype.constructor=t,t}(),mdex.ReqSubscribeListener=function(){this[clOb]=function(t,e,n){return t=dynamicTo(t),n=dynamicTo(n),L.ReqSubscribeListener$.call(this,t,e,n)}.apply(this,arguments),this[clOb][clId]=this},mdex.ReqSubscribeListener.prototype={get callback(){return dynamicFrom(this[clOb].callback)},set callback(t){t=dynamicTo(t),this[clOb].callback=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get path(){return this[clOb].path},set path(t){this[clOb].path=t},cancel:function(){return dynamicFrom(this[clOb].cancel$0.call(this[clOb],null))},asFuture:function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),dynamicFrom(this[clOb].asFuture$1.call(this[clOb],t))},onData:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].onData$1.call(this[clOb],t))},onDone:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].onDone$1.call(this[clOb],t))},onError:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].onError$1.call(this[clOb],null,t))},pause:function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),dynamicFrom(this[clOb].pause$1.call(this[clOb],null,t))},resume:function(){return dynamicFrom(this[clOb].resume$0.call(this[clOb],null))},get isPaused(){return dynamicFrom(function(){return this[clOb].get$isPaused.call(this[clOb],null)}.apply(this,arguments))},set isPaused(t){this[clOb].get$isPaused=function(){return t}}},mdex.ReqSubscribeListener.prototype[clIw]=!0,mdex.ReqSubscribeListener.class=function(){function t(){mdex.ReqSubscribeListener.apply(this,arguments);var t=mdex.ReqSubscribeListener.prototype;overrideFunc(this,t,"cancel","cancel$0"),overrideFunc(this,t,"asFuture","asFuture$1"),overrideFunc(this,t,"onData","onData$1"),overrideFunc(this,t,"onDone","onDone$1"),overrideFunc(this,t,"onError","onError$1"),overrideFunc(this,t,"pause","pause$1"),overrideFunc(this,t,"resume","resume$0")}return t.prototype=Object.create(mdex.ReqSubscribeListener.prototype),t.prototype.constructor=t,t}(),mdex.ListController=function(){this[clOb]=function(t,e){return t=dynamicTo(t),e=dynamicTo(e),L.ListController$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.ListController.prototype={get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get request(){return dynamicFrom(this[clOb].request)},set request(t){t=dynamicTo(t),this[clOb].request=t},get disconnectTs(){return this[clOb].disconnectTs},set disconnectTs(t){this[clOb].disconnectTs=t},onDisconnect:function(){return dynamicFrom(this[clOb].onDisconnect$0.call(this[clOb],null))},onReconnect:function(){return dynamicFrom(this[clOb].onReconnect$0.call(this[clOb],null))},get changes(){return dynamicFrom(this[clOb].changes)},set changes(t){t=dynamicTo(t),this[clOb].changes=t},onUpdate:function(t,e,e,n,c){return e=dynamicTo(e),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].onUpdate$5.call(this[clOb],t,e,e,n,c))},loadProfile:function(t){return dynamicFrom(this[clOb].loadProfile$1.call(this[clOb],t))},onProfileUpdated:function(){return dynamicFrom(this[clOb].onProfileUpdated$0.call(this[clOb],null))},onStartListen:function(){return dynamicFrom(this[clOb].onStartListen$0.call(this[clOb],null))},get stream(){return dynamicFrom(function(){return this[clOb].get$stream.call(this[clOb],null)}.apply(this,arguments))},set stream(t){t=dynamicTo(t),this[clOb].get$stream=function(){return t}},get initialized(){return dynamicFrom(function(){return this[clOb].get$initialized.call(this[clOb],null)}.apply(this,arguments))},set initialized(t){this[clOb].get$initialized=function(){return t}}},mdex.ListController.prototype[clIw]=!0,mdex.ListController.class=function(){function t(){mdex.ListController.apply(this,arguments);var t=mdex.ListController.prototype;overrideFunc(this,t,"onDisconnect","onDisconnect$0"),overrideFunc(this,t,"onReconnect","onReconnect$0"),overrideFunc(this,t,"onUpdate","onUpdate$5"),overrideFunc(this,t,"loadProfile","loadProfile$1"),overrideFunc(this,t,"onProfileUpdated","onProfileUpdated$0"),overrideFunc(this,t,"onStartListen","onStartListen$0")}return t.prototype=Object.create(mdex.ListController.prototype),t.prototype.constructor=t,t}(),mdex.ListDefListener=function(){this[clOb]=function(t,e,n){return t=dynamicTo(t),e=dynamicTo(e),n={call$0:function(){for(var t=Array(arguments.length),e=0;e<t.length;++e)t[e]=dynamicFrom(arguments[e]);return dynamicFrom(n.apply(this,arguments))}},L.ListDefListener$.call(this,t,e,n)}.apply(this,arguments),this[clOb][clId]=this},mdex.ListDefListener.prototype={get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get listener(){return dynamicFrom(this[clOb].listener)},set listener(t){t=dynamicTo(t),this[clOb].listener=t},get ready(){return this[clOb].ready},set ready(t){this[clOb].ready=t},cancel:function(){return dynamicFrom(this[clOb].cancel$0.call(this[clOb],null))}},mdex.ListDefListener.prototype[clIw]=!0,mdex.ListDefListener.class=function(){function t(){mdex.ListDefListener.apply(this,arguments);var t=mdex.ListDefListener.prototype;overrideFunc(this,t,"cancel","cancel$0")}return t.prototype=Object.create(mdex.ListDefListener.prototype),t.prototype.constructor=t,t}(),mdex.RequesterListUpdate=function(){this[clOb]=function(t,e,n){return t=dynamicTo(t),e=dynamicTo(e),L.RequesterListUpdate$.call(this,t,e,n)}.apply(this,arguments),this[clOb][clId]=this},mdex.RequesterListUpdate.prototype={get changes(){return dynamicFrom(this[clOb].changes)},set changes(t){t=dynamicTo(t),this[clOb].changes=t},get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},get streamStatus(){return this[clOb].streamStatus},set streamStatus(t){this[clOb].streamStatus=t}},mdex.RequesterListUpdate.prototype[clIw]=!0,mdex.RequesterListUpdate.class=function(){function t(){mdex.RequesterListUpdate.apply(this,arguments);mdex.RequesterListUpdate.prototype}return t.prototype=Object.create(mdex.RequesterListUpdate.prototype),t.prototype.constructor=t,t}(),mdex.RemoteDefNode=function(){this[clOb]=function(t){return L.RemoteDefNode$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.RemoteDefNode.prototype={get remotePath(){return this[clOb].remotePath},set remotePath(t){this[clOb].remotePath=t},get listed(){return this[clOb].listed},set listed(t){this[clOb].listed=t},get name(){return this[clOb].name},set name(t){this[clOb].name=t},isUpdated:function(){return this[clOb].isUpdated$0.call(this[clOb],null)},isSelfUpdated:function(){return this[clOb].isSelfUpdated$0.call(this[clOb],null)},createListController:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].createListController$1.call(this[clOb],t))},updateRemoteChildData:function(t,e){return t=dynamicTo(t),e=dynamicTo(e),dynamicFrom(this[clOb].updateRemoteChildData$2.call(this[clOb],t,e))},resetNodeCache:function(){return dynamicFrom(this[clOb].resetNodeCache$0.call(this[clOb],null))},get profile(){return dynamicFrom(this[clOb].profile)},set profile(t){t=dynamicTo(t),this[clOb].profile=t},get attributes(){return dynamicFrom(this[clOb].attributes)},set attributes(t){t=dynamicTo(t),this[clOb].attributes=t},getAttribute:function(t){return dynamicFrom(this[clOb].getAttribute$1.call(this[clOb],null,t))},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},getConfig:function(t){return dynamicFrom(this[clOb].getConfig$1.call(this[clOb],t))},get children(){return dynamicFrom(this[clOb].children)},set children(t){t=dynamicTo(t),this[clOb].children=t},addChild:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addChild$2.call(this[clOb],t,e))},removeChild:function(t){return t=dynamicTo(t),this[clOb].removeChild$1.call(this[clOb],t)},getChild:function(t){return dynamicFrom(this[clOb].getChild$1.call(this[clOb],t))},get:function(t){return dynamicFrom(this[clOb].$get$1.call(this[clOb],t))},forEachChild:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachChild$1.call(this[clOb],t))},forEachConfig:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachConfig$1.call(this[clOb],t))},forEachAttribute:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachAttribute$1.call(this[clOb],t))},getSimpleMap:function(){return dynamicFrom(this[clOb].getSimpleMap$0.call(this[clOb],null))}},mdex.RemoteDefNode.prototype[clIw]=!0,mdex.RemoteDefNode.class=function(){function t(){mdex.RemoteDefNode.apply(this,arguments);var t=mdex.RemoteDefNode.prototype;overrideFunc(this,t,"isUpdated","isUpdated$0"),overrideFunc(this,t,"isSelfUpdated","isSelfUpdated$0"),overrideFunc(this,t,"createListController","createListController$1"),overrideFunc(this,t,"updateRemoteChildData","updateRemoteChildData$2"),overrideFunc(this,t,"resetNodeCache","resetNodeCache$0"),overrideFunc(this,t,"getAttribute","getAttribute$1"),overrideFunc(this,t,"getConfig","getConfig$1"),overrideFunc(this,t,"addChild","addChild$2"),overrideFunc(this,t,"removeChild","removeChild$1"),overrideFunc(this,t,"getChild","getChild$1"),overrideFunc(this,t,"get","$get$1"),overrideFunc(this,t,"forEachChild","forEachChild$1"),overrideFunc(this,t,"forEachConfig","forEachConfig$1"),overrideFunc(this,t,"forEachAttribute","forEachAttribute$1"),overrideFunc(this,t,"getSimpleMap","getSimpleMap$0")}return t.prototype=Object.create(mdex.RemoteDefNode.prototype),t.prototype.constructor=t,t}(),mdex.RemoteNode=function(){this[clOb]=function(t){return L.RemoteNode$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.RemoteNode.prototype={get remotePath(){return this[clOb].remotePath},set remotePath(t){this[clOb].remotePath=t},get listed(){return this[clOb].listed},set listed(t){this[clOb].listed=t},get name(){return this[clOb].name},set name(t){this[clOb].name=t},isUpdated:function(){return this[clOb].isUpdated$0.call(this[clOb],null)},isSelfUpdated:function(){return this[clOb].isSelfUpdated$0.call(this[clOb],null)},createListController:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].createListController$1.call(this[clOb],t))},updateRemoteChildData:function(t,e){return t=dynamicTo(t),e=dynamicTo(e),dynamicFrom(this[clOb].updateRemoteChildData$2.call(this[clOb],t,e))},resetNodeCache:function(){return dynamicFrom(this[clOb].resetNodeCache$0.call(this[clOb],null));
},get profile(){return dynamicFrom(this[clOb].profile)},set profile(t){t=dynamicTo(t),this[clOb].profile=t},get attributes(){return dynamicFrom(this[clOb].attributes)},set attributes(t){t=dynamicTo(t),this[clOb].attributes=t},getAttribute:function(t){return dynamicFrom(this[clOb].getAttribute$1.call(this[clOb],null,t))},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},getConfig:function(t){return dynamicFrom(this[clOb].getConfig$1.call(this[clOb],t))},get children(){return dynamicFrom(this[clOb].children)},set children(t){t=dynamicTo(t),this[clOb].children=t},addChild:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addChild$2.call(this[clOb],t,e))},removeChild:function(t){return t=dynamicTo(t),this[clOb].removeChild$1.call(this[clOb],t)},getChild:function(t){return dynamicFrom(this[clOb].getChild$1.call(this[clOb],t))},get:function(t){return dynamicFrom(this[clOb].$get$1.call(this[clOb],t))},forEachChild:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachChild$1.call(this[clOb],t))},forEachConfig:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachConfig$1.call(this[clOb],t))},forEachAttribute:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachAttribute$1.call(this[clOb],t))},getSimpleMap:function(){return dynamicFrom(this[clOb].getSimpleMap$0.call(this[clOb],null))}},mdex.RemoteNode.prototype[clIw]=!0,mdex.RemoteNode.class=function(){function t(){mdex.RemoteNode.apply(this,arguments);var t=mdex.RemoteNode.prototype;overrideFunc(this,t,"isUpdated","isUpdated$0"),overrideFunc(this,t,"isSelfUpdated","isSelfUpdated$0"),overrideFunc(this,t,"createListController","createListController$1"),overrideFunc(this,t,"updateRemoteChildData","updateRemoteChildData$2"),overrideFunc(this,t,"resetNodeCache","resetNodeCache$0"),overrideFunc(this,t,"getAttribute","getAttribute$1"),overrideFunc(this,t,"getConfig","getConfig$1"),overrideFunc(this,t,"addChild","addChild$2"),overrideFunc(this,t,"removeChild","removeChild$1"),overrideFunc(this,t,"getChild","getChild$1"),overrideFunc(this,t,"get","$get$1"),overrideFunc(this,t,"forEachChild","forEachChild$1"),overrideFunc(this,t,"forEachConfig","forEachConfig$1"),overrideFunc(this,t,"forEachAttribute","forEachAttribute$1"),overrideFunc(this,t,"getSimpleMap","getSimpleMap$0")}return t.prototype=Object.create(mdex.RemoteNode.prototype),t.prototype.constructor=t,t}(),mdex.RemoteNodeCache=function(){this[clOb]=function(){return L.RemoteNodeCache$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.RemoteNodeCache.prototype={getRemoteNode:function(t){return dynamicFrom(this[clOb].getRemoteNode$1.call(this[clOb],t))},getDefNode:function(t,e){return dynamicFrom(this[clOb].getDefNode$2.call(this[clOb],t,e))},updateRemoteChildNode:function(t,e,n){return t=dynamicTo(t),n=dynamicTo(n),dynamicFrom(this[clOb].updateRemoteChildNode$3.call(this[clOb],t,e,n))}},mdex.RemoteNodeCache.prototype[clIw]=!0,mdex.RemoteNodeCache.class=function(){function t(){mdex.RemoteNodeCache.apply(this,arguments);var t=mdex.RemoteNodeCache.prototype;overrideFunc(this,t,"getRemoteNode","getRemoteNode$1"),overrideFunc(this,t,"getDefNode","getDefNode$2"),overrideFunc(this,t,"updateRemoteChildNode","updateRemoteChildNode$3")}return t.prototype=Object.create(mdex.RemoteNodeCache.prototype),t.prototype.constructor=t,t}(),mdex.Request=function(){this[clOb]=function(t,e,n,c){return t=dynamicTo(t),n=dynamicTo(n),c=dynamicTo(c),L.Request$.call(this,t,e,n,c)}.apply(this,arguments),this[clOb][clId]=this},mdex.Request.prototype={get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get rid(){return this[clOb].rid},set rid(t){this[clOb].rid=t},get data(){return dynamicFrom(this[clOb].data)},set data(t){t=dynamicTo(t),this[clOb].data=t},get updater(){return dynamicFrom(this[clOb].updater)},set updater(t){t=dynamicTo(t),this[clOb].updater=t},get streamStatus(){return this[clOb].streamStatus},set streamStatus(t){this[clOb].streamStatus=t},resend:function(){return dynamicFrom(this[clOb].resend$0.call(this[clOb],null))},close:function(){return dynamicFrom(this[clOb].close$0.call(this[clOb],null))},get isClosed(){return dynamicFrom(function(){return this[clOb].get$isClosed.call(this[clOb],null)}.apply(this,arguments))},set isClosed(t){this[clOb].get$isClosed=function(){return t}}},mdex.Request.prototype[clIw]=!0,mdex.Request.class=function(){function t(){mdex.Request.apply(this,arguments);var t=mdex.Request.prototype;overrideFunc(this,t,"resend","resend$0"),overrideFunc(this,t,"close","close$0")}return t.prototype=Object.create(mdex.Request.prototype),t.prototype.constructor=t,t}(),mdex.Requester=function(){this[clOb]=function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),L.Requester$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.Requester.prototype={get nodeCache(){return dynamicFrom(this[clOb].nodeCache)},set nodeCache(t){t=dynamicTo(t),this[clOb].nodeCache=t},onData:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].onData$1.call(this[clOb],t))},get nextRid(){return this[clOb].nextRid},set nextRid(t){this[clOb].nextRid=t},get nextSid(){return this[clOb].nextSid},set nextSid(t){this[clOb].nextSid=t},get lastSentId(){return this[clOb].lastSentId},set lastSentId(t){this[clOb].lastSentId=t},getSendingData:function(){return dynamicFrom(this[clOb].getSendingData$0.call(this[clOb],null))},subscribe:function(t,e,n){return e={call$0:function(){for(var t=Array(arguments.length),n=0;n<t.length;++n)t[n]=dynamicFrom(arguments[n]);return dynamicFrom(e.apply(this,arguments))}},n=void 0===n?1:n,dynamicFrom(this[clOb].subscribe$3.call(this[clOb],t,e,n))},unsubscribe:function(t,e){return e={call$0:function(){for(var t=Array(arguments.length),n=0;n<t.length;++n)t[n]=dynamicFrom(arguments[n]);return dynamicFrom(e.apply(this,arguments))}},dynamicFrom(this[clOb].unsubscribe$2.call(this[clOb],t,e))},list:function(t){return dynamicFrom(this[clOb].list$1.call(this[clOb],null,t))},invoke:function(t,e,n){return e=dynamicTo(e),n=void 0===n?stat.Permission_CONFIG:n,dynamicFrom(this[clOb].invoke$3.call(this[clOb],t,e,n))},set:function(t,e,n){return e=dynamicTo(e),n=void 0===n?stat.Permission_CONFIG:n,dynamicFrom(this[clOb].$set$3.call(this[clOb],t,e,n))},remove:function(t){return dynamicFrom(this[clOb].remove$1.call(this[clOb],null,t))},closeRequest:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].closeRequest$1.call(this[clOb],t))},onDisconnected:function(){return dynamicFrom(this[clOb].onDisconnected$0.call(this[clOb],null))},onReconnected:function(){return dynamicFrom(this[clOb].onReconnected$0.call(this[clOb],null))},addToSendList:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addToSendList$1.call(this[clOb],t))},addProcessor:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addProcessor$1.call(this[clOb],t))},get connection(){return dynamicFrom(function(){return this[clOb].get$connection.call(this[clOb],null)}.apply(this,arguments))},set connection(t){t=dynamicTo(t),this[clOb].get$connection=function(){return t}}},mdex.Requester.prototype[clIw]=!0,mdex.Requester.class=function(){function t(){mdex.Requester.apply(this,arguments);var t=mdex.Requester.prototype;overrideFunc(this,t,"onData","onData$1"),overrideFunc(this,t,"getSendingData","getSendingData$0"),overrideFunc(this,t,"subscribe","subscribe$3"),overrideFunc(this,t,"unsubscribe","unsubscribe$2"),overrideFunc(this,t,"list","list$1"),overrideFunc(this,t,"invoke","invoke$3"),overrideFunc(this,t,"set","$set$3"),overrideFunc(this,t,"remove","remove$1"),overrideFunc(this,t,"closeRequest","closeRequest$1"),overrideFunc(this,t,"onDisconnected","onDisconnected$0"),overrideFunc(this,t,"onReconnected","onReconnected$0"),overrideFunc(this,t,"addToSendList","addToSendList$1"),overrideFunc(this,t,"addProcessor","addProcessor$1")}return t.prototype=Object.create(mdex.Requester.prototype),t.prototype.constructor=t,t}(),mdex.RequesterUpdate=function(){this[clOb]=function(t){return L.RequesterUpdate$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.RequesterUpdate.prototype={get streamStatus(){return this[clOb].streamStatus},set streamStatus(t){this[clOb].streamStatus=t}},mdex.RequesterUpdate.prototype[clIw]=!0,mdex.RequesterUpdate.class=function(){function t(){mdex.RequesterUpdate.apply(this,arguments);mdex.RequesterUpdate.prototype}return t.prototype=Object.create(mdex.RequesterUpdate.prototype),t.prototype.constructor=t,t}(),mdex.RequestUpdater=function(){this[clOb]=function(){return L.RequestUpdater$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.RequestUpdater.prototype[clIw]=!0,mdex.RequestUpdater.class=function(){function t(){mdex.RequestUpdater.apply(this,arguments);mdex.RequestUpdater.prototype}return t.prototype=Object.create(mdex.RequestUpdater.prototype),t.prototype.constructor=t,t}(),mdex.PermissionList=function(){this[clOb]=function(){return O.PermissionList$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.PermissionList.prototype={get idMatchs(){return dynamicFrom(this[clOb].idMatchs)},set idMatchs(t){t=dynamicTo(t),this[clOb].idMatchs=t},get groupMatchs(){return dynamicFrom(this[clOb].groupMatchs)},set groupMatchs(t){t=dynamicTo(t),this[clOb].groupMatchs=t},get defaultPermission(){return this[clOb].defaultPermission},set defaultPermission(t){this[clOb].defaultPermission=t},updatePermissions:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].updatePermissions$1.call(this[clOb],t))},getPermission:function(t){return t=dynamicTo(t),this[clOb].getPermission$1.call(this[clOb],t)}},mdex.PermissionList.prototype[clIw]=!0,mdex.PermissionList.class=function(){function t(){mdex.PermissionList.apply(this,arguments);var t=mdex.PermissionList.prototype;overrideFunc(this,t,"updatePermissions","updatePermissions$1"),overrideFunc(this,t,"getPermission","getPermission$1")}return t.prototype=Object.create(mdex.PermissionList.prototype),t.prototype.constructor=t,t}(),mdex.Permission=function(){this[clOb]=function(){return O.Permission$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.Permission.prototype[clIw]=!0,mdex.Permission.class=function(){function t(){mdex.Permission.apply(this,arguments);mdex.Permission.prototype}return t.prototype=Object.create(mdex.Permission.prototype),t.prototype.constructor=t,t}(),mdex.Permission.parse=function(t,e){return t=dynamicTo(t),e=void 0===e?null:e,init.allClasses.Permission_parse.call(this,t,e)},mdex.ConnectionHandler=function(){this[clOb]=function(){return O.ConnectionHandler$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.ConnectionHandler.prototype={onReconnected:function(){return dynamicFrom(this[clOb].onReconnected$0.call(this[clOb],null))},addToSendList:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addToSendList$1.call(this[clOb],t))},addProcessor:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addProcessor$1.call(this[clOb],t))},getSendingData:function(){return dynamicFrom(this[clOb].getSendingData$0.call(this[clOb],null))},get connection(){return dynamicFrom(function(){return this[clOb].get$connection.call(this[clOb],null)}.apply(this,arguments))},set connection(t){t=dynamicTo(t),this[clOb].get$connection=function(){return t}}},mdex.ConnectionHandler.prototype[clIw]=!0,mdex.ConnectionHandler.class=function(){function t(){mdex.ConnectionHandler.apply(this,arguments);var t=mdex.ConnectionHandler.prototype;overrideFunc(this,t,"onReconnected","onReconnected$0"),overrideFunc(this,t,"addToSendList","addToSendList$1"),overrideFunc(this,t,"addProcessor","addProcessor$1"),overrideFunc(this,t,"getSendingData","getSendingData$0")}return t.prototype=Object.create(mdex.ConnectionHandler.prototype),t.prototype.constructor=t,t}(),mdex.ConnectionProcessor=function(){this[clOb]=function(){return O.ConnectionProcessor$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.ConnectionProcessor.prototype[clIw]=!0,mdex.ConnectionProcessor.class=function(){function t(){mdex.ConnectionProcessor.apply(this,arguments);mdex.ConnectionProcessor.prototype}return t.prototype=Object.create(mdex.ConnectionProcessor.prototype),t.prototype.constructor=t,t}(),mdex.PassiveChannel=function(){this[clOb]=function(t,e){return t=dynamicTo(t),e=void 0===e?!1:e,O.PassiveChannel$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.PassiveChannel.prototype={get onReceiveController(){return dynamicFrom(this[clOb].onReceiveController)},set onReceiveController(t){t=dynamicTo(t),this[clOb].onReceiveController=t},get conn(){return dynamicFrom(this[clOb].conn)},set conn(t){t=dynamicTo(t),this[clOb].conn=t},get handler(){return dynamicFrom(this[clOb].handler)},set handler(t){t=dynamicTo(t),this[clOb].handler=t},sendWhenReady:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].sendWhenReady$1.call(this[clOb],t))},getSendingData:function(){return dynamicFrom(this[clOb].getSendingData$0.call(this[clOb],null))},get connected(){return this[clOb].connected},set connected(t){this[clOb].connected=t},get onDisconnectController(){return dynamicFrom(this[clOb].onDisconnectController)},set onDisconnectController(t){t=dynamicTo(t),this[clOb].onDisconnectController=t},get onConnectController(){return dynamicFrom(this[clOb].onConnectController)},set onConnectController(t){t=dynamicTo(t),this[clOb].onConnectController=t},updateConnect:function(){return dynamicFrom(this[clOb].updateConnect$0.call(this[clOb],null))},get onReceive(){return dynamicFrom(function(){return this[clOb].get$onReceive.call(this[clOb],null)}.apply(this,arguments))},set onReceive(t){t=dynamicTo(t),this[clOb].get$onReceive=function(){return t}},get isReady(){return dynamicFrom(function(){return this[clOb].get$isReady.call(this[clOb],null)}.apply(this,arguments))},set isReady(t){this[clOb].get$isReady=function(){return t}},get onDisconnected(){return dynamicFrom(function(){return this[clOb].get$onDisconnected.call(this[clOb],null)}.apply(this,arguments))},set onDisconnected(t){t=dynamicTo(t),this[clOb].get$onDisconnected=function(){return t}},get onConnected(){return dynamicFrom(function(){return this[clOb].get$onConnected.call(this[clOb],null)}.apply(this,arguments))},set onConnected(t){t=dynamicTo(t),this[clOb].get$onConnected=function(){return t}}},mdex.PassiveChannel.prototype[clIw]=!0,mdex.PassiveChannel.class=function(){function t(){mdex.PassiveChannel.apply(this,arguments);var t=mdex.PassiveChannel.prototype;overrideFunc(this,t,"sendWhenReady","sendWhenReady$1"),overrideFunc(this,t,"getSendingData","getSendingData$0"),overrideFunc(this,t,"updateConnect","updateConnect$0")}return t.prototype=Object.create(mdex.PassiveChannel.prototype),t.prototype.constructor=t,t}(),mdex.ValueUpdate=function(){this[clOb]=function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.count?1:e.count,c=void 0===e.max?Number.NaN:e.max,i=void 0===e.meta?null:e.meta;null!==i&&(i=dynamicTo(i));var o=void 0===e.min?Number.NaN:e.min,r=void 0===e.status?null:e.status,l=void 0===e.sum?Number.NaN:e.sum,s=void 0===e.ts?null:e.ts;return O.ValueUpdate$.call(this,t,n,c,i,o,r,l,s)}.apply(this,arguments),this[clOb][clId]=this},mdex.ValueUpdate.prototype={get value(){return dynamicFrom(this[clOb].value)},set value(t){t=dynamicTo(t),this[clOb].value=t},get ts(){return this[clOb].ts},set ts(t){this[clOb].ts=t},get status(){return this[clOb].status},set status(t){this[clOb].status=t},get count(){return this[clOb].count},set count(t){this[clOb].count=t},get sum(){return this[clOb].sum},set sum(t){this[clOb].sum=t},get min(){return this[clOb].min},set min(t){this[clOb].min=t},get max(){return this[clOb].max},set max(t){this[clOb].max=t}},mdex.ValueUpdate.prototype[clIw]=!0,mdex.ValueUpdate.class=function(){function t(){mdex.ValueUpdate.apply(this,arguments);mdex.ValueUpdate.prototype}return t.prototype=Object.create(mdex.ValueUpdate.prototype),t.prototype.constructor=t,t}(),mdex.ValueUpdate.getTs=function(){return init.allClasses.ValueUpdate_getTs.call(this,null)},mdex.ValueUpdate.merge=function(){var t=Object.create(mdex.ValueUpdate.prototype);return t[clOb]=function(t,e){return t=dynamicTo(t),e=dynamicTo(e),O.ValueUpdate$merge.call(this,t,e)}.apply(this,arguments),t},mdex.TableMetadata=function(){this[clOb]=function(t){return t=dynamicTo(t),O.TableMetadata$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.TableMetadata.prototype={get meta(){return dynamicFrom(this[clOb].meta)},set meta(t){t=dynamicTo(t),this[clOb].meta=t}},mdex.TableMetadata.prototype[clIw]=!0,mdex.TableMetadata.class=function(){function t(){mdex.TableMetadata.apply(this,arguments);mdex.TableMetadata.prototype}return t.prototype=Object.create(mdex.TableMetadata.prototype),t.prototype.constructor=t,t}(),mdex.TableColumns=function(){this[clOb]=function(t){return t=dynamicTo(t),O.TableColumns$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.TableColumns.prototype={get columns(){return dynamicFrom(this[clOb].columns)},set columns(t){t=dynamicTo(t),this[clOb].columns=t}},mdex.TableColumns.prototype[clIw]=!0,mdex.TableColumns.class=function(){function t(){mdex.TableColumns.apply(this,arguments);mdex.TableColumns.prototype}return t.prototype=Object.create(mdex.TableColumns.prototype),t.prototype.constructor=t,t}(),mdex.Table=function(){this[clOb]=function(t,e,n){n=n||{},t=dynamicTo(t),e=dynamicTo(e);var c=void 0===n.meta?null:n.meta;return null!==c&&(c=dynamicTo(c)),O.Table$.call(this,t,e,c)}.apply(this,arguments),this[clOb][clId]=this},mdex.Table.prototype={get columns(){return dynamicFrom(this[clOb].columns)},set columns(t){t=dynamicTo(t),this[clOb].columns=t},get rows(){return dynamicFrom(this[clOb].rows)},set rows(t){t=dynamicTo(t),this[clOb].rows=t},get meta(){return dynamicFrom(this[clOb].meta)},set meta(t){t=dynamicTo(t),this[clOb].meta=t}},mdex.Table.prototype[clIw]=!0,mdex.Table.class=function(){function t(){mdex.Table.apply(this,arguments);mdex.Table.prototype}return t.prototype=Object.create(mdex.Table.prototype),t.prototype.constructor=t,t}(),mdex.TableColumn=function(){this[clOb]=function(t,e,n){return n=void 0===n?null:n,null!==n&&(n=dynamicTo(n)),O.TableColumn$.call(this,t,e,n)}.apply(this,arguments),this[clOb][clId]=this},mdex.TableColumn.prototype={get type(){return this[clOb].type},set type(t){this[clOb].type=t},get name(){return this[clOb].name},set name(t){this[clOb].name=t},get defaultValue(){return dynamicFrom(this[clOb].defaultValue)},set defaultValue(t){t=dynamicTo(t),this[clOb].defaultValue=t},getData:function(){return dynamicFrom(this[clOb].getData$0.call(this[clOb],null))}},mdex.TableColumn.prototype[clIw]=!0,mdex.TableColumn.class=function(){function t(){mdex.TableColumn.apply(this,arguments);var t=mdex.TableColumn.prototype;overrideFunc(this,t,"getData","getData$0")}return t.prototype=Object.create(mdex.TableColumn.prototype),t.prototype.constructor=t,t}(),mdex.TableColumn.serializeColumns=function(t){return t=dynamicTo(t),dynamicFrom(init.allClasses.TableColumn_serializeColumns.call(this,t))},mdex.TableColumn.parseColumns=function(t){return t=dynamicTo(t),dynamicFrom(init.allClasses.TableColumn_parseColumns.call(this,t))},mdex.Path=function(){this[clOb]=function(t){return O.Path$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.Path.prototype={get path(){return this[clOb].path},set path(t){this[clOb].path=t},get parentPath(){return this[clOb].parentPath},set parentPath(t){this[clOb].parentPath=t},child:function(t){return dynamicFrom(this[clOb].child$1.call(this[clOb],t))},get name(){return this[clOb].name},set name(t){this[clOb].name=t},get valid(){return this[clOb].valid},set valid(t){this[clOb].valid=t},mergeBasePath:function(t,e){return e=void 0===e?!1:e,dynamicFrom(this[clOb].mergeBasePath$2.call(this[clOb],t,e))},get parent(){return dynamicFrom(function(){return this[clOb].get$parent.call(this[clOb],null)}.apply(this,arguments))},set parent(t){t=dynamicTo(t),this[clOb].get$parent=function(){return t}},get isAbsolute(){return dynamicFrom(function(){return this[clOb].get$isAbsolute.call(this[clOb],null)}.apply(this,arguments))},set isAbsolute(t){this[clOb].get$isAbsolute=function(){return t}},get isRoot(){return dynamicFrom(function(){return this[clOb].get$isRoot.call(this[clOb],null)}.apply(this,arguments))},set isRoot(t){this[clOb].get$isRoot=function(){return t}},get isConfig(){return dynamicFrom(function(){return this[clOb].get$isConfig.call(this[clOb],null)}.apply(this,arguments))},set isConfig(t){this[clOb].get$isConfig=function(){return t}},get isAttribute(){return dynamicFrom(function(){return this[clOb].get$isAttribute.call(this[clOb],null)}.apply(this,arguments))},set isAttribute(t){this[clOb].get$isAttribute=function(){return t}},get isNode(){return dynamicFrom(function(){return this[clOb].get$isNode.call(this[clOb],null)}.apply(this,arguments))},set isNode(t){this[clOb].get$isNode=function(){return t}}},mdex.Path.prototype[clIw]=!0,mdex.Path.class=function(){function t(){mdex.Path.apply(this,arguments);var t=mdex.Path.prototype;overrideFunc(this,t,"child","child$1"),overrideFunc(this,t,"mergeBasePath","mergeBasePath$2")}return t.prototype=Object.create(mdex.Path.prototype),t.prototype.constructor=t,t}(),mdex.Path.getValidPath=function(t,e){return t=dynamicTo(t),e=void 0===e?null:e,dynamicFrom(init.allClasses.Path_getValidPath.call(this,t,e))},mdex.Path.getValidNodePath=function(t,e){return t=dynamicTo(t),e=void 0===e?null:e,dynamicFrom(init.allClasses.Path_getValidNodePath.call(this,t,e))},mdex.Path.getValidAttributePath=function(t,e){return t=dynamicTo(t),e=void 0===e?null:e,dynamicFrom(init.allClasses.Path_getValidAttributePath.call(this,t,e))},mdex.Path.getValidConfigPath=function(t,e){return t=dynamicTo(t),e=void 0===e?null:e,dynamicFrom(init.allClasses.Path_getValidConfigPath.call(this,t,e))},mdex.Node=function(){this[clOb]=function(){return O.Node$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.Node.prototype={get profile(){return dynamicFrom(this[clOb].profile)},set profile(t){t=dynamicTo(t),this[clOb].profile=t},get attributes(){return dynamicFrom(this[clOb].attributes)},set attributes(t){t=dynamicTo(t),this[clOb].attributes=t},getAttribute:function(t){return dynamicFrom(this[clOb].getAttribute$1.call(this[clOb],null,t))},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},getConfig:function(t){return dynamicFrom(this[clOb].getConfig$1.call(this[clOb],t))},get children(){return dynamicFrom(this[clOb].children)},set children(t){t=dynamicTo(t),this[clOb].children=t},addChild:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addChild$2.call(this[clOb],t,e))},removeChild:function(t){return t=dynamicTo(t),this[clOb].removeChild$1.call(this[clOb],t)},getChild:function(t){return dynamicFrom(this[clOb].getChild$1.call(this[clOb],t))},get:function(t){return dynamicFrom(this[clOb].$get$1.call(this[clOb],t))},forEachChild:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachChild$1.call(this[clOb],t))},forEachConfig:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachConfig$1.call(this[clOb],t))},forEachAttribute:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachAttribute$1.call(this[clOb],t))},getSimpleMap:function(){return dynamicFrom(this[clOb].getSimpleMap$0.call(this[clOb],null))}},mdex.Node.prototype[clIw]=!0,mdex.Node.class=function(){function t(){mdex.Node.apply(this,arguments);var t=mdex.Node.prototype;overrideFunc(this,t,"getAttribute","getAttribute$1"),overrideFunc(this,t,"getConfig","getConfig$1"),overrideFunc(this,t,"addChild","addChild$2"),overrideFunc(this,t,"removeChild","removeChild$1"),overrideFunc(this,t,"getChild","getChild$1"),overrideFunc(this,t,"get","$get$1"),overrideFunc(this,t,"forEachChild","forEachChild$1"),overrideFunc(this,t,"forEachConfig","forEachConfig$1"),overrideFunc(this,t,"forEachAttribute","forEachAttribute$1"),overrideFunc(this,t,"getSimpleMap","getSimpleMap$0")}return t.prototype=Object.create(mdex.Node.prototype),t.prototype.constructor=t,t}(),mdex.Node.getDisplayName=function(t){return init.allClasses.Node_getDisplayName.call(this,t)},mdex.Unspecified=function(){this[clOb]=function(){return O.Unspecified$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.Unspecified.prototype[clIw]=!0,mdex.Unspecified.class=function(){function t(){mdex.Unspecified.apply(this,arguments);mdex.Unspecified.prototype}return t.prototype=Object.create(mdex.Unspecified.prototype),t.prototype.constructor=t,t}(),mdex.DSError=function(){this[clOb]=function(t,e){e=e||{};var n=void 0===e.detail?null:e.detail,c=void 0===e.msg?null:e.msg,i=void 0===e.path?null:e.path,o=void 0===e.phase?stat.ErrorPhase_response:e.phase;return O.DSError$.call(this,t,n,c,i,o)}.apply(this,arguments),this[clOb][clId]=this},mdex.DSError.prototype={get type(){return this[clOb].type},set type(t){this[clOb].type=t},get detail(){return this[clOb].detail},set detail(t){this[clOb].detail=t},get msg(){return this[clOb].msg},set msg(t){this[clOb].msg=t},get path(){return this[clOb].path},set path(t){this[clOb].path=t},get phase(){return this[clOb].phase},set phase(t){this[clOb].phase=t},getMessage:function(){return this[clOb].getMessage$0.call(this[clOb],null)},serialize:function(){return dynamicFrom(this[clOb].serialize$0.call(this[clOb],null))}},mdex.DSError.prototype[clIw]=!0,mdex.DSError.class=function(){function t(){mdex.DSError.apply(this,arguments);var t=mdex.DSError.prototype;overrideFunc(this,t,"getMessage","getMessage$0"),overrideFunc(this,t,"serialize","serialize$0")}return t.prototype=Object.create(mdex.DSError.prototype),t.prototype.constructor=t,t}(),mdex.DSError.fromMap=function(){var t=Object.create(mdex.DSError.prototype);return t[clOb]=function(t){return t=dynamicTo(t),O.DSError$fromMap.call(this,t)}.apply(this,arguments),t},mdex.ErrorPhase=function(){this[clOb]=function(){return O.ErrorPhase$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.ErrorPhase.prototype[clIw]=!0,mdex.ErrorPhase.class=function(){function t(){mdex.ErrorPhase.apply(this,arguments);mdex.ErrorPhase.prototype}return t.prototype=Object.create(mdex.ErrorPhase.prototype),t.prototype.constructor=t,t}(),mdex.StreamStatus=function(){this[clOb]=function(){return O.StreamStatus$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.StreamStatus.prototype[clIw]=!0,mdex.StreamStatus.class=function(){function t(){mdex.StreamStatus.apply(this,arguments);mdex.StreamStatus.prototype}return t.prototype=Object.create(mdex.StreamStatus.prototype),t.prototype.constructor=t,t}(),mdex.ServerLinkManager=function(){this[clOb]=function(){return O.ServerLinkManager$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.ServerLinkManager.prototype[clIw]=!0,mdex.ServerLinkManager.class=function(){function t(){mdex.ServerLinkManager.apply(this,arguments);mdex.ServerLinkManager.prototype}return t.prototype=Object.create(mdex.ServerLinkManager.prototype),t.prototype.constructor=t,t}(),mdex.ClientLink=function(){this[clOb]=function(){return O.ClientLink$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.ClientLink.prototype[clIw]=!0,mdex.ClientLink.class=function(){function t(){mdex.ClientLink.apply(this,arguments);mdex.ClientLink.prototype}return t.prototype=Object.create(mdex.ClientLink.prototype),t.prototype.constructor=t,t}(),mdex.ServerLink=function(){this[clOb]=function(){return O.ServerLink$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.ServerLink.prototype[clIw]=!0,mdex.ServerLink.class=function(){function t(){mdex.ServerLink.apply(this,arguments);mdex.ServerLink.prototype}return t.prototype=Object.create(mdex.ServerLink.prototype),t.prototype.constructor=t,t}(),mdex.Link=function(){this[clOb]=function(){return O.Link$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.Link.prototype[clIw]=!0,mdex.Link.class=function(){function t(){mdex.Link.apply(this,arguments);mdex.Link.prototype}return t.prototype=Object.create(mdex.Link.prototype),t.prototype.constructor=t,t}(),mdex.ConnectionChannel=function(){this[clOb]=function(){return O.ConnectionChannel$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.ConnectionChannel.prototype={get onDisconnected(){return dynamicFrom(function(){return this[clOb].onDisconnected$0.call(this[clOb],null)}.apply(this,arguments))},set onDisconnected(t){t=dynamicTo(t),this[clOb].onDisconnected$0=function(){return t}}},mdex.ConnectionChannel.prototype[clIw]=!0,mdex.ConnectionChannel.class=function(){function t(){mdex.ConnectionChannel.apply(this,arguments);mdex.ConnectionChannel.prototype}return t.prototype=Object.create(mdex.ConnectionChannel.prototype),t.prototype.constructor=t,t}(),mdex.ConnectionAckGroup=function(){this[clOb]=function(t,e){return e=dynamicTo(e),O.ConnectionAckGroup$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.ConnectionAckGroup.prototype={get ackId(){return this[clOb].ackId},set ackId(t){this[clOb].ackId=t},get processors(){return dynamicFrom(this[clOb].processors)},set processors(t){t=dynamicTo(t),this[clOb].processors=t},ackAll:function(t){return dynamicFrom(this[clOb].ackAll$1.call(this[clOb],t))}},mdex.ConnectionAckGroup.prototype[clIw]=!0,mdex.ConnectionAckGroup.class=function(){function t(){mdex.ConnectionAckGroup.apply(this,arguments);var t=mdex.ConnectionAckGroup.prototype;overrideFunc(this,t,"ackAll","ackAll$1")}return t.prototype=Object.create(mdex.ConnectionAckGroup.prototype),t.prototype.constructor=t,t}(),mdex.ProcessorResult=function(){this[clOb]=function(t,e){return t=dynamicTo(t),e=dynamicTo(e),O.ProcessorResult$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.ProcessorResult.prototype={get messages(){return dynamicFrom(this[clOb].messages)},set messages(t){t=dynamicTo(t),this[clOb].messages=t},get processors(){return dynamicFrom(this[clOb].processors)},set processors(t){t=dynamicTo(t),this[clOb].processors=t}},mdex.ProcessorResult.prototype[clIw]=!0,mdex.ProcessorResult.class=function(){function t(){mdex.ProcessorResult.apply(this,arguments);mdex.ProcessorResult.prototype}return t.prototype=Object.create(mdex.ProcessorResult.prototype),t.prototype.constructor=t,t}(),mdex.Connection=function(){this[clOb]=function(){return O.Connection$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.Connection.prototype={get pendingAcks(){return dynamicFrom(this[clOb].pendingAcks)},set pendingAcks(t){t=dynamicTo(t),this[clOb].pendingAcks=t},ack:function(t){return dynamicFrom(this[clOb].ack$1.call(this[clOb],t))},get onDisconnected(){return dynamicFrom(function(){return this[clOb].onDisconnected$0.call(this[clOb],null)}.apply(this,arguments))},set onDisconnected(t){t=dynamicTo(t),this[clOb].onDisconnected$0=function(){return t}}},mdex.Connection.prototype[clIw]=!0,mdex.Connection.class=function(){function t(){mdex.Connection.apply(this,arguments);var t=mdex.Connection.prototype;overrideFunc(this,t,"ack","ack$1")}return t.prototype=Object.create(mdex.Connection.prototype),t.prototype.constructor=t,t}(),mdex.DummyPermissionManager=function(){this[clOb]=function(){return T.DummyPermissionManager$.call(this,null);
}.apply(this,arguments),this[clOb][clId]=this},mdex.DummyPermissionManager.prototype={getPermission:function(t,e){return e=dynamicTo(e),this[clOb].getPermission$2.call(this[clOb],t,e)}},mdex.DummyPermissionManager.prototype[clIw]=!0,mdex.DummyPermissionManager.class=function(){function t(){mdex.DummyPermissionManager.apply(this,arguments);var t=mdex.DummyPermissionManager.prototype;overrideFunc(this,t,"getPermission","getPermission$2")}return t.prototype=Object.create(mdex.DummyPermissionManager.prototype),t.prototype.constructor=t,t}(),mdex.IPermissionManager=function(){this[clOb]=function(){return T.IPermissionManager$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.IPermissionManager.prototype[clIw]=!0,mdex.IPermissionManager.class=function(){function t(){mdex.IPermissionManager.apply(this,arguments);mdex.IPermissionManager.prototype}return t.prototype=Object.create(mdex.IPermissionManager.prototype),t.prototype.constructor=t,t}(),mdex.SimpleHiddenNode=function(){this[clOb]=function(t,e){return e=dynamicTo(e),T.SimpleHiddenNode$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.SimpleHiddenNode.prototype={getSimpleMap:function(){return dynamicFrom(this[clOb].getSimpleMap$0.call(this[clOb],null))},get provider(){return dynamicFrom(this[clOb].provider)},set provider(t){t=dynamicTo(t),this[clOb].provider=t},get removed(){return this[clOb].removed},set removed(t){this[clOb].removed=t},get serializable(){return this[clOb].serializable},set serializable(t){this[clOb].serializable=t},load:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].load$1.call(this[clOb],null,t))},save:function(){return dynamicFrom(this[clOb].save$0.call(this[clOb],null))},invoke:function(t,e,n,c,i){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),i=void 0===i?stat.Permission_CONFIG:i,dynamicFrom(this[clOb].invoke$5.call(this[clOb],t,e,n,c,i))},onInvoke:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].onInvoke$1.call(this[clOb],t))},onSetValue:function(t){return t=dynamicTo(t),this[clOb].onSetValue$1.call(this[clOb],t)},onSetConfig:function(t,e){return this[clOb].onSetConfig$2.call(this[clOb],t,e)},onSetAttribute:function(t,e){return this[clOb].onSetAttribute$2.call(this[clOb],t,e)},onSubscribe:function(){return dynamicFrom(this[clOb].onSubscribe$0.call(this[clOb],null))},onCreated:function(){return dynamicFrom(this[clOb].onCreated$0.call(this[clOb],null))},onRemoving:function(){return dynamicFrom(this[clOb].onRemoving$0.call(this[clOb],null))},onChildRemoved:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].onChildRemoved$2.call(this[clOb],t,e))},onChildAdded:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].onChildAdded$2.call(this[clOb],t,e))},subscribe:function(t,e){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},e=void 0===e?1:e,dynamicFrom(this[clOb].subscribe$2.call(this[clOb],t,e))},onLoadChild:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].onLoadChild$3.call(this[clOb],t,e,n))},createChild:function(t,e){return e=void 0===e?null:e,null!==e&&(e=dynamicTo(e)),dynamicFrom(this[clOb].createChild$2.call(this[clOb],t,e))},hasConfig:function(t){return this[clOb].hasConfig$1.call(this[clOb],t)},hasAttribute:function(t){return this[clOb].hasAttribute$1.call(this[clOb],t)},remove:function(){return dynamicFrom(this[clOb].remove$0.call(this[clOb],null))},attach:function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.name?null:e.name;return dynamicFrom(this[clOb].attach$2$name.call(this[clOb],t,n))},addChild:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addChild$2.call(this[clOb],t,e))},removeChild:function(t){return t=dynamicTo(t),this[clOb].removeChild$1.call(this[clOb],t)},setAttribute:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setAttribute$4.call(this[clOb],null,t,e,n,c))},setConfig:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setConfig$4.call(this[clOb],t,e,n,c))},setValue:function(t,e,n,c){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=void 0===c?stat.Permission_CONFIG:c,dynamicFrom(this[clOb].setValue$4.call(this[clOb],t,e,n,c))},get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},set:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].$indexSet.call(this[clOb],null,t,e))},get parent(){return dynamicFrom(function(){return this[clOb].get$parent.call(this[clOb],null)}.apply(this,arguments))},set parent(t){t=dynamicTo(t),this[clOb].get$parent=function(){return t}},get name(){return dynamicFrom(function(){return this[clOb].get$name.call(this[clOb],null)}.apply(this,arguments))},set name(t){this[clOb].get$name=function(){return t}},get displayName(){return dynamicFrom(function(){return this[clOb].get$displayName.call(this[clOb],null)}.apply(this,arguments))},set displayName(t){this[clOb].get$displayName=function(){return t}},get type(){return dynamicFrom(function(){return this[clOb].get$type.call(this[clOb],null)}.apply(this,arguments))},set type(t){this[clOb].get$type=function(){return t}},get writable(){return dynamicFrom(function(){return this[clOb].get$writable.call(this[clOb],null)}.apply(this,arguments))},set writable(t){this[clOb].get$writable=function(){return t}},serialize:function(t){return dynamicFrom(this[clOb].serialize$1.call(this[clOb],t))},updateList:function(t){return dynamicFrom(this[clOb].updateList$1.call(this[clOb],t))},removeAttribute:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeAttribute$3.call(this[clOb],t,e,n))},removeConfig:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeConfig$3.call(this[clOb],t,e,n))},get loaded(){return dynamicFrom(function(){return this[clOb].get$loaded.call(this[clOb],null)}.apply(this,arguments))},set loaded(t){this[clOb].get$loaded=function(){return t}},onStartListListen:function(){return dynamicFrom(this[clOb].onStartListListen$0.call(this[clOb],null))},onAllListCancel:function(){return dynamicFrom(this[clOb].onAllListCancel$0.call(this[clOb],null))},get path(){return this[clOb].path},set path(t){this[clOb].path=t},get callbacks(){return dynamicFrom(this[clOb].callbacks)},set callbacks(t){t=dynamicTo(t),this[clOb].callbacks=t},unsubscribe:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].unsubscribe$1.call(this[clOb],t))},updateValue:function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.force?!1:e.force;return dynamicFrom(this[clOb].updateValue$2$force.call(this[clOb],t,n))},getInvokePermission:function(){return this[clOb].getInvokePermission$0.call(this[clOb],null)},getSetPermission:function(){return this[clOb].getSetPermission$0.call(this[clOb],null)},get listChangeController(){return dynamicFrom(function(){return this[clOb].get$listChangeController.call(this[clOb],null)}.apply(this,arguments))},set listChangeController(t){t=dynamicTo(t),this[clOb].get$listChangeController=function(){return t}},get listStream(){return dynamicFrom(function(){return this[clOb].get$listStream.call(this[clOb],null)}.apply(this,arguments))},set listStream(t){t=dynamicTo(t),this[clOb].get$listStream=function(){return t}},get lastValueUpdate(){return dynamicFrom(function(){return this[clOb].get$lastValueUpdate.call(this[clOb],null)}.apply(this,arguments))},set lastValueUpdate(t){t=dynamicTo(t),this[clOb].get$lastValueUpdate=function(){return t}},get value(){return dynamicFrom(function(){return this[clOb].get$value.call(this[clOb],null)}.apply(this,arguments))},set value(t){t=dynamicTo(t),this[clOb].get$value=function(){return t}},get exists(){return dynamicFrom(function(){return this[clOb].get$exists.call(this[clOb],null)}.apply(this,arguments))},set exists(t){this[clOb].get$exists=function(){return t}},get listReady(){return dynamicFrom(function(){return this[clOb].get$listReady.call(this[clOb],null)}.apply(this,arguments))},set listReady(t){this[clOb].get$listReady=function(){return t}},get disconnected(){return dynamicFrom(function(){return this[clOb].get$disconnected.call(this[clOb],null)}.apply(this,arguments))},set disconnected(t){this[clOb].get$disconnected=function(){return t}},get valueReady(){return dynamicFrom(function(){return this[clOb].get$valueReady.call(this[clOb],null)}.apply(this,arguments))},set valueReady(t){this[clOb].get$valueReady=function(){return t}},get hasSubscriber(){return dynamicFrom(function(){return this[clOb].get$hasSubscriber.call(this[clOb],null)}.apply(this,arguments))},set hasSubscriber(t){this[clOb].get$hasSubscriber=function(){return t}},get profile(){return dynamicFrom(this[clOb].profile)},set profile(t){t=dynamicTo(t),this[clOb].profile=t},get attributes(){return dynamicFrom(this[clOb].attributes)},set attributes(t){t=dynamicTo(t),this[clOb].attributes=t},getAttribute:function(t){return dynamicFrom(this[clOb].getAttribute$1.call(this[clOb],null,t))},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},getConfig:function(t){return dynamicFrom(this[clOb].getConfig$1.call(this[clOb],t))},get children(){return dynamicFrom(this[clOb].children)},set children(t){t=dynamicTo(t),this[clOb].children=t},getChild:function(t){return dynamicFrom(this[clOb].getChild$1.call(this[clOb],t))},get:function(t){return dynamicFrom(this[clOb].$get$1.call(this[clOb],t))},forEachChild:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachChild$1.call(this[clOb],t))},forEachConfig:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachConfig$1.call(this[clOb],t))},forEachAttribute:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachAttribute$1.call(this[clOb],t))}},mdex.SimpleHiddenNode.prototype[clIw]=!0,mdex.SimpleHiddenNode.class=function(){function t(){mdex.SimpleHiddenNode.apply(this,arguments);var t=mdex.SimpleHiddenNode.prototype;overrideFunc(this,t,"getSimpleMap","getSimpleMap$0"),overrideFunc(this,t,"load","load$1"),overrideFunc(this,t,"save","save$0"),overrideFunc(this,t,"invoke","invoke$5"),overrideFunc(this,t,"onInvoke","onInvoke$1"),overrideFunc(this,t,"onSetValue","onSetValue$1"),overrideFunc(this,t,"onSetConfig","onSetConfig$2"),overrideFunc(this,t,"onSetAttribute","onSetAttribute$2"),overrideFunc(this,t,"onSubscribe","onSubscribe$0"),overrideFunc(this,t,"onCreated","onCreated$0"),overrideFunc(this,t,"onRemoving","onRemoving$0"),overrideFunc(this,t,"onChildRemoved","onChildRemoved$2"),overrideFunc(this,t,"onChildAdded","onChildAdded$2"),overrideFunc(this,t,"subscribe","subscribe$2"),overrideFunc(this,t,"onLoadChild","onLoadChild$3"),overrideFunc(this,t,"createChild","createChild$2"),overrideFunc(this,t,"hasConfig","hasConfig$1"),overrideFunc(this,t,"hasAttribute","hasAttribute$1"),overrideFunc(this,t,"remove","remove$0"),overrideFunc(this,t,"attach","attach$2$name"),overrideFunc(this,t,"addChild","addChild$2"),overrideFunc(this,t,"removeChild","removeChild$1"),overrideFunc(this,t,"setAttribute","setAttribute$4"),overrideFunc(this,t,"setConfig","setConfig$4"),overrideFunc(this,t,"setValue","setValue$4"),overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"set","$indexSet"),overrideFunc(this,t,"serialize","serialize$1"),overrideFunc(this,t,"updateList","updateList$1"),overrideFunc(this,t,"removeAttribute","removeAttribute$3"),overrideFunc(this,t,"removeConfig","removeConfig$3"),overrideFunc(this,t,"onStartListListen","onStartListListen$0"),overrideFunc(this,t,"onAllListCancel","onAllListCancel$0"),overrideFunc(this,t,"unsubscribe","unsubscribe$1"),overrideFunc(this,t,"updateValue","updateValue$2$force"),overrideFunc(this,t,"getInvokePermission","getInvokePermission$0"),overrideFunc(this,t,"getSetPermission","getSetPermission$0"),overrideFunc(this,t,"getAttribute","getAttribute$1"),overrideFunc(this,t,"getConfig","getConfig$1"),overrideFunc(this,t,"getChild","getChild$1"),overrideFunc(this,t,"get","$get$1"),overrideFunc(this,t,"forEachChild","forEachChild$1"),overrideFunc(this,t,"forEachConfig","forEachConfig$1"),overrideFunc(this,t,"forEachAttribute","forEachAttribute$1")}return t.prototype=Object.create(mdex.SimpleHiddenNode.prototype),t.prototype.constructor=t,t}(),mdex.SimpleNode=function(){this[clOb]=function(t,e){return e=void 0===e?null:e,null!==e&&(e=dynamicTo(e)),T.SimpleNode$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.SimpleNode.prototype={get provider(){return dynamicFrom(this[clOb].provider)},set provider(t){t=dynamicTo(t),this[clOb].provider=t},get removed(){return this[clOb].removed},set removed(t){this[clOb].removed=t},get serializable(){return this[clOb].serializable},set serializable(t){this[clOb].serializable=t},load:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].load$1.call(this[clOb],null,t))},save:function(){return dynamicFrom(this[clOb].save$0.call(this[clOb],null))},invoke:function(t,e,n,c,i){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),i=void 0===i?stat.Permission_CONFIG:i,dynamicFrom(this[clOb].invoke$5.call(this[clOb],t,e,n,c,i))},onInvoke:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].onInvoke$1.call(this[clOb],t))},onSetValue:function(t){return t=dynamicTo(t),this[clOb].onSetValue$1.call(this[clOb],t)},onSetConfig:function(t,e){return this[clOb].onSetConfig$2.call(this[clOb],t,e)},onSetAttribute:function(t,e){return this[clOb].onSetAttribute$2.call(this[clOb],t,e)},onSubscribe:function(){return dynamicFrom(this[clOb].onSubscribe$0.call(this[clOb],null))},onCreated:function(){return dynamicFrom(this[clOb].onCreated$0.call(this[clOb],null))},onRemoving:function(){return dynamicFrom(this[clOb].onRemoving$0.call(this[clOb],null))},onChildRemoved:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].onChildRemoved$2.call(this[clOb],t,e))},onChildAdded:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].onChildAdded$2.call(this[clOb],t,e))},subscribe:function(t,e){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},e=void 0===e?1:e,dynamicFrom(this[clOb].subscribe$2.call(this[clOb],t,e))},onLoadChild:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].onLoadChild$3.call(this[clOb],t,e,n))},createChild:function(t,e){return e=void 0===e?null:e,null!==e&&(e=dynamicTo(e)),dynamicFrom(this[clOb].createChild$2.call(this[clOb],t,e))},hasConfig:function(t){return this[clOb].hasConfig$1.call(this[clOb],t)},hasAttribute:function(t){return this[clOb].hasAttribute$1.call(this[clOb],t)},remove:function(){return dynamicFrom(this[clOb].remove$0.call(this[clOb],null))},attach:function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.name?null:e.name;return dynamicFrom(this[clOb].attach$2$name.call(this[clOb],t,n))},addChild:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addChild$2.call(this[clOb],t,e))},removeChild:function(t){return t=dynamicTo(t),this[clOb].removeChild$1.call(this[clOb],t)},setAttribute:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setAttribute$4.call(this[clOb],null,t,e,n,c))},setConfig:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setConfig$4.call(this[clOb],t,e,n,c))},setValue:function(t,e,n,c){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=void 0===c?stat.Permission_CONFIG:c,dynamicFrom(this[clOb].setValue$4.call(this[clOb],t,e,n,c))},get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},set:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].$indexSet.call(this[clOb],null,t,e))},get parent(){return dynamicFrom(function(){return this[clOb].get$parent.call(this[clOb],null)}.apply(this,arguments))},set parent(t){t=dynamicTo(t),this[clOb].get$parent=function(){return t}},get name(){return dynamicFrom(function(){return this[clOb].get$name.call(this[clOb],null)}.apply(this,arguments))},set name(t){this[clOb].get$name=function(){return t}},get displayName(){return dynamicFrom(function(){return this[clOb].get$displayName.call(this[clOb],null)}.apply(this,arguments))},set displayName(t){this[clOb].get$displayName=function(){return t}},get type(){return dynamicFrom(function(){return this[clOb].get$type.call(this[clOb],null)}.apply(this,arguments))},set type(t){this[clOb].get$type=function(){return t}},get writable(){return dynamicFrom(function(){return this[clOb].get$writable.call(this[clOb],null)}.apply(this,arguments))},set writable(t){this[clOb].get$writable=function(){return t}},serialize:function(t){return dynamicFrom(this[clOb].serialize$1.call(this[clOb],t))},updateList:function(t){return dynamicFrom(this[clOb].updateList$1.call(this[clOb],t))},removeAttribute:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeAttribute$3.call(this[clOb],t,e,n))},removeConfig:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeConfig$3.call(this[clOb],t,e,n))},get loaded(){return dynamicFrom(function(){return this[clOb].get$loaded.call(this[clOb],null)}.apply(this,arguments))},set loaded(t){this[clOb].get$loaded=function(){return t}},onStartListListen:function(){return dynamicFrom(this[clOb].onStartListListen$0.call(this[clOb],null))},onAllListCancel:function(){return dynamicFrom(this[clOb].onAllListCancel$0.call(this[clOb],null))},get path(){return this[clOb].path},set path(t){this[clOb].path=t},get callbacks(){return dynamicFrom(this[clOb].callbacks)},set callbacks(t){t=dynamicTo(t),this[clOb].callbacks=t},unsubscribe:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].unsubscribe$1.call(this[clOb],t))},updateValue:function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.force?!1:e.force;return dynamicFrom(this[clOb].updateValue$2$force.call(this[clOb],t,n))},getInvokePermission:function(){return this[clOb].getInvokePermission$0.call(this[clOb],null)},getSetPermission:function(){return this[clOb].getSetPermission$0.call(this[clOb],null)},get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},set:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].$indexSet.call(this[clOb],null,t,e))},get listChangeController(){return dynamicFrom(function(){return this[clOb].get$listChangeController.call(this[clOb],null)}.apply(this,arguments))},set listChangeController(t){t=dynamicTo(t),this[clOb].get$listChangeController=function(){return t}},get listStream(){return dynamicFrom(function(){return this[clOb].get$listStream.call(this[clOb],null)}.apply(this,arguments))},set listStream(t){t=dynamicTo(t),this[clOb].get$listStream=function(){return t}},get lastValueUpdate(){return dynamicFrom(function(){return this[clOb].get$lastValueUpdate.call(this[clOb],null)}.apply(this,arguments))},set lastValueUpdate(t){t=dynamicTo(t),this[clOb].get$lastValueUpdate=function(){return t}},get value(){return dynamicFrom(function(){return this[clOb].get$value.call(this[clOb],null)}.apply(this,arguments))},set value(t){t=dynamicTo(t),this[clOb].get$value=function(){return t}},get exists(){return dynamicFrom(function(){return this[clOb].get$exists.call(this[clOb],null)}.apply(this,arguments))},set exists(t){this[clOb].get$exists=function(){return t}},get listReady(){return dynamicFrom(function(){return this[clOb].get$listReady.call(this[clOb],null)}.apply(this,arguments))},set listReady(t){this[clOb].get$listReady=function(){return t}},get disconnected(){return dynamicFrom(function(){return this[clOb].get$disconnected.call(this[clOb],null)}.apply(this,arguments))},set disconnected(t){this[clOb].get$disconnected=function(){return t}},get valueReady(){return dynamicFrom(function(){return this[clOb].get$valueReady.call(this[clOb],null)}.apply(this,arguments))},set valueReady(t){this[clOb].get$valueReady=function(){return t}},get hasSubscriber(){return dynamicFrom(function(){return this[clOb].get$hasSubscriber.call(this[clOb],null)}.apply(this,arguments))},set hasSubscriber(t){this[clOb].get$hasSubscriber=function(){return t}},get profile(){return dynamicFrom(this[clOb].profile)},set profile(t){t=dynamicTo(t),this[clOb].profile=t},get attributes(){return dynamicFrom(this[clOb].attributes)},set attributes(t){t=dynamicTo(t),this[clOb].attributes=t},getAttribute:function(t){return dynamicFrom(this[clOb].getAttribute$1.call(this[clOb],null,t))},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},getConfig:function(t){return dynamicFrom(this[clOb].getConfig$1.call(this[clOb],t))},get children(){return dynamicFrom(this[clOb].children)},set children(t){t=dynamicTo(t),this[clOb].children=t},getChild:function(t){return dynamicFrom(this[clOb].getChild$1.call(this[clOb],t))},forEachChild:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachChild$1.call(this[clOb],t))},forEachConfig:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachConfig$1.call(this[clOb],t))},forEachAttribute:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachAttribute$1.call(this[clOb],t))},getSimpleMap:function(){return dynamicFrom(this[clOb].getSimpleMap$0.call(this[clOb],null))}},mdex.SimpleNode.prototype[clIw]=!0,mdex.SimpleNode.class=function(){function t(){mdex.SimpleNode.apply(this,arguments);var t=mdex.SimpleNode.prototype;overrideFunc(this,t,"load","load$1"),overrideFunc(this,t,"save","save$0"),overrideFunc(this,t,"invoke","invoke$5"),overrideFunc(this,t,"onInvoke","onInvoke$1"),overrideFunc(this,t,"onSetValue","onSetValue$1"),overrideFunc(this,t,"onSetConfig","onSetConfig$2"),overrideFunc(this,t,"onSetAttribute","onSetAttribute$2"),overrideFunc(this,t,"onSubscribe","onSubscribe$0"),overrideFunc(this,t,"onCreated","onCreated$0"),overrideFunc(this,t,"onRemoving","onRemoving$0"),overrideFunc(this,t,"onChildRemoved","onChildRemoved$2"),overrideFunc(this,t,"onChildAdded","onChildAdded$2"),overrideFunc(this,t,"subscribe","subscribe$2"),overrideFunc(this,t,"onLoadChild","onLoadChild$3"),overrideFunc(this,t,"createChild","createChild$2"),overrideFunc(this,t,"hasConfig","hasConfig$1"),overrideFunc(this,t,"hasAttribute","hasAttribute$1"),overrideFunc(this,t,"remove","remove$0"),overrideFunc(this,t,"attach","attach$2$name"),overrideFunc(this,t,"addChild","addChild$2"),overrideFunc(this,t,"removeChild","removeChild$1"),overrideFunc(this,t,"setAttribute","setAttribute$4"),overrideFunc(this,t,"setConfig","setConfig$4"),overrideFunc(this,t,"setValue","setValue$4"),overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"set","$indexSet"),overrideFunc(this,t,"serialize","serialize$1"),overrideFunc(this,t,"updateList","updateList$1"),overrideFunc(this,t,"removeAttribute","removeAttribute$3"),overrideFunc(this,t,"removeConfig","removeConfig$3"),overrideFunc(this,t,"onStartListListen","onStartListListen$0"),overrideFunc(this,t,"onAllListCancel","onAllListCancel$0"),overrideFunc(this,t,"unsubscribe","unsubscribe$1"),overrideFunc(this,t,"updateValue","updateValue$2$force"),overrideFunc(this,t,"getInvokePermission","getInvokePermission$0"),overrideFunc(this,t,"getSetPermission","getSetPermission$0"),overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"set","$indexSet"),overrideFunc(this,t,"getAttribute","getAttribute$1"),overrideFunc(this,t,"getConfig","getConfig$1"),overrideFunc(this,t,"getChild","getChild$1"),overrideFunc(this,t,"forEachChild","forEachChild$1"),overrideFunc(this,t,"forEachConfig","forEachConfig$1"),overrideFunc(this,t,"forEachAttribute","forEachAttribute$1"),overrideFunc(this,t,"getSimpleMap","getSimpleMap$0")}return t.prototype=Object.create(mdex.SimpleNode.prototype),t.prototype.constructor=t,t}(),mdex.SimpleNodeProvider=function(){this[clOb]=function(t,e){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),e=void 0===e?null:e,null!==e&&(e=dynamicTo(e)),T.SimpleNodeProvider$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.SimpleNodeProvider.prototype={get nodes(){return dynamicFrom(this[clOb].nodes)},set nodes(t){t=dynamicTo(t),this[clOb].nodes=t},getNode:function(t){return dynamicFrom(this[clOb].getNode$1.call(this[clOb],t))},getOrCreateNode:function(t,e){return e=void 0===e?!0:e,dynamicFrom(this[clOb].getOrCreateNode$2.call(this[clOb],t,e))},createNode:function(t){return dynamicFrom(this[clOb].createNode$1.call(this[clOb],t))},get root(){return dynamicFrom(this[clOb].root)},set root(t){t=dynamicTo(t),this[clOb].root=t},get defs(){return dynamicFrom(this[clOb].defs)},set defs(t){t=dynamicTo(t),this[clOb].defs=t},get sys(){return dynamicFrom(this[clOb].sys)},set sys(t){t=dynamicTo(t),this[clOb].sys=t},init:function(t,e){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),e=void 0===e?null:e,null!==e&&(e=dynamicTo(e)),dynamicFrom(this[clOb].init$2.call(this[clOb],t,e))},save:function(){return dynamicFrom(this[clOb].save$0.call(this[clOb],null))},updateValue:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].updateValue$2.call(this[clOb],t,e))},setNode:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].setNode$2.call(this[clOb],t,e))},addNode:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addNode$2.call(this[clOb],t,e))},removeNode:function(t){return dynamicFrom(this[clOb].removeNode$1.call(this[clOb],t))},get permissions(){return dynamicFrom(this[clOb].permissions)},set permissions(t){t=dynamicTo(t),this[clOb].permissions=t},createResponder:function(t){return dynamicFrom(this[clOb].createResponder$1.call(this[clOb],t))},get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},bitwiseNegate:function(){return dynamicFrom(this[clOb].$not.call(this[clOb],null))}},mdex.SimpleNodeProvider.prototype[clIw]=!0,mdex.SimpleNodeProvider.class=function(){function t(){mdex.SimpleNodeProvider.apply(this,arguments);var t=mdex.SimpleNodeProvider.prototype;overrideFunc(this,t,"getNode","getNode$1"),overrideFunc(this,t,"getOrCreateNode","getOrCreateNode$2"),overrideFunc(this,t,"createNode","createNode$1"),overrideFunc(this,t,"init","init$2"),overrideFunc(this,t,"save","save$0"),overrideFunc(this,t,"updateValue","updateValue$2"),overrideFunc(this,t,"setNode","setNode$2"),overrideFunc(this,t,"addNode","addNode$2"),overrideFunc(this,t,"removeNode","removeNode$1"),overrideFunc(this,t,"createResponder","createResponder$1"),overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"bitwiseNegate","$not")}return t.prototype=Object.create(mdex.SimpleNodeProvider.prototype),t.prototype.constructor=t,t}(),mdex.MutableNodeProvider=function(){this[clOb]=function(){return T.MutableNodeProvider$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.MutableNodeProvider.prototype[clIw]=!0,mdex.MutableNodeProvider.class=function(){function t(){mdex.MutableNodeProvider.apply(this,arguments);mdex.MutableNodeProvider.prototype}return t.prototype=Object.create(mdex.MutableNodeProvider.prototype),t.prototype.constructor=t,t}(),mdex.SerializableNodeProvider=function(){this[clOb]=function(){return T.SerializableNodeProvider$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.SerializableNodeProvider.prototype[clIw]=!0,mdex.SerializableNodeProvider.class=function(){function t(){mdex.SerializableNodeProvider.apply(this,arguments);mdex.SerializableNodeProvider.prototype}return t.prototype=Object.create(mdex.SerializableNodeProvider.prototype),t.prototype.constructor=t,t}(),mdex.AsyncTableResult=function(){this[clOb]=function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),T.AsyncTableResult$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.AsyncTableResult.prototype={get response(){return dynamicFrom(this[clOb].response)},set response(t){t=dynamicTo(t),this[clOb].response=t},get columns(){return dynamicFrom(this[clOb].columns)},set columns(t){t=dynamicTo(t),this[clOb].columns=t},get rows(){return dynamicFrom(this[clOb].rows)},set rows(t){t=dynamicTo(t),this[clOb].rows=t},get status(){return this[clOb].status},set status(t){this[clOb].status=t},get meta(){return dynamicFrom(this[clOb].meta)},set meta(t){t=dynamicTo(t),this[clOb].meta=t},get onClose(){return dynamicFrom(this[clOb].onClose)},set onClose(t){t=dynamicTo(t),this[clOb].onClose=t},get onAck(){return dynamicFrom(this[clOb].onAck)},set onAck(t){t=dynamicTo(t),this[clOb].onAck=t},update:function(t,e,n){return t=dynamicTo(t),e=void 0===e?null:e,n=void 0===n?null:n,null!==n&&(n=dynamicTo(n)),dynamicFrom(this[clOb].update$3.call(this[clOb],t,e,n))},write:function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),dynamicFrom(this[clOb].write$1.call(this[clOb],t))},close:function(){return dynamicFrom(this[clOb].close$0.call(this[clOb],null))}},mdex.AsyncTableResult.prototype[clIw]=!0,mdex.AsyncTableResult.class=function(){function t(){mdex.AsyncTableResult.apply(this,arguments);var t=mdex.AsyncTableResult.prototype;overrideFunc(this,t,"update","update$3"),overrideFunc(this,t,"write","write$1"),overrideFunc(this,t,"close","close$0")}return t.prototype=Object.create(mdex.AsyncTableResult.prototype),t.prototype.constructor=t,t}(),mdex.SimpleTableResult=function(){this[clOb]=function(t,e){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),e=void 0===e?null:e,null!==e&&(e=dynamicTo(e)),T.SimpleTableResult$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.SimpleTableResult.prototype={get columns(){return dynamicFrom(this[clOb].columns)},set columns(t){t=dynamicTo(t),this[clOb].columns=t},get rows(){return dynamicFrom(this[clOb].rows)},set rows(t){t=dynamicTo(t),this[clOb].rows=t}},mdex.SimpleTableResult.prototype[clIw]=!0,mdex.SimpleTableResult.class=function(){function t(){mdex.SimpleTableResult.apply(this,arguments);mdex.SimpleTableResult.prototype}return t.prototype=Object.create(mdex.SimpleTableResult.prototype),t.prototype.constructor=t,t}(),mdex.DefinitionNode=function(){this[clOb]=function(t,e){return e=dynamicTo(e),T.DefinitionNode$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.DefinitionNode.prototype={get provider(){return dynamicFrom(this[clOb].provider)},set provider(t){t=dynamicTo(t),this[clOb].provider=t},setInvokeCallback:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].setInvokeCallback$1.call(this[clOb],t))},invoke:function(t,e,n,c,i){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),i=void 0===i?stat.Permission_CONFIG:i,dynamicFrom(this[clOb].invoke$5.call(this[clOb],t,e,n,c,i))},serialize:function(t){return dynamicFrom(this[clOb].serialize$1.call(this[clOb],t))},load:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].load$1.call(this[clOb],null,t))},updateList:function(t){return dynamicFrom(this[clOb].updateList$1.call(this[clOb],t))},setAttribute:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setAttribute$4.call(this[clOb],null,t,e,n,c))},removeAttribute:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeAttribute$3.call(this[clOb],t,e,n));
},setConfig:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setConfig$4.call(this[clOb],t,e,n,c))},removeConfig:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeConfig$3.call(this[clOb],t,e,n))},setValue:function(t,e,n,c){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=void 0===c?stat.Permission_CONFIG:c,dynamicFrom(this[clOb].setValue$4.call(this[clOb],t,e,n,c))},get loaded(){return dynamicFrom(function(){return this[clOb].get$loaded.call(this[clOb],null)}.apply(this,arguments))},set loaded(t){this[clOb].get$loaded=function(){return t}},onStartListListen:function(){return dynamicFrom(this[clOb].onStartListListen$0.call(this[clOb],null))},onAllListCancel:function(){return dynamicFrom(this[clOb].onAllListCancel$0.call(this[clOb],null))},get path(){return this[clOb].path},set path(t){this[clOb].path=t},get callbacks(){return dynamicFrom(this[clOb].callbacks)},set callbacks(t){t=dynamicTo(t),this[clOb].callbacks=t},subscribe:function(t,e){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},e=void 0===e?1:e,dynamicFrom(this[clOb].subscribe$2.call(this[clOb],t,e))},unsubscribe:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].unsubscribe$1.call(this[clOb],t))},updateValue:function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.force?!1:e.force;return dynamicFrom(this[clOb].updateValue$2$force.call(this[clOb],t,n))},getInvokePermission:function(){return this[clOb].getInvokePermission$0.call(this[clOb],null)},getSetPermission:function(){return this[clOb].getSetPermission$0.call(this[clOb],null)},get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},set:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].$indexSet.call(this[clOb],null,t,e))},get listChangeController(){return dynamicFrom(function(){return this[clOb].get$listChangeController.call(this[clOb],null)}.apply(this,arguments))},set listChangeController(t){t=dynamicTo(t),this[clOb].get$listChangeController=function(){return t}},get listStream(){return dynamicFrom(function(){return this[clOb].get$listStream.call(this[clOb],null)}.apply(this,arguments))},set listStream(t){t=dynamicTo(t),this[clOb].get$listStream=function(){return t}},get lastValueUpdate(){return dynamicFrom(function(){return this[clOb].get$lastValueUpdate.call(this[clOb],null)}.apply(this,arguments))},set lastValueUpdate(t){t=dynamicTo(t),this[clOb].get$lastValueUpdate=function(){return t}},get value(){return dynamicFrom(function(){return this[clOb].get$value.call(this[clOb],null)}.apply(this,arguments))},set value(t){t=dynamicTo(t),this[clOb].get$value=function(){return t}},get exists(){return dynamicFrom(function(){return this[clOb].get$exists.call(this[clOb],null)}.apply(this,arguments))},set exists(t){this[clOb].get$exists=function(){return t}},get listReady(){return dynamicFrom(function(){return this[clOb].get$listReady.call(this[clOb],null)}.apply(this,arguments))},set listReady(t){this[clOb].get$listReady=function(){return t}},get disconnected(){return dynamicFrom(function(){return this[clOb].get$disconnected.call(this[clOb],null)}.apply(this,arguments))},set disconnected(t){this[clOb].get$disconnected=function(){return t}},get valueReady(){return dynamicFrom(function(){return this[clOb].get$valueReady.call(this[clOb],null)}.apply(this,arguments))},set valueReady(t){this[clOb].get$valueReady=function(){return t}},get hasSubscriber(){return dynamicFrom(function(){return this[clOb].get$hasSubscriber.call(this[clOb],null)}.apply(this,arguments))},set hasSubscriber(t){this[clOb].get$hasSubscriber=function(){return t}},get profile(){return dynamicFrom(this[clOb].profile)},set profile(t){t=dynamicTo(t),this[clOb].profile=t},get attributes(){return dynamicFrom(this[clOb].attributes)},set attributes(t){t=dynamicTo(t),this[clOb].attributes=t},getAttribute:function(t){return dynamicFrom(this[clOb].getAttribute$1.call(this[clOb],null,t))},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},getConfig:function(t){return dynamicFrom(this[clOb].getConfig$1.call(this[clOb],t))},get children(){return dynamicFrom(this[clOb].children)},set children(t){t=dynamicTo(t),this[clOb].children=t},addChild:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addChild$2.call(this[clOb],t,e))},removeChild:function(t){return t=dynamicTo(t),this[clOb].removeChild$1.call(this[clOb],t)},getChild:function(t){return dynamicFrom(this[clOb].getChild$1.call(this[clOb],t))},forEachChild:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachChild$1.call(this[clOb],t))},forEachConfig:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachConfig$1.call(this[clOb],t))},forEachAttribute:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachAttribute$1.call(this[clOb],t))},getSimpleMap:function(){return dynamicFrom(this[clOb].getSimpleMap$0.call(this[clOb],null))}},mdex.DefinitionNode.prototype[clIw]=!0,mdex.DefinitionNode.class=function(){function t(){mdex.DefinitionNode.apply(this,arguments);var t=mdex.DefinitionNode.prototype;overrideFunc(this,t,"setInvokeCallback","setInvokeCallback$1"),overrideFunc(this,t,"invoke","invoke$5"),overrideFunc(this,t,"serialize","serialize$1"),overrideFunc(this,t,"load","load$1"),overrideFunc(this,t,"updateList","updateList$1"),overrideFunc(this,t,"setAttribute","setAttribute$4"),overrideFunc(this,t,"removeAttribute","removeAttribute$3"),overrideFunc(this,t,"setConfig","setConfig$4"),overrideFunc(this,t,"removeConfig","removeConfig$3"),overrideFunc(this,t,"setValue","setValue$4"),overrideFunc(this,t,"onStartListListen","onStartListListen$0"),overrideFunc(this,t,"onAllListCancel","onAllListCancel$0"),overrideFunc(this,t,"subscribe","subscribe$2"),overrideFunc(this,t,"unsubscribe","unsubscribe$1"),overrideFunc(this,t,"updateValue","updateValue$2$force"),overrideFunc(this,t,"getInvokePermission","getInvokePermission$0"),overrideFunc(this,t,"getSetPermission","getSetPermission$0"),overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"set","$indexSet"),overrideFunc(this,t,"getAttribute","getAttribute$1"),overrideFunc(this,t,"getConfig","getConfig$1"),overrideFunc(this,t,"addChild","addChild$2"),overrideFunc(this,t,"removeChild","removeChild$1"),overrideFunc(this,t,"getChild","getChild$1"),overrideFunc(this,t,"forEachChild","forEachChild$1"),overrideFunc(this,t,"forEachConfig","forEachConfig$1"),overrideFunc(this,t,"forEachAttribute","forEachAttribute$1"),overrideFunc(this,t,"getSimpleMap","getSimpleMap$0")}return t.prototype=Object.create(mdex.DefinitionNode.prototype),t.prototype.constructor=t,t}(),mdex.Configs=function(){this[clOb]=function(){return T.Configs$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.Configs.prototype={get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},load:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].load$1.call(this[clOb],null,t))}},mdex.Configs.prototype[clIw]=!0,mdex.Configs.class=function(){function t(){mdex.Configs.apply(this,arguments);var t=mdex.Configs.prototype;overrideFunc(this,t,"load","load$1")}return t.prototype=Object.create(mdex.Configs.prototype),t.prototype.constructor=t,t}(),mdex.Configs.getConfig=function(t,e){return e=dynamicTo(e),dynamicFrom(init.allClasses.Configs_getConfig.call(this,t,e))},mdex.ConfigSetting=function(){this[clOb]=function(t,e,n){n=n||{};var c=void 0===n.defaultValue?null:n.defaultValue;return null!==c&&(c=dynamicTo(c)),T.ConfigSetting$.call(this,t,e,c)}.apply(this,arguments),this[clOb][clId]=this},mdex.ConfigSetting.prototype={get name(){return this[clOb].name},set name(t){this[clOb].name=t},get type(){return this[clOb].type},set type(t){this[clOb].type=t},get defaultValue(){return dynamicFrom(this[clOb].defaultValue)},set defaultValue(t){t=dynamicTo(t),this[clOb].defaultValue=t},setConfig:function(t,e,n){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].setConfig$3.call(this[clOb],t,e,n))},removeConfig:function(t,e){return t=dynamicTo(t),e=dynamicTo(e),dynamicFrom(this[clOb].removeConfig$2.call(this[clOb],t,e))}},mdex.ConfigSetting.prototype[clIw]=!0,mdex.ConfigSetting.class=function(){function t(){mdex.ConfigSetting.apply(this,arguments);var t=mdex.ConfigSetting.prototype;overrideFunc(this,t,"setConfig","setConfig$3"),overrideFunc(this,t,"removeConfig","removeConfig$2")}return t.prototype=Object.create(mdex.ConfigSetting.prototype),t.prototype.constructor=t,t}(),mdex.ConfigSetting.fromMap=function(){var t=Object.create(mdex.ConfigSetting.prototype);return t[clOb]=function(t,e){return e=dynamicTo(e),T.ConfigSetting$fromMap.call(this,t,e)}.apply(this,arguments),t},mdex.LocalNodeImpl=function(){this[clOb]=function(t){return T.LocalNodeImpl$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.LocalNodeImpl.prototype={serialize:function(t){return dynamicFrom(this[clOb].serialize$1.call(this[clOb],t))},load:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].load$1.call(this[clOb],null,t))},updateList:function(t){return dynamicFrom(this[clOb].updateList$1.call(this[clOb],t))},setAttribute:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setAttribute$4.call(this[clOb],null,t,e,n,c))},removeAttribute:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeAttribute$3.call(this[clOb],t,e,n))},setConfig:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setConfig$4.call(this[clOb],t,e,n,c))},removeConfig:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeConfig$3.call(this[clOb],t,e,n))},setValue:function(t,e,n,c){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=void 0===c?stat.Permission_CONFIG:c,dynamicFrom(this[clOb].setValue$4.call(this[clOb],t,e,n,c))},get loaded(){return dynamicFrom(function(){return this[clOb].get$loaded.call(this[clOb],null)}.apply(this,arguments))},set loaded(t){this[clOb].get$loaded=function(){return t}},onStartListListen:function(){return dynamicFrom(this[clOb].onStartListListen$0.call(this[clOb],null))},onAllListCancel:function(){return dynamicFrom(this[clOb].onAllListCancel$0.call(this[clOb],null))},get path(){return this[clOb].path},set path(t){this[clOb].path=t},get callbacks(){return dynamicFrom(this[clOb].callbacks)},set callbacks(t){t=dynamicTo(t),this[clOb].callbacks=t},subscribe:function(t,e){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},e=void 0===e?1:e,dynamicFrom(this[clOb].subscribe$2.call(this[clOb],t,e))},unsubscribe:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].unsubscribe$1.call(this[clOb],t))},updateValue:function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.force?!1:e.force;return dynamicFrom(this[clOb].updateValue$2$force.call(this[clOb],t,n))},getInvokePermission:function(){return this[clOb].getInvokePermission$0.call(this[clOb],null)},getSetPermission:function(){return this[clOb].getSetPermission$0.call(this[clOb],null)},invoke:function(t,e,n,c,i){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),i=void 0===i?stat.Permission_CONFIG:i,dynamicFrom(this[clOb].invoke$5.call(this[clOb],t,e,n,c,i))},get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},set:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].$indexSet.call(this[clOb],null,t,e))},get listChangeController(){return dynamicFrom(function(){return this[clOb].get$listChangeController.call(this[clOb],null)}.apply(this,arguments))},set listChangeController(t){t=dynamicTo(t),this[clOb].get$listChangeController=function(){return t}},get listStream(){return dynamicFrom(function(){return this[clOb].get$listStream.call(this[clOb],null)}.apply(this,arguments))},set listStream(t){t=dynamicTo(t),this[clOb].get$listStream=function(){return t}},get lastValueUpdate(){return dynamicFrom(function(){return this[clOb].get$lastValueUpdate.call(this[clOb],null)}.apply(this,arguments))},set lastValueUpdate(t){t=dynamicTo(t),this[clOb].get$lastValueUpdate=function(){return t}},get value(){return dynamicFrom(function(){return this[clOb].get$value.call(this[clOb],null)}.apply(this,arguments))},set value(t){t=dynamicTo(t),this[clOb].get$value=function(){return t}},get exists(){return dynamicFrom(function(){return this[clOb].get$exists.call(this[clOb],null)}.apply(this,arguments))},set exists(t){this[clOb].get$exists=function(){return t}},get listReady(){return dynamicFrom(function(){return this[clOb].get$listReady.call(this[clOb],null)}.apply(this,arguments))},set listReady(t){this[clOb].get$listReady=function(){return t}},get disconnected(){return dynamicFrom(function(){return this[clOb].get$disconnected.call(this[clOb],null)}.apply(this,arguments))},set disconnected(t){this[clOb].get$disconnected=function(){return t}},get valueReady(){return dynamicFrom(function(){return this[clOb].get$valueReady.call(this[clOb],null)}.apply(this,arguments))},set valueReady(t){this[clOb].get$valueReady=function(){return t}},get hasSubscriber(){return dynamicFrom(function(){return this[clOb].get$hasSubscriber.call(this[clOb],null)}.apply(this,arguments))},set hasSubscriber(t){this[clOb].get$hasSubscriber=function(){return t}},get profile(){return dynamicFrom(this[clOb].profile)},set profile(t){t=dynamicTo(t),this[clOb].profile=t},get attributes(){return dynamicFrom(this[clOb].attributes)},set attributes(t){t=dynamicTo(t),this[clOb].attributes=t},getAttribute:function(t){return dynamicFrom(this[clOb].getAttribute$1.call(this[clOb],null,t))},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},getConfig:function(t){return dynamicFrom(this[clOb].getConfig$1.call(this[clOb],t))},get children(){return dynamicFrom(this[clOb].children)},set children(t){t=dynamicTo(t),this[clOb].children=t},addChild:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addChild$2.call(this[clOb],t,e))},removeChild:function(t){return t=dynamicTo(t),this[clOb].removeChild$1.call(this[clOb],t)},getChild:function(t){return dynamicFrom(this[clOb].getChild$1.call(this[clOb],t))},forEachChild:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachChild$1.call(this[clOb],t))},forEachConfig:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachConfig$1.call(this[clOb],t))},forEachAttribute:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachAttribute$1.call(this[clOb],t))},getSimpleMap:function(){return dynamicFrom(this[clOb].getSimpleMap$0.call(this[clOb],null))}},mdex.LocalNodeImpl.prototype[clIw]=!0,mdex.LocalNodeImpl.class=function(){function t(){mdex.LocalNodeImpl.apply(this,arguments);var t=mdex.LocalNodeImpl.prototype;overrideFunc(this,t,"serialize","serialize$1"),overrideFunc(this,t,"load","load$1"),overrideFunc(this,t,"updateList","updateList$1"),overrideFunc(this,t,"setAttribute","setAttribute$4"),overrideFunc(this,t,"removeAttribute","removeAttribute$3"),overrideFunc(this,t,"setConfig","setConfig$4"),overrideFunc(this,t,"removeConfig","removeConfig$3"),overrideFunc(this,t,"setValue","setValue$4"),overrideFunc(this,t,"onStartListListen","onStartListListen$0"),overrideFunc(this,t,"onAllListCancel","onAllListCancel$0"),overrideFunc(this,t,"subscribe","subscribe$2"),overrideFunc(this,t,"unsubscribe","unsubscribe$1"),overrideFunc(this,t,"updateValue","updateValue$2$force"),overrideFunc(this,t,"getInvokePermission","getInvokePermission$0"),overrideFunc(this,t,"getSetPermission","getSetPermission$0"),overrideFunc(this,t,"invoke","invoke$5"),overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"set","$indexSet"),overrideFunc(this,t,"getAttribute","getAttribute$1"),overrideFunc(this,t,"getConfig","getConfig$1"),overrideFunc(this,t,"addChild","addChild$2"),overrideFunc(this,t,"removeChild","removeChild$1"),overrideFunc(this,t,"getChild","getChild$1"),overrideFunc(this,t,"forEachChild","forEachChild$1"),overrideFunc(this,t,"forEachConfig","forEachConfig$1"),overrideFunc(this,t,"forEachAttribute","forEachAttribute$1"),overrideFunc(this,t,"getSimpleMap","getSimpleMap$0")}return t.prototype=Object.create(mdex.LocalNodeImpl.prototype),t.prototype.constructor=t,t}(),mdex.NodeProviderImpl=function(){this[clOb]=function(){return T.NodeProviderImpl$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.NodeProviderImpl.prototype={get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},bitwiseNegate:function(){return dynamicFrom(this[clOb].$not.call(this[clOb],null))}},mdex.NodeProviderImpl.prototype[clIw]=!0,mdex.NodeProviderImpl.class=function(){function t(){mdex.NodeProviderImpl.apply(this,arguments);var t=mdex.NodeProviderImpl.prototype;overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"bitwiseNegate","$not")}return t.prototype=Object.create(mdex.NodeProviderImpl.prototype),t.prototype.constructor=t,t}(),mdex.InvokeResponse=function(){this[clOb]=function(t,e,n){return t=dynamicTo(t),n=dynamicTo(n),T.InvokeResponse$.call(this,t,e,n)}.apply(this,arguments),this[clOb][clId]=this},mdex.InvokeResponse.prototype={get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},updateStream:function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.columns?null:e.columns;null!==n&&(n=dynamicTo(n));var c=void 0===e.meta?null:e.meta;null!==c&&(c=dynamicTo(c));var i=void 0===e.streamStatus?stat.StreamStatus_open:e.streamStatus;return dynamicFrom(this[clOb].updateStream$4$columns$meta$streamStatus.call(this[clOb],t,n,c,i))},startSendingData:function(){return dynamicFrom(this[clOb].startSendingData$0.call(this[clOb],null))},close:function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),dynamicFrom(this[clOb].close$1.call(this[clOb],null,t))},get onClose(){return dynamicFrom(this[clOb].onClose)},set onClose(t){t=dynamicTo(t),this[clOb].onClose=t},get onAck(){return dynamicFrom(this[clOb].onAck)},set onAck(t){t=dynamicTo(t),this[clOb].onAck=t},ackWaiting:function(t){return dynamicFrom(this[clOb].ackWaiting$1.call(this[clOb],t))},ackReceived:function(t){return dynamicFrom(this[clOb].ackReceived$1.call(this[clOb],t))},get responder(){return dynamicFrom(this[clOb].responder)},set responder(t){t=dynamicTo(t),this[clOb].responder=t},get rid(){return this[clOb].rid},set rid(t){this[clOb].rid=t},prepareSending:function(){return dynamicFrom(this[clOb].prepareSending$0.call(this[clOb],null))}},mdex.InvokeResponse.prototype[clIw]=!0,mdex.InvokeResponse.class=function(){function t(){mdex.InvokeResponse.apply(this,arguments);var t=mdex.InvokeResponse.prototype;overrideFunc(this,t,"updateStream","updateStream$4$columns$meta$streamStatus"),overrideFunc(this,t,"startSendingData","startSendingData$0"),overrideFunc(this,t,"close","close$1"),overrideFunc(this,t,"ackWaiting","ackWaiting$1"),overrideFunc(this,t,"ackReceived","ackReceived$1"),overrideFunc(this,t,"prepareSending","prepareSending$0")}return t.prototype=Object.create(mdex.InvokeResponse.prototype),t.prototype.constructor=t,t}(),mdex.ListResponse=function(){this[clOb]=function(t,e,n){return t=dynamicTo(t),n=dynamicTo(n),T.ListResponse$.call(this,t,e,n)}.apply(this,arguments),this[clOb][clId]=this},mdex.ListResponse.prototype={get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},get changes(){return dynamicFrom(this[clOb].changes)},set changes(t){t=dynamicTo(t),this[clOb].changes=t},get initialResponse(){return this[clOb].initialResponse},set initialResponse(t){this[clOb].initialResponse=t},changed:function(t){return dynamicFrom(this[clOb].changed$1.call(this[clOb],t))},startSendingData:function(){return dynamicFrom(this[clOb].startSendingData$0.call(this[clOb],null))},ackWaiting:function(t){return dynamicFrom(this[clOb].ackWaiting$1.call(this[clOb],t))},ackReceived:function(t){return dynamicFrom(this[clOb].ackReceived$1.call(this[clOb],t))},get responder(){return dynamicFrom(this[clOb].responder)},set responder(t){t=dynamicTo(t),this[clOb].responder=t},get rid(){return this[clOb].rid},set rid(t){this[clOb].rid=t},close:function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),dynamicFrom(this[clOb].close$1.call(this[clOb],null,t))},prepareSending:function(){return dynamicFrom(this[clOb].prepareSending$0.call(this[clOb],null))}},mdex.ListResponse.prototype[clIw]=!0,mdex.ListResponse.class=function(){function t(){mdex.ListResponse.apply(this,arguments);var t=mdex.ListResponse.prototype;overrideFunc(this,t,"changed","changed$1"),overrideFunc(this,t,"startSendingData","startSendingData$0"),overrideFunc(this,t,"ackWaiting","ackWaiting$1"),overrideFunc(this,t,"ackReceived","ackReceived$1"),overrideFunc(this,t,"close","close$1"),overrideFunc(this,t,"prepareSending","prepareSending$0")}return t.prototype=Object.create(mdex.ListResponse.prototype),t.prototype.constructor=t,t}(),mdex.RespSubscribeController=function(){this[clOb]=function(t,e,n,c,n){return t=dynamicTo(t),e=dynamicTo(e),T.RespSubscribeController$.call(this,t,e,n,c,n)}.apply(this,arguments),this[clOb][clId]=this},mdex.RespSubscribeController.prototype={get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},get response(){return dynamicFrom(this[clOb].response)},set response(t){t=dynamicTo(t),this[clOb].response=t},get sid(){return this[clOb].sid},set sid(t){this[clOb].sid=t},get lastValues(){return dynamicFrom(this[clOb].lastValues)},set lastValues(t){t=dynamicTo(t),this[clOb].lastValues=t},addValue:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addValue$1.call(this[clOb],t))},mergeValues:function(){return dynamicFrom(this[clOb].mergeValues$0.call(this[clOb],null))},process:function(){return dynamicFrom(this[clOb].process$0.call(this[clOb],null))},destroy:function(){return dynamicFrom(this[clOb].destroy$0.call(this[clOb],null))},set permitted(t){(function(t){return dynamicFrom(this[clOb].set$permitted.call(this[clOb],t))}).call(this,t)},get cacheLevel(){return dynamicFrom(function(){return this[clOb].get$cacheLevel.call(this[clOb],null)}.apply(this,arguments))},set cacheLevel(t){this[clOb].get$cacheLevel=function(){return t}}},mdex.RespSubscribeController.prototype[clIw]=!0,mdex.RespSubscribeController.class=function(){function t(){mdex.RespSubscribeController.apply(this,arguments);var t=mdex.RespSubscribeController.prototype;overrideFunc(this,t,"addValue","addValue$1"),overrideFunc(this,t,"mergeValues","mergeValues$0"),overrideFunc(this,t,"process","process$0"),overrideFunc(this,t,"destroy","destroy$0")}return t.prototype=Object.create(mdex.RespSubscribeController.prototype),t.prototype.constructor=t,t}(),mdex.SubscribeResponse=function(){this[clOb]=function(t,e){return t=dynamicTo(t),T.SubscribeResponse$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.SubscribeResponse.prototype={get subsriptions(){return dynamicFrom(this[clOb].subsriptions)},set subsriptions(t){t=dynamicTo(t),this[clOb].subsriptions=t},get subsriptionids(){return dynamicFrom(this[clOb].subsriptionids)},set subsriptionids(t){t=dynamicTo(t),this[clOb].subsriptionids=t},get changed(){return dynamicFrom(this[clOb].changed)},set changed(t){t=dynamicTo(t),this[clOb].changed=t},add:function(t,e,n,n){return e=dynamicTo(e),dynamicFrom(this[clOb].add$4.call(this[clOb],null,t,e,n,n))},remove:function(t){return dynamicFrom(this[clOb].remove$1.call(this[clOb],null,t))},subscriptionChanged:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].subscriptionChanged$1.call(this[clOb],t))},startSendingData:function(){return dynamicFrom(this[clOb].startSendingData$0.call(this[clOb],null))},ackWaiting:function(t){return dynamicFrom(this[clOb].ackWaiting$1.call(this[clOb],t))},ackReceived:function(t){return dynamicFrom(this[clOb].ackReceived$1.call(this[clOb],t))},get responder(){return dynamicFrom(this[clOb].responder)},set responder(t){t=dynamicTo(t),this[clOb].responder=t},get rid(){return this[clOb].rid},set rid(t){this[clOb].rid=t},close:function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),dynamicFrom(this[clOb].close$1.call(this[clOb],null,t))},prepareSending:function(){return dynamicFrom(this[clOb].prepareSending$0.call(this[clOb],null))}},mdex.SubscribeResponse.prototype[clIw]=!0,mdex.SubscribeResponse.class=function(){function t(){mdex.SubscribeResponse.apply(this,arguments);var t=mdex.SubscribeResponse.prototype;overrideFunc(this,t,"add","add$4"),overrideFunc(this,t,"remove","remove$1"),overrideFunc(this,t,"subscriptionChanged","subscriptionChanged$1"),overrideFunc(this,t,"startSendingData","startSendingData$0"),overrideFunc(this,t,"ackWaiting","ackWaiting$1"),overrideFunc(this,t,"ackReceived","ackReceived$1"),overrideFunc(this,t,"close","close$1"),overrideFunc(this,t,"prepareSending","prepareSending$0")}return t.prototype=Object.create(mdex.SubscribeResponse.prototype),t.prototype.constructor=t,t}(),mdex.RespSubscribeListener=function(){this[clOb]=function(t,e){return t=dynamicTo(t),e=dynamicTo(e),T.RespSubscribeListener$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.RespSubscribeListener.prototype={get callback(){return dynamicFrom(this[clOb].callback)},set callback(t){t=dynamicTo(t),this[clOb].callback=t},get node(){return dynamicFrom(this[clOb].node)},set node(t){t=dynamicTo(t),this[clOb].node=t},cancel:function(){return dynamicFrom(this[clOb].cancel$0.call(this[clOb],null))}},mdex.RespSubscribeListener.prototype[clIw]=!0,mdex.RespSubscribeListener.class=function(){function t(){mdex.RespSubscribeListener.apply(this,arguments);var t=mdex.RespSubscribeListener.prototype;overrideFunc(this,t,"cancel","cancel$0")}return t.prototype=Object.create(mdex.RespSubscribeListener.prototype),t.prototype.constructor=t,t}(),mdex.NodeProvider=function(){this[clOb]=function(){return T.NodeProvider$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.NodeProvider.prototype={get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},bitwiseNegate:function(){return dynamicFrom(this[clOb].$not.call(this[clOb],null))}},mdex.NodeProvider.prototype[clIw]=!0,mdex.NodeProvider.class=function(){function t(){mdex.NodeProvider.apply(this,arguments);var t=mdex.NodeProvider.prototype;overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"bitwiseNegate","$not")}return t.prototype=Object.create(mdex.NodeProvider.prototype),t.prototype.constructor=t,t}(),mdex.LocalNode=function(){this[clOb]=function(t){return T.LocalNode$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.LocalNode.prototype={onStartListListen:function(){return dynamicFrom(this[clOb].onStartListListen$0.call(this[clOb],null))},onAllListCancel:function(){return dynamicFrom(this[clOb].onAllListCancel$0.call(this[clOb],null))},get path(){return this[clOb].path},set path(t){this[clOb].path=t},get callbacks(){return dynamicFrom(this[clOb].callbacks)},set callbacks(t){t=dynamicTo(t),this[clOb].callbacks=t},subscribe:function(t,e){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},e=void 0===e?1:e,dynamicFrom(this[clOb].subscribe$2.call(this[clOb],t,e))},unsubscribe:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].unsubscribe$1.call(this[clOb],t))},updateValue:function(t,e){e=e||{},t=dynamicTo(t);var n=void 0===e.force?!1:e.force;return dynamicFrom(this[clOb].updateValue$2$force.call(this[clOb],t,n))},getInvokePermission:function(){return this[clOb].getInvokePermission$0.call(this[clOb],null)},getSetPermission:function(){return this[clOb].getSetPermission$0.call(this[clOb],null)},invoke:function(t,e,n,c,i){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),i=void 0===i?stat.Permission_CONFIG:i,dynamicFrom(this[clOb].invoke$5.call(this[clOb],t,e,n,c,i))},setAttribute:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setAttribute$4.call(this[clOb],null,t,e,n,c))},removeAttribute:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeAttribute$3.call(this[clOb],t,e,n))},setConfig:function(t,e,n,c){return e=dynamicTo(e),n=dynamicTo(n),c=dynamicTo(c),dynamicFrom(this[clOb].setConfig$4.call(this[clOb],t,e,n,c))},removeConfig:function(t,e,n){return e=dynamicTo(e),n=dynamicTo(n),dynamicFrom(this[clOb].removeConfig$3.call(this[clOb],t,e,n))},setValue:function(t,e,n,c){return t=dynamicTo(t),e=dynamicTo(e),n=dynamicTo(n),c=void 0===c?stat.Permission_CONFIG:c,dynamicFrom(this[clOb].setValue$4.call(this[clOb],t,e,n,c))},get:function(t){return dynamicFrom(this[clOb].$index.call(this[clOb],null,t))},set:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].$indexSet.call(this[clOb],null,t,e))},get listChangeController(){return dynamicFrom(function(){return this[clOb].get$listChangeController.call(this[clOb],null)}.apply(this,arguments))},set listChangeController(t){t=dynamicTo(t),this[clOb].get$listChangeController=function(){return t}},get listStream(){return dynamicFrom(function(){return this[clOb].get$listStream.call(this[clOb],null)}.apply(this,arguments))},set listStream(t){t=dynamicTo(t),this[clOb].get$listStream=function(){return t}},get lastValueUpdate(){return dynamicFrom(function(){return this[clOb].get$lastValueUpdate.call(this[clOb],null)}.apply(this,arguments))},set lastValueUpdate(t){t=dynamicTo(t),this[clOb].get$lastValueUpdate=function(){return t}},get value(){return dynamicFrom(function(){return this[clOb].get$value.call(this[clOb],null)}.apply(this,arguments))},set value(t){t=dynamicTo(t),this[clOb].get$value=function(){return t}},get exists(){return dynamicFrom(function(){return this[clOb].get$exists.call(this[clOb],null)}.apply(this,arguments))},set exists(t){this[clOb].get$exists=function(){return t}},get listReady(){return dynamicFrom(function(){return this[clOb].get$listReady.call(this[clOb],null)}.apply(this,arguments))},set listReady(t){this[clOb].get$listReady=function(){return t}},get disconnected(){return dynamicFrom(function(){return this[clOb].get$disconnected.call(this[clOb],null)}.apply(this,arguments))},set disconnected(t){this[clOb].get$disconnected=function(){return t}},get valueReady(){return dynamicFrom(function(){return this[clOb].get$valueReady.call(this[clOb],null)}.apply(this,arguments))},set valueReady(t){this[clOb].get$valueReady=function(){return t}},get hasSubscriber(){return dynamicFrom(function(){return this[clOb].get$hasSubscriber.call(this[clOb],null)}.apply(this,arguments))},set hasSubscriber(t){this[clOb].get$hasSubscriber=function(){return t}},get profile(){return dynamicFrom(this[clOb].profile);
},set profile(t){t=dynamicTo(t),this[clOb].profile=t},get attributes(){return dynamicFrom(this[clOb].attributes)},set attributes(t){t=dynamicTo(t),this[clOb].attributes=t},getAttribute:function(t){return dynamicFrom(this[clOb].getAttribute$1.call(this[clOb],null,t))},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},getConfig:function(t){return dynamicFrom(this[clOb].getConfig$1.call(this[clOb],t))},get children(){return dynamicFrom(this[clOb].children)},set children(t){t=dynamicTo(t),this[clOb].children=t},addChild:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addChild$2.call(this[clOb],t,e))},removeChild:function(t){return t=dynamicTo(t),this[clOb].removeChild$1.call(this[clOb],t)},getChild:function(t){return dynamicFrom(this[clOb].getChild$1.call(this[clOb],t))},forEachChild:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachChild$1.call(this[clOb],t))},forEachConfig:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachConfig$1.call(this[clOb],t))},forEachAttribute:function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(this[clOb].forEachAttribute$1.call(this[clOb],t))},getSimpleMap:function(){return dynamicFrom(this[clOb].getSimpleMap$0.call(this[clOb],null))}},mdex.LocalNode.prototype[clIw]=!0,mdex.LocalNode.class=function(){function t(){mdex.LocalNode.apply(this,arguments);var t=mdex.LocalNode.prototype;overrideFunc(this,t,"onStartListListen","onStartListListen$0"),overrideFunc(this,t,"onAllListCancel","onAllListCancel$0"),overrideFunc(this,t,"subscribe","subscribe$2"),overrideFunc(this,t,"unsubscribe","unsubscribe$1"),overrideFunc(this,t,"updateValue","updateValue$2$force"),overrideFunc(this,t,"getInvokePermission","getInvokePermission$0"),overrideFunc(this,t,"getSetPermission","getSetPermission$0"),overrideFunc(this,t,"invoke","invoke$5"),overrideFunc(this,t,"setAttribute","setAttribute$4"),overrideFunc(this,t,"removeAttribute","removeAttribute$3"),overrideFunc(this,t,"setConfig","setConfig$4"),overrideFunc(this,t,"removeConfig","removeConfig$3"),overrideFunc(this,t,"setValue","setValue$4"),overrideFunc(this,t,"get","$index"),overrideFunc(this,t,"set","$indexSet"),overrideFunc(this,t,"getAttribute","getAttribute$1"),overrideFunc(this,t,"getConfig","getConfig$1"),overrideFunc(this,t,"addChild","addChild$2"),overrideFunc(this,t,"removeChild","removeChild$1"),overrideFunc(this,t,"getChild","getChild$1"),overrideFunc(this,t,"forEachChild","forEachChild$1"),overrideFunc(this,t,"forEachConfig","forEachConfig$1"),overrideFunc(this,t,"forEachAttribute","forEachAttribute$1"),overrideFunc(this,t,"getSimpleMap","getSimpleMap$0")}return t.prototype=Object.create(mdex.LocalNode.prototype),t.prototype.constructor=t,t}(),mdex.Response=function(){this[clOb]=function(t,e){return t=dynamicTo(t),T.Response$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.Response.prototype={get responder(){return dynamicFrom(this[clOb].responder)},set responder(t){t=dynamicTo(t),this[clOb].responder=t},get rid(){return this[clOb].rid},set rid(t){this[clOb].rid=t},close:function(t){return t=void 0===t?null:t,null!==t&&(t=dynamicTo(t)),dynamicFrom(this[clOb].close$1.call(this[clOb],null,t))},prepareSending:function(){return dynamicFrom(this[clOb].prepareSending$0.call(this[clOb],null))},startSendingData:function(){return dynamicFrom(this[clOb].startSendingData$0.call(this[clOb],null))},ackWaiting:function(t){return dynamicFrom(this[clOb].ackWaiting$1.call(this[clOb],t))},ackReceived:function(t){return dynamicFrom(this[clOb].ackReceived$1.call(this[clOb],t))}},mdex.Response.prototype[clIw]=!0,mdex.Response.class=function(){function t(){mdex.Response.apply(this,arguments);var t=mdex.Response.prototype;overrideFunc(this,t,"close","close$1"),overrideFunc(this,t,"prepareSending","prepareSending$0"),overrideFunc(this,t,"startSendingData","startSendingData$0"),overrideFunc(this,t,"ackWaiting","ackWaiting$1"),overrideFunc(this,t,"ackReceived","ackReceived$1")}return t.prototype=Object.create(mdex.Response.prototype),t.prototype.constructor=t,t}(),mdex.Responder=function(){this[clOb]=function(t,e){return t=dynamicTo(t),e=void 0===e?null:e,T.Responder$.call(this,t,e)}.apply(this,arguments),this[clOb][clId]=this},mdex.Responder.prototype={get reqId(){return this[clOb].reqId},set reqId(t){this[clOb].reqId=t},get groups(){return dynamicFrom(this[clOb].groups)},set groups(t){t=dynamicTo(t),this[clOb].groups=t},updateGroups:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].updateGroups$1.call(this[clOb],t))},get nodeProvider(){return dynamicFrom(this[clOb].nodeProvider)},set nodeProvider(t){t=dynamicTo(t),this[clOb].nodeProvider=t},addResponse:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addResponse$1.call(this[clOb],t))},onData:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].onData$1.call(this[clOb],t))},updateResponse:function(t,e,n){n=n||{},t=dynamicTo(t),e=dynamicTo(e);var c=void 0===n.columns?null:n.columns;null!==c&&(c=dynamicTo(c));var i=void 0===n.meta?null:n.meta;null!==i&&(i=dynamicTo(i));var o=void 0===n.streamStatus?null:n.streamStatus;return dynamicFrom(this[clOb].updateResponse$5$columns$meta$streamStatus.call(this[clOb],t,e,c,i,o))},list:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].list$1.call(this[clOb],null,t))},subscribe:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].subscribe$1.call(this[clOb],t))},unsubscribe:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].unsubscribe$1.call(this[clOb],t))},invoke:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].invoke$1.call(this[clOb],t))},set:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].$set$1.call(this[clOb],t))},remove:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].remove$1.call(this[clOb],null,t))},close:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].close$1.call(this[clOb],null,t))},onDisconnected:function(){return dynamicFrom(this[clOb].onDisconnected$0.call(this[clOb],null))},onReconnected:function(){return dynamicFrom(this[clOb].onReconnected$0.call(this[clOb],null))},addToSendList:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addToSendList$1.call(this[clOb],t))},addProcessor:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].addProcessor$1.call(this[clOb],t))},getSendingData:function(){return dynamicFrom(this[clOb].getSendingData$0.call(this[clOb],null))},get connection(){return dynamicFrom(function(){return this[clOb].get$connection.call(this[clOb],null)}.apply(this,arguments))},set connection(t){t=dynamicTo(t),this[clOb].get$connection=function(){return t}}},mdex.Responder.prototype[clIw]=!0,mdex.Responder.class=function(){function t(){mdex.Responder.apply(this,arguments);var t=mdex.Responder.prototype;overrideFunc(this,t,"updateGroups","updateGroups$1"),overrideFunc(this,t,"addResponse","addResponse$1"),overrideFunc(this,t,"onData","onData$1"),overrideFunc(this,t,"updateResponse","updateResponse$5$columns$meta$streamStatus"),overrideFunc(this,t,"list","list$1"),overrideFunc(this,t,"subscribe","subscribe$1"),overrideFunc(this,t,"unsubscribe","unsubscribe$1"),overrideFunc(this,t,"invoke","invoke$1"),overrideFunc(this,t,"set","$set$1"),overrideFunc(this,t,"remove","remove$1"),overrideFunc(this,t,"close","close$1"),overrideFunc(this,t,"onDisconnected","onDisconnected$0"),overrideFunc(this,t,"onReconnected","onReconnected$0"),overrideFunc(this,t,"addToSendList","addToSendList$1"),overrideFunc(this,t,"addProcessor","addProcessor$1"),overrideFunc(this,t,"getSendingData","getSendingData$0")}return t.prototype=Object.create(mdex.Responder.prototype),t.prototype.constructor=t,t}(),mdex.DSLinkJSON=function(){this[clOb]=function(){return Q.DSLinkJSON$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.DSLinkJSON.prototype={get name(){return this[clOb].name},set name(t){this[clOb].name=t},get version(){return this[clOb].version},set version(t){this[clOb].version=t},get description(){return this[clOb].description},set description(t){this[clOb].description=t},get main(){return this[clOb].main},set main(t){this[clOb].main=t},get engines(){return dynamicFrom(this[clOb].engines)},set engines(t){t=dynamicTo(t),this[clOb].engines=t},get configs(){return dynamicFrom(this[clOb].configs)},set configs(t){t=dynamicTo(t),this[clOb].configs=t},get getDependencies(){return dynamicFrom(this[clOb].getDependencies)},set getDependencies(t){t=dynamicTo(t),this[clOb].getDependencies=t},verify:function(){return dynamicFrom(this[clOb].verify$0.call(this[clOb],null))},save:function(){return dynamicFrom(this[clOb].save$0.call(this[clOb],null))}},mdex.DSLinkJSON.prototype[clIw]=!0,mdex.DSLinkJSON.class=function(){function t(){mdex.DSLinkJSON.apply(this,arguments);var t=mdex.DSLinkJSON.prototype;overrideFunc(this,t,"verify","verify$0"),overrideFunc(this,t,"save","save$0")}return t.prototype=Object.create(mdex.DSLinkJSON.prototype),t.prototype.constructor=t,t}(),mdex.DSLinkJSON.from=function(){var t=Object.create(mdex.DSLinkJSON.prototype);return t[clOb]=function(t){return t=dynamicTo(t),Q.DSLinkJSON_DSLinkJSON$from.call(this,t)}.apply(this,arguments),t},mdex.buildActionIO=function(t){return t=dynamicTo(t),dynamicFrom(init.globalFunctions.buildActionIO().call$1.call(init.globalFunctions,t))},mdex.buildEnumType=function(t){return t=dynamicTo(t),init.globalFunctions.buildEnumType().call$1.call(init.globalFunctions,t)},mdex.Scheduler=function(){this[clOb]=function(){return Q.Scheduler$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.Scheduler.prototype={get currentTimer(){return dynamicFrom(function(){return this[clOb].Scheduler_currentTimer.call(this[clOb],null)}.apply(this,arguments))},set currentTimer(t){t=dynamicTo(t),this[clOb].Scheduler_currentTimer=function(){return t}}},mdex.Scheduler.prototype[clIw]=!0,mdex.Scheduler.class=function(){function t(){mdex.Scheduler.apply(this,arguments);mdex.Scheduler.prototype}return t.prototype=Object.create(mdex.Scheduler.prototype),t.prototype.constructor=t,t}(),mdex.Scheduler.cancelCurrentTimer=function(){return dynamicFrom(init.allClasses.Scheduler_cancelCurrentTimer.call(this,null))},mdex.Scheduler.every=function(t,e){return t=dynamicTo(t),e={call$0:function(){for(var t=Array(arguments.length),n=0;n<t.length;++n)t[n]=dynamicFrom(arguments[n]);return dynamicFrom(e.apply(this,arguments))}},dynamicFrom(init.allClasses.Scheduler_every.call(this,t,e))},mdex.Scheduler.repeat=function(t,e){return e={call$0:function(){for(var t=Array(arguments.length),n=0;n<t.length;++n)t[n]=dynamicFrom(arguments[n]);return dynamicFrom(e.apply(this,arguments))}},dynamicFrom(init.allClasses.Scheduler_repeat.call(this,t,e))},mdex.Scheduler.tick=function(t,e,n){return e=dynamicTo(e),n={call$0:function(){for(var t=Array(arguments.length),e=0;e<t.length;++e)t[e]=dynamicFrom(arguments[e]);return dynamicFrom(n.apply(this,arguments))}},dynamicFrom(init.allClasses.Scheduler_tick.call(this,t,e,n))},mdex.Scheduler.runLater=function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(init.allClasses.Scheduler_runLater.call(this,t))},mdex.Scheduler.later=function(t){return t={call$0:function(){for(var e=Array(arguments.length),n=0;n<e.length;++n)e[n]=dynamicFrom(arguments[n]);return dynamicFrom(t.apply(this,arguments))}},dynamicFrom(init.allClasses.Scheduler_later.call(this,t))},mdex.Scheduler.after=function(t,e){return t=dynamicTo(t),e={call$0:function(){for(var t=Array(arguments.length),n=0;n<t.length;++n)t[n]=dynamicFrom(arguments[n]);return dynamicFrom(e.apply(this,arguments))}},dynamicFrom(init.allClasses.Scheduler_after.call(this,t,e))},mdex.Scheduler.runAfter=function(t,e){return t=dynamicTo(t),e={call$0:function(){for(var t=Array(arguments.length),n=0;n<t.length;++n)t[n]=dynamicFrom(arguments[n]);return dynamicFrom(e.apply(this,arguments))}},dynamicFrom(init.allClasses.Scheduler_runAfter.call(this,t,e))},mdex.Interval=function(){this[clOb]=function(t){return t=dynamicTo(t),Q.Interval$.call(this,t)}.apply(this,arguments),this[clOb][clId]=this},mdex.Interval.prototype={get duration(){return dynamicFrom(this[clOb].duration)},set duration(t){t=dynamicTo(t),this[clOb].duration=t},get inMilliseconds(){return dynamicFrom(function(){return this[clOb].get$inMilliseconds.call(this[clOb],null)}.apply(this,arguments))},set inMilliseconds(t){this[clOb].get$inMilliseconds=function(){return t}}},mdex.Interval.prototype[clIw]=!0,mdex.Interval.class=function(){function t(){mdex.Interval.apply(this,arguments);mdex.Interval.prototype}return t.prototype=Object.create(mdex.Interval.prototype),t.prototype.constructor=t,t}(),mdex.Interval.forMilliseconds=function(){var t=Object.create(mdex.Interval.prototype);return t[clOb]=function(t){return Q.Interval$forMilliseconds.call(this,t)}.apply(this,arguments),t},mdex.Interval.forSeconds=function(){var t=Object.create(mdex.Interval.prototype);return t[clOb]=function(t){return Q.Interval$forSeconds.call(this,t)}.apply(this,arguments),t},mdex.Interval.forMinutes=function(){var t=Object.create(mdex.Interval.prototype);return t[clOb]=function(t){return Q.Interval$forMinutes.call(this,t)}.apply(this,arguments),t},mdex.Interval.forHours=function(){var t=Object.create(mdex.Interval.prototype);return t[clOb]=function(t){return Q.Interval$forHours.call(this,t)}.apply(this,arguments),t},mdex.updateLogLevel=function(t){return dynamicFrom(init.globalFunctions.updateLogLevel().call$1.call(init.globalFunctions,t))},mdex.PrivateKey=function(){},mdex.PrivateKey.prototype[clIw]=!0,mdex.PrivateKey.class=function(){function t(){mdex.PrivateKey.apply(this,arguments);mdex.PrivateKey.prototype}return t.prototype=Object.create(mdex.PrivateKey.prototype),t.prototype.constructor=t,t}(),mdex.PrivateKey.generate=function(){return dynamicFrom(init.allClasses.PrivateKey_generate.call(this,null))},mdex.PrivateKey.generateSync=function(){var t=Object.create(mdex.PrivateKey.prototype);return t[clOb]=function(){return K.PrivateKey_PrivateKey$generateSync.call(this,null)}.apply(this,arguments),t},mdex.PrivateKey.loadFromString=function(){var t=Object.create(mdex.PrivateKey.prototype);return t[clOb]=function(t){return K.PrivateKey_PrivateKey$loadFromString.call(this,t)}.apply(this,arguments),t},mdex.WebSocketConnection=function(){this[clOb]=function(t,e,n){n=n||{},t=dynamicTo(t),e=dynamicTo(e);var c=void 0===n.onConnect?null:n.onConnect;return null!==c&&(c=dynamicTo(c)),Y.WebSocketConnection$.call(this,t,e,c)}.apply(this,arguments),this[clOb][clId]=this},mdex.WebSocketConnection.prototype={get clientLink(){return dynamicFrom(this[clOb].clientLink)},set clientLink(t){t=dynamicTo(t),this[clOb].clientLink=t},get socket(){return dynamicFrom(this[clOb].socket)},set socket(t){t=dynamicTo(t),this[clOb].socket=t},get onConnect(){return dynamicFrom(this[clOb].onConnect)},set onConnect(t){t=dynamicTo(t),this[clOb].onConnect=t},get pingTimer(){return dynamicFrom(this[clOb].pingTimer)},set pingTimer(t){t=dynamicTo(t),this[clOb].pingTimer=t},onPingTimer:function(t){return t=dynamicTo(t),dynamicFrom(this[clOb].onPingTimer$1.call(this[clOb],t))},requireSend:function(){return dynamicFrom(this[clOb].requireSend$0.call(this[clOb],null))},addConnCommand:function(t,e){return e=dynamicTo(e),dynamicFrom(this[clOb].addConnCommand$2.call(this[clOb],t,e))},get binaryInCache(){return dynamicFrom(this[clOb].binaryInCache)},set binaryInCache(t){t=dynamicTo(t),this[clOb].binaryInCache=t},get binaryOutCache(){return dynamicFrom(this[clOb].binaryOutCache)},set binaryOutCache(t){t=dynamicTo(t),this[clOb].binaryOutCache=t},get msgId(){return this[clOb].msgId},set msgId(t){this[clOb].msgId=t},close:function(){return dynamicFrom(this[clOb].close$0.call(this[clOb],null))},get responderChannel(){return dynamicFrom(function(){return this[clOb].get$responderChannel.call(this[clOb],null)}.apply(this,arguments))},set responderChannel(t){t=dynamicTo(t),this[clOb].get$responderChannel=function(){return t}},get requesterChannel(){return dynamicFrom(function(){return this[clOb].get$requesterChannel.call(this[clOb],null)}.apply(this,arguments))},set requesterChannel(t){t=dynamicTo(t),this[clOb].get$requesterChannel=function(){return t}},get onRequesterReady(){return dynamicFrom(function(){return this[clOb].get$onRequesterReady.call(this[clOb],null)}.apply(this,arguments))},set onRequesterReady(t){t=dynamicTo(t),this[clOb].get$onRequesterReady=function(){return t}},get onDisconnected(){return dynamicFrom(function(){return this[clOb].get$onDisconnected.call(this[clOb],null)}.apply(this,arguments))},set onDisconnected(t){t=dynamicTo(t),this[clOb].get$onDisconnected=function(){return t}},get pendingAcks(){return dynamicFrom(this[clOb].pendingAcks)},set pendingAcks(t){t=dynamicTo(t),this[clOb].pendingAcks=t},ack:function(t){return dynamicFrom(this[clOb].ack$1.call(this[clOb],t))}},mdex.WebSocketConnection.prototype[clIw]=!0,mdex.WebSocketConnection.class=function(){function t(){mdex.WebSocketConnection.apply(this,arguments);var t=mdex.WebSocketConnection.prototype;overrideFunc(this,t,"onPingTimer","onPingTimer$1"),overrideFunc(this,t,"requireSend","requireSend$0"),overrideFunc(this,t,"addConnCommand","addConnCommand$2"),overrideFunc(this,t,"close","close$0"),overrideFunc(this,t,"ack","ack$1")}return t.prototype=Object.create(mdex.WebSocketConnection.prototype),t.prototype.constructor=t,t}(),mdex.BrowserECDHLink=function(){this[clOb]=function(t,e,n,c){c=c||{},n=dynamicTo(n);var i=void 0===c.isRequester?!0:c.isRequester,o=void 0===c.isResponder?!0:c.isResponder,r=void 0===c.nodeProvider?null:c.nodeProvider;return null!==r&&(r=dynamicTo(r)),Y.BrowserECDHLink$.call(this,t,e,n,i,o,r)}.apply(this,arguments),this[clOb][clId]=this},mdex.BrowserECDHLink.prototype={get dsId(){return this[clOb].dsId},set dsId(t){this[clOb].dsId=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get responder(){return dynamicFrom(this[clOb].responder)},set responder(t){t=dynamicTo(t),this[clOb].responder=t},get privateKey(){return dynamicFrom(this[clOb].privateKey)},set privateKey(t){t=dynamicTo(t),this[clOb].privateKey=t},get salts(){return dynamicFrom(this[clOb].salts)},set salts(t){t=dynamicTo(t),this[clOb].salts=t},updateSalt:function(t,e){return e=void 0===e?0:e,dynamicFrom(this[clOb].updateSalt$2.call(this[clOb],t,e))},connect:function(){return dynamicFrom(this[clOb].connect$0.call(this[clOb],null))},initWebsocket:function(t){return t=void 0===t?!0:t,dynamicFrom(this[clOb].initWebsocket$1.call(this[clOb],t))},close:function(){return dynamicFrom(this[clOb].close$0.call(this[clOb],null))},get onConnected(){return dynamicFrom(function(){return this[clOb].get$onConnected.call(this[clOb],null)}.apply(this,arguments))},set onConnected(t){t=dynamicTo(t),this[clOb].get$onConnected=function(){return t}},get onRequesterReady(){return dynamicFrom(function(){return this[clOb].get$onRequesterReady.call(this[clOb],null)}.apply(this,arguments))},set onRequesterReady(t){t=dynamicTo(t),this[clOb].get$onRequesterReady=function(){return t}},get nonce(){return dynamicFrom(function(){return this[clOb].get$nonce.call(this[clOb],null)}.apply(this,arguments))},set nonce(t){t=dynamicTo(t),this[clOb].get$nonce=function(){return t}}},mdex.BrowserECDHLink.prototype[clIw]=!0,mdex.BrowserECDHLink.class=function(){function t(){mdex.BrowserECDHLink.apply(this,arguments);var t=mdex.BrowserECDHLink.prototype;overrideFunc(this,t,"updateSalt","updateSalt$2"),overrideFunc(this,t,"connect","connect$0"),overrideFunc(this,t,"initWebsocket","initWebsocket$1"),overrideFunc(this,t,"close","close$0")}return t.prototype=Object.create(mdex.BrowserECDHLink.prototype),t.prototype.constructor=t,t}(),mdex.BrowserUserLink=function(){this[clOb]=function(t){t=t||{};var e=void 0===t.httpUpdateUri?null:t.httpUpdateUri,n=void 0===t.isRequester?!0:t.isRequester,c=void 0===t.isResponder?!0:t.isResponder,i=void 0===t.nodeProvider?null:t.nodeProvider;null!==i&&(i=dynamicTo(i));var o=void 0===t.wsUpdateUri?null:t.wsUpdateUri;return Y.BrowserUserLink$.call(this,e,n,c,i,o)}.apply(this,arguments),this[clOb][clId]=this},mdex.BrowserUserLink.prototype={get session(){return this[clOb].session},set session(t){this[clOb].session=t},get requester(){return dynamicFrom(this[clOb].requester)},set requester(t){t=dynamicTo(t),this[clOb].requester=t},get responder(){return dynamicFrom(this[clOb].responder)},set responder(t){t=dynamicTo(t),this[clOb].responder=t},get nonce(){return dynamicFrom(this[clOb].nonce)},set nonce(t){t=dynamicTo(t),this[clOb].nonce=t},get privateKey(){return dynamicFrom(this[clOb].privateKey)},set privateKey(t){t=dynamicTo(t),this[clOb].privateKey=t},updateSalt:function(t,e){return e=void 0===e?0:e,dynamicFrom(this[clOb].updateSalt$2.call(this[clOb],t,e))},get wsUpdateUri(){return this[clOb].wsUpdateUri},set wsUpdateUri(t){this[clOb].wsUpdateUri=t},get httpUpdateUri(){return this[clOb].httpUpdateUri},set httpUpdateUri(t){this[clOb].httpUpdateUri=t},connect:function(){return dynamicFrom(this[clOb].connect$0.call(this[clOb],null))},initWebsocket:function(t){return t=void 0===t?!0:t,dynamicFrom(this[clOb].initWebsocket$1.call(this[clOb],t))},get onRequesterReady(){return dynamicFrom(function(){return this[clOb].get$onRequesterReady.call(this[clOb],null)}.apply(this,arguments))},set onRequesterReady(t){t=dynamicTo(t),this[clOb].get$onRequesterReady=function(){return t}}},mdex.BrowserUserLink.prototype[clIw]=!0,mdex.BrowserUserLink.class=function(){function t(){mdex.BrowserUserLink.apply(this,arguments);var t=mdex.BrowserUserLink.prototype;overrideFunc(this,t,"updateSalt","updateSalt$2"),overrideFunc(this,t,"connect","connect$0"),overrideFunc(this,t,"initWebsocket","initWebsocket$1")}return t.prototype=Object.create(mdex.BrowserUserLink.prototype),t.prototype.constructor=t,t}(),mdex.getPrivateKey=function(t){t=t||{};var e=void 0===t.storage?null:t.storage;return null!==e&&(e=dynamicTo(e)),dynamicFrom(init.globalFunctions.getPrivateKey().call$1.call(init.globalFunctions,e))},mdex.LocalDataStorage=function(){this[clOb]=function(){return Y.LocalDataStorage$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.LocalDataStorage.prototype={get:function(t){return dynamicFrom(this[clOb].$get$1.call(this[clOb],t))},has:function(t){return dynamicFrom(this[clOb].has$1.call(this[clOb],t))},store:function(t,e){return dynamicFrom(this[clOb].store$2.call(this[clOb],t,e))},remove:function(t){return dynamicFrom(this[clOb].remove$1.call(this[clOb],null,t))}},mdex.LocalDataStorage.prototype[clIw]=!0,mdex.LocalDataStorage.class=function(){function t(){mdex.LocalDataStorage.apply(this,arguments);var t=mdex.LocalDataStorage.prototype;overrideFunc(this,t,"get","$get$1"),overrideFunc(this,t,"has","has$1"),overrideFunc(this,t,"store","store$2"),overrideFunc(this,t,"remove","remove$1")}return t.prototype=Object.create(mdex.LocalDataStorage.prototype),t.prototype.constructor=t,t}(),mdex.DataStorage=function(){this[clOb]=function(){return Y.DataStorage$.call(this,null)}.apply(this,arguments),this[clOb][clId]=this},mdex.DataStorage.prototype[clIw]=!0,mdex.DataStorage.class=function(){function t(){mdex.DataStorage.apply(this,arguments);mdex.DataStorage.prototype}return t.prototype=Object.create(mdex.DataStorage.prototype),t.prototype.constructor=t,t}();

  // END invoke [main].
})();


function mixin(dest) {
  var count = 1;
  var length = arguments.length;

  for(; count < length; count++) {
    var arg = arguments[count];

    for(var prop in arg) {
      if(arg.hasOwnProperty(prop)) {
        dest[prop] = arg[prop];
      }
    }
  }
  return dest;
}

module.exports.createNode = function(opt) {
  var extend = exports.SimpleNode.class;

  function Node(path, provider) {
    extend.call(this, path, provider);
  }

  Node.prototype = Object.create(extend.prototype);

  mixin(Node.prototype, opt);
  return Node;
};

var SimpleNode_super = module.exports.SimpleNode.class;

function SimpleActionNode(path, provider, cb) {
  SimpleNode_super.call(this, path, provider);
  this.cb = cb;
}

SimpleActionNode.prototype = Object.create(SimpleNode_super.prototype);

SimpleActionNode.prototype.onInvoke = function(params) {
  return this.cb(this, params);
};

module.exports.SimpleActionNode = SimpleActionNode;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"buffer":3,"crypto":181,"dhcurve":164,"es6-promises":171,"events":144}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
    return fromTypedArray(that, object)
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = String(string)

  if (string.length === 0) return 0

  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      return string.length
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return string.length * 2
    case 'hex':
      return string.length >>> 1
    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(string).length
    case 'base64':
      return base64ToBytes(string).length
    default:
      return string.length
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function toString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  var i = 0

  for (; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (leadSurrogate) {
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        } else {
          // valid surrogate pair
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      } else {
        // no lead yet

        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":4,"ieee754":5,"is-array":6}],4:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],5:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],6:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],7:[function(require,module,exports){
'use strict';

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')

exports.createHash = exports.Hash = require('create-hash')

exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes;
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-aes');
[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key];
})

var dh = require('diffie-hellman');
[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key];
})

var sign = require('browserify-sign');
[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key];
})

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt');

[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key];
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
  }
})

},{"browserify-aes":11,"browserify-sign":27,"browserify-sign/algos":26,"create-ecdh":73,"create-hash":96,"create-hmac":108,"diffie-hellman":109,"pbkdf2":116,"public-encrypt":117,"randombytes":143}],8:[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hash/md5":98}],9:[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
},{"buffer":3}],10:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('./xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"./aes":9,"./cipherBase":12,"./ghash":15,"./xor":25,"buffer":3,"inherits":145}],11:[function(require,module,exports){
var ciphers = require('./encrypter')
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = require('./decrypter')
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = require('./modes')
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":13,"./encrypter":14,"./modes":16}],12:[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')

module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase () {
  Transform.call(this)
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (outputEnc) {
    outData = outData.toString(outputEnc)
  }
  return outData
}
CipherBase.prototype._transform = function (data, _, next) {
  this.push(this._update(data))
  next()
}
CipherBase.prototype._flush = function (next) {
  try {
    this.push(this._final())
  } catch(e) {
    return next(e)
  }
  next()
}
CipherBase.prototype.final = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = outData.toString(outputEnc)
  }
  return outData
}

}).call(this,require("buffer").Buffer)
},{"buffer":3,"inherits":145,"stream":159}],13:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('./EVP_BytesToKey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":8,"./aes":9,"./authCipher":10,"./cipherBase":12,"./modes":16,"./modes/cbc":17,"./modes/cfb":18,"./modes/cfb1":19,"./modes/cfb8":20,"./modes/ctr":21,"./modes/ecb":22,"./modes/ofb":23,"./streamCipher":24,"buffer":3,"inherits":145}],14:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('./EVP_BytesToKey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":8,"./aes":9,"./authCipher":10,"./cipherBase":12,"./modes":16,"./modes/cbc":17,"./modes/cfb":18,"./modes/cfb1":19,"./modes/cfb8":20,"./modes/ctr":21,"./modes/ecb":22,"./modes/ofb":23,"./streamCipher":24,"buffer":3,"inherits":145}],15:[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],16:[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}

},{}],17:[function(require,module,exports){
var xor = require('../xor')
exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)
  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}
exports.decrypt = function (self, block) {
  var pad = self._prev
  self._prev = block
  var out = self._cipher.decryptBlock(block)
  return xor(out, pad)
}

},{"../xor":25}],18:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len
  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }
    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }
  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
},{"../xor":25,"buffer":3}],19:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],20:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],21:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}
exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

}).call(this,require("buffer").Buffer)
},{"../xor":25,"buffer":3}],22:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],23:[function(require,module,exports){
(function (Buffer){
var xor = require('../xor')
function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}
exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"../xor":25,"buffer":3}],24:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('./cipherBase')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
},{"./aes":9,"./cipherBase":12,"buffer":3,"inherits":145}],25:[function(require,module,exports){
(function (Buffer){
module.exports = xor
function xor (a, b) {
  var len = Math.min(a.length, b.length)
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out.writeUInt8(a[i] ^ b[i], i)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],26:[function(require,module,exports){
(function (Buffer){
'use strict'
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
	sign: 'rsa',
	hash: 'sha1',
	id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
	sign: 'ecdsa',
	hash: 'sha1',
	id: new Buffer('', 'hex')
}
exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

}).call(this,require("buffer").Buffer)
},{"buffer":3}],27:[function(require,module,exports){
(function (Buffer){
'use strict'
var sign = require('./sign')
var verify = require('./verify')
var stream = require('stream')
var inherits = require('inherits')
var _algos = require('./algos')
var createHash = require('create-hash')
var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

exports.createSign = exports.Sign = createSign

function createSign (algorithm) {
  return new Sign(algorithm)
}

exports.createVerify = exports.Verify = createVerify

function createVerify (algorithm) {
  return new Verify(algorithm)
}

inherits(Sign, stream.Writable)

function Sign (algorithm) {
  stream.Writable.call(this)
  var data = algos[algorithm]
  if (!data)
    throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string')
    data = new Buffer(data, enc)
  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)
  if (enc) {
    sig = sig.toString(enc)
  }
  return sig
}

inherits(Verify, stream.Writable)
function Verify (algorithm) {
  stream.Writable.call(this)
  var data = algos[algorithm]
  if (!data)
    throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string')
    data = new Buffer(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  this.end()
  var hash = this._hash.digest()
  if (typeof sig === 'string')
    sig = new Buffer(sig, enc)

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

}).call(this,require("buffer").Buffer)
},{"./algos":26,"./sign":70,"./verify":71,"buffer":3,"create-hash":96,"inherits":145,"stream":159}],28:[function(require,module,exports){
'use strict'
exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

},{}],29:[function(require,module,exports){
(function (module, exports) {

'use strict';

// Utils

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor;
  var TempCtor = function () {};
  TempCtor.prototype = superCtor.prototype;
  ctor.prototype = new TempCtor();
  ctor.prototype.constructor = ctor;
}

// BN

function BN(number, base, endian) {
  // May be `new BN(bn)` ?
  if (number !== null &&
      typeof number === 'object' &&
      Array.isArray(number.words)) {
    return number;
  }

  this.sign = false;
  this.words = null;
  this.length = 0;

  // Reduction context
  this.red = null;

  if (base === 'le' || base === 'be') {
    endian = base;
    base = 10;
  }

  if (number !== null)
    this._init(number || 0, base || 10, endian || 'be');
}
if (typeof module === 'object')
  module.exports = BN;
else
  exports.BN = BN;

BN.BN = BN;
BN.wordSize = 26;

BN.prototype._init = function init(number, base, endian) {
  if (typeof number === 'number') {
    if (number < 0) {
      this.sign = true;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }
    return;
  } else if (typeof number === 'object') {
    return this._initArray(number, base, endian);
  }
  if (base === 'hex')
    base = 16;
  assert(base === (base | 0) && base >= 2 && base <= 36);

  number = number.toString().replace(/\s+/g, '');
  var start = 0;
  if (number[0] === '-')
    start++;

  if (base === 16)
    this._parseHex(number, start);
  else
    this._parseBase(number, base, start);

  if (number[0] === '-')
    this.sign = true;

  this.strip();
};

BN.prototype._initArray = function _initArray(number, base, endian) {
  // Perhaps a Uint8Array
  assert(typeof number.length === 'number');
  if (number.length <= 0) {
    this.words = [ 0 ];
    this.length = 1;
    return this;
  }

  this.length = Math.ceil(number.length / 3);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  var off = 0;
  if (endian === 'be') {
    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  } else if (endian === 'le') {
    for (var i = 0, j = 0; i < number.length; i += 3) {
      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
  }
  return this.strip();
};

function parseHex(str, start, end) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r <<= 4;

    // 'a' - 'f'
    if (c >= 49 && c <= 54)
      r |= c - 49 + 0xa;

    // 'A' - 'F'
    else if (c >= 17 && c <= 22)
      r |= c - 17 + 0xa;

    // '0' - '9'
    else
      r |= c & 0xf;
  }
  return r;
}

BN.prototype._parseHex = function _parseHex(number, start) {
  // Create possibly bigger array to ensure that it fits the number
  this.length = Math.ceil((number.length - start) / 6);
  this.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    this.words[i] = 0;

  // Scan 24-bit chunks and add them to the number
  var off = 0;
  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
    var w = parseHex(number, i, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    off += 24;
    if (off >= 26) {
      off -= 26;
      j++;
    }
  }
  if (i + 6 !== start) {
    var w = parseHex(number, start, i + 6);
    this.words[j] |= (w << off) & 0x3ffffff;
    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
  }
  this.strip();
};

function parseBase(str, start, end, mul) {
  var r = 0;
  var len = Math.min(str.length, end);
  for (var i = start; i < len; i++) {
    var c = str.charCodeAt(i) - 48;

    r *= mul;

    // 'a'
    if (c >= 49)
      r += c - 49 + 0xa;

    // 'A'
    else if (c >= 17)
      r += c - 17 + 0xa;

    // '0' - '9'
    else
      r += c;
  }
  return r;
}

BN.prototype._parseBase = function _parseBase(number, base, start) {
  // Initialize as zero
  this.words = [ 0 ];
  this.length = 1;

  // Find length of limb in base
  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
    limbLen++;
  limbLen--;
  limbPow = (limbPow / base) | 0;

  var total = number.length - start;
  var mod = total % limbLen;
  var end = Math.min(total, total - mod) + start;

  var word = 0;
  for (var i = start; i < end; i += limbLen) {
    word = parseBase(number, i, i + limbLen, base);

    this.imuln(limbPow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }

  if (mod !== 0) {
    var pow = 1;
    var word = parseBase(number, i, number.length, base);

    for (var i = 0; i < mod; i++)
      pow *= base;
    this.imuln(pow);
    if (this.words[0] + word < 0x4000000)
      this.words[0] += word;
    else
      this._iaddn(word);
  }
};

BN.prototype.copy = function copy(dest) {
  dest.words = new Array(this.length);
  for (var i = 0; i < this.length; i++)
    dest.words[i] = this.words[i];
  dest.length = this.length;
  dest.sign = this.sign;
  dest.red = this.red;
};

BN.prototype.clone = function clone() {
  var r = new BN(null);
  this.copy(r);
  return r;
};

// Remove leading `0` from `this`
BN.prototype.strip = function strip() {
  while (this.length > 1 && this.words[this.length - 1] === 0)
    this.length--;
  return this._normSign();
};

BN.prototype._normSign = function _normSign() {
  // -0 = 0
  if (this.length === 1 && this.words[0] === 0)
    this.sign = false;
  return this;
};

BN.prototype.inspect = function inspect() {
  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
};

/*

var zeros = [];
var groupSizes = [];
var groupBases = [];

var s = '';
var i = -1;
while (++i < BN.wordSize) {
  zeros[i] = s;
  s += '0';
}
groupSizes[0] = 0;
groupSizes[1] = 0;
groupBases[0] = 0;
groupBases[1] = 0;
var base = 2 - 1;
while (++base < 36 + 1) {
  var groupSize = 0;
  var groupBase = 1;
  while (groupBase < (1 << BN.wordSize) / base) {
    groupBase *= base;
    groupSize += 1;
  }
  groupSizes[base] = groupSize;
  groupBases[base] = groupBase;
}

*/

var zeros = [
  '',
  '0',
  '00',
  '000',
  '0000',
  '00000',
  '000000',
  '0000000',
  '00000000',
  '000000000',
  '0000000000',
  '00000000000',
  '000000000000',
  '0000000000000',
  '00000000000000',
  '000000000000000',
  '0000000000000000',
  '00000000000000000',
  '000000000000000000',
  '0000000000000000000',
  '00000000000000000000',
  '000000000000000000000',
  '0000000000000000000000',
  '00000000000000000000000',
  '000000000000000000000000',
  '0000000000000000000000000'
];

var groupSizes = [
  0, 0,
  25, 16, 12, 11, 10, 9, 8,
  8, 7, 7, 7, 7, 6, 6,
  6, 6, 6, 6, 6, 5, 5,
  5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5
];

var groupBases = [
  0, 0,
  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
];

BN.prototype.toString = function toString(base, padding) {
  base = base || 10;
  if (base === 16 || base === 'hex') {
    var out = '';
    var off = 0;
    var padding = padding | 0 || 1;
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = this.words[i];
      var word = (((w << off) | carry) & 0xffffff).toString(16);
      carry = (w >>> (24 - off)) & 0xffffff;
      if (carry !== 0 || i !== this.length - 1)
        out = zeros[6 - word.length] + word + out;
      else
        out = word + out;
      off += 2;
      if (off >= 26) {
        off -= 26;
        i--;
      }
    }
    if (carry !== 0)
      out = carry.toString(16) + out;
    while (out.length % padding !== 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else if (base === (base | 0) && base >= 2 && base <= 36) {
    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    var groupSize = groupSizes[base];
    // var groupBase = Math.pow(base, groupSize);
    var groupBase = groupBases[base];
    var out = '';
    var c = this.clone();
    c.sign = false;
    while (c.cmpn(0) !== 0) {
      var r = c.modn(groupBase).toString(base);
      c = c.idivn(groupBase);

      if (c.cmpn(0) !== 0)
        out = zeros[groupSize - r.length] + r + out;
      else
        out = r + out;
    }
    if (this.cmpn(0) === 0)
      out = '0' + out;
    if (this.sign)
      out = '-' + out;
    return out;
  } else {
    assert(false, 'Base should be between 2 and 36');
  }
};

BN.prototype.toJSON = function toJSON() {
  return this.toString(16);
};

BN.prototype.toArray = function toArray() {
  this.strip();
  var res = new Array(this.byteLength());
  res[0] = 0;

  var q = this.clone();
  for (var i = 0; q.cmpn(0) !== 0; i++) {
    var b = q.andln(0xff);
    q.ishrn(8);

    // Assume big-endian
    res[res.length - i - 1] = b;
  }

  return res;
};

if (Math.clz32) {
  BN.prototype._countBits = function _countBits(w) {
    return 32 - Math.clz32(w);
  };
} else {
  BN.prototype._countBits = function _countBits(w) {
    var t = w;
    var r = 0;
    if (t >= 0x1000) {
      r += 13;
      t >>>= 13;
    }
    if (t >= 0x40) {
      r += 7;
      t >>>= 7;
    }
    if (t >= 0x8) {
      r += 4;
      t >>>= 4;
    }
    if (t >= 0x02) {
      r += 2;
      t >>>= 2;
    }
    return r + t;
  };
}

BN.prototype._zeroBits = function _zeroBits(w) {
  // Short-cut
  if (w === 0)
    return 26;

  var t = w;
  var r = 0;
  if ((t & 0x1fff) === 0) {
    r += 13;
    t >>>= 13;
  }
  if ((t & 0x7f) === 0) {
    r += 7;
    t >>>= 7;
  }
  if ((t & 0xf) === 0) {
    r += 4;
    t >>>= 4;
  }
  if ((t & 0x3) === 0) {
    r += 2;
    t >>>= 2;
  }
  if ((t & 0x1) === 0)
    r++;
  return r;
};

// Return number of used bits in a BN
BN.prototype.bitLength = function bitLength() {
  var hi = 0;
  var w = this.words[this.length - 1];
  var hi = this._countBits(w);
  return (this.length - 1) * 26 + hi;
};

// Number of trailing zero bits
BN.prototype.zeroBits = function zeroBits() {
  if (this.cmpn(0) === 0)
    return 0;

  var r = 0;
  for (var i = 0; i < this.length; i++) {
    var b = this._zeroBits(this.words[i]);
    r += b;
    if (b !== 26)
      break;
  }
  return r;
};

BN.prototype.byteLength = function byteLength() {
  return Math.ceil(this.bitLength() / 8);
};

// Return negative clone of `this`
BN.prototype.neg = function neg() {
  if (this.cmpn(0) === 0)
    return this.clone();

  var r = this.clone();
  r.sign = !this.sign;
  return r;
};


// Or `num` with `this` in-place
BN.prototype.ior = function ior(num) {
  this.sign = this.sign || num.sign;

  while (this.length < num.length)
    this.words[this.length++] = 0;

  for (var i = 0; i < num.length; i++)
    this.words[i] = this.words[i] | num.words[i];

  return this.strip();
};


// Or `num` with `this`
BN.prototype.or = function or(num) {
  if (this.length > num.length)
    return this.clone().ior(num);
  else
    return num.clone().ior(this);
};


// And `num` with `this` in-place
BN.prototype.iand = function iand(num) {
  this.sign = this.sign && num.sign;

  // b = min-length(num, this)
  var b;
  if (this.length > num.length)
    b = num;
  else
    b = this;

  for (var i = 0; i < b.length; i++)
    this.words[i] = this.words[i] & num.words[i];

  this.length = b.length;

  return this.strip();
};


// And `num` with `this`
BN.prototype.and = function and(num) {
  if (this.length > num.length)
    return this.clone().iand(num);
  else
    return num.clone().iand(this);
};


// Xor `num` with `this` in-place
BN.prototype.ixor = function ixor(num) {
  this.sign = this.sign || num.sign;

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  for (var i = 0; i < b.length; i++)
    this.words[i] = a.words[i] ^ b.words[i];

  if (this !== a)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];

  this.length = a.length;

  return this.strip();
};


// Xor `num` with `this`
BN.prototype.xor = function xor(num) {
  if (this.length > num.length)
    return this.clone().ixor(num);
  else
    return num.clone().ixor(this);
};


// Set `bit` of `this`
BN.prototype.setn = function setn(bit, val) {
  assert(typeof bit === 'number' && bit >= 0);

  var off = (bit / 26) | 0;
  var wbit = bit % 26;

  while (this.length <= off)
    this.words[this.length++] = 0;

  if (val)
    this.words[off] = this.words[off] | (1 << wbit);
  else
    this.words[off] = this.words[off] & ~(1 << wbit);

  return this.strip();
};


// Add `num` to `this` in-place
BN.prototype.iadd = function iadd(num) {
  // negative + positive
  if (this.sign && !num.sign) {
    this.sign = false;
    var r = this.isub(num);
    this.sign = !this.sign;
    return this._normSign();

  // positive + negative
  } else if (!this.sign && num.sign) {
    num.sign = false;
    var r = this.isub(num);
    num.sign = true;
    return r._normSign();
  }

  // a.length > b.length
  var a;
  var b;
  if (this.length > num.length) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] + b.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    this.words[i] = r & 0x3ffffff;
    carry = r >>> 26;
  }

  this.length = a.length;
  if (carry !== 0) {
    this.words[this.length] = carry;
    this.length++;
  // Copy the rest of the words
  } else if (a !== this) {
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  }

  return this;
};

// Add `num` to `this`
BN.prototype.add = function add(num) {
  if (num.sign && !this.sign) {
    num.sign = false;
    var res = this.sub(num);
    num.sign = true;
    return res;
  } else if (!num.sign && this.sign) {
    this.sign = false;
    var res = num.sub(this);
    this.sign = true;
    return res;
  }

  if (this.length > num.length)
    return this.clone().iadd(num);
  else
    return num.clone().iadd(this);
};

// Subtract `num` from `this` in-place
BN.prototype.isub = function isub(num) {
  // this - (-num) = this + num
  if (num.sign) {
    num.sign = false;
    var r = this.iadd(num);
    num.sign = true;
    return r._normSign();

  // -this - num = -(this + num)
  } else if (this.sign) {
    this.sign = false;
    this.iadd(num);
    this.sign = true;
    return this._normSign();
  }

  // At this point both numbers are positive
  var cmp = this.cmp(num);

  // Optimization - zeroify
  if (cmp === 0) {
    this.sign = false;
    this.length = 1;
    this.words[0] = 0;
    return this;
  }

  // a > b
  var a;
  var b;
  if (cmp > 0) {
    a = this;
    b = num;
  } else {
    a = num;
    b = this;
  }

  var carry = 0;
  for (var i = 0; i < b.length; i++) {
    var r = a.words[i] - b.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }
  for (; carry !== 0 && i < a.length; i++) {
    var r = a.words[i] + carry;
    carry = r >> 26;
    this.words[i] = r & 0x3ffffff;
  }

  // Copy rest of the words
  if (carry === 0 && i < a.length && a !== this)
    for (; i < a.length; i++)
      this.words[i] = a.words[i];
  this.length = Math.max(this.length, i);

  if (a !== this)
    this.sign = true;

  return this.strip();
};

// Subtract `num` from `this`
BN.prototype.sub = function sub(num) {
  return this.clone().isub(num);
};

/*
// NOTE: This could be potentionally used to generate loop-less multiplications
function _genCombMulTo(alen, blen) {
  var len = alen + blen - 1;
  var src = [
    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
        'mask = 0x3ffffff, shift = 0x4000000;',
    'out.length = ' + len + ';'
  ];
  for (var k = 0; k < len; k++) {
    var minJ = Math.max(0, k - alen + 1);
    var maxJ = Math.min(k, blen - 1);

    for (var j = minJ; j <= maxJ; j++) {
      var i = k - j;
      var mul = 'a[' + i + '] * b[' + j + ']';

      if (j === minJ) {
        src.push('w = ' + mul + ' + c;');
        src.push('c = (w / shift) | 0;');
      } else {
        src.push('w += ' + mul + ';');
        src.push('c += (w / shift) | 0;');
      }
      src.push('w &= mask;');
    }
    src.push('o[' + k + '] = w;');
  }
  src.push('if (c !== 0) {',
           '  o[' + k + '] = c;',
           '  out.length++;',
           '}',
           'return out;');

  return src.join('\n');
}
*/

BN.prototype._smallMulTo = function _smallMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = carry >>> 26;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;
    }
    out.words[k] = rword;
    carry = ncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype._bigMulTo = function _bigMulTo(num, out) {
  out.sign = num.sign !== this.sign;
  out.length = this.length + num.length;

  var carry = 0;
  var hncarry = 0;
  for (var k = 0; k < out.length - 1; k++) {
    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    // note that ncarry could be >= 0x3ffffff
    var ncarry = hncarry;
    hncarry = 0;
    var rword = carry & 0x3ffffff;
    var maxJ = Math.min(k, num.length - 1);
    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i] | 0;
      var b = num.words[j] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
      lo = (lo + rword) | 0;
      rword = lo & 0x3ffffff;
      ncarry = (ncarry + (lo >>> 26)) | 0;

      hncarry += ncarry >>> 26;
      ncarry &= 0x3ffffff;
    }
    out.words[k] = rword;
    carry = ncarry;
    ncarry = hncarry;
  }
  if (carry !== 0) {
    out.words[k] = carry;
  } else {
    out.length--;
  }

  return out.strip();
};

BN.prototype.mulTo = function mulTo(num, out) {
  var res;
  if (this.length + num.length < 63)
    res = this._smallMulTo(num, out);
  else
    res = this._bigMulTo(num, out);
  return res;
};

// Multiply `this` by `num`
BN.prototype.mul = function mul(num) {
  var out = new BN(null);
  out.words = new Array(this.length + num.length);
  return this.mulTo(num, out);
};

// In-place Multiplication
BN.prototype.imul = function imul(num) {
  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
    this.words[0] = 0;
    this.length = 1;
    return this;
  }

  var tlen = this.length;
  var nlen = num.length;

  this.sign = num.sign !== this.sign;
  this.length = this.length + num.length;
  this.words[this.length - 1] = 0;

  for (var k = this.length - 2; k >= 0; k--) {
    // Sum all words with the same `i + j = k` and accumulate `carry`,
    // note that carry could be >= 0x3ffffff
    var carry = 0;
    var rword = 0;
    var maxJ = Math.min(k, nlen - 1);
    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
      var i = k - j;
      var a = this.words[i];
      var b = num.words[j];
      var r = a * b;

      var lo = r & 0x3ffffff;
      carry += (r / 0x4000000) | 0;
      lo += rword;
      rword = lo & 0x3ffffff;
      carry += lo >>> 26;
    }
    this.words[k] = rword;
    this.words[k + 1] += carry;
    carry = 0;
  }

  // Propagate overflows
  var carry = 0;
  for (var i = 1; i < this.length; i++) {
    var w = this.words[i] + carry;
    this.words[i] = w & 0x3ffffff;
    carry = w >>> 26;
  }

  return this.strip();
};

BN.prototype.imuln = function imuln(num) {
  assert(typeof num === 'number');

  // Carry
  var carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = this.words[i] * num;
    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    carry >>= 26;
    carry += (w / 0x4000000) | 0;
    // NOTE: lo is 27bit maximum
    carry += lo >>> 26;
    this.words[i] = lo & 0x3ffffff;
  }

  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }

  return this;
};

// `this` * `this`
BN.prototype.sqr = function sqr() {
  return this.mul(this);
};

// `this` * `this` in-place
BN.prototype.isqr = function isqr() {
  return this.mul(this);
};

// Shift-left in-place
BN.prototype.ishln = function ishln(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;
  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

  if (r !== 0) {
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var newCarry = this.words[i] & carryMask;
      var c = (this.words[i] - newCarry) << r;
      this.words[i] = c | carry;
      carry = newCarry >>> (26 - r);
    }
    if (carry) {
      this.words[i] = carry;
      this.length++;
    }
  }

  if (s !== 0) {
    for (var i = this.length - 1; i >= 0; i--)
      this.words[i + s] = this.words[i];
    for (var i = 0; i < s; i++)
      this.words[i] = 0;
    this.length += s;
  }

  return this.strip();
};

// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is present - it will be filled with destroyed bits
BN.prototype.ishrn = function ishrn(bits, hint, extended) {
  assert(typeof bits === 'number' && bits >= 0);
  var h;
  if (hint)
    h = (hint - (hint % 26)) / 26;
  else
    h = 0;

  var r = bits % 26;
  var s = Math.min((bits - r) / 26, this.length);
  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  var maskedWords = extended;

  h -= s;
  h = Math.max(0, h);

  // Extended mode, copy masked part
  if (maskedWords) {
    for (var i = 0; i < s; i++)
      maskedWords.words[i] = this.words[i];
    maskedWords.length = s;
  }

  if (s === 0) {
    // No-op, we should not move anything at all
  } else if (this.length > s) {
    this.length -= s;
    for (var i = 0; i < this.length; i++)
      this.words[i] = this.words[i + s];
  } else {
    this.words[0] = 0;
    this.length = 1;
  }

  var carry = 0;
  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
    var word = this.words[i];
    this.words[i] = (carry << (26 - r)) | (word >>> r);
    carry = word & mask;
  }

  // Push carried bits as a mask
  if (maskedWords && carry !== 0)
    maskedWords.words[maskedWords.length++] = carry;

  if (this.length === 0) {
    this.words[0] = 0;
    this.length = 1;
  }

  this.strip();

  return this;
};

// Shift-left
BN.prototype.shln = function shln(bits) {
  return this.clone().ishln(bits);
};

// Shift-right
BN.prototype.shrn = function shrn(bits) {
  return this.clone().ishrn(bits);
};

// Test if n bit is set
BN.prototype.testn = function testn(bit) {
  assert(typeof bit === 'number' && bit >= 0);
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    return false;
  }

  // Check bit and return
  var w = this.words[s];

  return !!(w & q);
};

// Return only lowers bits of number (in-place)
BN.prototype.imaskn = function imaskn(bits) {
  assert(typeof bits === 'number' && bits >= 0);
  var r = bits % 26;
  var s = (bits - r) / 26;

  assert(!this.sign, 'imaskn works only with positive numbers');

  if (r !== 0)
    s++;
  this.length = Math.min(s, this.length);

  if (r !== 0) {
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    this.words[this.length - 1] &= mask;
  }

  return this.strip();
};

// Return only lowers bits of number
BN.prototype.maskn = function maskn(bits) {
  return this.clone().imaskn(bits);
};

// Add plain number `num` to `this`
BN.prototype.iaddn = function iaddn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.isubn(-num);

  // Possible sign change
  if (this.sign) {
    if (this.length === 1 && this.words[0] < num) {
      this.words[0] = num - this.words[0];
      this.sign = false;
      return this;
    }

    this.sign = false;
    this.isubn(num);
    this.sign = true;
    return this;
  }

  // Add without checks
  return this._iaddn(num);
};

BN.prototype._iaddn = function _iaddn(num) {
  this.words[0] += num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    this.words[i] -= 0x4000000;
    if (i === this.length - 1)
      this.words[i + 1] = 1;
    else
      this.words[i + 1]++;
  }
  this.length = Math.max(this.length, i + 1);

  return this;
};

// Subtract plain number `num` from `this`
BN.prototype.isubn = function isubn(num) {
  assert(typeof num === 'number');
  if (num < 0)
    return this.iaddn(-num);

  if (this.sign) {
    this.sign = false;
    this.iaddn(num);
    this.sign = true;
    return this;
  }

  this.words[0] -= num;

  // Carry
  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    this.words[i] += 0x4000000;
    this.words[i + 1] -= 1;
  }

  return this.strip();
};

BN.prototype.addn = function addn(num) {
  return this.clone().iaddn(num);
};

BN.prototype.subn = function subn(num) {
  return this.clone().isubn(num);
};

BN.prototype.iabs = function iabs() {
  this.sign = false;

  return this;
};

BN.prototype.abs = function abs() {
  return this.clone().iabs();
};

BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
  // Bigger storage is needed
  var len = num.length + shift;
  var i;
  if (this.words.length < len) {
    var t = new Array(len);
    for (var i = 0; i < this.length; i++)
      t[i] = this.words[i];
    this.words = t;
  } else {
    i = this.length;
  }

  // Zeroify rest
  this.length = Math.max(this.length, len);
  for (; i < this.length; i++)
    this.words[i] = 0;

  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var w = this.words[i + shift] + carry;
    var right = num.words[i] * mul;
    w -= right & 0x3ffffff;
    carry = (w >> 26) - ((right / 0x4000000) | 0);
    this.words[i + shift] = w & 0x3ffffff;
  }
  for (; i < this.length - shift; i++) {
    var w = this.words[i + shift] + carry;
    carry = w >> 26;
    this.words[i + shift] = w & 0x3ffffff;
  }

  if (carry === 0)
    return this.strip();

  // Subtraction overflow
  assert(carry === -1);
  carry = 0;
  for (var i = 0; i < this.length; i++) {
    var w = -this.words[i] + carry;
    carry = w >> 26;
    this.words[i] = w & 0x3ffffff;
  }
  this.sign = true;

  return this.strip();
};

BN.prototype._wordDiv = function _wordDiv(num, mode) {
  var shift = this.length - num.length;

  var a = this.clone();
  var b = num;

  // Normalize
  var bhi = b.words[b.length - 1];
  var bhiBits = this._countBits(bhi);
  shift = 26 - bhiBits;
  if (shift !== 0) {
    b = b.shln(shift);
    a.ishln(shift);
    bhi = b.words[b.length - 1];
  }

  // Initialize quotient
  var m = a.length - b.length;
  var q;

  if (mode !== 'mod') {
    q = new BN(null);
    q.length = m + 1;
    q.words = new Array(q.length);
    for (var i = 0; i < q.length; i++)
      q.words[i] = 0;
  }

  var diff = a.clone()._ishlnsubmul(b, 1, m);
  if (!diff.sign) {
    a = diff;
    if (q)
      q.words[m] = 1;
  }

  for (var j = m - 1; j >= 0; j--) {
    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    // (0x7ffffff)
    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    a._ishlnsubmul(b, qj, j);
    while (a.sign) {
      qj--;
      a.sign = false;
      a._ishlnsubmul(b, 1, j);
      if (a.cmpn(0) !== 0)
        a.sign = !a.sign;
    }
    if (q)
      q.words[j] = qj;
  }
  if (q)
    q.strip();
  a.strip();

  // Denormalize
  if (mode !== 'div' && shift !== 0)
    a.ishrn(shift);
  return { div: q ? q : null, mod: a };
};

BN.prototype.divmod = function divmod(num, mode) {
  assert(num.cmpn(0) !== 0);

  if (this.sign && !num.sign) {
    var res = this.neg().divmod(num, mode);
    var div;
    var mod;
    if (mode !== 'mod')
      div = res.div.neg();
    if (mode !== 'div')
      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
    return {
      div: div,
      mod: mod
    };
  } else if (!this.sign && num.sign) {
    var res = this.divmod(num.neg(), mode);
    var div;
    if (mode !== 'mod')
      div = res.div.neg();
    return { div: div, mod: res.mod };
  } else if (this.sign && num.sign) {
    return this.neg().divmod(num.neg(), mode);
  }

  // Both numbers are positive at this point

  // Strip both numbers to approximate shift value
  if (num.length > this.length || this.cmp(num) < 0)
    return { div: new BN(0), mod: this };

  // Very short reduction
  if (num.length === 1) {
    if (mode === 'div')
      return { div: this.divn(num.words[0]), mod: null };
    else if (mode === 'mod')
      return { div: null, mod: new BN(this.modn(num.words[0])) };
    return {
      div: this.divn(num.words[0]),
      mod: new BN(this.modn(num.words[0]))
    };
  }

  return this._wordDiv(num, mode);
};

// Find `this` / `num`
BN.prototype.div = function div(num) {
  return this.divmod(num, 'div').div;
};

// Find `this` % `num`
BN.prototype.mod = function mod(num) {
  return this.divmod(num, 'mod').mod;
};

// Find Round(`this` / `num`)
BN.prototype.divRound = function divRound(num) {
  var dm = this.divmod(num);

  // Fast case - exact division
  if (dm.mod.cmpn(0) === 0)
    return dm.div;

  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

  var half = num.shrn(1);
  var r2 = num.andln(1);
  var cmp = mod.cmp(half);

  // Round down
  if (cmp < 0 || r2 === 1 && cmp === 0)
    return dm.div;

  // Round up
  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
};

BN.prototype.modn = function modn(num) {
  assert(num <= 0x3ffffff);
  var p = (1 << 26) % num;

  var acc = 0;
  for (var i = this.length - 1; i >= 0; i--)
    acc = (p * acc + this.words[i]) % num;

  return acc;
};

// In-place division by number
BN.prototype.idivn = function idivn(num) {
  assert(num <= 0x3ffffff);

  var carry = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var w = this.words[i] + carry * 0x4000000;
    this.words[i] = (w / num) | 0;
    carry = w % num;
  }

  return this.strip();
};

BN.prototype.divn = function divn(num) {
  return this.clone().idivn(num);
};

BN.prototype.egcd = function egcd(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var x = this;
  var y = p.clone();

  if (x.sign)
    x = x.mod(p);
  else
    x = x.clone();

  // A * x + B * y = x
  var A = new BN(1);
  var B = new BN(0);

  // C * x + D * y = y
  var C = new BN(0);
  var D = new BN(1);

  var g = 0;

  while (x.isEven() && y.isEven()) {
    x.ishrn(1);
    y.ishrn(1);
    ++g;
  }

  var yp = y.clone();
  var xp = x.clone();

  while (x.cmpn(0) !== 0) {
    while (x.isEven()) {
      x.ishrn(1);
      if (A.isEven() && B.isEven()) {
        A.ishrn(1);
        B.ishrn(1);
      } else {
        A.iadd(yp).ishrn(1);
        B.isub(xp).ishrn(1);
      }
    }

    while (y.isEven()) {
      y.ishrn(1);
      if (C.isEven() && D.isEven()) {
        C.ishrn(1);
        D.ishrn(1);
      } else {
        C.iadd(yp).ishrn(1);
        D.isub(xp).ishrn(1);
      }
    }

    if (x.cmp(y) >= 0) {
      x.isub(y);
      A.isub(C);
      B.isub(D);
    } else {
      y.isub(x);
      C.isub(A);
      D.isub(B);
    }
  }

  return {
    a: C,
    b: D,
    gcd: y.ishln(g)
  };
};

// This is reduced incarnation of the binary EEA
// above, designated to invert members of the
// _prime_ fields F(p) at a maximal speed
BN.prototype._invmp = function _invmp(p) {
  assert(!p.sign);
  assert(p.cmpn(0) !== 0);

  var a = this;
  var b = p.clone();

  if (a.sign)
    a = a.mod(p);
  else
    a = a.clone();

  var x1 = new BN(1);
  var x2 = new BN(0);

  var delta = b.clone();

  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    while (a.isEven()) {
      a.ishrn(1);
      if (x1.isEven())
        x1.ishrn(1);
      else
        x1.iadd(delta).ishrn(1);
    }
    while (b.isEven()) {
      b.ishrn(1);
      if (x2.isEven())
        x2.ishrn(1);
      else
        x2.iadd(delta).ishrn(1);
    }
    if (a.cmp(b) >= 0) {
      a.isub(b);
      x1.isub(x2);
    } else {
      b.isub(a);
      x2.isub(x1);
    }
  }
  if (a.cmpn(1) === 0)
    return x1;
  else
    return x2;
};

BN.prototype.gcd = function gcd(num) {
  if (this.cmpn(0) === 0)
    return num.clone();
  if (num.cmpn(0) === 0)
    return this.clone();

  var a = this.clone();
  var b = num.clone();
  a.sign = false;
  b.sign = false;

  // Remove common factor of two
  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    a.ishrn(1);
    b.ishrn(1);
  }

  do {
    while (a.isEven())
      a.ishrn(1);
    while (b.isEven())
      b.ishrn(1);

    var r = a.cmp(b);
    if (r < 0) {
      // Swap `a` and `b` to make `a` always bigger than `b`
      var t = a;
      a = b;
      b = t;
    } else if (r === 0 || b.cmpn(1) === 0) {
      break;
    }

    a.isub(b);
  } while (true);

  return b.ishln(shift);
};

// Invert number in the field F(num)
BN.prototype.invm = function invm(num) {
  return this.egcd(num).a.mod(num);
};

BN.prototype.isEven = function isEven() {
  return (this.words[0] & 1) === 0;
};

BN.prototype.isOdd = function isOdd() {
  return (this.words[0] & 1) === 1;
};

// And first word and num
BN.prototype.andln = function andln(num) {
  return this.words[0] & num;
};

// Increment at the bit position in-line
BN.prototype.bincn = function bincn(bit) {
  assert(typeof bit === 'number');
  var r = bit % 26;
  var s = (bit - r) / 26;
  var q = 1 << r;

  // Fast case: bit is much higher than all existing words
  if (this.length <= s) {
    for (var i = this.length; i < s + 1; i++)
      this.words[i] = 0;
    this.words[s] |= q;
    this.length = s + 1;
    return this;
  }

  // Add bit and propagate, if needed
  var carry = q;
  for (var i = s; carry !== 0 && i < this.length; i++) {
    var w = this.words[i];
    w += carry;
    carry = w >>> 26;
    w &= 0x3ffffff;
    this.words[i] = w;
  }
  if (carry !== 0) {
    this.words[i] = carry;
    this.length++;
  }
  return this;
};

BN.prototype.cmpn = function cmpn(num) {
  var sign = num < 0;
  if (sign)
    num = -num;

  if (this.sign && !sign)
    return -1;
  else if (!this.sign && sign)
    return 1;

  num &= 0x3ffffff;
  this.strip();

  var res;
  if (this.length > 1) {
    res = 1;
  } else {
    var w = this.words[0];
    res = w === num ? 0 : w < num ? -1 : 1;
  }
  if (this.sign)
    res = -res;
  return res;
};

// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
BN.prototype.cmp = function cmp(num) {
  if (this.sign && !num.sign)
    return -1;
  else if (!this.sign && num.sign)
    return 1;

  var res = this.ucmp(num);
  if (this.sign)
    return -res;
  else
    return res;
};

// Unsigned comparison
BN.prototype.ucmp = function ucmp(num) {
  // At this point both numbers have the same sign
  if (this.length > num.length)
    return 1;
  else if (this.length < num.length)
    return -1;

  var res = 0;
  for (var i = this.length - 1; i >= 0; i--) {
    var a = this.words[i];
    var b = num.words[i];

    if (a === b)
      continue;
    if (a < b)
      res = -1;
    else if (a > b)
      res = 1;
    break;
  }
  return res;
};

//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
BN.red = function red(num) {
  return new Red(num);
};

BN.prototype.toRed = function toRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  assert(!this.sign, 'red works only with positives');
  return ctx.convertTo(this)._forceRed(ctx);
};

BN.prototype.fromRed = function fromRed() {
  assert(this.red, 'fromRed works only with numbers in reduction context');
  return this.red.convertFrom(this);
};

BN.prototype._forceRed = function _forceRed(ctx) {
  this.red = ctx;
  return this;
};

BN.prototype.forceRed = function forceRed(ctx) {
  assert(!this.red, 'Already a number in reduction context');
  return this._forceRed(ctx);
};

BN.prototype.redAdd = function redAdd(num) {
  assert(this.red, 'redAdd works only with red numbers');
  return this.red.add(this, num);
};

BN.prototype.redIAdd = function redIAdd(num) {
  assert(this.red, 'redIAdd works only with red numbers');
  return this.red.iadd(this, num);
};

BN.prototype.redSub = function redSub(num) {
  assert(this.red, 'redSub works only with red numbers');
  return this.red.sub(this, num);
};

BN.prototype.redISub = function redISub(num) {
  assert(this.red, 'redISub works only with red numbers');
  return this.red.isub(this, num);
};

BN.prototype.redShl = function redShl(num) {
  assert(this.red, 'redShl works only with red numbers');
  return this.red.shl(this, num);
};

BN.prototype.redMul = function redMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.mul(this, num);
};

BN.prototype.redIMul = function redIMul(num) {
  assert(this.red, 'redMul works only with red numbers');
  this.red._verify2(this, num);
  return this.red.imul(this, num);
};

BN.prototype.redSqr = function redSqr() {
  assert(this.red, 'redSqr works only with red numbers');
  this.red._verify1(this);
  return this.red.sqr(this);
};

BN.prototype.redISqr = function redISqr() {
  assert(this.red, 'redISqr works only with red numbers');
  this.red._verify1(this);
  return this.red.isqr(this);
};

// Square root over p
BN.prototype.redSqrt = function redSqrt() {
  assert(this.red, 'redSqrt works only with red numbers');
  this.red._verify1(this);
  return this.red.sqrt(this);
};

BN.prototype.redInvm = function redInvm() {
  assert(this.red, 'redInvm works only with red numbers');
  this.red._verify1(this);
  return this.red.invm(this);
};

// Return negative clone of `this` % `red modulo`
BN.prototype.redNeg = function redNeg() {
  assert(this.red, 'redNeg works only with red numbers');
  this.red._verify1(this);
  return this.red.neg(this);
};

BN.prototype.redPow = function redPow(num) {
  assert(this.red && !num.red, 'redPow(normalNum)');
  this.red._verify1(this);
  return this.red.pow(this, num);
};

// Prime numbers with efficient reduction
var primes = {
  k256: null,
  p224: null,
  p192: null,
  p25519: null
};

// Pseudo-Mersenne prime
function MPrime(name, p) {
  // P = 2 ^ N - K
  this.name = name;
  this.p = new BN(p, 16);
  this.n = this.p.bitLength();
  this.k = new BN(1).ishln(this.n).isub(this.p);

  this.tmp = this._tmp();
}

MPrime.prototype._tmp = function _tmp() {
  var tmp = new BN(null);
  tmp.words = new Array(Math.ceil(this.n / 13));
  return tmp;
};

MPrime.prototype.ireduce = function ireduce(num) {
  // Assumes that `num` is less than `P^2`
  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  var r = num;
  var rlen;

  do {
    this.split(r, this.tmp);
    r = this.imulK(r);
    r = r.iadd(this.tmp);
    rlen = r.bitLength();
  } while (rlen > this.n);

  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  if (cmp === 0) {
    r.words[0] = 0;
    r.length = 1;
  } else if (cmp > 0) {
    r.isub(this.p);
  } else {
    r.strip();
  }

  return r;
};

MPrime.prototype.split = function split(input, out) {
  input.ishrn(this.n, 0, out);
};

MPrime.prototype.imulK = function imulK(num) {
  return num.imul(this.k);
};

function K256() {
  MPrime.call(
    this,
    'k256',
    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
}
inherits(K256, MPrime);

K256.prototype.split = function split(input, output) {
  // 256 = 9 * 26 + 22
  var mask = 0x3fffff;

  var outLen = Math.min(input.length, 9);
  for (var i = 0; i < outLen; i++)
    output.words[i] = input.words[i];
  output.length = outLen;

  if (input.length <= 9) {
    input.words[0] = 0;
    input.length = 1;
    return;
  }

  // Shift by 9 limbs
  var prev = input.words[9];
  output.words[output.length++] = prev & mask;

  for (var i = 10; i < input.length; i++) {
    var next = input.words[i];
    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
    prev = next;
  }
  input.words[i - 10] = prev >>> 22;
  input.length -= 9;
};

K256.prototype.imulK = function imulK(num) {
  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  num.words[num.length] = 0;
  num.words[num.length + 1] = 0;
  num.length += 2;

  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  var hi;
  var lo = 0;
  for (var i = 0; i < num.length; i++) {
    var w = num.words[i];
    hi = w * 0x40;
    lo += w * 0x3d1;
    hi += (lo / 0x4000000) | 0;
    lo &= 0x3ffffff;

    num.words[i] = lo;

    lo = hi;
  }

  // Fast length reduction
  if (num.words[num.length - 1] === 0) {
    num.length--;
    if (num.words[num.length - 1] === 0)
      num.length--;
  }
  return num;
};

function P224() {
  MPrime.call(
    this,
    'p224',
    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
}
inherits(P224, MPrime);

function P192() {
  MPrime.call(
    this,
    'p192',
    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
}
inherits(P192, MPrime);

function P25519() {
  // 2 ^ 255 - 19
  MPrime.call(
    this,
    '25519',
    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
}
inherits(P25519, MPrime);

P25519.prototype.imulK = function imulK(num) {
  // K = 0x13
  var carry = 0;
  for (var i = 0; i < num.length; i++) {
    var hi = num.words[i] * 0x13 + carry;
    var lo = hi & 0x3ffffff;
    hi >>>= 26;

    num.words[i] = lo;
    carry = hi;
  }
  if (carry !== 0)
    num.words[num.length++] = carry;
  return num;
};

// Exported mostly for testing purposes, use plain name instead
BN._prime = function prime(name) {
  // Cached version of prime
  if (primes[name])
    return primes[name];

  var prime;
  if (name === 'k256')
    prime = new K256();
  else if (name === 'p224')
    prime = new P224();
  else if (name === 'p192')
    prime = new P192();
  else if (name === 'p25519')
    prime = new P25519();
  else
    throw new Error('Unknown prime ' + name);
  primes[name] = prime;

  return prime;
};

//
// Base reduction engine
//
function Red(m) {
  if (typeof m === 'string') {
    var prime = BN._prime(m);
    this.m = prime.p;
    this.prime = prime;
  } else {
    this.m = m;
    this.prime = null;
  }
}

Red.prototype._verify1 = function _verify1(a) {
  assert(!a.sign, 'red works only with positives');
  assert(a.red, 'red works only with red numbers');
};

Red.prototype._verify2 = function _verify2(a, b) {
  assert(!a.sign && !b.sign, 'red works only with positives');
  assert(a.red && a.red === b.red,
         'red works only with red numbers');
};

Red.prototype.imod = function imod(a) {
  if (this.prime)
    return this.prime.ireduce(a)._forceRed(this);
  return a.mod(this.m)._forceRed(this);
};

Red.prototype.neg = function neg(a) {
  var r = a.clone();
  r.sign = !r.sign;
  return r.iadd(this.m)._forceRed(this);
};

Red.prototype.add = function add(a, b) {
  this._verify2(a, b);

  var res = a.add(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res._forceRed(this);
};

Red.prototype.iadd = function iadd(a, b) {
  this._verify2(a, b);

  var res = a.iadd(b);
  if (res.cmp(this.m) >= 0)
    res.isub(this.m);
  return res;
};

Red.prototype.sub = function sub(a, b) {
  this._verify2(a, b);

  var res = a.sub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res._forceRed(this);
};

Red.prototype.isub = function isub(a, b) {
  this._verify2(a, b);

  var res = a.isub(b);
  if (res.cmpn(0) < 0)
    res.iadd(this.m);
  return res;
};

Red.prototype.shl = function shl(a, num) {
  this._verify1(a);
  return this.imod(a.shln(num));
};

Red.prototype.imul = function imul(a, b) {
  this._verify2(a, b);
  return this.imod(a.imul(b));
};

Red.prototype.mul = function mul(a, b) {
  this._verify2(a, b);
  return this.imod(a.mul(b));
};

Red.prototype.isqr = function isqr(a) {
  return this.imul(a, a);
};

Red.prototype.sqr = function sqr(a) {
  return this.mul(a, a);
};

Red.prototype.sqrt = function sqrt(a) {
  if (a.cmpn(0) === 0)
    return a.clone();

  var mod3 = this.m.andln(3);
  assert(mod3 % 2 === 1);

  // Fast case
  if (mod3 === 3) {
    var pow = this.m.add(new BN(1)).ishrn(2);
    var r = this.pow(a, pow);
    return r;
  }

  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  //
  // Find Q and S, that Q * 2 ^ S = (P - 1)
  var q = this.m.subn(1);
  var s = 0;
  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
    s++;
    q.ishrn(1);
  }
  assert(q.cmpn(0) !== 0);

  var one = new BN(1).toRed(this);
  var nOne = one.redNeg();

  // Find quadratic non-residue
  // NOTE: Max is such because of generalized Riemann hypothesis.
  var lpow = this.m.subn(1).ishrn(1);
  var z = this.m.bitLength();
  z = new BN(2 * z * z).toRed(this);
  while (this.pow(z, lpow).cmp(nOne) !== 0)
    z.redIAdd(nOne);

  var c = this.pow(z, q);
  var r = this.pow(a, q.addn(1).ishrn(1));
  var t = this.pow(a, q);
  var m = s;
  while (t.cmp(one) !== 0) {
    var tmp = t;
    for (var i = 0; tmp.cmp(one) !== 0; i++)
      tmp = tmp.redSqr();
    assert(i < m);
    var b = this.pow(c, new BN(1).ishln(m - i - 1));

    r = r.redMul(b);
    c = b.redSqr();
    t = t.redMul(c);
    m = i;
  }

  return r;
};

Red.prototype.invm = function invm(a) {
  var inv = a._invmp(this.m);
  if (inv.sign) {
    inv.sign = false;
    return this.imod(inv).redNeg();
  } else {
    return this.imod(inv);
  }
};

Red.prototype.pow = function pow(a, num) {
  var w = [];

  if (num.cmpn(0) === 0)
    return new BN(1);

  var q = num.clone();

  while (q.cmpn(0) !== 0) {
    w.push(q.andln(1));
    q.ishrn(1);
  }

  // Skip leading zeroes
  var res = a;
  for (var i = 0; i < w.length; i++, res = this.sqr(res))
    if (w[i] !== 0)
      break;

  if (++i < w.length) {
    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
      if (w[i] === 0)
        continue;
      res = this.mul(res, q);
    }
  }

  return res;
};

Red.prototype.convertTo = function convertTo(num) {
  var r = num.mod(this.m);
  if (r === num)
    return r.clone();
  else
    return r;
};

Red.prototype.convertFrom = function convertFrom(num) {
  var res = num.clone();
  res.red = null;
  return res;
};

//
// Montgomery method engine
//

BN.mont = function mont(num) {
  return new Mont(num);
};

function Mont(m) {
  Red.call(this, m);

  this.shift = this.m.bitLength();
  if (this.shift % 26 !== 0)
    this.shift += 26 - (this.shift % 26);
  this.r = new BN(1).ishln(this.shift);
  this.r2 = this.imod(this.r.sqr());
  this.rinv = this.r._invmp(this.m);

  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  this.minv.sign = true;
  this.minv = this.minv.mod(this.r);
}
inherits(Mont, Red);

Mont.prototype.convertTo = function convertTo(num) {
  return this.imod(num.shln(this.shift));
};

Mont.prototype.convertFrom = function convertFrom(num) {
  var r = this.imod(num.mul(this.rinv));
  r.red = null;
  return r;
};

Mont.prototype.imul = function imul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
    a.words[0] = 0;
    a.length = 1;
    return a;
  }

  var t = a.imul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.mul = function mul(a, b) {
  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
    return new BN(0)._forceRed(this);

  var t = a.mul(b);
  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  var u = t.isub(c).ishrn(this.shift);
  var res = u;
  if (u.cmp(this.m) >= 0)
    res = u.isub(this.m);
  else if (u.cmpn(0) < 0)
    res = u.iadd(this.m);

  return res._forceRed(this);
};

Mont.prototype.invm = function invm(a) {
  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  var res = this.imod(a._invmp(this.m).mul(this.r2));
  return res._forceRed(this);
};

})(typeof module === 'undefined' || module, this);

},{}],30:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).mod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).mod(p);
  h.imul(q);
  m2.iadd(h);
  var out = new Buffer(m2.imul(blinds.unblinder).mod(priv.modulus).toArray());
  if (out.length < len) {
    var prefix = new Buffer(len - out.length);
    prefix.fill(0);
    out = Buffer.concat([prefix, out], len);
  }
  return out;
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.mod(priv.prime1) || !r.mod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}
}).call(this,require("buffer").Buffer)
},{"bn.js":29,"buffer":3,"randombytes":143}],31:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');

},{"../package.json":51,"./elliptic/curve":34,"./elliptic/curves":37,"./elliptic/ec":38,"./elliptic/hmac-drbg":41,"./elliptic/utils":43,"brorand":44}],32:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');

var getNAF = elliptic.utils.getNAF;
var getJSF = elliptic.utils.getJSF;
var assert = elliptic.utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new bn(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

  // Useful for many curves
  this.zero = new bn(0).toRed(this.red);
  this.one = new bn(1).toRed(this.red);
  this.two = new bn(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new bn(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;
  return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":31,"bn.js":29}],33:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
  this.c = new bn(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new bn(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y = rhs.redMul(lhs.redInvm()).redSqrt();
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y, curve.one);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = z ? new bn(z, 16) : this.curve.one;
    this.t = t && new bn(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":31,"../curve":34,"bn.js":29,"inherits":145}],34:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":32,"./edwards":33,"./mont":35,"./short":36}],35:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.i4 = new bn(4).toRed(this.red).redInvm();
  this.two = new bn(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new bn(x, 16);
    this.z = new bn(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../curve":34,"bn.js":29,"inherits":145}],36:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var bn = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new bn(conf.a, 16).toRed(this.red);
  this.b = new bn(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new bn(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new bn(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new bn(vec.a, 16),
        b: new bn(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : bn.mont(num);
  var tinv = new bn(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new bn(1);
  var y1 = new bn(0);
  var x2 = new bn(0);
  var y2 = new bn(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.sign) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.sign) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
  x = new bn(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.sign) {
      split.k1.sign = !split.k1.sign;
      p = p.neg(true);
    }
    if (split.k2.sign) {
      split.k2.sign = !split.k2.sign;
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new bn(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new bn(0);
  } else {
    this.x = new bn(x, 16);
    this.y = new bn(y, 16);
    this.z = new bn(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new bn(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":31,"../curve":34,"bn.js":29,"inherits":145}],37:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '0',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":31,"./precomputed/secp256k1":42,"hash.js":45}],38:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.shrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new bn(2));
  do {
    var priv = new bn(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.shrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new bn(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray();
  for (var i = bkey.length; i < 21; i++)
    bkey.unshift(0);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray();
  for (var i = nonce.length; i < bytes; i++)
    nonce.unshift(0);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new bn(1));
  do {
    var k = new bn(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.mod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0)
      s = this.n.sub(s);

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  } while (true);
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new bn(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).mod(this.n);
  var u2 = sinv.mul(r).mod(this.n);

  var p = this.g.mulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  return p.getX().mod(this.n).cmp(r) === 0;
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new bn(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.mod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  r = this.curve.pointFromX(isYOdd, r);
  var eNeg = e.neg().mod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  var rInv = signature.r.invm(n);
  return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime = this.recoverPubKey(e, signature, i);

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":31,"./key":39,"./signature":40,"bn.js":29}],39:[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!enc)
    return this.pub;

  var len = this.ec.curve.p.byteLength();
  var x = this.pub.getX().toArray();

  for (var i = x.length; i < len; i++)
    x.unshift(0);

  var res;
  if (this.ec.curve.type !== 'mont') {
    if (compact) {
      res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);
    } else {
      var y = this.pub.getY().toArray();
      for (var i = y.length; i < len; i++)
        y.unshift(0);
      var res = [ 0x04 ].concat(x, y);
    }
  } else {
    res = x;
  }

  return utils.encode(res, enc);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new bn(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.mod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  key = utils.toArray(key, enc);
  if (this.ec.curve.type !== 'mont')
    return this._importPublicShort(key);
  else
    return this._importPublicMont(key);
};

KeyPair.prototype._importPublicShort = function _importPublicShort(key) {
  var len = this.ec.curve.p.byteLength();
  if (key[0] === 0x04 && key.length - 1 === 2 * len) {
    this.pub = this.ec.curve.point(
      key.slice(1, 1 + len),
      key.slice(1 + len, 1 + 2 * len));
  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
    this.pub = this.ec.curve.pointFromX(key[0] === 0x03, key.slice(1, 1 + len));
  }
};

KeyPair.prototype._importPublicMont = function _importPublicMont(key) {
  this.pub = this.ec.curve.point(key, 1);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg) {
  return this.ec.sign(msg, this);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":31,"bn.js":29}],40:[function(require,module,exports){
'use strict';

var bn = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new bn(options.r, 16);
  this.s = new bn(options.s, 16);
  if (options.recoveryParam !== null)
    this.recoveryParam = options.recoveryParam;
  else
    this.recoveryParam = null;
}
module.exports = Signature;

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
    return false;
  var total = data[1];
  if (1 + total > data.length)
    return false;
  var rlen = data[3];
  // Short length notation
  if (rlen >= 0x80)
    return false;
  if (4 + rlen + 2 >= data.length)
    return false;
  if (data[4 + rlen] !== 0x02)
    return false;
  var slen = data[5 + rlen];
  // Short length notation
  if (slen >= 0x80)
    return false;
  if (4 + rlen + 2 + slen > data.length)
    return false;

  this.r = new bn(data.slice(4, 4 + rlen));
  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));
  this.recoveryParam = null;

  return true;
};

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  var total = r.length + s.length + 4;
  var res = [ 0x30, total, 0x02, r.length ];
  res = res.concat(r, [ 0x02, s.length ], s);
  return utils.encode(res, enc);
};

},{"../../elliptic":31,"bn.js":29}],41:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":31,"hash.js":45}],42:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],43:[function(require,module,exports){
'use strict';

var utils = exports;

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.ishrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.ishrn(1);
    k2.ishrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

},{}],44:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof window === 'object') {
  if (window.crypto && window.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      window.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker
  try {
    var crypto = require('cry' + 'pto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{}],45:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":46,"./hash/hmac":47,"./hash/ripemd":48,"./hash/sha":49,"./hash/utils":50}],46:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":45}],47:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":45}],48:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":45}],49:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":45}],50:[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":145}],51:[function(require,module,exports){
module.exports={
  "name": "elliptic",
  "version": "3.1.0",
  "description": "EC cryptography",
  "main": "lib/elliptic.js",
  "scripts": {
    "test": "make lint && mocha --reporter=spec test/*-test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "homepage": "https://github.com/indutny/elliptic",
  "devDependencies": {
    "browserify": "^3.44.2",
    "jscs": "^1.11.3",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0",
    "uglify-js": "^2.4.13"
  },
  "dependencies": {
    "bn.js": "^2.0.3",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "gitHead": "d86cd2a8178f7e7cecbd6dd92eea084e2ab44c13",
  "_id": "elliptic@3.1.0",
  "_shasum": "c21682ef762769b56a74201609105da11d5f60cc",
  "_from": "elliptic@>=3.0.0 <4.0.0",
  "_npmVersion": "2.11.0",
  "_nodeVersion": "2.2.1",
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "dist": {
    "shasum": "c21682ef762769b56a74201609105da11d5f60cc",
    "tarball": "http://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-3.1.0.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],52:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function evp(password, salt, keyLen) {
  keyLen = keyLen/8;
  var ki = 0;
  var ii = 0;
  var key = new Buffer(keyLen);
  var addmd = 0;
  var md, md_buf;
  var i;
  while (true) {
    md = createHash('md5');
    if(addmd++ > 0) {
       md.update(md_buf);
    }
    md.update(password);
    md.update(salt);
    md_buf = md.digest();
    i = 0;
    if(keyLen > 0) {
      while(true) {
        if(keyLen === 0) {
          break;
        }
        if(i === md_buf.length) {
          break;
        }
        key[ki++] = md_buf[i++];
        keyLen--;
       }
    }
   if(keyLen === 0) {
      break;
    }
  }
  for(i=0;i<md_buf.length;i++) {
    md_buf[i] = 0;
  }
  return key;
};
}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hash":96}],53:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],54:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js');

var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  );
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function() {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  );
});
exports.RSAPublicKey = RSAPublicKey;

var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  );
});
exports.PublicKey = PublicKey;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      ).optional()
  );
});

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  );
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  );
});

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  );
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  );
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function() {
  this.choice({
    namedCurve: this.objid()
  });
});

exports.signature = asn1.define('signature', function() {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  );
});

},{"asn1.js":57}],55:[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m;
var startRegex =/^-----BEGIN (.*) KEY-----\r?\n/m;
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m;
var evp = require('./EVP_BytesToKey');
var ciphers = require('browserify-aes');
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0,8), parseInt(match[1]));
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1] + ' KEY';
  return {
    tag: tag,
    data: decrypted
  };
};

// http://stackoverflow.com/a/7033705
function wrap (str) {
  var chunks = []

  for (var i = 0; i < str.length; i += 64) {
    chunks.push(str.slice(i, i + 64))
  }
  return chunks.join("\n")
}

}).call(this,require("buffer").Buffer)
},{"./EVP_BytesToKey":52,"browserify-aes":11,"buffer":3}],56:[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2');
module.exports = parseKeys;

function parseKeys(buffer) {
  var password;
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }

  var stripped = fixProc(buffer, password);

  var type = stripped.tag;
  var data = stripped.data;
  var subtype,ndata;
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
        case '1.2.840.10045.2.1':
        ndata.subjectPrivateKey = ndata.subjectPublicKey;
          return {
            type: 'ec',
            data:  ndata
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(data, password);
      //falling through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch(subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          };
        default: throw new Error('unknown key id ' +  subtype);
      }
      throw new Error('unknown key type ' +  type);
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };
    default: throw new Error('unknown key type ' +  type);
  }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10)/8;
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = ciphers.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}

}).call(this,require("buffer").Buffer)
},{"./aesid.json":53,"./asn1":54,"./fixProc":55,"browserify-aes":11,"buffer":3,"pbkdf2":116}],57:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":58,"./asn1/base":60,"./asn1/constants":64,"./asn1/decoders":66,"./asn1/encoders":68,"bn.js":29}],58:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":57,"inherits":145,"vm":162}],59:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":60,"buffer":3,"inherits":145}],60:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":59,"./node":61,"./reporter":62}],61:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'octstr', 'bitstr', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'ia5str'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input));

  var result = state['default'];
  var present = true;

  var prevKey;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    present = this._peekTag(
      input,
      state.explicit !== null ? state.explicit :
          state.implicit !== null ? state.implicit :
              state.tag || 0,
      state.any
    );
    if (input.isError(present))
      return present;
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input);
    else
      result = this._decodeChoice(input);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      var fail = state.children.some(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input);
      });
      if (fail)
        return err;
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0]);
  else if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._decodeStr(input, tag);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1]);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag);
  else if (tag === 'null_')
    return this._decodeNull(input);
  else if (tag === 'bool')
    return this._decodeBool(input);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0]);
  else if (state.use !== null)
    return this._getUse(state.use, input._reporterState.obj)._decode(input);
  else
    return input.error('unknown tag: ' + tag);

  return null;
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;
  var present = true;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // For error reporting
  var prevKey;

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });

    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (tag === 'octstr' || tag === 'bitstr' || tag === 'ia5str')
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else
    throw new Error('Unsupported tag: ' + tag);
};

},{"../base":60,"minimalistic-assert":69}],62:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  Error.captureStackTrace(this, ReporterError);

  return this;
};

},{"inherits":145}],63:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":64}],64:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":63}],65:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.start();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  return buffer.cut(state);
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der');
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;

    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'ia5str') {
    return buffer.raw().toString();
  } else {
    return this.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values)
    result = values[result.join(' ')];

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return this.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num >= 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":57,"inherits":145}],66:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');

},{"./der":65}],67:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'octstr')
    return this._createEncoderBuffer(str);
  else if (tag === 'bitstr')
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  else if (tag === 'ia5str')
    return this._createEncoderBuffer(str);
  return this.reporter.error('Encoding of string type: ' + tag +
                             ' unsupported');
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/\s+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (num.sign === false && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":57,"buffer":3,"inherits":145}],68:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');

},{"./der":67}],69:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],70:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1')
var BN = require('bn.js')
var elliptic = require('elliptic')
var crt = require('browserify-rsa')
var createHmac = require('create-hmac')
var curves = require('./curves')

module.exports = sign
function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') {
      throw new Error('wrong private key type')
    }
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    return dsaSign(hash, priv, hashType)
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong private key type')
    }
  }
  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}
function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId)
    throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new elliptic.ec(curveId)

  var key = curve.genKeyPair()
  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)
  return new Buffer(out.toDER())
}
function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var montq = BN.mont(q)
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}
function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r)
  // Pad values
  if (s[0] & 0x80)
    s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}
module.exports.getKey = getKey
function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}
function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}
function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}
module.exports.makeKey = makeKey
function makeKey (q, kv, algo) {
  var t
  var k
  while (true) {
    t = new Buffer('')
    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }
    k = bits2int(t, q)
    kv.k =  createHmac(algo, kv.k)
        .update(kv.v)
        .update(new Buffer([0]))
        .digest()
    kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
    if (k.cmp(q) === -1) {
      return k
    }
  }
}
function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

}).call(this,require("buffer").Buffer)
},{"./curves":28,"bn.js":29,"browserify-rsa":30,"buffer":3,"create-hmac":108,"elliptic":31,"parse-asn1":56}],71:[function(require,module,exports){
(function (Buffer){
'use strict'
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var parseKeys = require('parse-asn1')
var elliptic = require('elliptic')
var curves = require('./curves')
var BN = require('bn.js')
module.exports = verify

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}
function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId)
    throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new elliptic.ec(curveId)

  var pubkey = pub.data.subjectPrivateKey.data
  return curve.verify(hash, sig, pubkey)
}
function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montq = BN.mont(q)
  var montp = BN.mont(p)
  var w =  s.invm(q)
  var v = g.toRed(montp)
  .redPow(new BN(hash).mul(w).mod(q))
  .fromRed()
  .mul(
    y.toRed(montp)
    .redPow(r.mul(w).mod(q))
    .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}
function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

}).call(this,require("buffer").Buffer)
},{"./curves":28,"bn.js":29,"buffer":3,"elliptic":31,"parse-asn1":56}],72:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
},{"bn.js":74,"buffer":3,"elliptic":75}],73:[function(require,module,exports){
var createECDH = require('crypto').createECDH;

module.exports = createECDH || require('./browser');
},{"./browser":72,"crypto":7}],74:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],75:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"../package.json":95,"./elliptic/curve":78,"./elliptic/curves":81,"./elliptic/ec":82,"./elliptic/hmac-drbg":85,"./elliptic/utils":87,"brorand":88,"dup":31}],76:[function(require,module,exports){
arguments[4][32][0].apply(exports,arguments)
},{"../../elliptic":75,"bn.js":74,"dup":32}],77:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"../../elliptic":75,"../curve":78,"bn.js":74,"dup":33,"inherits":145}],78:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"./base":76,"./edwards":77,"./mont":79,"./short":80,"dup":34}],79:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"../curve":78,"bn.js":74,"dup":35,"inherits":145}],80:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"../../elliptic":75,"../curve":78,"bn.js":74,"dup":36,"inherits":145}],81:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"../elliptic":75,"./precomputed/secp256k1":86,"dup":37,"hash.js":89}],82:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"../../elliptic":75,"./key":83,"./signature":84,"bn.js":74,"dup":38}],83:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"../../elliptic":75,"bn.js":74,"dup":39}],84:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"../../elliptic":75,"bn.js":74,"dup":40}],85:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"../elliptic":75,"dup":41,"hash.js":89}],86:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"dup":42}],87:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"dup":43}],88:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"dup":44}],89:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"./hash/common":90,"./hash/hmac":91,"./hash/ripemd":92,"./hash/sha":93,"./hash/utils":94,"dup":45}],90:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"../hash":89,"dup":46}],91:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"../hash":89,"dup":47}],92:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"../hash":89,"dup":48}],93:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"../hash":89,"dup":49}],94:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"dup":50,"inherits":145}],95:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],96:[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Transform = require('stream').Transform

function HashNoConstructor(hash) {
  Transform.call(this)

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Transform)

HashNoConstructor.prototype._transform = function (data, _, next) {
  this.buffers.push(data)

  next()
}

HashNoConstructor.prototype._flush = function (next) {
  this.push(this.digest())
  next()
}

HashNoConstructor.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this.buffers.push(data)
  return this
}

HashNoConstructor.prototype.digest = function (enc) {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return enc ? r.toString(enc) : r
}

function Hash(hash) {
  Transform.call(this)

  this._hash = hash
}

inherits(Hash, Transform)

Hash.prototype._transform = function (data, enc, next) {
  if (enc) data = new Buffer(data, enc)

  this._hash.update(data)

  next()
}

Hash.prototype._flush = function (next) {
  this.push(this._hash.digest())
  this._hash = null

  next()
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Hash.prototype.digest = function (enc) {
  var outData = this._hash.digest()

  return enc ? outData.toString(enc) : outData
}

module.exports = function createHash (alg) {
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
},{"./md5":98,"buffer":3,"inherits":145,"ripemd160":99,"sha.js":101,"stream":159}],97:[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
},{"buffer":3}],98:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":97}],99:[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
},{"buffer":3}],100:[function(require,module,exports){
(function (Buffer){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
},{"buffer":3}],101:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":102,"./sha1":103,"./sha224":104,"./sha256":105,"./sha384":106,"./sha512":107}],102:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0, k

  /*
   * SHA-1 has a bitwise rotate left operation. But, SHA is not
   * function calcW() { return rol(W[j - 3] ^ W[j -  8] ^ W[j - 14] ^ W[j - 16], 1) }
   */
  function calcW () { return W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16] }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


}).call(this,require("buffer").Buffer)
},{"./hash":100,"buffer":3,"inherits":145}],103:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301 | 0
  this._b = 0xefcdab89 | 0
  this._c = 0x98badcfe | 0
  this._d = 0x10325476 | 0
  this._e = 0xc3d2e1f0 | 0

  return this
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol (num, cnt) {
  return (num << cnt) | (num >>> (32 - cnt))
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d
  var e = this._e

  var j = 0, k

  function calcW () { return rol(W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16], 1) }
  function loop (w, f) {
    W[j] = w

    var t = rol(a, 5) + f + e + w + k

    e = d
    d = c
    c = rol(b, 30)
    b = a
    a = t
    j++
  }

  k = 1518500249
  while (j < 16) loop(M.readInt32BE(j * 4), (b & c) | ((~b) & d))
  while (j < 20) loop(calcW(), (b & c) | ((~b) & d))
  k = 1859775393
  while (j < 40) loop(calcW(), b ^ c ^ d)
  k = -1894007588
  while (j < 60) loop(calcW(), (b & c) | (b & d) | (c & d))
  k = -899497514
  while (j < 80) loop(calcW(), b ^ c ^ d)

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("buffer").Buffer)
},{"./hash":100,"buffer":3,"inherits":145}],104:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8 | 0
  this._b = 0x367cd507 | 0
  this._c = 0x3070dd17 | 0
  this._d = 0xf70e5939 | 0
  this._e = 0xffc00b31 | 0
  this._f = 0x68581511 | 0
  this._g = 0x64f98fa7 | 0
  this._h = 0xbefa4fa4 | 0

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
},{"./hash":100,"./sha256":105,"buffer":3,"inherits":145}],105:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  return this
}

function S (X, n) {
  return (X >>> n) | (X << (32 - n))
}

function R (X, n) {
  return (X >>> n)
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z))
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z))
}

function Sigma0256 (x) {
  return (S(x, 2) ^ S(x, 13) ^ S(x, 22))
}

function Sigma1256 (x) {
  return (S(x, 6) ^ S(x, 11) ^ S(x, 25))
}

function Gamma0256 (x) {
  return (S(x, 7) ^ S(x, 18) ^ R(x, 3))
}

function Gamma1256 (x) {
  return (S(x, 17) ^ S(x, 19) ^ R(x, 10))
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var j = 0

  function calcW () { return Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16] }
  function loop (w) {
    W[j] = w

    var T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w
    var T2 = Sigma0256(a) + Maj(a, b, c)

    h = g
    g = f
    f = e
    e = d + T1
    d = c
    c = b
    b = a
    a = T1 + T2

    j++
  }

  while (j < 16) loop(M.readInt32BE(j * 4))
  while (j < 64) loop(calcW())

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
},{"./hash":100,"buffer":3,"inherits":145}],106:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._a = 0xcbbb9d5d | 0
  this._b = 0x629a292a | 0
  this._c = 0x9159015a | 0
  this._d = 0x152fecd8 | 0
  this._e = 0x67332667 | 0
  this._f = 0x8eb44a87 | 0
  this._g = 0xdb0c2e0d | 0
  this._h = 0x47b5481d | 0

  this._al = 0xc1059ed8 | 0
  this._bl = 0x367cd507 | 0
  this._cl = 0x3070dd17 | 0
  this._dl = 0xf70e5939 | 0
  this._el = 0xffc00b31 | 0
  this._fl = 0x68581511 | 0
  this._gl = 0x64f98fa7 | 0
  this._hl = 0xbefa4fa4 | 0

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
},{"./hash":100,"./sha512":107,"buffer":3,"inherits":145}],107:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._a = 0x6a09e667 | 0
  this._b = 0xbb67ae85 | 0
  this._c = 0x3c6ef372 | 0
  this._d = 0xa54ff53a | 0
  this._e = 0x510e527f | 0
  this._f = 0x9b05688c | 0
  this._g = 0x1f83d9ab | 0
  this._h = 0x5be0cd19 | 0

  this._al = 0xf3bcc908 | 0
  this._bl = 0x84caa73b | 0
  this._cl = 0xfe94f82b | 0
  this._dl = 0x5f1d36f1 | 0
  this._el = 0xade682d1 | 0
  this._fl = 0x2b3e6c1f | 0
  this._gl = 0xfb41bd6b | 0
  this._hl = 0x137e2179 | 0

  return this
}

function S (X, Xl, n) {
  return (X >>> n) | (Xl << (32 - n))
}

function Ch (x, y, z) {
  return ((x & y) ^ ((~x) & z))
}

function Maj (x, y, z) {
  return ((x & y) ^ (x & z) ^ (y & z))
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  var i = 0, j = 0
  var Wi, Wil
  function calcW () {
    var x = W[j - 15 * 2]
    var xl = W[j - 15 * 2 + 1]
    var gamma0 = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
    var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

    x = W[j - 2 * 2]
    xl = W[j - 2 * 2 + 1]
    var gamma1 = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
    var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7 = W[j - 7 * 2]
    var Wi7l = W[j - 7 * 2 + 1]

    var Wi16 = W[j - 16 * 2]
    var Wi16l = W[j - 16 * 2 + 1]

    Wil = gamma0l + Wi7l
    Wi = gamma0 + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
    Wil = Wil + gamma1l
    Wi = Wi + gamma1 + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
    Wil = Wil + Wi16l
    Wi = Wi + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)
  }

  function loop () {
    W[j] = Wi
    W[j + 1] = Wil

    var maj = Maj(a, b, c)
    var majl = Maj(al, bl, cl)

    var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
    var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
    var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
    var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

    // t1 = h + sigma1 + ch + K[i] + W[i]
    var Ki = K[j]
    var Kil = K[j + 1]

    var ch = Ch(e, f, g)
    var chl = Ch(el, fl, gl)

    var t1l = hl + sigma1l
    var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
    t1l = t1l + chl
    t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
    t1l = t1l + Kil
    t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
    t1l = t1l + Wil
    t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl
    var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

    h = g
    hl = gl
    g = f
    gl = fl
    f = e
    fl = el
    el = (dl + t1l) | 0
    e = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
    d = c
    dl = cl
    c = b
    cl = bl
    b = a
    bl = al
    al = (t1l + t2l) | 0
    a = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0

    i++
    j += 2
  }

  while (i < 16) {
    Wi = M.readInt32BE(j * 4)
    Wil = M.readInt32BE(j * 4 + 4)

    loop()
  }

  while (i < 80) {
    calcW()
    loop()
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
  this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
  this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
  this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
  this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
  this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
  this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
  this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._a, this._al, 0)
  writeInt64BE(this._b, this._bl, 8)
  writeInt64BE(this._c, this._cl, 16)
  writeInt64BE(this._d, this._dl, 24)
  writeInt64BE(this._e, this._el, 32)
  writeInt64BE(this._f, this._fl, 40)
  writeInt64BE(this._g, this._gl, 48)
  writeInt64BE(this._h, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
},{"./hash":100,"buffer":3,"inherits":145}],108:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)

  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hash/browser":96,"inherits":145,"stream":159}],109:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || (typeof enc === 'string' && ['hex', 'binary', 'base64'].indexOf(enc) === -1)) {
    genc = generator;
    generator = enc;
    enc = undefined;
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)
},{"./lib/dh":110,"./lib/generatePrime":111,"./lib/primes":112,"buffer":3}],110:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;
  
  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;
    
    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      } 
      break;
    default: 
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function defineError (self, error) {
  try {
    Object.defineProperty(self, 'verifyError', {
      enumerable: true,
      value: error,
      writable: false
    });
  } catch(e) {
    self.verifyError = error;
  }
}
function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = void 0;
  this._priv = void 0;
  
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
    defineError(this, checkPrime(this.__prime, generator));
  } else {
    defineError(this, 8);
  }
}

DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
}).call(this,require("buffer").Buffer)
},{"./generatePrime":111,"bn.js":113,"buffer":3,"miller-rabin":114,"randombytes":143}],111:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);
  var runs, comp;
  function generateRandom(bits) {
    runs = -1;
    var out = new BN(randomBytes(Math.ceil(bits / 8)));
    while (out.bitLength() > bits) {
      out.ishrn(1);
    }
    if (out.isEven()) {
      out.iadd(ONE);
    }
    if (!out.testn(1)) {
      out.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (out.mod(TWENTYFOUR).cmp(ELEVEN)) {
        out.iadd(FOUR);
      }
      comp = {
        major: [TWENTYFOUR],
        minor: [TWELVE]
      };
    } else if (!gen.cmp(FIVE)) {
      rem = out.mod(TEN);
      while (rem.cmp(THREE)) {
        out.iadd(FOUR);
        rem = out.mod(TEN);
      }
      comp = {
        major: [FOUR, SIXTEEN],
        minor: [TWO, EIGHT]
      };
    } else {
      comp = {
        major: [FOUR],
        minor: [TWO]
      };
    }
    return out;
  }
  var num = generateRandom(bits);

  var n2 = num.shrn(1);

  while (true) {
    while (num.bitLength() > bits) {
      num = generateRandom(bits);
      n2 = num.shrn(1);
    }
    runs++;
    if (simpleSieve(n2) &&  simpleSieve(num) &&
      fermatTest(n2) &&  fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
    num.iadd(comp.major[runs%comp.major.length]);
    n2.iadd(comp.minor[runs%comp.minor.length]);
  }

}
},{"bn.js":113,"miller-rabin":114,"randombytes":143}],112:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],113:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],114:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":113,"brorand":115}],115:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"dup":44}],116:[function(require,module,exports){
(function (Buffer){
var createHmac = require('create-hmac')
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

exports.pbkdf2 = pbkdf2
function pbkdf2 (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  if (typeof callback !== 'function') {
    throw new Error('No callback provided to pbkdf2')
  }

  var result = pbkdf2Sync(password, salt, iterations, keylen, digest)
  setTimeout(function () {
    callback(undefined, result)
  })
}

exports.pbkdf2Sync = pbkdf2Sync
function pbkdf2Sync (password, salt, iterations, keylen, digest) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC) {
    throw new TypeError('Bad key length')
  }

  digest = digest || 'sha1'

  if (!Buffer.isBuffer(password)) password = new Buffer(password, 'binary')
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, 'binary')

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k]
      }
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hmac":108}],117:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":139,"./publicEncrypt":140}],118:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":3,"create-hash":96}],119:[function(require,module,exports){
arguments[4][29][0].apply(exports,arguments)
},{"dup":29}],120:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"bn.js":119,"buffer":3,"dup":30,"randombytes":143}],121:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"buffer":3,"create-hash":96,"dup":52}],122:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"dup":53}],123:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"asn1.js":126,"dup":54}],124:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"./EVP_BytesToKey":121,"browserify-aes":11,"buffer":3,"dup":55}],125:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"./aesid.json":122,"./asn1":123,"./fixProc":124,"browserify-aes":11,"buffer":3,"dup":56,"pbkdf2":116}],126:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"./asn1/api":127,"./asn1/base":129,"./asn1/constants":133,"./asn1/decoders":135,"./asn1/encoders":137,"bn.js":119,"dup":57}],127:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../asn1":126,"dup":58,"inherits":145,"vm":162}],128:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../base":129,"buffer":3,"dup":59,"inherits":145}],129:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./buffer":128,"./node":130,"./reporter":131,"dup":60}],130:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"../base":129,"dup":61,"minimalistic-assert":138}],131:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"dup":62,"inherits":145}],132:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"../constants":133,"dup":63}],133:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"./der":132,"dup":64}],134:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"../../asn1":126,"dup":65,"inherits":145}],135:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./der":134,"dup":66}],136:[function(require,module,exports){
arguments[4][67][0].apply(exports,arguments)
},{"../../asn1":126,"buffer":3,"dup":67,"inherits":145}],137:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"./der":136,"dup":68}],138:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"dup":69}],139:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":118,"./withPublic":141,"./xor":142,"bn.js":119,"browserify-rsa":120,"buffer":3,"create-hash":96,"parse-asn1":125}],140:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":118,"./withPublic":141,"./xor":142,"bn.js":119,"browserify-rsa":120,"buffer":3,"create-hash":96,"parse-asn1":125,"randombytes":143}],141:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
},{"bn.js":119,"buffer":3}],142:[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],143:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var crypto = global.crypto || global.msCrypto
if(crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}
function randomBytes(size, cb) {
  var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
    /* This will not work in older browsers.
     * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
     */

  crypto.getRandomValues(bytes);
  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }
  return bytes;
}
function oldBrowser() {
  throw new Error(
      'secure random number generation not supported by this browser\n'+
      'use chrome, FireFox or Internet Explorer 11'
    )
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":147,"buffer":3}],144:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],145:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],146:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],147:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],148:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":149}],149:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":151,"./_stream_writable":153,"_process":147,"core-util-is":154,"inherits":145}],150:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":152,"core-util-is":154,"inherits":145}],151:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":149,"_process":147,"buffer":3,"core-util-is":154,"events":144,"inherits":145,"isarray":146,"stream":159,"string_decoder/":160,"util":2}],152:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":149,"core-util-is":154,"inherits":145}],153:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":149,"_process":147,"buffer":3,"core-util-is":154,"inherits":145,"stream":159}],154:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":3}],155:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":150}],156:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":149,"./lib/_stream_passthrough.js":150,"./lib/_stream_readable.js":151,"./lib/_stream_transform.js":152,"./lib/_stream_writable.js":153,"stream":159}],157:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":152}],158:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":153}],159:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":144,"inherits":145,"readable-stream/duplex.js":148,"readable-stream/passthrough.js":155,"readable-stream/readable.js":156,"readable-stream/transform.js":157,"readable-stream/writable.js":158}],160:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":3}],161:[function(require,module,exports){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
},{"process/browser.js":147}],162:[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":163}],163:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],164:[function(require,module,exports){
(function (Buffer){
var common = require('./common.js'),
    sjcl = require('../vendor/sjcl.js'),
    _ = require('goal');

var NamedCurve = {
  'prime256v1': 256
};

function urlSafe(message) {
  return _.replaceAll(_.replaceAll(_.replaceAll(message.toString('base64'), '+', '-'), '/', '_'), '=', '');
}

function bnToBuf(bn) {
  return new Buffer(sjcl.codec.bytes.fromBits(bn));
}

function bufToBn(buf) {
  return sjcl.bn.fromBits(sjcl.codec.bytes.toBits(buf));
}

function PrivateKey(curve, d) {
  this.curve = curve;
  this.d = d;
}

PrivateKey.prototype.getSharedSecret = function(publicKey) {
  if(!(publicKey instanceof common.Point))
  throw new Error('publicKey must be a Point');

  var curve = sjcl.ecc.curves['c' + (NamedCurve[publicKey.curve] || publicKey.curve)];

  var x = bufToBn(publicKey.x);
  var y = bufToBn(publicKey.y);

  var point = new sjcl.ecc.point(curve, x, y);
  var exponent = bufToBn(this.d);

  var secret = new Buffer(sjcl.codec.bytes.fromBits(point.mult(exponent).x.toBits()));
  return secret;
};

PrivateKey.prototype.getPublicKey = function() {
  var exponent = bufToBn(this.d);
  var curve = sjcl.ecc.curves['c' + (NamedCurve[this.curve] || this.curve)];

  var publicKey = curve.G.mult(exponent);

  var x = bnToBuf(publicKey.x.toBits());
  var y = bnToBuf(publicKey.y.toBits());

  return new common.Point(this.curve, x, y);
};

function generateKeyPair(curve) {
  var keys = sjcl.ecc.basicKey.generateKeys('basicKey')(NamedCurve[curve] || curve, 0);

  var pub = keys.pub.get();
  var sec = keys.sec.get();

  return {
    publicKey: new common.Point(curve, bnToBuf(pub.x), bnToBuf(pub.y)),
    privateKey: new PrivateKey(curve, bnToBuf(sec))
  };
}

module.exports = _.mixin({
  PrivateKey: PrivateKey,
  generateKeyPair: generateKeyPair
}, common);

}).call(this,require("buffer").Buffer)
},{"../vendor/sjcl.js":170,"./common.js":165,"buffer":3,"goal":166}],165:[function(require,module,exports){
(function (Buffer){
/*
 * Only supports NIST-recomended curves,
 * following the limitations of the Web Crypto API.
 */
var NamedCurve = {
  'P256': 'prime256v1'
};

function Point(curve, x, y) {
  this.curve = curve;
  this.x = x;
  this.y = y;
}

Point.fromEncoded = function(curve, encoded, compressed) {
  compressed = compressed || false;
  if(encoded.readUInt8(0) === 0x04) {
    var length = (encoded.length - 1) / 2;

    var x = new Buffer(length);
    var y = new Buffer(length);

    encoded.copy(x, 0, 1, 1 + length);
    encoded.copy(y, 0, 1 + length);

    return new Point(curve, x, y);
  } else {
    // TODO compressed
  }
};

Point.prototype.equals = function(point) {
  return this.x.toString('hex') === point.x.toString('hex') &&
         this.y.toString('hex') === point.y.toString('hex') &&
         this.curve === point.curve;
};

Point.prototype.getEncoded = function(compressed) {
  compressed = compressed || false;
  if(compressed) {
    // TODO
  } else {
    var buf = new Buffer(1 + this.x.length + this.y.length);

    buf.writeUInt8(0x04, 0);
    this.x.copy(buf, 1);
    this.y.copy(buf, 1 + this.x.length);

    return buf;
  }
};

module.exports = {
  NamedCurve: NamedCurve,
  Point: Point
};

}).call(this,require("buffer").Buffer)
},{"buffer":3}],166:[function(require,module,exports){
var c = require('./lib/collections.js');

module.exports = Object.freeze(c.mixin({}, c, require('./lib/helpers.js')));

},{"./lib/collections.js":167,"./lib/helpers.js":168}],167:[function(require,module,exports){
/* jslint node: true */
"use strict";

var _ = require('./helpers.js');

function args(arr) {
  return Array.prototype.slice.call(arr);
}

function each(obj, callback, thisArg) {
  if(typeof thisArg !== "undefined")
    callback = callback.bind(thisArg);
  
  var type = _.typeOf(obj),
      count = 0,
      keys = Object.keys(obj),
      length = keys.length;

  for(; count < length; count++) {
    var key = keys[count];
    callback(obj[key], type === 'object' ? key : count, obj);
  }
}

function isEmpty(obj) {
  for(var prop in obj) {
    if(obj.hasOwnProperty(prop))
      return false;
  }
  return true;
}

function mixin(dest) {
  var args = module.exports.args(arguments).splice(1),
      count = 0,
      length = args.length;
  for(; count < length; count++) {
    var arg = args[count];
    for(var prop in arg) {
      if(arg.hasOwnProperty(prop)) {
        dest[prop] = arg[prop];
      }
    }
  }
  return dest;
}

function map(obj, callback, thisArg) {
  if(typeof thisArg !== "undefined")
    callback = callback.bind(thisArg);
    
  var type = _.typeOf(obj),
      count = 0,
      keys = Object.keys(obj),
      length = keys.length,
      returned = type === 'object' ? {} : [];

  for(; count < length; count++) {
    var key = keys[count];
    if(type === 'object') {
      returned[key] = callback(obj[key], key, obj);
    } else {
      returned.push(callback(obj[key], count, obj));
    }
  }

  return returned;
}

function removeWhere(arr, callback) {
  var returned = arr.slice();
  each(arr, function(value, count, obj) {
    if(callback(value, count, obj))
      returned = returned.splice(0, arr.indexOf(value)).concat(returned.splice(arr.indexOf(value) + 1));
  });
  return returned;
}

module.exports = {
  args: args,
  each: each,
  isEmpty: isEmpty,
  mixin: mixin,
  map: map,
  removeWhere: removeWhere
};

},{"./helpers.js":168}],168:[function(require,module,exports){
/* jslint node: true */
"use strict";

var hash = require('hashcode').hashCode(),
    _ = require('./collections.js');

function findChild(obj, pathArray) {
  pathArray.forEach(function(path) {
    if(!obj.hasOwnProperty(path))
      throw 'findChild: Object does not have property!\n' + obj;
    obj = obj[path];
  });
  return obj;
}

// implementation of node's util.inherits,
// works in the browser as well
function inherits(constructor, superConstructor) {
  constructor.prototype = Object.create(superConstructor.prototype, {
    constructor: {
      value: constructor
    }
  });
  return constructor;
}

function replaceAll(string, query, replacement) {
  replacement = replacement || "";
  return string.split(query).join(replacement);
}

function toNumber(value) {
  var type = typeOf(value);
  if(type === 'undefined' || type === 'null')
    return 0;
  if(type === 'number')
    return value;
  if(type === 'boolean')
    return value ? 1 : 0;
  if(type === 'string')
    return hash.value(value);

  var valueOf = value.valueOf();
  if(['undefined', 'null', 'number', 'boolean', 'string'].indexOf(typeOf(type)) !== -1)
    return toNumber(valueOf);

  return 0;
}

// ES6 iterator ready solution.
function typeOf(value) {
  var returned = Object.prototype.toString.call(value);
  return returned.substring(1, returned.length - 1).split(' ')[1].toLowerCase();
}

module.exports = {
  findChild: findChild,
  inherits: inherits,
  replaceAll: replaceAll,
  toNumber: toNumber,
  typeOf: typeOf
};

},{"./collections.js":167,"hashcode":169}],169:[function(require,module,exports){
/*
 * Hashcode.js 1.0.2
 * https://github.com/stuartbannerman/hashcode
 *
 * Copyright 2013 Stuart Bannerman (me@stuartbannerman.com)    
 * Released under the MIT license
 *
 * Date: 07-04-2013
 *
 * packaged as npm module by
 * A. Siebert, ask@touchableheroes.com
 *
 * usage:
 * ------------------------------------
 * var encode = require( 'hashcode' ).hashCode;
 * var hash = encode().value( "my string value" ); 
 */
exports.hashCode = function () {

    // Hashes a string
    var hash = function (string) {
        var string = string.toString(), hash = 0, i;
        for (i = 0; i < string.length; i++) {
            hash = (((hash << 5) - hash) + string.charCodeAt(i)) & 0xFFFFFFFF;
        }

        return hash;
    };
    // Deep hashes an object
    var object = function (obj) {
        var result = 0;
        for (var property in obj) {
            if (obj.hasOwnProperty(property)) {
                result += hash(property + value(obj[property]));
            }
        }

        return result;
    };
    // Does a type check on the passed in value and calls the appropriate hash method
    var value = function (value) {
        var types =
        {
            'string': hash,
            'number': hash,
            'boolean': hash,
            'object': object
            // functions are excluded because they are not representative of the state of an object
            // types 'undefined' or 'null' will have a hash of 0
        };
        var type = typeof value;

        return value != null && types[type] ? types[type](value) + hash(type) : 0;
    };

    return {
        value: value
    };
};
},{}],170:[function(require,module,exports){
"use strict";var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};if(typeof module!=="undefined"&&module.exports){module.exports=sjcl}if(typeof define==="function"){define([],function(){return sjcl})}sjcl.cipher.aes=function(h){if(!this._tables[0][0][0]){this._precompute()}var d,c,e,g,l,f=this._tables[0][4],k=this._tables[1],a=h.length,b=1;if(a!==4&&a!==6&&a!==8){throw new sjcl.exception.invalid("invalid aes key size")}this._key=[g=h.slice(0),l=[]];for(d=a;d<4*a+28;d++){e=g[d-1];if(d%a===0||(a===8&&d%a===4)){e=f[e>>>24]<<24^f[e>>16&255]<<16^f[e>>8&255]<<8^f[e&255];if(d%a===0){e=e<<8^e>>>24^b<<24;b=b<<1^(b>>7)*283}}g[d]=g[d-a]^e}for(c=0;d;c++,d--){e=g[c&3?d:d-4];if(d<=4||c<4){l[c]=e}else{l[c]=k[0][f[e>>>24]]^k[1][f[e>>16&255]]^k[2][f[e>>8&255]]^k[3][f[e&255]]}}};sjcl.cipher.aes.prototype={encrypt:function(a){return this._crypt(a,0)},decrypt:function(a){return this._crypt(a,1)},_tables:[[[],[],[],[],[]],[[],[],[],[],[]]],_precompute:function(){var j=this._tables[0],q=this._tables[1],h=j[4],n=q[4],g,l,f,k=[],c=[],b,p,m,o,e,a;for(g=0;g<0x100;g++){c[(k[g]=g<<1^(g>>7)*283)^g]=g}for(l=f=0;!h[l];l^=b||1,f=c[f]||1){o=f^f<<1^f<<2^f<<3^f<<4;o=o>>8^o&255^99;h[l]=o;n[o]=l;m=k[p=k[b=k[l]]];a=m*0x1010101^p*0x10001^b*0x101^l*0x1010100;e=k[o]*0x101^o*0x1010100;for(g=0;g<4;g++){j[g][l]=e=e<<24^e>>>8;q[g][o]=a=a<<24^a>>>8}}for(g=0;g<5;g++){j[g]=j[g].slice(0);q[g]=q[g].slice(0)}},_crypt:function(k,n){if(k.length!==4){throw new sjcl.exception.invalid("invalid aes block size")}var y=this._key[n],v=k[0]^y[0],u=k[n?3:1]^y[1],t=k[2]^y[2],s=k[n?1:3]^y[3],w,e,m,x=y.length/4-2,p,o=4,q=[0,0,0,0],r=this._tables[n],j=r[0],h=r[1],g=r[2],f=r[3],l=r[4];for(p=0;p<x;p++){w=j[v>>>24]^h[u>>16&255]^g[t>>8&255]^f[s&255]^y[o];e=j[u>>>24]^h[t>>16&255]^g[s>>8&255]^f[v&255]^y[o+1];m=j[t>>>24]^h[s>>16&255]^g[v>>8&255]^f[u&255]^y[o+2];s=j[s>>>24]^h[v>>16&255]^g[u>>8&255]^f[t&255]^y[o+3];o+=4;v=w;u=e;t=m}for(p=0;p<4;p++){q[n?3&-p:p]=l[v>>>24]<<24^l[u>>16&255]<<16^l[t>>8&255]<<8^l[s&255]^y[o++];w=v;v=u;u=t;t=s;s=w}return q}};sjcl.bitArray={bitSlice:function(b,c,d){b=sjcl.bitArray._shiftRight(b.slice(c/32),32-(c&31)).slice(1);return(d===undefined)?b:sjcl.bitArray.clamp(b,d-c)},extract:function(c,d,f){var b,e=Math.floor((-d-f)&31);if((d+f-1^d)&-32){b=(c[d/32|0]<<(32-e))^(c[d/32+1|0]>>>e)}else{b=c[d/32|0]>>>e}return b&((1<<f)-1)},concat:function(c,a){if(c.length===0||a.length===0){return c.concat(a)}var d=c[c.length-1],b=sjcl.bitArray.getPartial(d);if(b===32){return c.concat(a)}else{return sjcl.bitArray._shiftRight(a,b,d|0,c.slice(0,c.length-1))}},bitLength:function(d){var c=d.length,b;if(c===0){return 0}b=d[c-1];return(c-1)*32+sjcl.bitArray.getPartial(b)},clamp:function(d,b){if(d.length*32<b){return d}d=d.slice(0,Math.ceil(b/32));var c=d.length;b=b&31;if(c>0&&b){d[c-1]=sjcl.bitArray.partial(b,d[c-1]&2147483648>>(b-1),1)}return d},partial:function(b,a,c){if(b===32){return a}return(c?a|0:a<<(32-b))+b*0x10000000000},getPartial:function(a){return Math.round(a/0x10000000000)||32},equal:function(e,d){if(sjcl.bitArray.bitLength(e)!==sjcl.bitArray.bitLength(d)){return false}var c=0,f;for(f=0;f<e.length;f++){c|=e[f]^d[f]}return(c===0)},_shiftRight:function(d,c,h,f){var g,b=0,e;if(f===undefined){f=[]}for(;c>=32;c-=32){f.push(h);h=0}if(c===0){return f.concat(d)}for(g=0;g<d.length;g++){f.push(h|d[g]>>>c);h=d[g]<<(32-c)}b=d.length?d[d.length-1]:0;e=sjcl.bitArray.getPartial(b);f.push(sjcl.bitArray.partial(c+e&31,(c+e>32)?h:f.pop(),1));return f},_xor4:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(c){var e,d,b=0xff00;for(e=0;e<c.length;++e){d=c[e];c[e]=(d>>>24)|((d>>>8)&b)|((d&b)<<8)|(d<<24)}return c}};sjcl.codec.utf8String={fromBits:function(a){var b="",e=sjcl.bitArray.bitLength(a),d,c;for(d=0;d<e/8;d++){if((d&3)===0){c=a[d/4]}b+=String.fromCharCode(c>>>24);c<<=8}return decodeURIComponent(escape(b))},toBits:function(d){d=unescape(encodeURIComponent(d));var a=[],c,b=0;for(c=0;c<d.length;c++){b=b<<8|d.charCodeAt(c);if((c&3)===3){a.push(b);b=0}}if(c&3){a.push(sjcl.bitArray.partial(8*(c&3),b))}return a}};sjcl.codec.bytes={fromBits:function(a){var b=[],e=sjcl.bitArray.bitLength(a),d,c;for(d=0;d<e/8;d++){if((d&3)===0){c=a[d/4]}b.push(c>>>24);c<<=8}return b},toBits:function(a){var b=[],d,c=0;for(d=0;d<a.length;d++){c=c<<8|a[d];if((d&3)===3){b.push(c);c=0}}if(d&3){b.push(sjcl.bitArray.partial(8*(d&3),c))}return b}};sjcl.hash.sha256=function(a){if(!this._key[0]){this._precompute()}if(a){this._h=a._h.slice(0);this._buffer=a._buffer.slice(0);this._length=a._length}else{this.reset()}};sjcl.hash.sha256.hash=function(a){return(new sjcl.hash.sha256()).update(a).finalize()};sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this._h=this._init.slice(0);this._buffer=[];this._length=0;return this},update:function(f){if(typeof f==="string"){f=sjcl.codec.utf8String.toBits(f)}var e,a=this._buffer=sjcl.bitArray.concat(this._buffer,f),d=this._length,c=this._length=d+sjcl.bitArray.bitLength(f);for(e=512+d&-512;e<=c;e+=512){this._block(a.splice(0,16))}return this},finalize:function(){var c,a=this._buffer,d=this._h;a=sjcl.bitArray.concat(a,[sjcl.bitArray.partial(1,1)]);for(c=a.length+2;c&15;c++){a.push(0)}a.push(Math.floor(this._length/0x100000000));a.push(this._length|0);while(a.length){this._block(a.splice(0,16))}this.reset();return d},_init:[],_key:[],_precompute:function(){var d=0,c=2,b;function a(e){return(e-Math.floor(e))*0x100000000|0}outer:for(;d<64;c++){for(b=2;b*b<=c;b++){if(c%b===0){continue outer}}if(d<8){this._init[d]=a(Math.pow(c,1/2))}this._key[d]=a(Math.pow(c,1/3));d++}},_block:function(q){var e,f,t,s,u=q.slice(0),j=this._h,c=this._key,r=j[0],p=j[1],o=j[2],n=j[3],m=j[4],l=j[5],g=j[6],d=j[7];for(e=0;e<64;e++){if(e<16){f=u[e]}else{t=u[(e+1)&15];s=u[(e+14)&15];f=u[e&15]=((t>>>7^t>>>18^t>>>3^t<<25^t<<14)+(s>>>17^s>>>19^s>>>10^s<<15^s<<13)+u[e&15]+u[(e+9)&15])|0}f=(f+d+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(g^m&(l^g))+c[e]);d=g;g=l;l=m;m=n+f|0;n=o;o=p;p=r;r=(f+((p&o)^(n&(p^o)))+(p>>>2^p>>>13^p>>>22^p<<30^p<<19^p<<10))|0}j[0]=j[0]+r|0;j[1]=j[1]+p|0;j[2]=j[2]+o|0;j[3]=j[3]+n|0;j[4]=j[4]+m|0;j[5]=j[5]+l|0;j[6]=j[6]+g|0;j[7]=j[7]+d|0}};sjcl.prng=function(a){this._pools=[new sjcl.hash.sha256()];this._poolEntropy=[0];this._reseedCount=0;this._robins={};this._eventId=0;this._collectorIds={};this._collectorIdNext=0;this._strength=0;this._poolStrength=0;this._nextReseed=0;this._key=[0,0,0,0,0,0,0,0];this._counter=[0,0,0,0];this._cipher=undefined;this._defaultParanoia=a;this._collectorsStarted=false;this._callbacks={progress:{},seeded:{}};this._callbackI=0;this._NOT_READY=0;this._READY=1;this._REQUIRES_RESEED=2;this._MAX_WORDS_PER_BURST=0x10000;this._PARANOIA_LEVELS=[0,48,64,96,128,192,0x100,384,512,768,1024];this._MILLISECONDS_PER_RESEED=30000;this._BITS_PER_RESEED=80};sjcl.prng.prototype={randomWords:function(a,f){var b=[],d,c=this.isReady(f),e;if(c===this._NOT_READY){throw new sjcl.exception.notReady("generator isn't seeded")}else{if(c&this._REQUIRES_RESEED){this._reseedFromPools(!(c&this._READY))}}if(this._strength<6){console.log("Entropy sources are not strong, possible cryptographic weakness. Please use a browser with proper getRandomValues support.")}for(d=0;d<a;d+=4){if((d+1)%this._MAX_WORDS_PER_BURST===0){this._gate()}e=this._gen4words();b.push(e[0],e[1],e[2],e[3])}this._gate();return b.slice(0,a)},setDefaultParanoia:function(b,a){if(b===0&&a!=="Setting paranoia=0 will ruin your security; use it only for testing"){throw"Setting paranoia=0 will ruin your security; use it only for testing"}this._defaultParanoia=b},addEntropy:function(e,l,a){a=a||"user";var b,f,g,j=(new Date()).valueOf(),c=this._robins[a],k=this.isReady(),d=0,h;b=this._collectorIds[a];if(b===undefined){b=this._collectorIds[a]=this._collectorIdNext++}if(c===undefined){c=this._robins[a]=0}this._robins[a]=(this._robins[a]+1)%this._pools.length;switch(typeof(e)){case"number":if(l===undefined){l=1}this._pools[c].update([b,this._eventId++,1,l,j,1,e|0]);break;case"object":h=Object.prototype.toString.call(e);if(h==="[object Uint32Array]"){g=[];for(f=0;f<e.length;f++){g.push(e[f])}e=g}else{if(h!=="[object Array]"){d=1}for(f=0;f<e.length&&!d;f++){if(typeof(e[f])!=="number"){d=1}}}if(!d){if(l===undefined){l=0;for(f=0;f<e.length;f++){g=e[f];while(g>0){l++;g=g>>>1}}}this._pools[c].update([b,this._eventId++,2,l,j,e.length].concat(e))}break;case"string":if(l===undefined){l=e.length}this._pools[c].update([b,this._eventId++,3,l,j,e.length]);this._pools[c].update(e);break;default:d=1}if(d){throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string")}this._poolEntropy[c]+=l;this._poolStrength+=l;if(k===this._NOT_READY){if(this.isReady()!==this._NOT_READY){this._fireEvent("seeded",Math.max(this._strength,this._poolStrength))}this._fireEvent("progress",this.getProgress())}},isReady:function(b){var a=this._PARANOIA_LEVELS[(b!==undefined)?b:this._defaultParanoia];if(this._strength&&this._strength>=a){return(this._poolEntropy[0]>this._BITS_PER_RESEED&&(new Date()).valueOf()>this._nextReseed)?this._REQUIRES_RESEED|this._READY:this._READY}else{return(this._poolStrength>=a)?this._REQUIRES_RESEED|this._NOT_READY:this._NOT_READY}},getProgress:function(b){var a=this._PARANOIA_LEVELS[b?b:this._defaultParanoia];if(this._strength>=a){return 1}else{return(this._poolStrength>a)?1:this._poolStrength/a}},startCollectors:function(){if(this._collectorsStarted){return}this._eventListener={loadTimeCollector:this._bind(this._loadTimeCollector),mouseCollector:this._bind(this._mouseCollector),keyboardCollector:this._bind(this._keyboardCollector),accelerometerCollector:this._bind(this._accelerometerCollector),touchCollector:this._bind(this._touchCollector)};if(window.addEventListener){window.addEventListener("load",this._eventListener.loadTimeCollector,false);window.addEventListener("mousemove",this._eventListener.mouseCollector,false);window.addEventListener("keypress",this._eventListener.keyboardCollector,false);window.addEventListener("devicemotion",this._eventListener.accelerometerCollector,false);window.addEventListener("touchmove",this._eventListener.touchCollector,false)}else{if(document.attachEvent){document.attachEvent("onload",this._eventListener.loadTimeCollector);document.attachEvent("onmousemove",this._eventListener.mouseCollector);document.attachEvent("keypress",this._eventListener.keyboardCollector)}else{throw new sjcl.exception.bug("can't attach event")}}this._collectorsStarted=true},stopCollectors:function(){if(!this._collectorsStarted){return}if(window.removeEventListener){window.removeEventListener("load",this._eventListener.loadTimeCollector,false);window.removeEventListener("mousemove",this._eventListener.mouseCollector,false);window.removeEventListener("keypress",this._eventListener.keyboardCollector,false);window.removeEventListener("devicemotion",this._eventListener.accelerometerCollector,false);window.removeEventListener("touchmove",this._eventListener.touchCollector,false)}else{if(document.detachEvent){document.detachEvent("onload",this._eventListener.loadTimeCollector);document.detachEvent("onmousemove",this._eventListener.mouseCollector);document.detachEvent("keypress",this._eventListener.keyboardCollector)}}this._collectorsStarted=false},addEventListener:function(a,b){this._callbacks[a][this._callbackI++]=b},removeEventListener:function(e,a){var f,d,c=this._callbacks[e],b=[];for(d in c){if(c.hasOwnProperty(d)&&c[d]===a){b.push(d)}}for(f=0;f<b.length;f++){d=b[f];delete c[d]}},_bind:function(b){var a=this;return function(){b.apply(a,arguments)}},_gen4words:function(){for(var a=0;a<4;a++){this._counter[a]=this._counter[a]+1|0;if(this._counter[a]){break}}return this._cipher.encrypt(this._counter)},_gate:function(){this._key=this._gen4words().concat(this._gen4words());this._cipher=new sjcl.cipher.aes(this._key)},_reseed:function(b){this._key=sjcl.hash.sha256.hash(this._key.concat(b));this._cipher=new sjcl.cipher.aes(this._key);for(var a=0;a<4;a++){this._counter[a]=this._counter[a]+1|0;if(this._counter[a]){break}}},_reseedFromPools:function(c){var a=[],d=0,b;this._nextReseed=a[0]=(new Date()).valueOf()+this._MILLISECONDS_PER_RESEED;for(b=0;b<16;b++){a.push(Math.random()*0x100000000|0)}for(b=0;b<this._pools.length;b++){a=a.concat(this._pools[b].finalize());d+=this._poolEntropy[b];this._poolEntropy[b]=0;if(!c&&(this._reseedCount&(1<<b))){break}}if(this._reseedCount>=1<<this._pools.length){this._pools.push(new sjcl.hash.sha256());this._poolEntropy.push(0)}this._poolStrength-=d;if(d>this._strength){this._strength=d}this._reseedCount++;this._reseed(a)},_keyboardCollector:function(){this._addCurrentTimeToEntropy(1)},_mouseCollector:function(c){var a,d;try{a=c.x||c.clientX||c.offsetX||0;d=c.y||c.clientY||c.offsetY||0}catch(b){a=0;d=0}if(a!=0&&d!=0){sjcl.random.addEntropy([a,d],2,"mouse")}this._addCurrentTimeToEntropy(0)},_touchCollector:function(b){var d=b.touches[0]||b.changedTouches[0];var a=d.pageX||d.clientX,c=d.pageY||d.clientY;sjcl.random.addEntropy([a,c],1,"touch");this._addCurrentTimeToEntropy(0)},_loadTimeCollector:function(){this._addCurrentTimeToEntropy(2)},_addCurrentTimeToEntropy:function(a){if(typeof window!=="undefined"&&window.performance&&typeof window.performance.now==="function"){sjcl.random.addEntropy(window.performance.now(),a,"loadtime")}else{sjcl.random.addEntropy((new Date()).valueOf(),a,"loadtime")}},_accelerometerCollector:function(b){var a=b.accelerationIncludingGravity.x||b.accelerationIncludingGravity.y||b.accelerationIncludingGravity.z;if(window.orientation){var c=window.orientation;if(typeof c==="number"){sjcl.random.addEntropy(c,1,"accelerometer")}}if(a){sjcl.random.addEntropy(a,2,"accelerometer")}this._addCurrentTimeToEntropy(0)},_fireEvent:function(d,a){var c,b=sjcl.random._callbacks[d],e=[];for(c in b){if(b.hasOwnProperty(c)){e.push(b[c])}}for(c=0;c<e.length;c++){e[c](a)}}};sjcl.random=new sjcl.prng(6);(function(){try{var a,d,c;if(typeof Uint32Array!=="undefined"){if(typeof window!=="undefined"){c=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues){window.crypto.getRandomValues(c)}else{if(window.msCrypto&&window.msCrypto.getRandomValues){window.msCrypto.getRandomValues(c)}else{return}}sjcl.random.addEntropy(c,1024,"crypto.getRandomValues")}else{try{var b=require("crypto");a=b.randomBytes(1024/8);a=new Uint32Array(new Uint8Array(a).buffer);sjcl.random.addEntropy(a,1024,"crypto.randomBytes")}catch(f){}}}}catch(f){if(typeof window!=="undefined"&&window.console){console.log("There was an error collecting entropy from the browser:");console.log(f)}}}());sjcl.bn=function(a){this.initWith(a)};sjcl.bn.prototype={radix:24,maxMul:8,_class:sjcl.bn,copy:function(){return new this._class(this)},initWith:function(c){var b=0,a;switch(typeof c){case"object":this.limbs=c.limbs.slice(0);break;case"number":this.limbs=[c];this.normalize();break;case"string":c=c.replace(/^0x/,"");this.limbs=[];a=this.radix/4;for(b=0;b<c.length;b+=a){this.limbs.push(parseInt(c.substring(Math.max(c.length-b-a,0),c.length-b),16))}break;default:this.limbs=[0]}return this},equals:function(b){if(typeof b==="number"){b=new this._class(b)}var c=0,a;this.fullReduce();b.fullReduce();for(a=0;a<this.limbs.length||a<b.limbs.length;a++){c|=this.getLimb(a)^b.getLimb(a)}return(c===0)},getLimb:function(a){return(a>=this.limbs.length)?0:this.limbs[a]},greaterEquals:function(g){if(typeof g==="number"){g=new this._class(g)}var e=0,h=0,f,d,c;f=Math.max(this.limbs.length,g.limbs.length)-1;for(;f>=0;f--){d=this.getLimb(f);c=g.getLimb(f);h|=(c-d)&~e;e|=(d-c)&~h}return(h|~e)>>>31},toString:function(){this.fullReduce();var b="",c,d,a=this.limbs;for(c=0;c<this.limbs.length;c++){d=a[c].toString(16);while(c<this.limbs.length-1&&d.length<6){d="0"+d}b=d+b}return"0x"+b},addM:function(c){if(typeof(c)!=="object"){c=new this._class(c)}var b,a=this.limbs,d=c.limbs;for(b=a.length;b<d.length;b++){a[b]=0}for(b=0;b<d.length;b++){a[b]+=d[b]}return this},doubleM:function(){var d,f=0,c,e=this.radix,a=this.radixMask,b=this.limbs;for(d=0;d<b.length;d++){c=b[d];c=c+c+f;b[d]=c&a;f=c>>e}if(f){b.push(f)}return this},halveM:function(){var c,e=0,b,d=this.radix,a=this.limbs;for(c=a.length-1;c>=0;c--){b=a[c];a[c]=(b+e)>>1;e=(b&1)<<d}if(!a[a.length-1]){a.pop()}return this},subM:function(c){if(typeof(c)!=="object"){c=new this._class(c)}var b,a=this.limbs,d=c.limbs;for(b=a.length;b<d.length;b++){a[b]=0}for(b=0;b<d.length;b++){a[b]-=d[b]}return this},mod:function(c){var d=!this.greaterEquals(new sjcl.bn(0));c=new sjcl.bn(c).normalize();var a=new sjcl.bn(this).normalize(),b=0;if(d){a=(new sjcl.bn(0)).subM(a).normalize()}for(;a.greaterEquals(c);b++){c.doubleM()}if(d){a=c.sub(a).normalize()}for(;b>0;b--){c.halveM();if(a.greaterEquals(c)){a.subM(c).normalize()}}return a.trim()},inverseMod:function(h){var e=new sjcl.bn(1),d=new sjcl.bn(0),c=new sjcl.bn(this),k=new sjcl.bn(h),g,f,j=1;if(!(h.limbs[0]&1)){throw (new sjcl.exception.invalid("inverseMod: p must be odd"))}do{if(c.limbs[0]&1){if(!c.greaterEquals(k)){g=c;c=k;k=g;g=e;e=d;d=g}c.subM(k);c.normalize();if(!e.greaterEquals(d)){e.addM(h)}e.subM(d)}c.halveM();if(e.limbs[0]&1){e.addM(h)}e.normalize();e.halveM();for(f=j=0;f<c.limbs.length;f++){j|=c.limbs[f]}}while(j);if(!k.equals(1)){throw (new sjcl.exception.invalid("inverseMod: p and x must be relatively prime"))}return d},add:function(a){return this.copy().addM(a)},sub:function(a){return this.copy().subM(a)},mul:function(k){if(typeof(k)==="number"){k=new this._class(k)}var g,e,o=this.limbs,n=k.limbs,h=o.length,d=n.length,f=new this._class(),m=f.limbs,l,p=this.maxMul;for(g=0;g<this.limbs.length+k.limbs.length+1;g++){m[g]=0}for(g=0;g<h;g++){l=o[g];for(e=0;e<d;e++){m[g+e]+=l*n[e]}if(!--p){p=this.maxMul;f.cnormalize()}}return f.cnormalize().reduce()},square:function(){return this.mul(this)},power:function(a){a=new sjcl.bn(a).normalize().trim().limbs;var d,c,b=new this._class(1),e=this;for(d=0;d<a.length;d++){for(c=0;c<this.radix;c++){if(a[d]&(1<<c)){b=b.mul(e)}if(d==(a.length-1)&&a[d]>>(c+1)==0){break}e=e.square()}}return b},mulmod:function(a,b){return this.mod(b).mul(a.mod(b)).mod(b)},powermod:function(a,h){a=new sjcl.bn(a);h=new sjcl.bn(h);if((h.limbs[0]&1)==1){var f=this.montpowermod(a,h);if(f!=false){return f}}var e,d,b=a.normalize().trim().limbs,c=new this._class(1),g=this;for(e=0;e<b.length;e++){for(d=0;d<this.radix;d++){if(b[e]&(1<<d)){c=c.mulmod(g,h)}if(e==(b.length-1)&&b[e]>>(d+1)==0){break}g=g.mulmod(g,h)}}return c},montpowermod:function(p,m){p=new sjcl.bn(p).normalize().trim();m=new sjcl.bn(m);var v,u,k=this.radix,w=new this._class(1),e=this.copy();var f,q,b,t=p.bitLength();f=new sjcl.bn({limbs:m.copy().normalize().trim().limbs.map(function(){return 0})});for(q=this.radix;q>0;q--){if(((m.limbs[m.limbs.length-1]>>q)&1)==1){f.limbs[f.limbs.length-1]=1<<q;break}}if(t==0){return this}else{if(t<18){b=1}else{if(t<48){b=3}else{if(t<144){b=4}else{if(t<768){b=5}else{b=6}}}}}var c=f.copy(),B=m.copy(),d=new sjcl.bn(1),z=new sjcl.bn(0),a=f.copy();while(a.greaterEquals(1)){a.halveM();if((d.limbs[0]&1)==0){d.halveM();z.halveM()}else{d.addM(B);d.halveM();z.halveM();z.addM(c)}}d=d.normalize();z=z.normalize();c.doubleM();var A=c.mulmod(c,m);if(!c.mul(d).sub(m.mul(z)).equals(1)){return false}var C=function(h){return n(h,A)},n=function(j,h){var l,H,G,x,s,i=(1<<(q+1))-1;G=j.mul(h);x=G.mul(z);x.limbs=x.limbs.slice(0,f.limbs.length);if(x.limbs.length==f.limbs.length){x.limbs[f.limbs.length-1]&=i}x=x.mul(m);s=G.add(x).normalize().trim();s.limbs=s.limbs.slice(f.limbs.length-1);for(l=0;l<s.limbs.length;l++){if(l>0){s.limbs[l-1]|=(s.limbs[l]&i)<<(k-q-1)}s.limbs[l]=s.limbs[l]>>(q+1)}if(s.greaterEquals(m)){s.subM(m)}return s},g=function(h){return n(h,1)};e=C(e);w=C(w);var y,F={},o=(1<<(b-1))-1;F[1]=e.copy();F[2]=n(e,e);for(y=1;y<=o;y++){F[(2*y)+1]=n(F[(2*y)-1],F[2])}var E=function(l,h){var j=h%l.radix;return(l.limbs[Math.floor(h/l.radix)]&(1<<j))>>j};for(v=p.bitLength()-1;v>=0;){if(E(p,v)==0){w=n(w,w);v=v-1}else{var r=v-b+1;while(E(p,r)==0){r++}var D=0;for(u=r;u<=v;u++){D+=E(p,u)<<(u-r);w=n(w,w)}w=n(w,F[D]);v=r-1}}return g(w)},trim:function(){var a=this.limbs,b;do{b=a.pop()}while(a.length&&b===0);a.push(b);return this},reduce:function(){return this},fullReduce:function(){return this.normalize()},normalize:function(){var h=0,c,g=this.placeVal,e=this.ipv,b,a,f=this.limbs,d=f.length,j=this.radixMask;for(c=0;c<d||(h!==0&&h!==-1);c++){b=(f[c]||0)+h;a=f[c]=b&j;h=(b-a)*e}if(h===-1){f[c-1]-=g}return this},cnormalize:function(){var g=0,e,d=this.ipv,c,a,h=this.limbs,f=h.length,b=this.radixMask;for(e=0;e<f-1;e++){c=h[e]+g;a=h[e]=c&b;g=(c-a)*d}h[e]+=g;return this},toBits:function(a){this.fullReduce();a=a||this.exponent||this.bitLength();var d=Math.floor((a-1)/24),b=sjcl.bitArray,f=(a+7&-8)%this.radix||this.radix,c=[b.partial(f,this.getLimb(d))];for(d--;d>=0;d--){c=b.concat(c,[b.partial(Math.min(this.radix,a),this.getLimb(d))]);a-=this.radix}return c},bitLength:function(){this.fullReduce();var c=this.radix*(this.limbs.length-1),a=this.limbs[this.limbs.length-1];for(;a;a>>>=1){c++}return c+7&-8}};sjcl.bn.fromBits=function(g){var c=this,d=new c(),i=[],b=sjcl.bitArray,f=this.prototype,a=Math.min(this.bitLength||0x100000000,b.bitLength(g)),h=a%f.radix||f.radix;i[0]=b.extract(g,0,h);for(;h<a;h+=f.radix){i.unshift(b.extract(g,h,f.radix))}d.limbs=i;return d};sjcl.bn.prototype.ipv=1/(sjcl.bn.prototype.placeVal=Math.pow(2,sjcl.bn.prototype.radix));sjcl.bn.prototype.radixMask=(1<<sjcl.bn.prototype.radix)-1;sjcl.bn.pseudoMersennePrime=function(f,b){function g(h){this.initWith(h)}var a=g.prototype=new sjcl.bn(),d,c,e;e=a.modOffset=Math.ceil(c=f/a.radix);a.exponent=f;a.offset=[];a.factor=[];a.minOffset=e;a.fullMask=0;a.fullOffset=[];a.fullFactor=[];a.modulus=g.modulus=new sjcl.bn(Math.pow(2,f));a.fullMask=0|-Math.pow(2,f%a.radix);for(d=0;d<b.length;d++){a.offset[d]=Math.floor(b[d][0]/a.radix-c);a.fullOffset[d]=Math.ceil(b[d][0]/a.radix-c);a.factor[d]=b[d][1]*Math.pow(1/2,f-b[d][0]+a.offset[d]*a.radix);a.fullFactor[d]=b[d][1]*Math.pow(1/2,f-b[d][0]+a.fullOffset[d]*a.radix);a.modulus.addM(new sjcl.bn(Math.pow(2,b[d][0])*b[d][1]));a.minOffset=Math.min(a.minOffset,-a.offset[d])}a._class=g;a.modulus.cnormalize();a.reduce=function(){var p,o,n,m=this.modOffset,s=this.limbs,j=this.offset,q=this.offset.length,h=this.factor,r;p=this.minOffset;while(s.length>m){n=s.pop();r=s.length;for(o=0;o<q;o++){s[r+j[o]]-=h[o]*n}p--;if(!p){s.push(0);this.cnormalize();p=this.minOffset}}this.cnormalize();return this};a._strongReduce=(a.fullMask===-1)?a.reduce:function(){var n=this.limbs,m=n.length-1,j,h;this.reduce();if(m===this.modOffset-1){h=n[m]&this.fullMask;n[m]-=h;for(j=0;j<this.fullOffset.length;j++){n[m+this.fullOffset[j]]-=this.fullFactor[j]*h}this.normalize()}};a.fullReduce=function(){var j,h;this._strongReduce();this.addM(this.modulus);this.addM(this.modulus);this.normalize();this._strongReduce();for(h=this.limbs.length;h<this.modOffset;h++){this.limbs[h]=0}j=this.greaterEquals(this.modulus);for(h=0;h<this.limbs.length;h++){this.limbs[h]-=this.modulus.limbs[h]*j}this.cnormalize();return this};a.inverse=function(){return(this.power(this.modulus.sub(2)))};g.fromBits=sjcl.bn.fromBits;return g};var sbp=sjcl.bn.pseudoMersennePrime;sjcl.bn.prime={p127:sbp(127,[[0,-1]]),p25519:sbp(255,[[0,-19]]),p192k:sbp(192,[[32,-1],[12,-1],[8,-1],[7,-1],[6,-1],[3,-1],[0,-1]]),p224k:sbp(224,[[32,-1],[12,-1],[11,-1],[9,-1],[7,-1],[4,-1],[1,-1],[0,-1]]),p256k:sbp(0x100,[[32,-1],[9,-1],[8,-1],[7,-1],[6,-1],[4,-1],[0,-1]]),p192:sbp(192,[[0,-1],[64,-1]]),p224:sbp(224,[[0,1],[96,-1]]),p256:sbp(0x100,[[0,-1],[96,1],[192,1],[224,-1]]),p384:sbp(384,[[0,-1],[32,1],[96,-1],[128,-1]]),p521:sbp(521,[[0,-1]])};sjcl.bn.random=function(c,f){if(typeof c!=="object"){c=new sjcl.bn(c)}var g,e,b=c.limbs.length,a=c.limbs[b-1]+1,d=new sjcl.bn();while(true){do{g=sjcl.random.randomWords(b,f);if(g[b-1]<0){g[b-1]+=0x100000000}}while(Math.floor(g[b-1]/a)===Math.floor(0x100000000/a));g[b-1]%=a;for(e=0;e<b-1;e++){g[e]&=c.radixMask}d.limbs=g;if(!d.greaterEquals(c)){return d}}};sjcl.ecc={};sjcl.ecc.point=function(b,a,c){if(a===undefined){this.isIdentity=true}else{if(a instanceof sjcl.bn){a=new b.field(a)}if(c instanceof sjcl.bn){c=new b.field(c)}this.x=a;this.y=c;this.isIdentity=false}this.curve=b};sjcl.ecc.point.prototype={toJac:function(){return new sjcl.ecc.pointJac(this.curve,this.x,this.y,new this.curve.field(1))},mult:function(a){return this.toJac().mult(a,this).toAffine()},mult2:function(a,c,b){return this.toJac().mult2(a,this,c,b).toAffine()},multiples:function(){var a,c,b;if(this._multiples===undefined){b=this.toJac().doubl();a=this._multiples=[new sjcl.ecc.point(this.curve),this,b.toAffine()];for(c=3;c<16;c++){b=b.add(this);a.push(b.toAffine())}}return this._multiples},negate:function(){var a=new this.curve.field(0).sub(this.y).normalize().reduce();return new sjcl.ecc.point(this.curve,this.x,a)},isValid:function(){return this.y.square().equals(this.curve.b.add(this.x.mul(this.curve.a.add(this.x.square()))))},toBits:function(){return sjcl.bitArray.concat(this.x.toBits(),this.y.toBits())}};sjcl.ecc.pointJac=function(c,a,d,b){if(a===undefined){this.isIdentity=true}else{this.x=a;this.y=d;this.z=b;this.isIdentity=false}this.curve=c};sjcl.ecc.pointJac.prototype={add:function(e){var g=this,f,k,i,h,b,a,o,n,m,l,j;if(g.curve!==e.curve){throw ("sjcl.ecc.add(): Points must be on the same curve to add them!")}if(g.isIdentity){return e.toJac()}else{if(e.isIdentity){return g}}f=g.z.square();k=e.x.mul(f).subM(g.x);if(k.equals(0)){if(g.y.equals(e.y.mul(f.mul(g.z)))){return g.doubl()}else{return new sjcl.ecc.pointJac(g.curve)}}i=e.y.mul(f.mul(g.z)).subM(g.y);h=k.square();b=i.square();a=k.square().mul(k).addM(g.x.add(g.x).mul(h));o=b.subM(a);n=g.x.mul(h).subM(o).mul(i);m=g.y.mul(k.square().mul(k));l=n.subM(m);j=g.z.mul(k);return new sjcl.ecc.pointJac(this.curve,o,l,j)},doubl:function(){if(this.isIdentity){return this}var g=this.y.square(),f=g.mul(this.x.mul(4)),e=g.square().mul(8),h=this.z.square(),k=this.curve.a.toString()==(new sjcl.bn(-3)).toString()?this.x.sub(h).mul(3).mul(this.x.add(h)):this.x.square().mul(3).add(h.square().mul(this.curve.a)),d=k.square().subM(f).subM(f),j=f.sub(d).mul(k).subM(e),i=this.y.add(this.y).mul(this.z);return new sjcl.ecc.pointJac(this.curve,d,j,i)},toAffine:function(){if(this.isIdentity||this.z.equals(0)){return new sjcl.ecc.point(this.curve)}var b=this.z.inverse(),a=b.square();return new sjcl.ecc.point(this.curve,this.x.mul(a).fullReduce(),this.y.mul(a.mul(b)).fullReduce())},mult:function(a,e){if(typeof(a)==="number"){a=[a]}else{if(a.limbs!==undefined){a=a.normalize().limbs}}var d,c,b=new sjcl.ecc.point(this.curve).toJac(),f=e.multiples();for(d=a.length-1;d>=0;d--){for(c=sjcl.bn.prototype.radix-4;c>=0;c-=4){b=b.doubl().doubl().doubl().doubl().add(f[a[d]>>c&15])}}return b},mult2:function(k,g,h,b){if(typeof(k)==="number"){k=[k]}else{if(k.limbs!==undefined){k=k.normalize().limbs}}if(typeof(h)==="number"){h=[h]}else{if(h.limbs!==undefined){h=h.normalize().limbs}}var f,d,e=new sjcl.ecc.point(this.curve).toJac(),m=g.multiples(),l=b.multiples(),c,a;for(f=Math.max(k.length,h.length)-1;f>=0;f--){c=k[f]|0;a=h[f]|0;for(d=sjcl.bn.prototype.radix-4;d>=0;d-=4){e=e.doubl().doubl().doubl().doubl().add(m[c>>d&15]).add(l[a>>d&15])}}return e},negate:function(){return this.toAffine().negate().toJac()},isValid:function(){var c=this.z.square(),b=c.square(),a=b.mul(c);return this.y.square().equals(this.curve.b.mul(a).add(this.x.mul(this.curve.a.mul(b).add(this.x.square()))))}};sjcl.ecc.curve=function(f,g,e,d,c,h){this.field=f;this.r=new sjcl.bn(g);this.a=new f(e);this.b=new f(d);this.G=new sjcl.ecc.point(this,new f(c),new f(h))};sjcl.ecc.curve.prototype.fromBits=function(c){var b=sjcl.bitArray,a=this.field.prototype.exponent+7&-8,d=new sjcl.ecc.point(this,this.field.fromBits(b.bitSlice(c,0,a)),this.field.fromBits(b.bitSlice(c,a,2*a)));if(!d.isValid()){throw new sjcl.exception.corrupt("not on the curve!")}return d};sjcl.ecc.curves={c192:new sjcl.ecc.curve(sjcl.bn.prime.p192,"0xffffffffffffffffffffffff99def836146bc9b1b4d22831",-3,"0x64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1","0x188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012","0x07192b95ffc8da78631011ed6b24cdd573f977a11e794811"),c224:new sjcl.ecc.curve(sjcl.bn.prime.p224,"0xffffffffffffffffffffffffffff16a2e0b8f03e13dd29455c5c2a3d",-3,"0xb4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4","0xb70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21","0xbd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34"),c256:new sjcl.ecc.curve(sjcl.bn.prime.p256,"0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",-3,"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b","0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296","0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"),c384:new sjcl.ecc.curve(sjcl.bn.prime.p384,"0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973",-3,"0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef","0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7","0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f"),c521:new sjcl.ecc.curve(sjcl.bn.prime.p521,"0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409",-3,"0x051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00","0xC6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66","0x11839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650"),k192:new sjcl.ecc.curve(sjcl.bn.prime.p192k,"0xfffffffffffffffffffffffe26f2fc170f69466a74defd8d",0,3,"0xdb4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d","0x9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"),k224:new sjcl.ecc.curve(sjcl.bn.prime.p224k,"0x010000000000000000000000000001dce8d2ec6184caf0a971769fb1f7",0,5,"0xa1455b334df099df30fc28a169a467e9e47075a90f7e650eb6b7a45c","0x7e089fed7fba344282cafbd6f7e319f7c0b0bd59e2ca4bdb556d61a5"),k256:new sjcl.ecc.curve(sjcl.bn.prime.p256k,"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",0,7,"0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8")};sjcl.ecc.basicKey={publicKey:function(b,a){this._curve=b;this._curveBitLength=b.r.bitLength();if(a instanceof Array){this._point=b.fromBits(a)}else{this._point=a}this.get=function(){var e=this._point.toBits();var d=sjcl.bitArray.bitLength(e);var c=sjcl.bitArray.bitSlice(e,0,d/2);var f=sjcl.bitArray.bitSlice(e,d/2);return{x:c,y:f}}},secretKey:function(b,a){this._curve=b;this._curveBitLength=b.r.bitLength();this._exponent=a;this.get=function(){return this._exponent.toBits()}}};sjcl.ecc.basicKey.generateKeys=function(b){return function a(f,e,c){f=f||0x100;if(typeof f==="number"){f=sjcl.ecc.curves["c"+f];if(f===undefined){throw new sjcl.exception.invalid("no such curve")}}c=c||sjcl.bn.random(f.r,e);var d=f.G.mult(c);return{pub:new sjcl.ecc[b].publicKey(f,d),sec:new sjcl.ecc[b].secretKey(f,c)}}};sjcl.ecc.elGamal={generateKeys:sjcl.ecc.basicKey.generateKeys("elGamal"),publicKey:function(b,a){sjcl.ecc.basicKey.publicKey.apply(this,arguments)},secretKey:function(b,a){sjcl.ecc.basicKey.secretKey.apply(this,arguments)}};sjcl.ecc.elGamal.publicKey.prototype={kem:function(d){var c=sjcl.bn.random(this._curve.r,d),a=this._curve.G.mult(c).toBits(),b=sjcl.hash.sha256.hash(this._point.mult(c).toBits());return{key:b,tag:a}}};sjcl.ecc.elGamal.secretKey.prototype={unkem:function(a){return sjcl.hash.sha256.hash(this._curve.fromBits(a).mult(this._exponent).toBits())},dh:function(a){return sjcl.hash.sha256.hash(a._point.mult(this._exponent).toBits())},dhJavaEc:function(a){return a._point.mult(this._exponent).x.toBits()}};sjcl.ecc.ecdsa={generateKeys:sjcl.ecc.basicKey.generateKeys("ecdsa")};sjcl.ecc.ecdsa.publicKey=function(b,a){sjcl.ecc.basicKey.publicKey.apply(this,arguments)};sjcl.ecc.ecdsa.publicKey.prototype={verify:function(f,e,b){if(sjcl.bitArray.bitLength(f)>this._curveBitLength){f=sjcl.bitArray.clamp(f,this._curveBitLength)}var i=sjcl.bitArray,g=this._curve.r,d=this._curveBitLength,a=sjcl.bn.fromBits(i.bitSlice(e,0,d)),m=sjcl.bn.fromBits(i.bitSlice(e,d,2*d)),k=b?m:m.inverseMod(g),h=sjcl.bn.fromBits(f).mul(k).mod(g),j=a.mul(k).mod(g),c=this._curve.G.mult2(h,j,this._point).x;if(a.equals(0)||m.equals(0)||a.greaterEquals(g)||m.greaterEquals(g)||!c.equals(a)){if(b===undefined){return this.verify(f,e,true)}else{throw (new sjcl.exception.corrupt("signature didn't check out"))}}return true}};sjcl.ecc.ecdsa.secretKey=function(b,a){sjcl.ecc.basicKey.secretKey.apply(this,arguments)};sjcl.ecc.ecdsa.secretKey.prototype={sign:function(f,h,b,c){if(sjcl.bitArray.bitLength(f)>this._curveBitLength){f=sjcl.bitArray.clamp(f,this._curveBitLength)}var g=this._curve.r,d=g.bitLength(),e=c||sjcl.bn.random(g.sub(1),h).add(1),a=this._curve.G.mult(e).x.mod(g),j=sjcl.bn.fromBits(f).add(a.mul(this._exponent)),i=b?j.inverseMod(g).mul(e).mod(g):j.mul(e.inverseMod(g)).mod(g);return sjcl.bitArray.concat(a.toBits(d),i.toBits(d))}};
},{"crypto":7}],171:[function(require,module,exports){
/**
 * Promise polyfill v1.0.10
 * requires setImmediate
 *
 * © 2014–2015 Dmitry Korobkin
 * Released under the MIT license
 * github.com/Octane/Promise
 */
(function (global) {'use strict';

    var STATUS = '[[PromiseStatus]]';
    var VALUE = '[[PromiseValue]]';
    var ON_FUlFILLED = '[[OnFulfilled]]';
    var ON_REJECTED = '[[OnRejected]]';
    var ORIGINAL_ERROR = '[[OriginalError]]';
    var PENDING = 'pending';
    var INTERNAL_PENDING = 'internal pending';
    var FULFILLED = 'fulfilled';
    var REJECTED = 'rejected';
    var NOT_ARRAY = 'not an array.';
    var REQUIRES_NEW = 'constructor Promise requires "new".';
    var CHAINING_CYCLE = 'then() cannot return same Promise that it resolves.';

    var setImmediate = global.setImmediate || require('timers').setImmediate;
    var isArray = Array.isArray || function (anything) {
        return Object.prototype.toString.call(anything) == '[object Array]';
    };

    function InternalError(originalError) {
        this[ORIGINAL_ERROR] = originalError;
    }

    function isInternalError(anything) {
        return anything instanceof InternalError;
    }

    function isObject(anything) {
        //Object.create(null) instanceof Object → false
        return Object(anything) === anything;
    }

    function isCallable(anything) {
        return typeof anything == 'function';
    }

    function isPromise(anything) {
        return anything instanceof Promise;
    }

    function identity(value) {
        return value;
    }

    function thrower(reason) {
        throw reason;
    }

    function enqueue(promise, onFulfilled, onRejected) {
        if (!promise[ON_FUlFILLED]) {
            promise[ON_FUlFILLED] = [];
            promise[ON_REJECTED] = [];
        }
        promise[ON_FUlFILLED].push(onFulfilled);
        promise[ON_REJECTED].push(onRejected);
    }

    function clearAllQueues(promise) {
        delete promise[ON_FUlFILLED];
        delete promise[ON_REJECTED];
    }

    function callEach(queue) {
        var i;
        var length = queue.length;
        for (i = 0; i < length; i++) {
            queue[i]();
        }
    }

    function call(resolve, reject, value) {
        var anything = toPromise(value);
        if (isPromise(anything)) {
            anything.then(resolve, reject);
        } else if (isInternalError(anything)) {
            reject(anything[ORIGINAL_ERROR]);
        } else {
            resolve(value);
        }
    }

    function toPromise(anything) {
        var then;
        if (isPromise(anything)) {
            return anything;
        }
        if(isObject(anything)) {
            try {
                then = anything.then;
            } catch (error) {
                return new InternalError(error);
            }
            if (isCallable(then)) {
                return new Promise(function (resolve, reject) {
                    setImmediate(function () {
                        try {
                            then.call(anything, resolve, reject);
                        } catch (error) {
                            reject(error);
                        }
                    });
                });
            }
        }
        return null;
    }

    function resolvePromise(promise, resolver) {
        function resolve(value) {
            if (promise[STATUS] == PENDING) {
                fulfillPromise(promise, value);
            }
        }
        function reject(reason) {
            if (promise[STATUS] == PENDING) {
                rejectPromise(promise, reason);
            }
        }
        try {
            resolver(resolve, reject);
        } catch(error) {
            reject(error);
        }
    }

    function fulfillPromise(promise, value) {
        var queue;
        var anything = toPromise(value);
        if (isPromise(anything)) {
            promise[STATUS] = INTERNAL_PENDING;
            anything.then(
                function (value) {
                    fulfillPromise(promise, value);
                },
                function (reason) {
                    rejectPromise(promise, reason);
                }
            );
        } else if (isInternalError(anything)) {
            rejectPromise(promise, anything[ORIGINAL_ERROR]);
        } else {
            promise[STATUS] = FULFILLED;
            promise[VALUE] = value;
            queue = promise[ON_FUlFILLED];
            if (queue && queue.length) {
                clearAllQueues(promise);
                callEach(queue);
            }
        }
    }

    function rejectPromise(promise, reason) {
        var queue = promise[ON_REJECTED];
        promise[STATUS] = REJECTED;
        promise[VALUE] = reason;
        if (queue && queue.length) {
            clearAllQueues(promise);
            callEach(queue);
        }
    }

    function Promise(resolver) {
        var promise = this;
        if (!isPromise(promise)) {
            throw new TypeError(REQUIRES_NEW);
        }
        promise[STATUS] = PENDING;
        promise[VALUE] = undefined;
        resolvePromise(promise, resolver);
    }

    Promise.prototype.then = function (onFulfilled, onRejected) {
        var promise = this;
        var nextPromise;
        onFulfilled = isCallable(onFulfilled) ? onFulfilled : identity;
        onRejected = isCallable(onRejected) ? onRejected : thrower;
        nextPromise = new Promise(function (resolve, reject) {
            function tryCall(func) {
                var value;
                try {
                    value = func(promise[VALUE]);
                } catch (error) {
                    reject(error);
                    return;
                }
                if (value === nextPromise) {
                    reject(new TypeError(CHAINING_CYCLE));
                } else {
                    call(resolve, reject, value);
                }
            }
            function asyncOnFulfilled() {
                setImmediate(tryCall, onFulfilled);
            }
            function asyncOnRejected() {
                setImmediate(tryCall, onRejected);
            }
            switch (promise[STATUS]) {
                case FULFILLED:
                    asyncOnFulfilled();
                    break;
                case REJECTED:
                    asyncOnRejected();
                    break;
                default:
                    enqueue(promise, asyncOnFulfilled, asyncOnRejected);
            }
        });
        return nextPromise;
    };

    Promise.prototype['catch'] = function (onRejected) {
        return this.then(identity, onRejected);
    };

    Promise.resolve = function (value) {
        var anything = toPromise(value);
        if (isPromise(anything)) {
            return anything;
        }
        return new Promise(function (resolve, reject) {
            if (isInternalError(anything)) {
                reject(anything[ORIGINAL_ERROR]);
            } else {
                resolve(value);
            }
        });
    };

    Promise.reject = function (reason) {
        return new Promise(function (resolve, reject) {
            reject(reason);
        });
    };

    Promise.race = function (values) {
        return new Promise(function (resolve, reject) {
            var i;
            var length;
            if (isArray(values)) {
                length = values.length;
                for (i = 0; i < length; i++) {
                    call(resolve, reject, values[i]);
                }
            } else {
                reject(new TypeError(NOT_ARRAY));
            }
        });
    };

    Promise.all = function (values) {
        return new Promise(function (resolve, reject) {
            var fulfilledCount = 0;
            var promiseCount = 0;
            var anything;
            var length;
            var value;
            var i;
            if (isArray(values)) {
                values = values.slice(0);
                length = values.length;
                for (i = 0; i < length; i++) {
                    value = values[i];
                    anything = toPromise(value);
                    if (isPromise(anything)) {
                        promiseCount++;
                        anything.then(
                            function (index) {
                                return function (value) {
                                    values[index] = value;
                                    fulfilledCount++;
                                    if (fulfilledCount == promiseCount) {
                                        resolve(values);
                                    }
                                };
                            }(i),
                            reject
                        );
                    } else if (isInternalError(anything)) {
                        reject(anything[ORIGINAL_ERROR]);
                    } else {
                        //[1, , 3] → [1, undefined, 3]
                        values[i] = value;
                    }
                }
                if (!promiseCount) {
                    resolve(values);
                }
            } else {
                reject(new TypeError(NOT_ARRAY));
            }
        });
    };

    if (typeof module != 'undefined' && module.exports) {
        module.exports = global.Promise || Promise;
    } else if (!global.Promise) {
        global.Promise = Promise;
    }

}(this));

},{"timers":161}],172:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"buffer":3,"dup":100}],173:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"./sha":175,"./sha1":176,"./sha224":177,"./sha256":178,"./sha384":179,"./sha512":180,"dup":101}],174:[function(require,module,exports){
arguments[4][145][0].apply(exports,arguments)
},{"dup":145}],175:[function(require,module,exports){
arguments[4][102][0].apply(exports,arguments)
},{"./hash":172,"buffer":3,"dup":102,"inherits":174}],176:[function(require,module,exports){
arguments[4][103][0].apply(exports,arguments)
},{"./hash":172,"buffer":3,"dup":103,"inherits":174}],177:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments)
},{"./hash":172,"./sha256":178,"buffer":3,"dup":104,"inherits":174}],178:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"./hash":172,"buffer":3,"dup":105,"inherits":174}],179:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"./hash":172,"./sha512":180,"buffer":3,"dup":106,"inherits":174}],180:[function(require,module,exports){
arguments[4][107][0].apply(exports,arguments)
},{"./hash":172,"buffer":3,"dup":107,"inherits":174}],181:[function(require,module,exports){
(function (Buffer){
var sjcl = require('dhcurve/vendor/sjcl');

module.exports = {
  randomBytes: function() {
    var buf = new Buffer(4);
    buf.writeUInt32BE(sjcl.random.randomWords(1, 0)[0]);
    return buf;
  },
  createHash: require('sha.js')
};

}).call(this,require("buffer").Buffer)
},{"buffer":3,"dhcurve/vendor/sjcl":170,"sha.js":173}]},{},[1])(1)
});