global.location = { href: "file://" + process.cwd() + "/" };
global.scheduleImmediate = setImmediate;
global.self = global;
global.require = require;
global.process = process;

global.dartMainRunner = function(main, args) {
  main(args.slice(Math.min(args.length, 2)));
};

// Support for deferred loading.
global.dartDeferredLibraryLoader = function(uri, successCallback, errorCallback) {
  try {
    load(uri);
    successCallback();
  } catch (error) {
    errorCallback(error);
  }
};

// Generated by dart2js, the Dart to JavaScript compiler version: 1.11.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    return object.__proto__ && object.__proto__.p === cls.prototype.p;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  init.mangledNames = {get$_authError: "_authError", get$_basePath: "_basePath", get$_beforeSendListener: "_beforeSendListener", get$_cachedColumns: "_cachedColumns", get$_cachedLevel: "_cachedLevel", get$_cachedPrivate: "_cachedPrivate", get$_cachedTime: "_cachedTime", get$_changedPaths: "_changedPaths", get$_client$_conn: "_client$_conn", get$_client$_done: "_client$_done", get$_client$_onDisconnectedCompleter: "_client$_onDisconnectedCompleter", get$_client$_requesterChannel: "_client$_requesterChannel", get$_client$_responderChannel: "_client$_responderChannel", get$_closed: "_closed", get$_columns: "_columns", get$_common$_dataReceiveCount: "_common$_dataReceiveCount", get$_common$_dataSent: "_common$_dataSent", get$_common$_onDisconnectedCompleter: "_common$_onDisconnectedCompleter", get$_common$_requesterChannel: "_common$_requesterChannel", get$_common$_responderChannel: "_common$_responderChannel", get$_common$_serverCommand: "_common$_serverCommand", get$_configured: "_configured", get$_conn: "_conn", get$_connDelay: "_connDelay", get$_connListener: "_connListener", get$_connectOnReady: "_connectOnReady", get$_connected: "_connected", get$_connectedCompleter: "_connectedCompleter", get$_connectedOnce: "_connectedOnce", get$_disconnectSent: "_disconnectSent", get$_discoverBroker: "_discoverBroker", get$_err: "_err", get$_initialized: "_initialized", get$_invokeCallback: "_invokeCallback", get$_isReady: "_isReady", get$_json: "_json", get$_lastRequestS: "_lastRequestS", get$_lastUpdate: "_lastUpdate", get$_lastValueUpdate: "_lastValueUpdate", get$_listChangeController: "_listChangeController", get$_listController: "_listController", get$_listReqListener: "_listReqListener", get$_listener: "_listener", get$_loaded: "_loaded", get$_needRetryL: "_needRetryL", get$_needRetryS: "_needRetryS", get$_nodeChangeListener: "_nodeChangeListener", get$_nodes: "_nodes", get$_nodesFile: "_nodesFile", get$_nonce: "_nonce", get$_onConnectedCompleter: "_onConnectedCompleter", get$_onRequestReadyCompleter: "_onRequestReadyCompleter", get$_onRequesterReadyCompleter: "_onRequesterReadyCompleter", get$_pendingCheck: "_pendingCheck", get$_pendingInitializeLength: "_pendingInitializeLength", get$_pendingRemoveDef: "_pendingRemoveDef", get$_pendingSend: "_pendingSend", get$_pendingSendS: "_pendingSendS", get$_permission: "_permission", get$_permitted: "_permitted", get$_processors: "_processors", get$_profileFactories: "_profileFactories", get$_profileLoader: "_profileLoader", get$_ready: "_ready", get$_reconnecting: "_reconnecting", get$_request: "_request", get$_requester$_controller: "_requester$_controller", get$_requester$_isClosed: "_requester$_isClosed", get$_requester$_ready: "_requester$_ready", get$_requester$_stream: "_requester$_stream", get$_requests: "_requests", get$_responder$_subscription: "_responder$_subscription", get$_responses: "_responses", get$_rows: "_rows", get$_sending: "_sending", get$_sendingS: "_sendingS", get$_sendingStreamStatus: "_sendingStreamStatus", get$_sentStreamStatus: "_sentStreamStatus", get$_subsciption: "_subsciption", get$_subscribeController: "_subscribeController", get$_toSendList: "_toSendList", get$_updates: "_updates", get$_wsConnection: "_wsConnection", get$_wsDelay: "_wsDelay", get$_wsUpdateUri: "_wsUpdateUri", get$adapter: "adapter", get$args: "args", get$attributes: "attributes", get$brokerUrl: "brokerUrl", get$callback: "callback", get$callbacks: "callbacks", get$changed: "changed", get$changes: "changes", get$children: "children", get$clientLink: "clientLink", get$columns: "columns", get$command: "command", get$completer: "completer", get$configs: "configs", get$conn: "conn", get$connected: "connected", get$count: "count", get$data: "data", get$defaultLogLevel: "defaultLogLevel", get$defaultNodes: "defaultNodes", get$defaultPermission: "defaultPermission", get$defaultValue: "defaultValue", get$description: "description", get$detail: "detail", get$disconnectTs: "disconnectTs", get$dsId: "dsId", get$dslinkJson: "dslinkJson", get$duration: "duration", get$enableHttp: "enableHttp", get$encodePrettyJson: "encodePrettyJson", get$encodedPublicKey: "encodedPublicKey", get$engines: "engines", get$error: "error", get$exitOnFailure: "exitOnFailure", get$future: "future", get$getData: "getData", get$getDependencies: "getDependencies", get$groupMatchs: "groupMatchs", get$groups: "groups", get$idMatchs: "idMatchs", get$initialResponse: "initialResponse", get$isRequester: "isRequester", get$isResponder: "isResponder", get$lastSentId: "lastSentId", get$lastValues: "lastValues", get$link: "link", get$listed: "listed", get$listener: "listener", get$loadNodesJson: "loadNodesJson", get$main: "main", get$max: "max", get$maxCache: "maxCache", get$min: "min", get$msg: "msg", get$name: "name", get$nextRid: "nextRid", get$nextSid: "nextSid", get$node: "node", get$nodeCache: "nodeCache", get$nodeProvider: "nodeProvider", get$nodes: "nodes", get$onClose: "onClose", get$onConnectController: "onConnectController", get$onDisconnectController: "onDisconnectController", get$onReceiveController: "onReceiveController", get$onRequestReadyCompleter: "onRequestReadyCompleter", get$parentNode: "parentNode", get$parentPath: "parentPath", get$path: "path", get$permissions: "permissions", get$phase: "phase", get$pingCount: "pingCount", get$pingTimer: "pingTimer", get$prefix: "prefix", get$privateKey: "privateKey", get$profile: "profile", get$profiles: "profiles", get$provider: "provider", get$publicKey: "publicKey", get$qBase64: "qBase64", get$qHash64: "qHash64", get$random: "random", get$rawColumns: "rawColumns", get$ready: "ready", get$remotePath: "remotePath", get$removed: "removed", get$reqId: "reqId", get$request: "request", get$requester: "requester", get$responder: "responder", get$response: "response", get$retryDelay: "retryDelay", get$rid: "rid", get$rows: "rows", get$saltL: "saltL", get$saltS: "saltS", get$salts: "salts", get$sid: "sid", get$status: "status", get$streamStatus: "streamStatus", get$strictOptions: "strictOptions", get$subsriptionids: "subsriptionids", get$subsriptions: "subsriptions", get$sum: "sum", get$toRemove: "toRemove", get$ts: "ts", get$type: "type", get$updater: "updater", get$updates: "updates", get$url: "url", get$valid: "valid", get$value: "value", get$version: "version"};
  init.mangledGlobalNames = {Configs__globalConfigs: "_globalConfigs", Configs_defaultConfig: "defaultConfig", Configs_global: "global", DSError_DISCONNECTED: "DISCONNECTED", DSError_INVALID_METHOD: "INVALID_METHOD", DSError_INVALID_PARAMETER: "INVALID_PARAMETER", DSError_INVALID_PATH: "INVALID_PATH", DSError_INVALID_PATHS: "INVALID_PATHS", DSError_INVALID_VALUE: "INVALID_VALUE", DSError_NOT_IMPLEMENTED: "NOT_IMPLEMENTED", DSError_PERMISSION_DENIED: "PERMISSION_DENIED", DefaultDefNodes__defaultDefs: "_defaultDefs", DefaultDefNodes_nameMap: "nameMap", DefaultDefNodes_pathMap: "pathMap", ErrorPhase_request: "request", ErrorPhase_response: "response", Future__nullFuture: "_nullFuture", HttpClientConnection__fixedLongPollData: "_fixedLongPollData", HttpClientLink_saltNameMap: "saltNameMap", Interval_EIGHT_MILLISECONDS: "EIGHT_MILLISECONDS", Interval_FIFTY_MILLISECONDS: "FIFTY_MILLISECONDS", Interval_FIVE_SECONDS: "FIVE_SECONDS", Interval_FOUR_MILLISECONDS: "FOUR_MILLISECONDS", Interval_FOUR_SECONDS: "FOUR_SECONDS", Interval_HALF_SECOND: "HALF_SECOND", Interval_ONE_HUNDRED_MILLISECONDS: "ONE_HUNDRED_MILLISECONDS", Interval_ONE_MILLISECOND: "ONE_MILLISECOND", Interval_ONE_MINUTE: "ONE_MINUTE", Interval_ONE_SECOND: "ONE_SECOND", Interval_QUARTER_SECOND: "QUARTER_SECOND", Interval_SIXTEEN_MILLISECONDS: "SIXTEEN_MILLISECONDS", Interval_THIRTY_MILLISECONDS: "THIRTY_MILLISECONDS", Interval_THREE_HUNDRED_MILLISECONDS: "THREE_HUNDRED_MILLISECONDS", Interval_THREE_SECONDS: "THREE_SECONDS", Interval_TWO_HUNDRED_MILLISECONDS: "TWO_HUNDRED_MILLISECONDS", Interval_TWO_MILLISECONDS: "TWO_MILLISECONDS", Interval_TWO_SECONDS: "TWO_SECONDS", ListController__ignoreProfileProps: "_ignoreProfileProps", NodeCryptoProvider_INSTANCE: "INSTANCE", Path_invalidChar: "invalidChar", Path_invalidNameChar: "invalidNameChar", Permission_CONFIG: "CONFIG", Permission_NEVER: "NEVER", Permission_NONE: "NONE", Permission_READ: "READ", Permission_WRITE: "WRITE", Permission_nameParser: "nameParser", Permission_names: "names", StreamStatus_closed: "closed", StreamStatus_initialize: "initialize", StreamStatus_open: "open", ValueUpdate_TIME_ZONE: "TIME_ZONE", _CRYPTO_PROVIDER: "_CRYPTO_PROVIDER", _isCryptoProviderLocked: "_isCryptoProviderLocked", fixedBlankData: "fixedBlankData", unspecified: "unspecified"};
  // Constructors are generated at runtime.
  function setupProgram(programData, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var body = "";
      var fieldNames = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], accessors, name);
        fieldNames += "'" + field + "',";
        var parameter = "p_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
      str += accessors.join("");
      return str;
    }
    init.createNewIsolate = function() {
      return new Isolate();
    };
    init.classIdExtractor = function(o) {
      return o.constructor.name;
    };
    init.classFieldsExtractor = function(o) {
      var fieldNames = o.constructor.$__fields__;
      if (!fieldNames)
        return [];
      var result = [];
      result.length = fieldNames.length;
      for (var i = 0; i < fieldNames.length; i++)
        result[i] = o[fieldNames[i]];
      return result;
    };
    init.instanceFromClassId = function(name) {
      return new init.allClasses[name]();
    };
    init.initializeEmptyInstance = function(name, o, fields) {
      init.allClasses[name].apply(o, fields);
      return o;
    };
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        constructor["@"] = desc;
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      if (typeof classData == "object" && classData instanceof Array)
        classData = fields = classData[0];
      var s = fields.split(";");
      fields = s[1] == "" ? [] : s[1].split(",");
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      var funcs = [prototype[name] = prototype[alias] = f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      var unmangledNameIndex = 3 * optionalParameterCount + 2 * requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic) {
          init.globalFunctions[name] = f;
          functions.push(getterStubName);
        }
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
        if (isIntercepted)
          init.interceptedNames[getterStubName] = 1;
      }
      var isReflectable = array.length > unmangledNameIndex;
      if (isReflectable) {
        funcs[0].$reflectable = 1;
        funcs[0].$reflectionInfo = array;
        for (var i = 1; i < funcs.length; i++) {
          funcs[i].$reflectable = 2;
          funcs[i].$reflectionInfo = array;
        }
        var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
        var unmangledName = array[unmangledNameIndex];
        var reflectionName = unmangledName;
        if (getterStubName)
          mangledNames[getterStubName] = reflectionName;
        if (isSetter)
          reflectionName += "=";
        else if (!isGetter)
          reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
        mangledNames[name] = reflectionName;
        funcs[0].$reflectionName = reflectionName;
        funcs[0].$metadataIndex = unmangledNameIndex + 1;
        if (optionalParameterCount)
          prototype[unmangledName + "*"] = funcs[0];
      }
    }
    function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    if (!init.globalFunctions)
      init.globalFunctions = map();
    if (!init.interceptedNames)
      init.interceptedNames = {$add: 1, $and: 1, $eq: 1, $gt: 1, $index: 1, $indexSet: 1, $lt: 1, $mod: 1, $mul: 1, $not: 1, $shl: 1, $shr: 1, $sub: 1, _addEventListener$3: 1, _checkIndex$2: 1, _checkSublistArguments$3: 1, _clearChildren$0: 1, _invalidIndex$2: 1, _removeEventListener$3: 1, _replaceChild$2: 1, _setRangeFast$4: 1, _shlPositive$1: 1, _shrOtherPositive$1: 1, _shrReceiverPositive$1: 1, _tdivFast$1: 1, abs$0: 1, add$1: 1, add$4: 1, addAll$1: 1, addEventListener$3: 1, allMatches$1: 1, allMatches$2: 1, asByteData$2: 1, checkGrowable$1: 1, checkMutable$1: 1, clear$0: 1, close$0: 1, close$1: 1, close$1$force: 1, close$2: 1, codeUnitAt$1: 1, compareTo$1: 1, complete$0: 1, complete$1: 1, contains$1: 1, contains$2: 1, defaultValue$1: 1, elementAt$1: 1, endsWith$1: 1, firstWhere$2$orElse: 1, fold$2: 1, forEach$1: 1, forEach$2: 1, get$_rows: 1, get$absolute: 1, get$attributes: 1, get$bottom: 1, get$buffer: 1, get$children: 1, get$codeUnits: 1, get$connection: 1, get$data: 1, get$defaultValue: 1, get$detail: 1, get$duration: 1, get$error: 1, get$first: 1, get$hashCode: 1, get$height: 1, get$host: 1, get$isEmpty: 1, get$isFinite: 1, get$isNaN: 1, get$isNegative: 1, get$isNotEmpty: 1, get$iterator: 1, get$last: 1, get$left: 1, get$length: 1, get$lengthInBytes: 1, get$list: 1, get$loaded: 1, get$max: 1, get$message: 1, get$min: 1, get$name: 1, get$nodes: 1, get$nonce: 1, get$onDisconnect: 1, get$onError: 1, get$parent: 1, get$parentNode: 1, get$path: 1, get$port: 1, get$readyState: 1, get$request: 1, get$right: 1, get$rows: 1, get$runtimeType: 1, get$status: 1, get$statusCode: 1, get$stream: 1, get$top: 1, get$type: 1, get$url: 1, get$value: 1, get$values: 1, get$version: 1, get$width: 1, getAttribute$1: 1, getFloat32$1: 1, getFloat32$2: 1, getFloat64$1: 1, getFloat64$2: 1, getInt16$1: 1, getInt16$2: 1, getInt32$1: 1, getInt32$2: 1, getInt64$1: 1, getInt64$2: 1, getInt8$1: 1, getRange$2: 1, getUint16$1: 1, getUint16$2: 1, getUint32$1: 1, getUint32$2: 1, getUint64$1: 1, getUint64$2: 1, getUint8$1: 1, indexOf$1: 1, indexOf$2: 1, join$1: 1, lastIndexOf$1: 1, lastIndexOf$2: 1, length$0: 1, list$1: 1, load$1: 1, load$2: 1, map$1: 1, matchAsPrefix$2: 1, noSuchMethod$1: 1, onDisconnect$0: 1, onError$1: 1, pause$0: 1, pause$1: 1, print$1: 1, remainder$1: 1, remove$0: 1, remove$1: 1, removeAt$1: 1, removeEventListener$3: 1, removeRange$2: 1, replaceAll$2: 1, replaceRange$3: 1, replaceWith$1: 1, send$1: 1, send$2: 1, set$_rows: 1, set$absolute: 1, set$attributes: 1, set$bottom: 1, set$buffer: 1, set$children: 1, set$connection: 1, set$data: 1, set$defaultValue: 1, set$detail: 1, set$duration: 1, set$error: 1, set$height: 1, set$left: 1, set$length: 1, set$lengthInBytes: 1, set$list: 1, set$loaded: 1, set$max: 1, set$message: 1, set$min: 1, set$name: 1, set$nodes: 1, set$nonce: 1, set$parent: 1, set$parentNode: 1, set$path: 1, set$request: 1, set$right: 1, set$rows: 1, set$status: 1, set$stream: 1, set$text: 1, set$top: 1, set$type: 1, set$url: 1, set$value: 1, set$version: 1, set$width: 1, setAll$2: 1, setAttribute$4: 1, setFloat32$2: 1, setFloat32$3: 1, setFloat64$2: 1, setFloat64$3: 1, setInt16$2: 1, setInt16$3: 1, setInt32$2: 1, setInt32$3: 1, setInt64$2: 1, setInt64$3: 1, setInt8$2: 1, setRange$3: 1, setRange$4: 1, setUint16$2: 1, setUint16$3: 1, setUint32$2: 1, setUint32$3: 1, setUint64$2: 1, setUint64$3: 1, setUint8$2: 1, split$1: 1, startsWith$1: 1, startsWith$2: 1, stop$0: 1, sublist$1: 1, sublist$2: 1, substring$1: 1, substring$2: 1, take$1: 1, toInt$0: 1, toList$0: 1, toList$1$growable: 1, toLowerCase$0: 1, toRadixString$1: 1, toString$0: 1, trim$0: 1, value$1: 1, where$1: 1};
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getInterceptor: function(object) {
      return void 0;
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(new P.UnimplementedError("Return interceptor for " + H.S(proto(object, record))));
      }
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor == null) {
        proto = Object.getPrototypeOf(object);
        if (proto == null || proto === Object.prototype)
          return C.PlainJavaScriptObject_methods;
        else
          return C.UnknownJavaScriptObject_methods;
      }
      return interceptor;
    },
    Interceptor: {
      "^": "Object;",
      $eq: [function(receiver, other) {
        return receiver === other;
      }, null, "get$==", 2, 0, 1, 4, [], "=="],
      get$hashCode: [function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      }, null, null, 1, 0, 2, "hashCode"],
      toString$0: ["super$Interceptor$toString$0", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }, "call$0", "get$toString", 0, 0, 3, "toString"],
      noSuchMethod$1: ["super$Interceptor$noSuchMethod$1", function(receiver, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, "call$1", "get$noSuchMethod", 2, 0, 4, 5, [], "noSuchMethod"],
      get$runtimeType: function(receiver) {
        return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
      },
      "%": "MediaError|MediaKeyError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      get$runtimeType: function(receiver) {
        return C.Type_EsU;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      get$runtimeType: function(receiver) {
        return C.Type_eZO;
      },
      noSuchMethod$1: [function(receiver, invocation) {
        return this.super$Interceptor$noSuchMethod$1(receiver, invocation);
      }, null, "get$noSuchMethod", 2, 0, null, 5, []]
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(_) {
        return 0;
      },
      get$runtimeType: function(_) {
        return C.Type_XXD;
      },
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        return String(receiver);
      }
    },
    JSArray: {
      "^": "Interceptor;",
      checkMutable$1: function(receiver, reason) {
        if (!!receiver.immutable$list)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(new P.UnsupportedError(reason));
      },
      add$1: function(receiver, value) {
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      removeAt$1: function(receiver, index) {
        this.checkGrowable$1(receiver, "removeAt");
        if (index >= receiver.length)
          throw H.wrapException(P.RangeError$value(index, null, null));
        return receiver.splice(index, 1)[0];
      },
      remove$1: function(receiver, element) {
        var i;
        this.checkGrowable$1(receiver, "remove");
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq(receiver[i], element)) {
            receiver.splice(i, 1);
            return true;
          }
        return false;
      },
      where$1: function(receiver, f) {
        var t1 = new H.WhereIterable(receiver, f);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        return t1;
      },
      addAll$1: function(receiver, collection) {
        var t1;
        this.checkGrowable$1(receiver, "addAll");
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      forEach$1: function(receiver, f) {
        var end, i;
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      map$1: function(receiver, f) {
        var t1 = new H.MappedListIterable(receiver, f);
        t1.$builtinTypeInfo = [null, null];
        return t1;
      },
      join$1: function(receiver, separator) {
        var list, i;
        list = Array(receiver.length);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i)
          list[i] = H.S(receiver[i]);
        return list.join(separator);
      },
      fold$2: function(receiver, initialValue, combine) {
        var $length, value, i;
        $length = receiver.length;
        for (value = initialValue, i = 0; i < $length; ++i) {
          value = combine.call$2(value, receiver[i]);
          if (receiver.length !== $length)
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        var t1;
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        if (end == null)
          end = receiver.length;
        else if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length, null, null));
        if (start === end) {
          t1 = [];
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
          return t1;
        }
        t1 = receiver.slice(start, end);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        return t1;
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      getRange$2: function(receiver, start, end) {
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        return H.SubListIterable$(receiver, start, end, H.getTypeArgumentByIndex(receiver, 0));
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      removeRange$2: function(receiver, start, end) {
        this.checkGrowable$1(receiver, "removeRange");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        receiver.splice(start, end - start);
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var $length, i;
        this.checkMutable$1(receiver, "set range");
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        if (skipCount + $length > iterable.length)
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i)
            receiver[start + i] = iterable[skipCount + i];
        else
          for (i = 0; i < $length; ++i)
            receiver[start + i] = iterable[skipCount + i];
      },
      indexOf$2: function(receiver, element, start) {
        var i;
        if (start >= receiver.length)
          return -1;
        for (i = start; i < receiver.length; ++i)
          if (J.$eq(receiver[i], element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      get$isNotEmpty: function(receiver) {
        return receiver.length !== 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      toList$1$growable: function(receiver, growable) {
        var t1;
        if (growable) {
          t1 = receiver.slice();
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
          t1 = t1;
        } else {
          t1 = receiver.slice();
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
          t1.fixed$length = Array;
          t1 = t1;
        }
        return t1;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$iterator: function(receiver) {
        var t1 = new J.ArrayIterator(receiver, receiver.length, 0, null);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        return t1;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        this.checkGrowable$1(receiver, "set length");
        if (newLength < 0)
          throw H.wrapException(P.RangeError$value(newLength, null, null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$(index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(P.RangeError$value(index, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        if (!!receiver.immutable$list)
          H.throwExpression(new P.UnsupportedError("indexed set"));
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$(index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(P.RangeError$value(index, null, null));
        receiver[index] = value;
      },
      $isJSIndexable: 1,
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    JSMutableArray: {
      "^": "JSArray;",
      $isJSIndexable: 1
    },
    JSFixedArray: {
      "^": "JSMutableArray;"
    },
    JSExtendableArray: {
      "^": "JSMutableArray;"
    },
    JSUnmodifiableArray: {
      "^": "JSArray;"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current",
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.__interceptors$_current = null;
          return false;
        }
        this.__interceptors$_current = t1[t2];
        this.__interceptors$_index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      compareTo$1: function(receiver, b) {
        var bIsNegative;
        if (typeof b !== "number")
          throw H.wrapException(P.ArgumentError$(b));
        if (receiver < b)
          return -1;
        else if (receiver > b)
          return 1;
        else if (receiver === b) {
          if (receiver === 0) {
            bIsNegative = this.get$isNegative(b);
            if (this.get$isNegative(receiver) === bIsNegative)
              return 0;
            if (this.get$isNegative(receiver))
              return -1;
            return 1;
          }
          return 0;
        } else if (isNaN(receiver)) {
          if (this.get$isNaN(b))
            return 0;
          return 1;
        } else
          return -1;
      },
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      get$isNaN: function(receiver) {
        return isNaN(receiver);
      },
      get$isFinite: function(receiver) {
        return isFinite(receiver);
      },
      remainder$1: function(receiver, b) {
        return receiver % b;
      },
      abs$0: function(receiver) {
        return Math.abs(receiver);
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(new P.UnsupportedError("" + receiver));
      },
      toRadixString$1: function(receiver, radix) {
        var result, match, t1, exponent;
        H.checkInt(radix);
        if (radix < 2 || radix > 36)
          throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
        result = receiver.toString(radix);
        if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
          return result;
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
        if (match == null)
          H.throwExpression(new P.UnsupportedError("Unexpected toString result: " + result));
        t1 = J.getInterceptor$asx(match);
        result = t1.$index(match, 1);
        exponent = +t1.$index(match, 3);
        if (t1.$index(match, 2) != null) {
          result += t1.$index(match, 2);
          exponent -= t1.$index(match, 2).length;
        }
        return result + C.JSString_methods.$mul("0", exponent);
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $add: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(P.ArgumentError$(other));
        return receiver + other;
      },
      $sub: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(P.ArgumentError$(other));
        return receiver - other;
      },
      $mod: function(receiver, other) {
        var result = receiver % other;
        if (result === 0)
          return 0;
        if (result > 0)
          return result;
        if (other < 0)
          return result - other;
        else
          return result + other;
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
      },
      $shl: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(P.ArgumentError$(other));
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      _shlPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver << other >>> 0;
      },
      $shr: function(receiver, other) {
        var t1;
        if (other < 0)
          throw H.wrapException(P.ArgumentError$(other));
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = other > 31 ? 0 : receiver >>> other;
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrReceiverPositive$1: function(receiver, other) {
        if (other < 0)
          throw H.wrapException(P.ArgumentError$(other));
        return other > 31 ? 0 : receiver >>> other;
      },
      $and: function(receiver, other) {
        return (receiver & other) >>> 0;
      },
      $lt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(P.ArgumentError$(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(P.ArgumentError$(other));
        return receiver > other;
      },
      get$runtimeType: function(receiver) {
        return C.Type_xM7;
      },
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      get$runtimeType: function(receiver) {
        return C.Type_SnA;
      },
      $not: function(receiver) {
        return ~receiver >>> 0;
      },
      $is$double: 1,
      $isnum: 1,
      $is$int: 1
    },
    JSDouble: {
      "^": "JSNumber;",
      get$runtimeType: function(receiver) {
        return C.Type_qq1;
      },
      $is$double: 1,
      $isnum: 1
    },
    JSPositiveInt: {
      "^": "JSInt;"
    },
    JSUInt32: {
      "^": "JSPositiveInt;"
    },
    JSUInt31: {
      "^": "JSUInt32;"
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$(index));
        if (index < 0)
          throw H.wrapException(P.RangeError$value(index, null, null));
        if (index >= receiver.length)
          throw H.wrapException(P.RangeError$value(index, null, null));
        return receiver.charCodeAt(index);
      },
      allMatches$2: function(receiver, string, start) {
        H.checkString(string);
        H.checkInt(start);
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return H.allMatchesInStringUnchecked(receiver, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, i;
        if (start < 0 || start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        t1 = receiver.length;
        if (start + t1 > string.length)
          return;
        for (i = 0; i < t1; ++i)
          if (this.codeUnitAt$1(string, start + i) !== this.codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$(other));
        return receiver + other;
      },
      endsWith$1: function(receiver, other) {
        var otherLength, t1;
        H.checkString(other);
        otherLength = other.length;
        t1 = receiver.length;
        if (otherLength > t1)
          return false;
        return other === this.substring$1(receiver, t1 - otherLength);
      },
      replaceAll$2: function(receiver, from, to) {
        H.checkString(to);
        return H.stringReplaceAllUnchecked(receiver, from, to);
      },
      split$1: function(receiver, pattern) {
        return receiver.split(pattern);
      },
      replaceRange$3: function(receiver, start, end, replacement) {
        H.checkString(replacement);
        H.checkInt(start);
        end = P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        H.checkInt(end);
        return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
      },
      startsWith$2: function(receiver, pattern, index) {
        var endIndex;
        if (index > receiver.length)
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        if (typeof pattern === "string") {
          endIndex = index + pattern.length;
          if (endIndex > receiver.length)
            return false;
          return pattern === receiver.substring(index, endIndex);
        }
        return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
          H.throwExpression(H._argumentError(startIndex));
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
          H.throwExpression(H._argumentError(endIndex));
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      toLowerCase$0: function(receiver) {
        return receiver.toLowerCase();
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this.codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      get$codeUnits: function(receiver) {
        return new H.CodeUnits(receiver);
      },
      indexOf$2: function(receiver, pattern, start) {
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        return receiver.indexOf(pattern, start);
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      lastIndexOf$2: function(receiver, pattern, start) {
        var t1, t2;
        if (start == null)
          start = receiver.length;
        else if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        t1 = pattern.length;
        t2 = receiver.length;
        if (start + t1 > t2)
          start = t2 - t1;
        return receiver.lastIndexOf(pattern, start);
      },
      lastIndexOf$1: function($receiver, pattern) {
        return this.lastIndexOf$2($receiver, pattern, null);
      },
      contains$2: function(receiver, other, startIndex) {
        if (other == null)
          H.throwExpression(H._argumentError(other));
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      contains$1: function($receiver, other) {
        return this.contains$2($receiver, other, 0);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      compareTo$1: function(receiver, other) {
        var t1;
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$(other));
        if (receiver === other)
          t1 = 0;
        else
          t1 = receiver < other ? -1 : 1;
        return t1;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
      },
      get$runtimeType: function(receiver) {
        return C.Type_Ejg;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$(index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(P.RangeError$value(index, null, null));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $isString: 1,
      static: {JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 6158:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }, JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        }, JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }}
    }
  }], ["_isolate_helper", "dart:_isolate_helper",, H, {
    "^": "",
    _callInIsolate: function(isolate, $function) {
      var result = isolate.eval$1($function);
      if (!init.globalState.currentContext._isExecutingEvent)
        init.globalState.topEventLoop.run$0();
      return result;
    },
    leaveJsAsync: function() {
      --init.globalState.topEventLoop._activeJsAsyncCount;
    },
    startRootIsolate: function(entry, args) {
      var t1, t2, t3, t4, t5, rootContext;
      t1 = {};
      t1._captured_args_0 = args;
      args = args;
      t1._captured_args_0 = args;
      if (args == null) {
        args = [];
        t1._captured_args_0 = args;
        t2 = args;
      } else
        t2 = args;
      if (!J.getInterceptor(t2).$isList)
        throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
      t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
      t2._nativeDetectEnvironment$0();
      t2.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      t2.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      t2.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (t2.isWorker) {
        t2.mainManager = new H._MainManagerStub();
        t2._nativeInitWorkerMessageHandler$0();
      }
      init.globalState = t2;
      if (init.globalState.isWorker)
        return;
      t2 = init.globalState.nextIsolateId++;
      t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
      t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
      t5 = new H.RawReceivePortImpl(0, null, false);
      rootContext = new H._IsolateContext(t2, t3, t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
      t4.add$1(0, 0);
      rootContext._addRegistration$2(0, t5);
      init.globalState.rootContext = rootContext;
      init.globalState.currentContext = rootContext;
      t2 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
      if (t3)
        rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
      else {
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
        if (t2)
          rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
        else
          rootContext.eval$1(entry);
      }
      init.globalState.topEventLoop.run$0();
    },
    _globalState: function() {
      return init.globalState;
    },
    IsolateNatives_computeThisScript: function() {
      var currentScript = init.currentScript;
      if (currentScript != null)
        return String(currentScript.src);
      if (init.globalState.isWorker)
        return H.IsolateNatives_computeThisScriptFromTrace();
      return;
    },
    IsolateNatives_computeThisScriptFromTrace: function() {
      var stack, matches;
      stack = new Error().stack;
      if (stack == null) {
        stack = function() {
          try {
            throw new Error();
          } catch (e) {
            return e.stack;
          }
        }();
        if (stack == null)
          throw H.wrapException(new P.UnsupportedError("No stack trace"));
      }
      matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
      if (matches != null)
        return matches[1];
      matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
      if (matches != null)
        return matches[1];
      throw H.wrapException(new P.UnsupportedError("Cannot extract URI from \"" + H.S(stack) + "\""));
    },
    IsolateNatives__processWorkerMessage: [function(sender, e) {
      var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
      msg = new H._Deserializer(true, []).deserialize$1(e.data);
      t1 = J.getInterceptor$asx(msg);
      switch (t1.$index(msg, "command")) {
        case "start":
          init.globalState.currentManagerId = t1.$index(msg, "id");
          functionName = t1.$index(msg, "functionName");
          entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
          args = t1.$index(msg, "args");
          message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
          isSpawnUri = t1.$index(msg, "isSpawnUri");
          startPaused = t1.$index(msg, "startPaused");
          replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
          t1 = init.globalState.nextIsolateId++;
          t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
          t4 = new H.RawReceivePortImpl(0, null, false);
          context = new H._IsolateContext(t1, t2, t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
          t3.add$1(0, 0);
          context._addRegistration$2(0, t4);
          init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
          init.globalState.currentContext = context;
          init.globalState.topEventLoop.run$0();
          break;
        case "spawn-worker":
          break;
        case "message":
          if (t1.$index(msg, "port") != null)
            J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
          init.globalState.topEventLoop.run$0();
          break;
        case "close":
          init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
          sender.terminate();
          init.globalState.topEventLoop.run$0();
          break;
        case "log":
          H.IsolateNatives__log(t1.$index(msg, "msg"));
          break;
        case "print":
          if (init.globalState.isWorker) {
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", msg]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          } else
            P.print(t1.$index(msg, "msg"));
          break;
        case "error":
          throw H.wrapException(t1.$index(msg, "msg"));
      }
    }, null, null, 4, 0, null, 7, [], 8, []],
    IsolateNatives__log: function(msg) {
      var trace, t1, t2, exception;
      if (init.globalState.isWorker) {
        t1 = init.globalState.mainManager;
        t2 = P.LinkedHashMap__makeLiteral(["command", "log", "msg", msg]);
        t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
        t1.toString;
        self.postMessage(t2);
      } else
        try {
          self.console.log(msg);
        } catch (exception) {
          H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          throw H.wrapException(P.Exception_Exception(trace));
        }
    },
    IsolateNatives__getJSFunctionFromName: function(functionName) {
      return init.globalFunctions[functionName]();
    },
    IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
      var context, t1, t2, t3;
      context = init.globalState.currentContext;
      t1 = context.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
      t1 = context.controlPort;
      t2 = init.globalState.currentContext.id;
      t3 = context.pauseCapability;
      replyTo.send$1(0, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
      t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
      if (startPaused) {
        context.addPause$2(t3, t3);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
      } else
        t2.call$0();
    },
    _clone: function(message) {
      return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(message));
    },
    startRootIsolate_closure: {
      "^": "Closure:5;__isolate_helper$_box_0,_captured_entry_1",
      call$0: function() {
        this._captured_entry_1.call$1(this.__isolate_helper$_box_0._captured_args_0);
      }
    },
    startRootIsolate_closure0: {
      "^": "Closure:5;__isolate_helper$_box_0,_captured_entry_2",
      call$0: function() {
        this._captured_entry_2.call$2(this.__isolate_helper$_box_0._captured_args_0, null);
      }
    },
    _Manager: {
      "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
      _nativeDetectEnvironment$0: function() {
        var t1, t2, t3;
        t1 = self.window == null;
        t2 = self.Worker;
        t3 = t1 && !!self.postMessage;
        this.isWorker = t3;
        if (!t3)
          t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
        else
          t2 = true;
        this.supportsWorkers = t2;
        this.fromCommandLine = t1 && !t3;
      },
      _nativeInitWorkerMessageHandler$0: function() {
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, this.mainManager);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      },
      static: {_Manager__serializePrintMessage: [function(object) {
          var t1 = P.LinkedHashMap__makeLiteral(["command", "print", "msg", object]);
          return new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
        }, null, null, 2, 0, null, 6, []]}
    },
    _IsolateContext: {
      "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized<,isPaused<,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
      addPause$2: function(authentification, resume) {
        if (!this.pauseCapability.$eq(0, authentification))
          return;
        if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
          this.isPaused = true;
        this._updateGlobalState$0();
      },
      removePause$1: function(resume) {
        var t1, $event;
        if (!this.isPaused)
          return;
        t1 = this.pauseTokens;
        t1.remove$1(0, resume);
        if (t1._collection$_length === 0) {
          for (t1 = this.delayedEvents; t1.length !== 0;) {
            $event = t1.pop();
            init.globalState.topEventLoop.events.addFirst$1($event);
          }
          this.isPaused = false;
        }
        this._updateGlobalState$0();
      },
      addDoneListener$2: function(responsePort, response) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          this.doneHandlers = [];
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            this.doneHandlers[i + 1] = response;
            return;
          }
        t2.push(responsePort);
        this.doneHandlers.push(response);
      },
      removeDoneListener$1: function(responsePort) {
        var t1, i, t2;
        if (this.doneHandlers == null)
          return;
        for (t1 = J.getInterceptor(responsePort), i = 0; t2 = this.doneHandlers, i < t2.length; i += 2)
          if (t1.$eq(responsePort, t2[i])) {
            t1 = this.doneHandlers;
            t2 = i + 2;
            t1.toString;
            if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
              H.throwExpression(new P.UnsupportedError("removeRange"));
            P.RangeError_checkValidRange(i, t2, t1.length, null, null, null);
            t1.splice(i, t2 - i);
            return;
          }
      },
      setErrorsFatal$2: function(authentification, errorsAreFatal) {
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        this.errorsAreFatal = errorsAreFatal;
      },
      handlePing$3: function(responsePort, pingType, response) {
        var t1;
        if (pingType !== 0)
          t1 = pingType === 1 && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          responsePort.send$1(0, response);
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(new H._IsolateContext_handlePing_respond(responsePort, response));
      },
      handleKill$2: function(authentification, priority) {
        var t1;
        if (!this.terminateCapability.$eq(0, authentification))
          return;
        if (priority !== 0)
          t1 = priority === 1 && !this._isExecutingEvent;
        else
          t1 = true;
        if (t1) {
          this.kill$0();
          return;
        }
        t1 = this._scheduledControlEvents;
        if (t1 == null) {
          t1 = P.ListQueue$(null, null);
          this._scheduledControlEvents = t1;
        }
        t1._add$1(this.get$kill());
      },
      handleUncaughtError$2: function(error, stackTrace) {
        var t1, message, t2;
        t1 = this.errorPorts;
        if (t1._collection$_length === 0) {
          if (this.errorsAreFatal && this === init.globalState.rootContext)
            return;
          if (self.console && self.console.error)
            self.console.error(error, stackTrace);
          else {
            P.print(error);
            if (stackTrace != null)
              P.print(stackTrace);
          }
          return;
        }
        message = Array(2);
        message.fixed$length = Array;
        message[0] = J.toString$0(error);
        message[1] = stackTrace == null ? null : stackTrace.toString$0(0);
        t2 = new P.LinkedHashSetIterator(t1, t1._collection$_modifications, null, null);
        t2.$builtinTypeInfo = [null];
        t2._collection$_cell = t1._collection$_first;
        for (; t2.moveNext$0();)
          t2._collection$_current.send$1(0, message);
      },
      eval$1: function(code) {
        var old, result, oldIsExecutingEvent, e, s, exception, t1;
        old = init.globalState.currentContext;
        init.globalState.currentContext = this;
        $ = this.isolateStatics;
        result = null;
        oldIsExecutingEvent = this._isExecutingEvent;
        this._isExecutingEvent = true;
        try {
          result = code.call$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
          if (this.errorsAreFatal) {
            this.kill$0();
            if (this === init.globalState.rootContext)
              throw exception;
          }
        } finally {
          this._isExecutingEvent = oldIsExecutingEvent;
          init.globalState.currentContext = old;
          if (old != null)
            $ = old.get$isolateStatics();
          if (this._scheduledControlEvents != null)
            for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
              this._scheduledControlEvents.removeFirst$0().call$0();
        }
        return result;
      },
      handleControlMessage$1: function(message) {
        var t1 = J.getInterceptor$asx(message);
        switch (t1.$index(message, 0)) {
          case "pause":
            this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "resume":
            this.removePause$1(t1.$index(message, 1));
            break;
          case "add-ondone":
            this.addDoneListener$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "remove-ondone":
            this.removeDoneListener$1(t1.$index(message, 1));
            break;
          case "set-errors-fatal":
            this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "ping":
            this.handlePing$3(t1.$index(message, 1), t1.$index(message, 2), t1.$index(message, 3));
            break;
          case "kill":
            this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
            break;
          case "getErrors":
            this.errorPorts.add$1(0, t1.$index(message, 1));
            break;
          case "stopErrors":
            this.errorPorts.remove$1(0, t1.$index(message, 1));
            break;
        }
      },
      lookup$1: function(portId) {
        return this.ports.$index(0, portId);
      },
      _addRegistration$2: function(portId, port) {
        var t1 = this.ports;
        if (t1.containsKey$1(portId))
          throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
        t1.$indexSet(0, portId, port);
      },
      _updateGlobalState$0: function() {
        if (this.ports.__js_helper$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
          init.globalState.isolates.$indexSet(0, this.id, this);
        else
          this.kill$0();
      },
      kill$0: [function() {
        var t1, t2, t3, i;
        t1 = this._scheduledControlEvents;
        if (t1 != null)
          t1.clear$0(0);
        t1 = this.ports;
        t2 = t1.get$values(t1);
        t3 = new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)];
        for (; t3.moveNext$0();)
          t3.__internal$_current._close$0();
        t1.clear$0(0);
        this.weakPorts.clear$0(0);
        init.globalState.isolates.remove$1(0, this.id);
        this.errorPorts.clear$0(0);
        if (this.doneHandlers != null) {
          for (i = 0; t1 = this.doneHandlers, i < t1.length; i += 2)
            t1[i].send$1(0, t1[i + 1]);
          this.doneHandlers = null;
        }
      }, "call$0", "get$kill", 0, 0, 6]
    },
    _IsolateContext_handlePing_respond: {
      "^": "Closure:6;_captured_responsePort_0,_captured_response_1",
      call$0: [function() {
        this._captured_responsePort_0.send$1(0, this._captured_response_1);
      }, null, null, 0, 0, null, "call"]
    },
    _EventLoop: {
      "^": "Object;events,_activeJsAsyncCount",
      dequeue$0: function() {
        var t1 = this.events;
        if (t1._head === t1._tail)
          return;
        return t1.removeFirst$0();
      },
      runIteration$0: function() {
        var $event, t1, t2;
        $event = this.dequeue$0();
        if ($event == null) {
          if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine && init.globalState.rootContext.ports.__js_helper$_length === 0)
            H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
          t1 = init.globalState;
          if (t1.isWorker && t1.isolates.__js_helper$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
            t1 = t1.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "close"]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
          return false;
        }
        $event.process$0();
        return true;
      },
      _runHelper$0: function() {
        if (self.window != null)
          new H._EventLoop__runHelper_next(this).call$0();
        else
          for (; this.runIteration$0();)
            ;
      },
      run$0: function() {
        var e, trace, exception, t1, t2;
        if (!init.globalState.isWorker)
          this._runHelper$0();
        else
          try {
            this._runHelper$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            trace = H.getTraceFromException(exception);
            t1 = init.globalState.mainManager;
            t2 = P.LinkedHashMap__makeLiteral(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)]);
            t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
            t1.toString;
            self.postMessage(t2);
          }
      }
    },
    _EventLoop__runHelper_next: {
      "^": "Closure:6;__isolate_helper$_captured_this_0",
      call$0: [function() {
        if (!this.__isolate_helper$_captured_this_0.runIteration$0())
          return;
        P.Timer_Timer(C.Duration_0, this);
      }, null, null, 0, 0, null, "call"]
    },
    _IsolateEvent: {
      "^": "Object;isolate,fn,message>",
      process$0: function() {
        var t1 = this.isolate;
        if (t1.isPaused) {
          t1.delayedEvents.push(this);
          return;
        }
        t1.eval$1(this.fn);
      }
    },
    _MainManagerStub: {
      "^": "Object;"
    },
    IsolateNatives__processWorkerMessage_closure: {
      "^": "Closure:5;_captured_entryPoint_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_startPaused_4,_captured_replyTo_5",
      call$0: function() {
        H.IsolateNatives__startIsolate(this._captured_entryPoint_0, this._captured_args_1, this._captured_message_2, this._captured_isSpawnUri_3, this._captured_startPaused_4, this._captured_replyTo_5);
      }
    },
    IsolateNatives__startIsolate_runStartFunction: {
      "^": "Closure:6;_captured_topLevel_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_context_4",
      call$0: function() {
        var t1, t2, t3;
        this._captured_context_4.initialized = true;
        if (!this._captured_isSpawnUri_3)
          this._captured_topLevel_0.call$1(this._captured_message_2);
        else {
          t1 = this._captured_topLevel_0;
          t2 = H.getDynamicRuntimeType();
          t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          if (t3)
            t1.call$2(this._captured_args_1, this._captured_message_2);
          else {
            t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
            if (t2)
              t1.call$1(this._captured_args_1);
            else
              t1.call$0();
          }
        }
      }
    },
    _BaseSendPort: {
      "^": "Object;"
    },
    _NativeJsSendPort: {
      "^": "_BaseSendPort;_receivePort,_isolateId",
      send$1: function(_, message) {
        var isolate, t1, msg, t2;
        isolate = init.globalState.isolates.$index(0, this._isolateId);
        if (isolate == null)
          return;
        t1 = this._receivePort;
        if (t1._isClosed)
          return;
        msg = H._clone(message);
        if (isolate.get$controlPort() === t1) {
          isolate.handleControlMessage$1(msg);
          return;
        }
        t1 = init.globalState.topEventLoop;
        t2 = "receive " + H.S(message);
        t1.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), t2));
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H._NativeJsSendPort) {
          t1 = this._receivePort;
          t2 = other._receivePort;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return this._receivePort._id;
      }
    },
    _NativeJsSendPort_send_closure: {
      "^": "Closure:5;__isolate_helper$_captured_this_0,_captured_msg_1",
      call$0: function() {
        var t1 = this.__isolate_helper$_captured_this_0._receivePort;
        if (!t1._isClosed)
          t1.__isolate_helper$_add$1(this._captured_msg_1);
      }
    },
    _WorkerSendPort: {
      "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
      send$1: function(_, message) {
        var t1, workerMessage, manager;
        t1 = P.LinkedHashMap__makeLiteral(["command", "message", "port", this, "msg", message]);
        workerMessage = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
        if (init.globalState.isWorker) {
          init.globalState.mainManager.toString;
          self.postMessage(workerMessage);
        } else {
          manager = init.globalState.managers.$index(0, this._workerId);
          if (manager != null)
            manager.postMessage(workerMessage);
        }
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H._WorkerSendPort) {
          t1 = this._workerId;
          t2 = other._workerId;
          if (t1 == null ? t2 == null : t1 === t2) {
            t1 = this._isolateId;
            t2 = other._isolateId;
            if (t1 == null ? t2 == null : t1 === t2) {
              t1 = this._receivePortId;
              t2 = other._receivePortId;
              t2 = t1 == null ? t2 == null : t1 === t2;
              t1 = t2;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return (this._workerId << 16 ^ this._isolateId << 8 ^ this._receivePortId) >>> 0;
      }
    },
    RawReceivePortImpl: {
      "^": "Object;_id,_handler,_isClosed",
      _close$0: function() {
        this._isClosed = true;
        this._handler = null;
      },
      close$0: function(_) {
        var t1, t2;
        if (this._isClosed)
          return;
        this._isClosed = true;
        this._handler = null;
        t1 = init.globalState.currentContext;
        t2 = this._id;
        t1.ports.remove$1(0, t2);
        t1.weakPorts.remove$1(0, t2);
        t1._updateGlobalState$0();
      },
      __isolate_helper$_add$1: function(dataEvent) {
        if (this._isClosed)
          return;
        this._handler$1(dataEvent);
      },
      _handler$1: function(arg0) {
        return this._handler.call$1(arg0);
      },
      $isRawReceivePort: 1
    },
    TimerImpl: {
      "^": "Object;_once,_inEventLoop,_handle",
      cancel$0: function() {
        if (self.setTimeout != null) {
          if (this._inEventLoop)
            throw H.wrapException(new P.UnsupportedError("Timer in event loop cannot be canceled."));
          if (this._handle == null)
            return;
          H.leaveJsAsync();
          var t1 = this._handle;
          if (this._once)
            self.clearTimeout(t1);
          else
            self.clearInterval(t1);
          this._handle = null;
        } else
          throw H.wrapException(new P.UnsupportedError("Canceling a timer."));
      },
      get$isActive: function() {
        return this._handle != null;
      },
      TimerImpl$periodic$2: function(milliseconds, callback) {
        if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Periodic timer."));
      },
      TimerImpl$2: function(milliseconds, callback) {
        var t1, t2;
        if (milliseconds === 0)
          t1 = self.setTimeout == null || init.globalState.isWorker;
        else
          t1 = false;
        if (t1) {
          this._handle = 1;
          t1 = init.globalState.topEventLoop;
          t2 = init.globalState.currentContext;
          t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
          this._inEventLoop = true;
        } else if (self.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(new P.UnsupportedError("Timer greater than 0."));
      },
      static: {TimerImpl$: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(true, false, null);
          t1.TimerImpl$2(milliseconds, callback);
          return t1;
        }, TimerImpl$periodic: function(milliseconds, callback) {
          var t1 = new H.TimerImpl(false, false, null);
          t1.TimerImpl$periodic$2(milliseconds, callback);
          return t1;
        }}
    },
    TimerImpl_internalCallback: {
      "^": "Closure:6;__isolate_helper$_captured_this_0,_captured_callback_1",
      call$0: function() {
        this.__isolate_helper$_captured_this_0._handle = null;
        this._captured_callback_1.call$0();
      }
    },
    TimerImpl_internalCallback0: {
      "^": "Closure:6;__isolate_helper$_captured_this_2,_captured_callback_3",
      call$0: [function() {
        this.__isolate_helper$_captured_this_2._handle = null;
        H.leaveJsAsync();
        this._captured_callback_3.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    TimerImpl$periodic_closure: {
      "^": "Closure:5;__isolate_helper$_captured_this_0,_captured_callback_1",
      call$0: [function() {
        this._captured_callback_1.call$1(this.__isolate_helper$_captured_this_0);
      }, null, null, 0, 0, null, "call"]
    },
    CapabilityImpl: {
      "^": "Object;_id",
      get$hashCode: function(_) {
        var hash = this._id;
        hash = C.JSInt_methods._shrOtherPositive$1(hash, 0) ^ C.JSInt_methods._tdivFast$1(hash, 4294967296);
        hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
        hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
        hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
        return (hash ^ hash >>> 16) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (other === this)
          return true;
        if (other instanceof H.CapabilityImpl)
          return this._id === other._id;
        return false;
      }
    },
    _Serializer: {
      "^": "Object;_serializeSendPorts,serializedObjectIds",
      serialize$1: [function(x) {
        var t1, serializationId, serializeTearOff, t2, $name;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        t1 = this.serializedObjectIds;
        serializationId = t1.$index(0, x);
        if (serializationId != null)
          return ["ref", serializationId];
        t1.$indexSet(0, x, t1.__js_helper$_length);
        t1 = J.getInterceptor(x);
        if (!!t1.$isNativeByteBuffer)
          return ["buffer", x];
        if (!!t1.$isNativeTypedData)
          return ["typed", x];
        if (!!t1.$isJSIndexable)
          return this.serializeJSIndexable$1(x);
        if (!!t1.$isInternalMap) {
          serializeTearOff = this.get$serialize();
          t2 = new H.LinkedHashMapKeyIterable(x);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(x, 0)];
          t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "Iterable", 0), null);
          t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
          t1 = t1.get$values(x);
          t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "Iterable", 0), null);
          return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0))];
        }
        if (!!t1.$isJSObject)
          return this.serializeJSObject$1(x);
        if (!!t1.$isInterceptor)
          this.unsupported$1(x);
        if (!!t1.$isRawReceivePort)
          this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
        if (!!t1.$is_NativeJsSendPort)
          return this.serializeJsSendPort$1(x);
        if (!!t1.$is_WorkerSendPort)
          return this.serializeWorkerSendPort$1(x);
        if (!!t1.$isClosure) {
          $name = x.$name;
          if ($name == null)
            this.unsupported$2(x, "Closures can't be transmitted:");
          return ["function", $name];
        }
        return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
      }, "call$1", "get$serialize", 2, 0, 7, 9, []],
      unsupported$2: function(x, message) {
        throw H.wrapException(new P.UnsupportedError(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
      },
      unsupported$1: function(x) {
        return this.unsupported$2(x, null);
      },
      serializeJSIndexable$1: function(indexable) {
        var serialized = this.serializeArray$1(indexable);
        if (!!indexable.fixed$length)
          return ["fixed", serialized];
        if (!indexable.fixed$length)
          return ["extendable", serialized];
        if (!indexable.immutable$list)
          return ["mutable", serialized];
        if (indexable.constructor === Array)
          return ["const", serialized];
        this.unsupported$2(indexable, "Can't serialize indexable: ");
      },
      serializeArray$1: function(x) {
        var serialized, i;
        serialized = [];
        C.JSArray_methods.set$length(serialized, x.length);
        for (i = 0; i < x.length; ++i)
          serialized[i] = this.serialize$1(x[i]);
        return serialized;
      },
      serializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
        return x;
      },
      serializeJSObject$1: function(x) {
        var keys, values, i;
        if (!!x.constructor && x.constructor !== Object)
          this.unsupported$2(x, "Only plain JS Objects are supported:");
        keys = Object.keys(x);
        values = [];
        C.JSArray_methods.set$length(values, keys.length);
        for (i = 0; i < keys.length; ++i)
          values[i] = this.serialize$1(x[keys[i]]);
        return ["js-object", keys, values];
      },
      serializeWorkerSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", x._workerId, x._isolateId, x._receivePortId];
        return ["raw sendport", x];
      },
      serializeJsSendPort$1: function(x) {
        if (this._serializeSendPorts)
          return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort._id];
        return ["raw sendport", x];
      }
    },
    _Deserializer: {
      "^": "Object;_adjustSendPorts,deserializedObjects",
      deserialize$1: [function(x) {
        var result, t1, classId, fields, emptyInstance;
        if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
          return x;
        if (typeof x !== "object" || x === null || x.constructor !== Array)
          throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
        switch (C.JSArray_methods.get$first(x)) {
          case "ref":
            return this.deserializedObjects[x[1]];
          case "buffer":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "typed":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "fixed":
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            t1.fixed$length = Array;
            return t1;
          case "extendable":
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            return t1;
          case "mutable":
            result = x[1];
            this.deserializedObjects.push(result);
            return this.deserializeArrayInPlace$1(result);
          case "const":
            result = x[1];
            this.deserializedObjects.push(result);
            t1 = this.deserializeArrayInPlace$1(result);
            t1.$builtinTypeInfo = [null];
            t1.fixed$length = Array;
            return t1;
          case "map":
            return this.deserializeMap$1(x);
          case "sendport":
            return this.deserializeSendPort$1(x);
          case "raw sendport":
            result = x[1];
            this.deserializedObjects.push(result);
            return result;
          case "js-object":
            return this.deserializeJSObject$1(x);
          case "function":
            result = init.globalFunctions[x[1]]();
            this.deserializedObjects.push(result);
            return result;
          case "dart":
            classId = x[1];
            fields = x[2];
            emptyInstance = init.instanceFromClassId(classId);
            this.deserializedObjects.push(emptyInstance);
            this.deserializeArrayInPlace$1(fields);
            return init.initializeEmptyInstance(classId, emptyInstance, fields);
          default:
            throw H.wrapException("couldn't deserialize: " + H.S(x));
        }
      }, "call$1", "get$deserialize", 2, 0, 7, 9, []],
      deserializeArrayInPlace$1: function(x) {
        var i;
        for (i = 0; i < x.length; ++i)
          C.JSArray_methods.$indexSet(x, i, this.deserialize$1(x[i]));
        return x;
      },
      deserializeMap$1: function(x) {
        var keys, values, result, t1, i;
        keys = x[1];
        values = x[2];
        result = P.LinkedHashMap__makeEmpty();
        this.deserializedObjects.push(result);
        keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
        for (t1 = J.getInterceptor$asx(values), i = 0; i < keys.length; ++i)
          result.$indexSet(0, keys[i], this.deserialize$1(t1.$index(values, i)));
        return result;
      },
      deserializeSendPort$1: function(x) {
        var managerId, isolateId, receivePortId, t1, isolate, receivePort, result;
        managerId = x[1];
        isolateId = x[2];
        receivePortId = x[3];
        t1 = init.globalState.currentManagerId;
        if (managerId == null ? t1 == null : managerId === t1) {
          isolate = init.globalState.isolates.$index(0, isolateId);
          if (isolate == null)
            return;
          receivePort = isolate.lookup$1(receivePortId);
          if (receivePort == null)
            return;
          result = new H._NativeJsSendPort(receivePort, isolateId);
        } else
          result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
        this.deserializedObjects.push(result);
        return result;
      },
      deserializeJSObject$1: function(x) {
        var keys, values, o, t1, t2, i;
        keys = x[1];
        values = x[2];
        o = {};
        this.deserializedObjects.push(o);
        for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i)
          o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
        return o;
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable Map"));
    },
    jsConstructorNameToRti: function(constructorName) {
      return init.getTypeFromName(constructorName);
    },
    getType: [function(index) {
      return init.types[index];
    }, null, null, 2, 0, null, 10, []],
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0(value);
      if (typeof res !== "string")
        throw H.wrapException(H._argumentError(value));
      return res;
    },
    throwInvalidReflectionError: function(memberName) {
      throw H.wrapException(new P.UnsupportedError("Can't use '" + H.S(memberName) + "' in reflection because it is not included in a @MirrorsUsed annotation."));
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives__parseIntError: function(source, handleError) {
      if (handleError == null)
        throw H.wrapException(new P.FormatException(source, null, null));
      return handleError.call$1(source);
    },
    Primitives_parseInt: function(source, radix, handleError) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i;
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return H.Primitives__parseIntError(source, handleError);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return H.Primitives__parseIntError(source, handleError);
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods.codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return H.Primitives__parseIntError(source, handleError);
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName: function(object) {
      var $name, decompiled;
      $name = C.JS_CONST_8ZY(J.getInterceptor(object));
      if ($name === "Object") {
        decompiled = String(object.constructor).match(/^\s*function\s*([\w$]*)\s*\(/)[1];
        if (typeof decompiled === "string")
          $name = /^\w+$/.test(decompiled) ? decompiled : $name;
      }
      if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
        $name = C.JSString_methods.substring$1($name, 1);
      return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, _i, i;
      a = [];
      a.$builtinTypeInfo = [P.$int];
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H._argumentError(i));
        if (i <= 65535)
          a.push(i);
        else if (i <= 1114111) {
          a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          a.push(56320 + (i & 1023));
        } else
          throw H.wrapException(H._argumentError(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, t2, i;
      for (t1 = charCodes.length, _i = 0; t2 = charCodes.length, _i < t2; t2 === t1 || (0, H.throwConcurrentModificationError)(charCodes), ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H._argumentError(i));
        if (i < 0)
          throw H.wrapException(H._argumentError(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver.millisecondsSinceEpoch);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H._argumentError(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H._argumentError(object));
      object[key] = value;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, namedArgumentList;
      t1 = {};
      t1._captured_argumentCount_0 = 0;
      $arguments = [];
      namedArgumentList = [];
      t1._captured_argumentCount_0 = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1._captured_names_1 = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
      return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + t1._captured_argumentCount_0 + t1._captured_names_1, 0, $arguments, namedArgumentList, null));
    },
    Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
      var $arguments, t1;
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      t1 = $arguments.length;
      if (t1 === 0) {
        if (!!$function.call$0)
          return $function.call$0();
      } else if (t1 === 1) {
        if (!!$function.call$1)
          return $function.call$1($arguments[0]);
      } else if (t1 === 2) {
        if (!!$function.call$2)
          return $function.call$2($arguments[0], $arguments[1]);
      } else if (t1 === 3)
        if (!!$function.call$3)
          return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
      return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
    },
    Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
      var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
      argumentCount = $arguments.length;
      jsFunction = $function["call$" + argumentCount];
      if (jsFunction == null) {
        jsFunction = J.getInterceptor($function)["call*"];
        if (jsFunction == null)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        requiredArgumentCount = info.requiredParameterCount;
        maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
        if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        $arguments = P.List_List$from($arguments, true, null);
        for (pos = argumentCount; pos < maxArgumentCount; ++pos)
          C.JSArray_methods.add$1($arguments, init.metadata[info.defaultValue$1(0, pos)]);
      }
      return jsFunction.apply($function, $arguments);
    },
    JsCache_allocate: function() {
      var result = Object.create(null);
      result.x = 0;
      delete result.x;
      return result;
    },
    _argumentError: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H._argumentError(value));
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H._argumentError(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: [function() {
      return J.toString$0(this.dartException);
    }, null, null, 0, 0, null],
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(new P.ConcurrentModificationError(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, t2, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              t2 = H.S(message) + " (Error " + ieErrorCode + ")";
              return t1.call$1(new H.NullError(t2, null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.get$TypeErrorDecoder_nullPropertyPattern();
        $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(message, match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(new H.NullError(message, match == null ? null : match.method));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        return t1.call$1(new P.ArgumentError(false, null, null, null));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      return new H._StackTrace(exception, null);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
      if (numberOfArguments === 0)
        return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
      else if (numberOfArguments === 1)
        return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
      else if (numberOfArguments === 2)
        return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
      else if (numberOfArguments === 3)
        return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
      else if (numberOfArguments === 4)
        return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
      else
        throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    }, null, null, 14, 0, null, 11, [], 12, [], 13, [], 14, [], 15, [], 16, [], 17, []],
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, context, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, context, arity, a1, a2, a3, a4);
        };
      }(closure, arity, init.globalState.currentContext, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d", "this.$initialize(a,b,c,d);" + t1);
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      t1 = !isStatic;
      if (t1) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(t) {
          return function() {
            return H.getType(t);
          };
        }(functionType);
      else if (t1 && typeof functionType == "function") {
        getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
        signatureFunction = function(f, r) {
          return function() {
            return f.apply({$receiver: r(this)}, arguments);
          };
        }(functionType, getReceiver);
      } else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = t2;
        }
      }
      $prototype["call*"] = trampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = t1 + 1;
      return new Function(t2 + H.S(t1) + "}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
      selfField = H.BoundClosure_selfFieldName();
      t1 = $.BoundClosure_receiverFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t1;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t3 = !t2 || arity >= 28;
      if (t3)
        return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
      var t1;
      functions.fixed$length = Array;
      if (!!J.getInterceptor(reflectionInfo).$isList) {
        reflectionInfo.fixed$length = Array;
        t1 = reflectionInfo;
      } else
        t1 = reflectionInfo;
      return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
    },
    propertyTypeCastError: function(value, property) {
      var t1 = J.getInterceptor$asx(property);
      throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = typeof value === "object" && J.getInterceptor(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    throwNoSuchMethod: function(obj, $name, $arguments, expectedArgumentNames) {
      throw H.wrapException(P.NoSuchMethodError$(obj, new H.Symbol($name), $arguments, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, null), expectedArgumentNames));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
    },
    buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
var proto = Object.create(new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null)); proto._isTest$1 = function() { return true; }; return proto;
    },
    buildInterfaceType: function(rti, typeArguments) {
      var jsConstructorName = rti.builtin$cls;
      if (typeArguments == null || typeArguments.length === 0)
        return new H.RuntimeTypePlain(jsConstructorName);
      return new H.RuntimeTypeGeneric(jsConstructorName, typeArguments, null);
    },
    getDynamicRuntimeType: function() {
      return C.C_DynamicRuntimeType;
    },
    random64: function() {
      return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    asyncHelper: function(object, bodyFunctionOrErrorCode, completer) {
      var future;
      if (bodyFunctionOrErrorCode === 0) {
        completer.complete$1(0, object);
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
        return;
      }
      if (!!J.getInterceptor(object).$isFuture)
        future = object;
      else {
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [null];
        future._asyncComplete$1(object);
      }
      future.then$2$onError(H._wrapJsFunctionForAsync(bodyFunctionOrErrorCode, 0), new H.asyncHelper_closure(bodyFunctionOrErrorCode));
      return completer.get$future();
    },
    _wrapJsFunctionForAsync: function($function, errorCode) {
      return new H._wrapJsFunctionForAsync_closure(errorCode, function(errorCode, result) {
        while (true)
          try {
            $function(errorCode, result);
            break;
          } catch (error) {
            result = error;
            errorCode = 1;
          }
      });
    },
    createRuntimeType: function($name) {
      return new H.TypeImpl($name, null);
    },
    setRuntimeTypeInfo: function(target, rti) {
      if (target != null)
        target.$builtinTypeInfo = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$builtinTypeInfo;
    },
    getRuntimeTypeArguments: function(target, substitutionName) {
      return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti, onTypeVariable) {
      if (rti == null)
        return "dynamic";
      else if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return rti[0].builtin$cls + H.joinArguments(rti, 1, onTypeVariable);
      else if (typeof rti == "function")
        return rti.builtin$cls;
      else if (typeof rti === "number" && Math.floor(rti) === rti)
        if (onTypeVariable == null)
          return C.JSInt_methods.toString$0(rti);
        else
          return onTypeVariable.call$1(rti);
      else
        return;
    },
    joinArguments: function(types, startIndex, onTypeVariable) {
      var buffer, index, firstArgument, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
        if (firstArgument)
          firstArgument = false;
        else
          buffer._contents = t1 + ", ";
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
      }
      return allDynamic ? "" : "<" + H.S(buffer) + ">";
    },
    getRuntimeTypeString: function(object) {
      var className = J.getInterceptor(object).constructor.builtin$cls;
      if (object == null)
        return className;
      return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
    },
    substitute: function(substitution, $arguments) {
      if (typeof substitution == "function") {
        substitution = H.invokeOn(substitution, null, $arguments);
        if (substitution == null || typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
          $arguments = substitution;
        else if (typeof substitution == "function")
          $arguments = H.invokeOn(substitution, null, $arguments);
      }
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
    },
    areSubtypes: function(s, t) {
      var len, i;
      if (s == null || t == null)
        return true;
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtype(s[i], t[i]))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var rti, type, targetSignatureFunction;
      if (o == null)
        return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
      if (t == null)
        return true;
      rti = H.getRuntimeTypeInfo(o);
      o = J.getInterceptor(o);
      type = o.constructor;
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      } else if ('func' in t) {
        targetSignatureFunction = o.$signature;
        if (targetSignatureFunction == null)
          return false;
        return H.isFunctionSubtype(H.invokeOn(targetSignatureFunction, o, null), t);
      }
      return H.isSubtype(type, t);
    },
    isSubtype: function(s, t) {
      var t1, typeOfS, t2, typeOfT, substitution;
      if (s === t)
        return true;
      if (s == null || t == null)
        return true;
      if ('func' in t)
        return H.isFunctionSubtype(s, t);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        if (!('$is' + H.runtimeTypeToString(typeOfT, null) in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
      } else
        substitution = null;
      if (!t1 && substitution == null || !t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t2 ? t.slice(1) : null;
      return H.areSubtypes(H.substitute(substitution, t1), t2);
    },
    areAssignable: function(s, t, allowShorter) {
      var t1, sLength, tLength, i, t2;
      t1 = t == null;
      if (t1 && s == null)
        return true;
      if (t1)
        return allowShorter;
      if (s == null)
        return false;
      sLength = s.length;
      tLength = t.length;
      if (allowShorter) {
        if (sLength < tLength)
          return false;
      } else if (sLength !== tLength)
        return false;
      for (i = 0; i < tLength; ++i) {
        t1 = s[i];
        t2 = t[i];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      return true;
    },
    areAssignableMaps: function(s, t) {
      var t1, names, i, $name, tType, sType;
      if (t == null)
        return true;
      if (s == null)
        return false;
      t1 = Object.getOwnPropertyNames(t);
      t1.fixed$length = Array;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        tType = t[$name];
        sType = s[$name];
        if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
          return false;
      }
      return true;
    },
    isFunctionSubtype: function(s, t) {
      var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
      if (!('func' in s))
        return false;
      if ("void" in s) {
        if (!("void" in t) && "ret" in t)
          return false;
      } else if (!("void" in t)) {
        sReturnType = s.ret;
        tReturnType = t.ret;
        if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
          return false;
      }
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      if (sParametersLen === tParametersLen) {
        if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
          return false;
        if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
          return false;
      } else {
        for (pos = 0; pos < sParametersLen; ++pos) {
          t1 = sParameterTypes[pos];
          t2 = tParameterTypes[pos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
        for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
          t1 = sOptionalParameterTypes[sPos];
          t2 = tOptionalParameterTypes[tPos];
          if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
            return false;
        }
      }
      return H.areAssignableMaps(s.named, t.named);
    },
    invokeOn: function($function, receiver, $arguments) {
      return $function.apply(receiver, $arguments);
    },
    toStringForNativeObject: function(obj) {
      var t1 = $.getTagFunction;
      return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
    },
    hashCodeForNativeObject: function(object) {
      return H.Primitives_objectHashCode(object);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = $.getTagFunction.call$1(obj);
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = $.alternateTagFunction.call$2(obj, tag);
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(new P.UnimplementedError(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_gkc();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    allMatchesInStringUnchecked: function(pattern, string, startIndex) {
      var result, $length, patternLength, position, endIndex;
      result = [];
      result.$builtinTypeInfo = [P.Match];
      $length = string.length;
      patternLength = pattern.length;
      for (; true;) {
        position = string.indexOf(pattern, startIndex);
        if (position === -1)
          break;
        result.push(new H.StringMatch(position, string, pattern));
        endIndex = position + patternLength;
        if (endIndex === $length)
          break;
        else
          startIndex = position === endIndex ? startIndex + 1 : endIndex;
      }
      return result;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other === "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else {
        t1 = J.getInterceptor(other);
        if (!!t1.$isJSSyntaxRegExp) {
          t1 = C.JSString_methods.substring$1(receiver, startIndex);
          return other._nativeRegExp.test(H.checkString(t1));
        } else
          return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
      }
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var $length, t1, i;
      H.checkString(replacement);
      if (pattern === "")
        if (receiver === "")
          return replacement;
        else {
          $length = receiver.length;
          for (t1 = replacement, i = 0; i < $length; ++i)
            t1 = t1 + receiver[i] + replacement;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      else
        return receiver.replace(new RegExp(pattern.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return H.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix, suffix;
      prefix = receiver.substring(0, start);
      suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    NoSideEffects: {
      "^": "Object;"
    },
    NoThrows: {
      "^": "Object;"
    },
    NoInline: {
      "^": "Object;"
    },
    ForceInline: {
      "^": "Object;"
    },
    Native: {
      "^": "Object;name>"
    },
    _Patch: {
      "^": "Object;version>"
    },
    ConstantMap: {
      "^": "Object;",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      toString$0: function(_) {
        return P.Maps_mapToString(this);
      },
      $indexSet: function(_, key, val) {
        return H.ConstantMap__throwUnmodifiable();
      },
      remove$1: function(_, key) {
        return H.ConstantMap__throwUnmodifiable();
      },
      clear$0: function(_) {
        return H.ConstantMap__throwUnmodifiable();
      },
      $isMap: 1
    },
    ConstantStringMap: {
      "^": "ConstantMap;length>,_jsObject,_keys",
      containsKey$1: function(key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this._jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this._jsObject[key];
      },
      forEach$1: function(_, f) {
        var keys, i, key;
        keys = this._keys;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          f.call$2(key, this._fetch$1(key));
        }
      },
      get$keys: function() {
        var t1 = new H._ConstantMapKeyIterable(this);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        return t1;
      }
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;__js_helper$_map",
      get$iterator: function(_) {
        return J.get$iterator$ax(this.__js_helper$_map._keys);
      },
      get$length: function(_) {
        return J.get$length$asx(this.__js_helper$_map._keys);
      }
    },
    JSInvocationMirror: {
      "^": "Object;_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
      get$memberName: function() {
        var $name, t1, unmangledName;
        $name = this._memberName;
        if (!!J.getInterceptor($name).$isSymbol0)
          return $name;
        t1 = $.get$mangledNames();
        unmangledName = t1.$index(0, $name);
        if (unmangledName != null)
          $name = unmangledName.split(":")[0];
        else if (t1.$index(0, this._internalName) == null)
          P.print("Warning: '" + H.S($name) + "' is used reflectively but not in MirrorsUsed. This will break minified code.");
        t1 = new H.Symbol($name);
        this._memberName = t1;
        return t1;
      },
      get$positionalArguments: function() {
        var t1, argumentCount, list, index;
        if (this._kind === 1)
          return C.List_empty;
        t1 = this._arguments;
        argumentCount = t1.length - this._namedArgumentNames.length;
        if (argumentCount === 0)
          return C.List_empty;
        list = [];
        for (index = 0; index < argumentCount; ++index)
          list.push(t1[index]);
        list.immutable$list = true;
        list.fixed$length = true;
        return list;
      },
      get$namedArguments: function() {
        var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i;
        if (this._kind !== 0)
          return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol0, null);
        t1 = this._namedArgumentNames;
        namedArgumentCount = t1.length;
        t2 = this._arguments;
        namedArgumentsStartIndex = t2.length - namedArgumentCount;
        if (namedArgumentCount === 0)
          return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol0, null);
        map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, null);
        for (i = 0; i < namedArgumentCount; ++i)
          map.$indexSet(0, new H.Symbol(t1[i]), t2[namedArgumentsStartIndex + i]);
        return map;
      },
      __js_helper$_getCachedInvocation$1: function(object) {
        var interceptor, $name, isIntercepted, interceptor0, receiver, method, baseName, isCatchAll;
        interceptor = J.getInterceptor(object);
        $name = this._internalName;
        isIntercepted = Object.prototype.hasOwnProperty.call(init.interceptedNames, $name);
        if (isIntercepted) {
          interceptor0 = object === interceptor ? null : interceptor;
          receiver = interceptor;
          interceptor = interceptor0;
        } else {
          receiver = object;
          interceptor = null;
        }
        method = receiver[$name];
        if (typeof method != "function") {
          baseName = this.get$memberName()._name;
          method = receiver[baseName + "*"];
          if (method == null) {
            interceptor = J.getInterceptor(object);
            method = interceptor[baseName + "*"];
            if (method != null)
              isIntercepted = true;
            else
              interceptor = null;
          }
          isCatchAll = true;
        } else
          isCatchAll = false;
        if (typeof method == "function")
          if (isCatchAll)
            return new H.CachedCatchAllInvocation(H.ReflectionInfo_ReflectionInfo(method), $name, method, isIntercepted, interceptor);
          else
            return new H.CachedInvocation($name, method, isIntercepted, interceptor);
        else
          return new H.CachedNoSuchMethodInvocation(interceptor);
      }
    },
    CachedInvocation: {
      "^": "Object;mangledName<,jsFunction,isIntercepted<,cachedInterceptor",
      get$isNoSuchMethod: function() {
        return false;
      },
      get$isGetterStub: function() {
        return !!this.jsFunction.$getterStub;
      },
      invokeOn$2: function(victim, $arguments) {
        var receiver, arguments0;
        if (!this.isIntercepted)
          receiver = victim;
        else {
          arguments0 = [victim];
          C.JSArray_methods.addAll$1(arguments0, $arguments);
          receiver = this.cachedInterceptor;
          receiver = receiver != null ? receiver : victim;
          $arguments = arguments0;
        }
        return this.jsFunction.apply(receiver, $arguments);
      }
    },
    CachedCatchAllInvocation: {
      "^": "CachedInvocation;info,mangledName,jsFunction,isIntercepted,cachedInterceptor",
      get$isGetterStub: function() {
        return false;
      },
      invokeOn$2: function(victim, $arguments) {
        var t1, t2, fullParameterCount, providedArgumentCount, receiver, arguments0, i;
        t1 = this.info;
        t2 = t1.requiredParameterCount;
        fullParameterCount = t2 + t1.optionalParameterCount;
        if (!this.isIntercepted) {
          providedArgumentCount = $arguments.length;
          if (providedArgumentCount < fullParameterCount)
            $arguments = P.List_List$from($arguments, true, null);
          receiver = victim;
        } else {
          arguments0 = [victim];
          C.JSArray_methods.addAll$1(arguments0, $arguments);
          receiver = this.cachedInterceptor;
          receiver = receiver != null ? receiver : victim;
          providedArgumentCount = arguments0.length - 1;
          $arguments = arguments0;
        }
        if (t1.areOptionalParametersNamed && providedArgumentCount > t2)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + $arguments.length + " arguments."));
        else if (providedArgumentCount < t2)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too few)."));
        else if (providedArgumentCount > fullParameterCount)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too many)."));
        for (i = providedArgumentCount; i < fullParameterCount; ++i)
          C.JSArray_methods.add$1($arguments, init.metadata[t1.defaultValue$1(0, i)]);
        return this.jsFunction.apply(receiver, $arguments);
      }
    },
    CachedNoSuchMethodInvocation: {
      "^": "Object;interceptor",
      get$isNoSuchMethod: function() {
        return true;
      },
      get$isGetterStub: function() {
        return false;
      },
      invokeOn$2: function(victim, invocation) {
        var receiver = this.interceptor;
        return J.noSuchMethod$1(receiver == null ? victim : receiver, invocation);
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
      parameterName$1: function(parameter) {
        var metadataIndex = this.data[2 * parameter + this.optionalParameterCount + 3];
        return init.metadata[metadataIndex];
      },
      defaultValue$1: [function(_, parameter) {
        var t1 = this.requiredParameterCount;
        if (parameter < t1)
          return;
        return this.data[3 + parameter - t1];
      }, "call$1", "get$defaultValue", 2, 0, 8],
      computeFunctionRti$1: function(jsConstructor) {
        var t1, fakeInstance, t2;
        t1 = this.functionType;
        if (typeof t1 == "number")
          return init.types[t1];
        else if (typeof t1 == "function") {
          fakeInstance = new jsConstructor();
          t2 = fakeInstance["<>"];
          if (fakeInstance != null)
            fakeInstance.$builtinTypeInfo = t2;
          return t1.apply({$receiver: fakeInstance});
        } else
          throw H.wrapException(new H.RuntimeError("Unexpected function type"));
      },
      get$reflectionName: function() {
        return this.jsFunction.$reflectionName;
      },
      static: {ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data.fixed$length = Array;
          data = data;
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
        }}
    },
    Primitives_functionNoSuchMethod_closure: {
      "^": "Closure:9;__js_helper$_box_0,_captured_arguments_1,_captured_namedArgumentList_2",
      call$2: function($name, argument) {
        var t1 = this.__js_helper$_box_0;
        t1._captured_names_1 = t1._captured_names_1 + "$" + H.S($name);
        this._captured_namedArgumentList_2.push($name);
        this._captured_arguments_1.push(argument);
        ++t1._captured_argumentCount_0;
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,__js_helper$_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this.__js_helper$_receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = [];
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }}
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + H.S(t1) + "' on null";
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,__js_helper$_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this.__js_helper$_receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + H.S(t1) + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(this._message) + ")";
      },
      static: {JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }}
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
      }
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:7;_captured_ex_0",
      call$1: function(error) {
        if (!!J.getInterceptor(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this._captured_ex_0;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      }
    },
    invokeClosure_closure: {
      "^": "Closure:5;_captured_closure_0",
      call$0: function() {
        return this._captured_closure_0.call$0();
      }
    },
    invokeClosure_closure0: {
      "^": "Closure:5;_captured_closure_1,_captured_arg1_2",
      call$0: function() {
        return this._captured_closure_1.call$1(this._captured_arg1_2);
      }
    },
    invokeClosure_closure1: {
      "^": "Closure:5;_captured_closure_3,_captured_arg1_4,_captured_arg2_5",
      call$0: function() {
        return this._captured_closure_3.call$2(this._captured_arg1_4, this._captured_arg2_5);
      }
    },
    invokeClosure_closure2: {
      "^": "Closure:5;_captured_closure_6,_captured_arg1_7,_captured_arg2_8,_captured_arg3_9",
      call$0: function() {
        return this._captured_closure_6.call$3(this._captured_arg1_7, this._captured_arg2_8, this._captured_arg3_9);
      }
    },
    invokeClosure_closure3: {
      "^": "Closure:5;_captured_closure_10,_captured_arg1_11,_captured_arg2_12,_captured_arg3_13,_captured_arg4_14",
      call$0: function() {
        return this._captured_closure_10.call$4(this._captured_arg1_11, this._captured_arg2_12, this._captured_arg3_13, this._captured_arg4_14);
      }
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this) + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    "+Closure": [0, 276],
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + $name + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,__js_helper$_receiver,__js_helper$_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this.__js_helper$_receiver === other.__js_helper$_receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this.__js_helper$_receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
      },
      toString$0: function(_) {
        var receiver = this.__js_helper$_receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this.__js_helper$_name) + "' of " + H.Primitives_objectToHumanReadableString(receiver);
      },
      static: {BoundClosure_selfOf: function(closure) {
          return closure._self;
        }, BoundClosure_receiverOf: function(closure) {
          return closure.__js_helper$_receiver;
        }, BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        }, BoundClosure_computeFieldNamed: function(fieldName) {
          var template, t1, names, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          t1 = Object.getOwnPropertyNames(template);
          t1.fixed$length = Array;
          names = t1;
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }}
    },
    "+BoundClosure": [277],
    Creates: {
      "^": "Object;types"
    },
    Returns: {
      "^": "Object;types"
    },
    JSName: {
      "^": "Object;name>"
    },
    CastErrorImplementation: {
      "^": "Error;message>",
      toString$0: function(_) {
        return this.message;
      },
      static: {CastErrorImplementation$: function(actualType, expectedType) {
          return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
        }}
    },
    RuntimeError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      }
    },
    RuntimeType: {
      "^": "Object;"
    },
    RuntimeFunctionType: {
      "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
      _isTest$1: function(expression) {
        var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
        return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
      },
      _extractFunctionTypeObjectFrom$1: function(o) {
        var interceptor = J.getInterceptor(o);
        return "$signature" in interceptor ? interceptor.$signature() : null;
      },
      toRti$0: function() {
        var result, t1, t2, namedRti, keys, i, $name;
        result = {func: "dynafunc"};
        t1 = this.returnType;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isVoidRuntimeType)
          result.void = true;
        else if (!t2.$isDynamicRuntimeType)
          result.ret = t1.toRti$0();
        t1 = this.parameterTypes;
        if (t1 != null && t1.length !== 0)
          result.args = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0)
          result.opt = H.RuntimeFunctionType_listToRti(t1);
        t1 = this.namedParameters;
        if (t1 != null) {
          namedRti = Object.create(null);
          keys = H.extractKeys(t1);
          for (t2 = keys.length, i = 0; i < t2; ++i) {
            $name = keys[i];
            namedRti[$name] = t1[$name].toRti$0();
          }
          result.named = namedRti;
        }
        return result;
      },
      toString$0: function(_) {
        var t1, t2, result, needsComma, i, type, keys, $name;
        t1 = this.parameterTypes;
        if (t1 != null)
          for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += J.toString$0(type);
          }
        else {
          result = "(";
          needsComma = false;
        }
        t1 = this.optionalParameterTypes;
        if (t1 != null && t1.length !== 0) {
          result = (needsComma ? result + ", " : result) + "[";
          for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            type = t1[i];
            if (needsComma)
              result += ", ";
            result += J.toString$0(type);
          }
          result += "]";
        } else {
          t1 = this.namedParameters;
          if (t1 != null) {
            result = (needsComma ? result + ", " : result) + "{";
            keys = H.extractKeys(t1);
            for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
              $name = keys[i];
              if (needsComma)
                result += ", ";
              result += H.S(t1[$name].toRti$0()) + " " + $name;
            }
            result += "}";
          }
        }
        return result + (") -> " + J.toString$0(this.returnType));
      },
      static: {RuntimeFunctionType_listToRti: function(list) {
          var result, t1, i;
          list = list;
          result = [];
          for (t1 = list.length, i = 0; i < t1; ++i)
            result.push(list[i].toRti$0());
          return result;
        }}
    },
    DynamicRuntimeType: {
      "^": "RuntimeType;",
      toString$0: function(_) {
        return "dynamic";
      },
      toRti$0: function() {
        return;
      }
    },
    RuntimeTypePlain: {
      "^": "RuntimeType;_jsConstructorName",
      toRti$0: function() {
        var t1, rti;
        t1 = this._jsConstructorName;
        rti = H.jsConstructorNameToRti(t1);
        if (rti == null)
          throw H.wrapException("no type for '" + t1 + "'");
        return rti;
      },
      toString$0: function(_) {
        return this._jsConstructorName;
      }
    },
    RuntimeTypeGeneric: {
      "^": "RuntimeType;_jsConstructorName,$arguments,rti",
      toRti$0: function() {
        var t1, result, t2, _i;
        t1 = this.rti;
        if (t1 != null)
          return t1;
        t1 = this._jsConstructorName;
        result = [H.jsConstructorNameToRti(t1)];
        if (result[0] == null)
          throw H.wrapException("no type for '" + t1 + "<...>'");
        for (t1 = this.$arguments, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          result.push(t1[_i].toRti$0());
        this.rti = result;
        return result;
      },
      toString$0: function(_) {
        var t1 = this.$arguments;
        return this._jsConstructorName + "<" + (t1 && C.JSArray_methods).join$1(t1, ", ") + ">";
      }
    },
    UnimplementedNoSuchMethodError: {
      "^": "Error;_message",
      toString$0: function(_) {
        return "Unsupported operation: " + this._message;
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace<"
    },
    asyncHelper_closure: {
      "^": "Closure:10;_captured_bodyFunctionOrErrorCode_0",
      call$2: [function(error, stackTrace) {
        H._wrapJsFunctionForAsync(this._captured_bodyFunctionOrErrorCode_0, 1).call$1(new H.ExceptionAndStackTrace(error, stackTrace));
      }, null, null, 4, 0, null, 18, [], 19, [], "call"]
    },
    _wrapJsFunctionForAsync_closure: {
      "^": "Closure:7;_captured_errorCode_0,_captured_protected_1",
      call$1: [function(result) {
        this._captured_protected_1(this._captured_errorCode_0, result);
      }, null, null, 2, 0, null, 20, [], "call"]
    },
    TypeImpl: {
      "^": "Object;_typeName,_unmangledName",
      toString$0: function(_) {
        var t1, unmangledName;
        t1 = this._unmangledName;
        if (t1 != null)
          return t1;
        unmangledName = this._typeName.replace(/[^<,> ]+/g, function(m) {
          return init.mangledGlobalNames[m] || m;
        });
        this._unmangledName = unmangledName;
        return unmangledName;
      },
      get$hashCode: function(_) {
        return J.get$hashCode$(this._typeName);
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.TypeImpl) {
          t1 = this._typeName;
          t2 = other._typeName;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      $isType: 1
    },
    TypeVariable: {
      "^": "Object;owner,name>,bound"
    },
    JsLinkedHashMap: {
      "^": "Object;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this.__js_helper$_length !== 0;
      },
      get$keys: function() {
        var t1 = new H.LinkedHashMapKeyIterable(this);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        return t1;
      },
      get$values: function(_) {
        var t1 = new H.LinkedHashMapKeyIterable(this);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        return H.MappedIterable_MappedIterable(t1, new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: ["super$JsLinkedHashMap$internalContainsKey$1", function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableEntry$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      }],
      addAll$1: function(_, other) {
        other.forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
      },
      $index: function(_, key) {
        var strings, cell, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableEntry$2(strings, key);
          return cell == null ? null : cell.hashMapCellValue;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableEntry$2(nums, key);
          return cell == null ? null : cell.hashMapCellValue;
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: ["super$JsLinkedHashMap$internalGet$1", function(key) {
        var rest, t1, index;
        rest = this._rest;
        if (rest == null)
          return;
        t1 = this._getTableEntry$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(t1, key);
        if (index < 0)
          return;
        return t1[index].hashMapCellValue;
      }],
      $indexSet: function(_, key, value) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: ["super$JsLinkedHashMap$internalSet$2", function(key, value) {
        var rest, hash, bucket, index;
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableEntry$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }],
      putIfAbsent$2: function(key, ifAbsent) {
        var value;
        if (this.containsKey$1(key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: function(_, key) {
        if (typeof key === "string")
          return this._removeHashTableEntry$2(this._strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._removeHashTableEntry$2(this._nums, key);
        else
          return this.internalRemove$1(key);
      },
      internalRemove$1: ["super$JsLinkedHashMap$internalRemove$1", function(key) {
        var rest, t1, index, cell;
        rest = this._rest;
        if (rest == null)
          return;
        t1 = this._getTableEntry$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(t1, key);
        if (index < 0)
          return;
        cell = t1.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.hashMapCellValue;
      }],
      clear$0: function(_) {
        if (this.__js_helper$_length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this.__js_helper$_length = 0;
          this._modifications = this._modifications + 1 & 67108863;
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell = this._getTableEntry$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.hashMapCellValue = value;
      },
      _removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return;
        cell = this._getTableEntry$2(table, key);
        if (cell == null)
          return;
        this._unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return cell.hashMapCellValue;
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(key, value, null, null);
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell._previous;
        next = cell._next;
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._previous = previous;
        --this.__js_helper$_length;
        this._modifications = this._modifications + 1 & 67108863;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq(bucket[i].hashMapCellKey, key))
            return i;
        return -1;
      },
      toString$0: [function(_) {
        return P.Maps_mapToString(this);
      }, "call$0", "get$toString", 0, 0, 3, "toString"],
      _getTableEntry$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableEntry$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isInternalMap: 1,
      $isMap: 1
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure:7;_captured_this_0",
      call$1: [function(each) {
        return this._captured_this_0.$index(0, each);
      }, null, null, 2, 0, null, 21, [], "call"]
    },
    JsLinkedHashMap_addAll_closure: {
      "^": "Closure;_captured_this_0",
      call$2: function(key, value) {
        this._captured_this_0.$indexSet(0, key, value);
      },
      $signature: function() {
        return H.computeSignature(function(K, V) {
          return {func: 1, args: [K, V]};
        }, this._captured_this_0, "JsLinkedHashMap");
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey,hashMapCellValue,_next,_previous"
    },
    LinkedHashMapKeyIterable: {
      "^": "Iterable;__js_helper$_map",
      get$length: function(_) {
        return this.__js_helper$_map.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_map.__js_helper$_length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.__js_helper$_map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
        t2.$builtinTypeInfo = this.$builtinTypeInfo;
        t2._cell = t1._first;
        return t2;
      },
      contains$1: function(_, element) {
        return this.__js_helper$_map.containsKey$1(element);
      },
      forEach$1: function(_, f) {
        var t1, cell, modifications;
        t1 = this.__js_helper$_map;
        cell = t1._first;
        modifications = t1._modifications;
        for (; cell != null;) {
          f.call$1(cell.hashMapCellKey);
          if (modifications !== t1._modifications)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
          cell = cell._next;
        }
      },
      $isEfficientLength: 1
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;__js_helper$_map,_modifications,_cell,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this.__js_helper$_map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this.__js_helper$_current = null;
            return false;
          } else {
            this.__js_helper$_current = t1.hashMapCellKey;
            this._cell = t1._next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:7;_captured_getTag_0",
      call$1: function(o) {
        return this._captured_getTag_0(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:11;_captured_getUnknownTag_1",
      call$2: function(o, tag) {
        return this._captured_getUnknownTag_1(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:12;_captured_prototypeForTag_2",
      call$1: function(tag) {
        return this._captured_prototypeForTag_2(tag);
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      firstMatch$1: function(string) {
        var m = this._nativeRegExp.exec(H.checkString(string));
        if (m == null)
          return;
        return H._MatchImplementation$(this, m);
      },
      allMatches$2: function(_, string, start) {
        H.checkString(string);
        H.checkInt(start);
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._AllMatchesIterable(this, string, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      _execGlobal$2: function(string, start) {
        var regexp, match;
        regexp = this.get$_nativeGlobalVersion();
        regexp.lastIndex = start;
        match = regexp.exec(string);
        if (match == null)
          return;
        return H._MatchImplementation$(this, match);
      },
      static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          H.checkString(source);
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function() {
            try {
              return new RegExp(source, m + i + g);
            } catch (e) {
              return e;
            }
          }();
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(new P.FormatException("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }}
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match",
      $index: function(_, index) {
        return this._match[index];
      },
      groups$1: [function(groups) {
        var out, t1, t2;
        out = [];
        for (t1 = groups.get$iterator(groups), t2 = this._match; t1.moveNext$0();)
          out.push(t2[t1.get$current()]);
        return out;
      }, "call$1", "get$groups", 2, 0, 13],
      _MatchImplementation$2: function(pattern, _match) {
      },
      $isMatch: 1,
      static: {_MatchImplementation$: function(pattern, _match) {
          var t1 = new H._MatchImplementation(pattern, _match);
          t1._MatchImplementation$2(pattern, _match);
          return t1;
        }}
    },
    _AllMatchesIterable: {
      "^": "IterableBase;_re,__js_helper$_string,__js_helper$_start",
      get$iterator: function(_) {
        return new H._AllMatchesIterator(this._re, this.__js_helper$_string, this.__js_helper$_start, null);
      },
      $asIterableBase: function() {
        return [P.Match];
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _AllMatchesIterator: {
      "^": "Object;_regExp,__js_helper$_string,_nextIndex,__js_helper$_current",
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1, t2, match, nextIndex;
        t1 = this.__js_helper$_string;
        if (t1 == null)
          return false;
        t2 = this._nextIndex;
        if (t2 <= t1.length) {
          match = this._regExp._execGlobal$2(t1, t2);
          if (match != null) {
            this.__js_helper$_current = match;
            t1 = match._match;
            nextIndex = t1.index + J.get$length$asx(t1[0]);
            this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
            return true;
          }
        }
        this.__js_helper$_current = null;
        this.__js_helper$_string = null;
        return false;
      }
    },
    StringMatch: {
      "^": "Object;start,input,pattern",
      $index: function(_, g) {
        return this.group$1(g);
      },
      group$1: function(group_) {
        if (group_ !== 0)
          throw H.wrapException(P.RangeError$value(group_, null, null));
        return this.pattern;
      },
      groups$1: [function(groups_) {
        var result, t1, t2, g;
        result = [];
        result.$builtinTypeInfo = [P.String];
        for (t1 = groups_.get$iterator(groups_), t2 = this.pattern; t1.moveNext$0();) {
          g = t1.get$current();
          H.throwExpression(P.RangeError$value(g, null, null));
          result.push(t2);
        }
        return result;
      }, "call$1", "get$groups", 2, 0, 13],
      $isMatch: 1
    }
  }], ["args.src.arg_parser", "package:args/src/arg_parser.dart",, S, {
    "^": "",
    ArgParser: {
      "^": "Object;_options,_commands,options,commands,_optionsAndSeparators,allowTrailingOptions",
      addOption$11$abbr$allowMultiple$allowed$allowedHelp$callback$defaultsTo$help$hide$splitCommas$valueHelp: function($name, abbr, allowMultiple, allowed, allowedHelp, callback, defaultsTo, help, hide, splitCommas, valueHelp) {
        if (!allowMultiple)
          ;
        this._addOption$11$hide$splitCommas($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, allowMultiple ? C.OptionType_Icb : C.OptionType_F9d, hide, splitCommas);
      },
      addOption$4$abbr$defaultsTo$help: function($name, abbr, defaultsTo, help) {
        return this.addOption$11$abbr$allowMultiple$allowed$allowedHelp$callback$defaultsTo$help$hide$splitCommas$valueHelp($name, abbr, false, null, null, null, defaultsTo, help, false, null, null);
      },
      addOption$3$abbr$help: function($name, abbr, help) {
        return this.addOption$11$abbr$allowMultiple$allowed$allowedHelp$callback$defaultsTo$help$hide$splitCommas$valueHelp($name, abbr, false, null, null, null, null, help, false, null, null);
      },
      addOption$2$help: function($name, help) {
        return this.addOption$11$abbr$allowMultiple$allowed$allowedHelp$callback$defaultsTo$help$hide$splitCommas$valueHelp($name, null, false, null, null, null, null, help, false, null, null);
      },
      addOption$5$abbr$allowed$defaultsTo$help: function($name, abbr, allowed, defaultsTo, help) {
        return this.addOption$11$abbr$allowMultiple$allowed$allowedHelp$callback$defaultsTo$help$hide$splitCommas$valueHelp($name, abbr, false, allowed, null, null, defaultsTo, help, false, null, null);
      },
      _addOption$12$hide$negatable$splitCommas: function($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, hide, negatable, splitCommas) {
        var t1, existing, t2, option;
        t1 = this._options;
        if (t1.containsKey$1($name))
          throw H.wrapException(P.ArgumentError$("Duplicate option \"" + $name + "\"."));
        if (abbr != null) {
          existing = this.findByAbbreviation$1(abbr);
          if (existing != null)
            throw H.wrapException(P.ArgumentError$("Abbreviation \"" + abbr + "\" is already used by \"" + existing.name + "\"."));
        }
        if (allowed == null)
          t2 = null;
        else {
          t2 = new P.UnmodifiableListView(allowed);
          t2.$builtinTypeInfo = [null];
        }
        option = new E.Option($name, abbr, t2, defaultsTo, callback, help, valueHelp, null, type, negatable, type === C.OptionType_Icb, hide);
        if ($name.length === 0)
          H.throwExpression(P.ArgumentError$("Name cannot be empty."));
        else if (C.JSString_methods.startsWith$1($name, "-"))
          H.throwExpression(P.ArgumentError$("Name " + $name + " cannot start with \"-\"."));
        t2 = $.get$Option__invalidChars()._nativeRegExp;
        if (t2.test(H.checkString($name)))
          H.throwExpression(P.ArgumentError$("Name \"" + $name + "\" contains invalid characters."));
        if (abbr != null) {
          if (abbr.length !== 1)
            H.throwExpression(P.ArgumentError$("Abbreviation must be null or have length 1."));
          else if (abbr === "-")
            H.throwExpression(P.ArgumentError$("Abbreviation cannot be \"-\"."));
          if (t2.test(H.checkString(abbr)))
            H.throwExpression(P.ArgumentError$("Abbreviation is an invalid character."));
        }
        t1.$indexSet(0, $name, option);
        this._optionsAndSeparators.push(option);
      },
      _addOption$11$hide$negatable: function($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, hide, negatable) {
        return this._addOption$12$hide$negatable$splitCommas($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, hide, negatable, null);
      },
      _addOption$11$hide$splitCommas: function($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, hide, splitCommas) {
        return this._addOption$12$hide$negatable$splitCommas($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, hide, false, splitCommas);
      },
      findByAbbreviation$1: function(abbr) {
        var t1 = this.options._map;
        return t1.get$values(t1).firstWhere$2$orElse(0, new S.ArgParser_findByAbbreviation_closure(abbr), new S.ArgParser_findByAbbreviation_closure0());
      }
    },
    ArgParser_findByAbbreviation_closure: {
      "^": "Closure:7;_captured_abbr_0",
      call$1: function(option) {
        var t1, t2;
        t1 = option.get$abbreviation();
        t2 = this._captured_abbr_0;
        return t1 == null ? t2 == null : t1 === t2;
      }
    },
    ArgParser_findByAbbreviation_closure0: {
      "^": "Closure:5;",
      call$0: function() {
        return;
      }
    }
  }], ["args.src.arg_results", "package:args/src/arg_results.dart",, G, {
    "^": "",
    ArgResults: {
      "^": "Object;_parser,_parsed,name>,command<,rest,$arguments",
      $index: function(_, $name) {
        var t1 = this._parser.options._map;
        if (!t1.containsKey$1($name))
          throw H.wrapException(P.ArgumentError$("Could not find an option named \"" + H.S($name) + "\"."));
        return t1.$index(0, $name).getOrDefault$1(this._parsed.$index(0, $name));
      }
    }
  }], ["args.src.option", "package:args/src/option.dart",, E, {
    "^": "",
    Option: {
      "^": "Object;name>,abbreviation<,allowed,defaultValue>,callback<,help,valueHelp,allowedHelp,type>,negatable<,splitCommas,hide",
      get$isFlag: function() {
        return this.type === C.OptionType_woc;
      },
      getOrDefault$1: function(value) {
        var t1;
        if (value != null)
          return value;
        if (this.type !== C.OptionType_Icb)
          return this.defaultValue;
        t1 = this.defaultValue;
        if (t1 != null)
          return [t1];
        return [];
      },
      callback$1: function(arg0) {
        return this.callback.call$1(arg0);
      }
    },
    OptionType: {
      "^": "Object;name>"
    }
  }], ["args.src.parser", "package:args/src/parser.dart",, S, {
    "^": "",
    Parser: {
      "^": "Object;commandName,parent>,grammar,args<,rest,results",
      parse$0: function() {
        var t1, t2, $arguments, commandResults, t3, t4, command, commandName;
        t1 = this.args;
        t2 = t1.slice();
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        $arguments = t2;
        t2 = this.rest;
        t3 = this.grammar;
        while (true) {
          if (!(t1.length > 0)) {
            commandResults = null;
            break;
          }
          c$0: {
            t4 = t1[0];
            if (t4 === "--") {
              C.JSArray_methods.removeAt$1(t1, 0);
              commandResults = null;
              break;
            }
            command = t3.commands._map.$index(0, t4);
            if (command != null) {
              if (t2.length !== 0)
                H.throwExpression(new P.FormatException("Cannot specify arguments before a command.", null, null));
              commandName = C.JSArray_methods.removeAt$1(t1, 0);
              t4 = [];
              t4.$builtinTypeInfo = [P.String];
              C.JSArray_methods.addAll$1(t4, t2);
              commandResults = new S.Parser(commandName, this, command, t1, t4, P.LinkedHashMap_LinkedHashMap$_empty(P.String, null)).parse$0();
              C.JSArray_methods.set$length(t2, 0);
              break;
            }
            if (this.parseSoloOption$0())
              break c$0;
            if (this.parseAbbreviation$1(this))
              break c$0;
            if (this.parseLongOption$0())
              break c$0;
            if (!t3.allowTrailingOptions) {
              commandResults = null;
              break;
            }
            t2.push(C.JSArray_methods.removeAt$1(t1, 0));
          }
        }
        t3.options._map.forEach$1(0, new S.Parser_parse_closure(this));
        C.JSArray_methods.addAll$1(t2, t1);
        C.JSArray_methods.set$length(t1, 0);
        t1 = new P.UnmodifiableListView(t2);
        t1.$builtinTypeInfo = [null];
        t2 = new P.UnmodifiableListView($arguments);
        t2.$builtinTypeInfo = [null];
        return new G.ArgResults(t3, this.results, this.commandName, commandResults, t1, t2);
      },
      parseSoloOption$0: function() {
        var t1, soloOpt, t2, option, t3;
        t1 = this.args;
        soloOpt = $.get$_SOLO_OPT().firstMatch$1(t1[0]);
        if (soloOpt == null)
          return false;
        t2 = soloOpt._match;
        option = this.grammar.findByAbbreviation$1(t2[1]);
        if (option == null) {
          t1 = this.parent;
          t2 = "Could not find an option or flag \"-" + H.S(t2[1]) + "\".";
          if (t1 == null)
            H.throwExpression(new P.FormatException(t2, null, null));
          return t1.parseSoloOption$0();
        }
        C.JSArray_methods.removeAt$1(t1, 0);
        t2 = option.type;
        t3 = option.name;
        if (t2 === C.OptionType_woc)
          this.results.$indexSet(0, t3, true);
        else {
          t2 = t1.length;
          t3 = "Missing argument for \"" + t3 + "\".";
          if (t2 <= 0)
            H.throwExpression(new P.FormatException(t3, null, null));
          this.setOption$3(this.results, option, t1[0]);
          C.JSArray_methods.removeAt$1(t1, 0);
        }
        return true;
      },
      parseAbbreviation$1: function(innermostCommand) {
        var t1, abbrOpt, t2, c, first, t3, t4, i, i0;
        t1 = this.args;
        abbrOpt = $.get$_ABBR_OPT().firstMatch$1(t1[0]);
        if (abbrOpt == null)
          return false;
        t2 = abbrOpt._match;
        c = J.substring$2$s(t2[1], 0, 1);
        first = this.grammar.findByAbbreviation$1(c);
        if (first == null) {
          t1 = this.parent;
          t2 = "Could not find an option with short name \"-" + c + "\".";
          if (t1 == null)
            H.throwExpression(new P.FormatException(t2, null, null));
          return t1.parseAbbreviation$1(innermostCommand);
        } else if (first.type !== C.OptionType_woc)
          this.setOption$3(this.results, first, J.substring$1$s(t2[1], 1) + H.S(t2[2]));
        else {
          t3 = t2[2];
          t4 = "Option \"-" + c + "\" is a flag and cannot handle value \"" + J.substring$1$s(t2[1], 1) + H.S(t2[2]) + "\".";
          if (t3 !== "")
            H.throwExpression(new P.FormatException(t4, null, null));
          for (i = 0; t3 = t2[1], i < t3.length; i = i0) {
            i0 = i + 1;
            innermostCommand.parseShortFlag$1(J.substring$2$s(t3, i, i0));
          }
        }
        C.JSArray_methods.removeAt$1(t1, 0);
        return true;
      },
      parseShortFlag$1: function(c) {
        var option, t1, t2;
        option = this.grammar.findByAbbreviation$1(c);
        if (option == null) {
          t1 = this.parent;
          t2 = "Could not find an option with short name \"-" + c + "\".";
          if (t1 == null)
            H.throwExpression(new P.FormatException(t2, null, null));
          t1.parseShortFlag$1(c);
          return;
        }
        t1 = option.type;
        t2 = "Option \"-" + c + "\" must be a flag to be in a collapsed \"-\".";
        if (t1 !== C.OptionType_woc)
          H.throwExpression(new P.FormatException(t2, null, null));
        this.results.$indexSet(0, option.name, true);
      },
      parseLongOption$0: function() {
        var t1, longOpt, t2, t3, t4, option, $name;
        t1 = this.args;
        longOpt = $.get$_LONG_OPT().firstMatch$1(t1[0]);
        if (longOpt == null)
          return false;
        t2 = longOpt._match;
        t3 = t2[1];
        t4 = this.grammar.options._map;
        option = t4.$index(0, t3);
        if (option != null) {
          C.JSArray_methods.removeAt$1(t1, 0);
          if (option.get$isFlag()) {
            t1 = t2[3];
            t3 = "Flag option \"" + H.S(t3) + "\" should not be given a value.";
            if (t1 != null)
              H.throwExpression(new P.FormatException(t3, null, null));
            this.results.$indexSet(0, option.name, true);
          } else {
            t2 = t2[3];
            if (t2 != null)
              this.setOption$3(this.results, option, t2);
            else {
              t2 = t1.length;
              t3 = "Missing argument for \"" + option.name + "\".";
              if (t2 <= 0)
                H.throwExpression(new P.FormatException(t3, null, null));
              this.setOption$3(this.results, option, t1[0]);
              C.JSArray_methods.removeAt$1(t1, 0);
            }
          }
        } else if (J.getInterceptor$s(t3).startsWith$1(t3, "no-")) {
          $name = C.JSString_methods.substring$1(t3, 3);
          option = t4.$index(0, $name);
          if (option == null) {
            t1 = this.parent;
            t2 = "Could not find an option named \"" + $name + "\".";
            if (t1 == null)
              H.throwExpression(new P.FormatException(t2, null, null));
            return t1.parseLongOption$0();
          }
          C.JSArray_methods.removeAt$1(t1, 0);
          t1 = option.get$isFlag();
          t2 = "Cannot negate non-flag option \"" + $name + "\".";
          if (!t1)
            H.throwExpression(new P.FormatException(t2, null, null));
          t1 = option.get$negatable();
          t2 = "Cannot negate option \"" + $name + "\".";
          if (!t1)
            H.throwExpression(new P.FormatException(t2, null, null));
          this.results.$indexSet(0, option.name, false);
        } else {
          t1 = this.parent;
          t3 = "Could not find an option named \"" + t3 + "\".";
          if (t1 == null)
            H.throwExpression(new P.FormatException(t3, null, null));
          return t1.parseLongOption$0();
        }
        return true;
      },
      setOption$3: function(results, option, value) {
        var list, t1, t2, t3, _i, element;
        if (option.type !== C.OptionType_Icb) {
          this._validateAllowed$2(option, value);
          results.$indexSet(0, option.name, value);
          return;
        }
        list = results.putIfAbsent$2(option.name, new S.Parser_setOption_closure());
        if (option.splitCommas)
          for (t1 = value.split(","), t2 = t1.length, t3 = J.getInterceptor$ax(list), _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            element = t1[_i];
            this._validateAllowed$2(option, element);
            t3.add$1(list, element);
          }
        else {
          this._validateAllowed$2(option, value);
          J.add$1$ax(list, value);
        }
      },
      _validateAllowed$2: function(option, value) {
        var t1, t2;
        t1 = option.allowed;
        if (t1 == null)
          return;
        t1 = t1.contains$1(t1, value);
        t2 = "\"" + H.S(value) + "\" is not an allowed value for option \"" + option.name + "\".";
        if (!t1)
          H.throwExpression(new P.FormatException(t2, null, null));
      }
    },
    Parser_parse_closure: {
      "^": "Closure:14;_parser$_captured_this_0",
      call$2: function($name, option) {
        if (option.get$callback() == null)
          return;
        option.callback$1(option.getOrDefault$1(this._parser$_captured_this_0.results.$index(0, $name)));
      }
    },
    Parser_setOption_closure: {
      "^": "Closure:5;",
      call$0: function() {
        return [];
      }
    }
  }], ["args.src.usage", "package:args/src/usage.dart",, A, {
    "^": "",
    padRight: function(source, $length) {
      var t1 = H.S(source);
      for (; t1.length < $length;)
        t1 += " ";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Usage: {
      "^": "Object;optionsAndSeparators,buffer,currentColumn,columnWidths,numHelpLines,newlinesNeeded",
      generate$0: function() {
        var t1, t2, _i, optionOrSeparator, t3, allowedNames, t4, _i0, $name;
        this.buffer = new P.StringBuffer("");
        this.calculateColumnWidths$0();
        for (t1 = this.optionsAndSeparators, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          optionOrSeparator = t1[_i];
          if (optionOrSeparator.hide)
            continue;
          this.write$2(0, this.getAbbreviation$1(optionOrSeparator));
          this.write$2(1, this.getLongOption$1(optionOrSeparator));
          this.write$2(2, optionOrSeparator.help);
          t3 = optionOrSeparator.allowedHelp;
          if (t3 != null) {
            t3 = t3._map;
            allowedNames = t3.get$keys().toList$1$growable(0, false);
            t4 = allowedNames.length - 1;
            if (t4 - 0 <= 32)
              H.Sort__insertionSort(allowedNames, 0, t4, P.Comparable_compare$closure());
            else
              H.Sort__dualPivotQuicksort(allowedNames, 0, t4, P.Comparable_compare$closure());
            ++this.newlinesNeeded;
            this.currentColumn = 0;
            this.numHelpLines = 0;
            for (t4 = allowedNames.length, _i0 = 0; _i0 < allowedNames.length; allowedNames.length === t4 || (0, H.throwConcurrentModificationError)(allowedNames), ++_i0) {
              $name = allowedNames[_i0];
              this.write$2(1, "      [" + H.S($name) + "]");
              this.write$2(2, t3.$index(0, $name));
            }
            ++this.newlinesNeeded;
            this.currentColumn = 0;
            this.numHelpLines = 0;
          } else if (optionOrSeparator.allowed != null)
            this.write$2(2, this.buildAllowedList$1(optionOrSeparator));
          else {
            t3 = optionOrSeparator.defaultValue;
            if (t3 != null) {
              t4 = optionOrSeparator.type === C.OptionType_woc;
              if (t4 && t3 === true)
                this.write$2(2, "(defaults to on)");
              else if (!t4)
                this.write$2(2, "(defaults to \"" + H.S(t3) + "\")");
            }
          }
          if (this.numHelpLines > 1) {
            ++this.newlinesNeeded;
            this.currentColumn = 0;
            this.numHelpLines = 0;
          }
        }
        return J.toString$0(this.buffer);
      },
      getAbbreviation$1: function(option) {
        var t1 = option.abbreviation;
        if (t1 != null)
          return "-" + H.S(t1) + ", ";
        else
          return "";
      },
      getLongOption$1: function(option) {
        var result = option.negatable ? "--[no-]" + option.name : "--" + option.name;
        option.valueHelp;
        return result;
      },
      calculateColumnWidths$0: function() {
        var t1, t2, abbr, title, _i, option, t3;
        for (t1 = this.optionsAndSeparators, t2 = t1.length, abbr = 0, title = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          option = t1[_i];
          if (option.hide)
            continue;
          abbr = P.max(abbr, this.getAbbreviation$1(option).length);
          title = P.max(title, this.getLongOption$1(option).length);
          t3 = option.allowedHelp;
          if (t3 != null)
            for (t3 = t3._map.get$keys(), t3 = t3.get$iterator(t3); t3.moveNext$0();)
              title = P.max(title, ("      [" + H.S(t3.get$current()) + "]").length);
        }
        this.columnWidths = [abbr, title + 4];
      },
      write$2: function(column, text) {
        var lines, t1, _i;
        lines = text.split("\n");
        while (true) {
          if (!(lines.length > 0 && J.trim$0$s(lines[0]) === ""))
            break;
          P.RangeError_checkValidRange(0, 1, lines.length, null, null, null);
          lines.splice(0, 1);
        }
        while (true) {
          t1 = lines.length;
          if (!(t1 > 0 && J.trim$0$s(lines[t1 - 1]) === ""))
            break;
          lines.pop();
        }
        for (t1 = lines.length, _i = 0; _i < lines.length; lines.length === t1 || (0, H.throwConcurrentModificationError)(lines), ++_i)
          this.writeLine$2(column, lines[_i]);
      },
      writeLine$2: function(column, text) {
        var t1, t2;
        for (; t1 = this.newlinesNeeded, t1 > 0;) {
          this.buffer._contents += "\n";
          this.newlinesNeeded = t1 - 1;
        }
        for (; t1 = this.currentColumn, t1 !== column;) {
          t2 = this.buffer;
          if (t1 < 2)
            t2._contents += A.padRight("", this.columnWidths[t1]);
          else
            t2._contents += "\n";
          this.currentColumn = C.JSInt_methods.$mod(this.currentColumn + 1, 3);
        }
        t1 = this.columnWidths;
        t1.length;
        t2 = this.buffer;
        if (column < 2)
          t2._contents += A.padRight(text, t1[column]);
        else {
          t2.toString;
          t2._contents += H.S(text);
        }
        this.currentColumn = C.JSInt_methods.$mod(this.currentColumn + 1, 3);
        t1 = column === 2;
        if (t1)
          ++this.newlinesNeeded;
        if (t1)
          ++this.numHelpLines;
        else
          this.numHelpLines = 0;
      },
      buildAllowedList$1: function(option) {
        var allowedBuffer, t1, first, allowed;
        allowedBuffer = new P.StringBuffer("");
        allowedBuffer._contents = "[";
        for (t1 = option.allowed, t1 = t1.get$iterator(t1), first = true; t1.moveNext$0(); first = false) {
          allowed = t1.__internal$_current;
          if (!first)
            allowedBuffer._contents += ", ";
          allowedBuffer._contents += H.S(allowed);
          if (J.$eq(allowed, option.defaultValue))
            allowedBuffer._contents += " (default)";
        }
        t1 = allowedBuffer._contents += "]";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort__doSort: function(a, left, right, compare) {
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare);
    },
    Sort__insertionSort: function(a, left, right, compare) {
      var i, t1, el, j, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, t2;
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare);
      H.Sort__doSort(a, great + 2, right, compare);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare);
      } else
        H.Sort__doSort(a, less, great, compare);
    },
    CodeUnits: {
      "^": "UnmodifiableListBase;_string",
      get$length: function(_) {
        return this._string.length;
      },
      $index: function(_, i) {
        return C.JSString_methods.codeUnitAt$1(this._string, i);
      },
      $asUnmodifiableListBase: function() {
        return [P.$int];
      },
      $asListBase: function() {
        return [P.$int];
      },
      $asObject_ListMixin: function() {
        return [P.$int];
      },
      $asList: function() {
        return [P.$int];
      },
      $asIterable: function() {
        return [P.$int];
      }
    },
    ListIterable: {
      "^": "Iterable;",
      get$iterator: function(_) {
        var t1 = new H.ListIterator(this, this.get$length(this), 0, null);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
        return t1;
      },
      forEach$1: function(_, action) {
        var $length, i;
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$last: function(_) {
        if (this.get$length(this) === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        return this.elementAt$1(0, this.get$length(this) - 1);
      },
      contains$1: function(_, element) {
        var $length, i;
        $length = this.get$length(this);
        for (i = 0; i < $length; ++i) {
          if (J.$eq(this.elementAt$1(0, i), element))
            return true;
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return false;
      },
      join$1: function(_, separator) {
        var $length, first, buffer, i, t1;
        $length = this.get$length(this);
        if (separator.length !== 0) {
          if ($length === 0)
            return "";
          first = H.S(this.elementAt$1(0, 0));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
          buffer = new P.StringBuffer(first);
          for (i = 1; i < $length; ++i) {
            buffer._contents += separator;
            buffer._contents += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(new P.ConcurrentModificationError(this));
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else {
          buffer = new P.StringBuffer("");
          for (i = 0; i < $length; ++i) {
            buffer._contents += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(new P.ConcurrentModificationError(this));
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      },
      map$1: function(_, f) {
        var t1 = new H.MappedListIterable(this, f);
        t1.$builtinTypeInfo = [null, null];
        return t1;
      },
      fold$2: function(_, initialValue, combine) {
        var $length, value, i;
        $length = this.get$length(this);
        for (value = initialValue, i = 0; i < $length; ++i) {
          value = combine.call$2(value, this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return value;
      },
      toList$1$growable: function(_, growable) {
        var result, i;
        if (growable) {
          result = [];
          result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
          C.JSArray_methods.set$length(result, this.get$length(this));
        } else {
          result = Array(this.get$length(this));
          result.fixed$length = Array;
          result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
        }
        for (i = 0; i < this.get$length(this); ++i)
          result[i] = this.elementAt$1(0, i);
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      $isEfficientLength: 1
    },
    SubListIterable: {
      "^": "ListIterable;_iterable,_start,_endOrLength",
      get$_endIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._endOrLength;
        if (t1 == null || t1 > $length)
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._start;
        if (t1 > $length)
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2;
        $length = J.get$length$asx(this._iterable);
        t1 = this._start;
        if (t1 >= $length)
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || t2 >= $length)
          return $length - t1;
        return t2 - t1;
      },
      elementAt$1: function(_, index) {
        var realIndex = this.get$_startIndex() + index;
        if (index < 0 || realIndex >= this.get$_endIndex())
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return J.elementAt$1$ax(this._iterable, realIndex);
      },
      take$1: function(_, count) {
        var t1, t2, newEnd;
        if (count < 0)
          H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
        t1 = this._endOrLength;
        t2 = this._start;
        if (t1 == null)
          return H.SubListIterable$(this._iterable, t2, t2 + count, H.getTypeArgumentByIndex(this, 0));
        else {
          newEnd = t2 + count;
          if (t1 < newEnd)
            return this;
          return H.SubListIterable$(this._iterable, t2, newEnd, H.getTypeArgumentByIndex(this, 0));
        }
      },
      toList$1$growable: function(_, growable) {
        var start, t1, t2, end, end0, $length, result, i;
        start = this._start;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        end = t2.get$length(t1);
        end0 = this._endOrLength;
        if (end0 != null && end0 < end)
          end = end0;
        $length = end - start;
        if ($length < 0)
          $length = 0;
        if (growable) {
          result = [];
          result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
          C.JSArray_methods.set$length(result, $length);
        } else {
          result = Array($length);
          result.fixed$length = Array;
          result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        }
        for (i = 0; i < $length; ++i) {
          result[i] = t2.elementAt$1(t1, start + i);
          if (t2.get$length(t1) < end)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
        var t1, t2;
        t1 = this._start;
        if (t1 < 0)
          H.throwExpression(P.RangeError$range(t1, 0, null, "start", null));
        t2 = this._endOrLength;
        if (t2 != null) {
          if (t2 < 0)
            H.throwExpression(P.RangeError$range(t2, 0, null, "end", null));
          if (t1 > t2)
            throw H.wrapException(P.RangeError$range(t1, 0, t2, "start", null));
        }
      },
      static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
          t1.$builtinTypeInfo = [$E];
          t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
          return t1;
        }}
    },
    ListIterator: {
      "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (this.__internal$_length !== $length)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        t3 = this._index;
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this._index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this._iterable);
      },
      get$last: function(_) {
        return this._f$1(J.get$last$ax(this._iterable));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          var t1;
          if (!!J.getInterceptor(iterable).$isEfficientLength) {
            t1 = new H.EfficientLengthMappedIterable(iterable, $function);
            t1.$builtinTypeInfo = [$S, $T];
            return t1;
          }
          t1 = new H.MappedIterable(iterable, $function);
          t1.$builtinTypeInfo = [$S, $T];
          return t1;
        }}
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f",
      $isEfficientLength: 1
    },
    MappedIterator: {
      "^": "Iterator;__internal$_current,_iterator,_f",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f$1(J.elementAt$1$ax(this._source, index));
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      $isEfficientLength: 1
    },
    WhereIterable: {
      "^": "Iterable;_iterable,_f",
      get$iterator: function(_) {
        var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f",
      moveNext$0: function() {
        for (var t1 = this._iterator; t1.moveNext$0();)
          if (this._f$1(t1.get$current()))
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      },
      _f$1: function(arg0) {
        return this._f.call$1(arg0);
      }
    },
    FixedLengthListMixin: {
      "^": "Object;",
      set$length: function(receiver, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of a fixed-length list"));
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to a fixed-length list"));
      },
      remove$1: function(receiver, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      },
      clear$0: function(receiver) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear a fixed-length list"));
      },
      removeRange$2: function(receiver, start, end) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from a fixed-length list"));
      }
    },
    UnmodifiableListMixin: {
      "^": "Object;",
      $indexSet: function(_, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot change the length of an unmodifiable list"));
      },
      add$1: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      addAll$1: function(_, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to an unmodifiable list"));
      },
      remove$1: function(_, element) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot clear an unmodifiable list"));
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify an unmodifiable list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      removeRange$2: function(_, start, end) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from an unmodifiable list"));
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    UnmodifiableListBase: {
      "^": "ListBase+UnmodifiableListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    Symbol: {
      "^": "Object;_name",
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.Symbol) {
          t1 = this._name;
          t2 = other._name;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return 536870911 & 664597 * J.get$hashCode$(this._name);
      },
      toString$0: function(_) {
        return "Symbol(\"" + H.S(this._name) + "\")";
      },
      $isSymbol0: 1
    }
  }], ["dart._js_mirrors", "dart:_js_mirrors",, H, {
    "^": "",
    n: function(symbol) {
      return symbol._name;
    },
    s: function($name) {
      if ($name == null)
        return;
      return new H.Symbol($name);
    },
    reflect: [function(reflectee) {
      if (reflectee instanceof H.Closure)
        return new H.JsClosureMirror(reflectee, 4);
      else
        return new H.JsInstanceMirror(reflectee, 4);
    }, "call$1", "reflect$closure", 2, 0, 174, 22, []],
    reflectClassByMangledName: function(mangledName) {
      var result, unmangledName;
      result = $.get$mangledGlobalNames()._jsMangledNames[mangledName];
      unmangledName = typeof result !== "string" ? null : result;
      if (mangledName === "dynamic")
        return $.get$JsMirrorSystem__dynamicType();
      if (mangledName === "void")
        return $.get$JsMirrorSystem__voidType();
      return H.reflectClassByName(H.s(unmangledName == null ? mangledName : unmangledName), mangledName);
    },
    reflectClassByName: function(symbol, mangledName) {
      var t1, mirror, typeArgIndex, originalDeclaration, $constructor, descriptor, fields, fieldsMetadata, mixins, classMirror, typeVariables, typeArguments, i;
      t1 = $.classMirrors;
      if (t1 == null) {
        t1 = H.JsCache_allocate();
        $.classMirrors = t1;
      }
      mirror = t1[mangledName];
      if (mirror != null)
        return mirror;
      typeArgIndex = J.getInterceptor$asx(mangledName).indexOf$1(mangledName, "<");
      if (typeArgIndex !== -1) {
        originalDeclaration = H.reflectClassByMangledName(C.JSString_methods.substring$2(mangledName, 0, typeArgIndex)).get$originalDeclaration();
        if (!!originalDeclaration.$isJsTypedefMirror)
          throw H.wrapException(new P.UnimplementedError(null));
        mirror = new H.JsTypeBoundClassMirror(originalDeclaration, C.JSString_methods.substring$2(mangledName, typeArgIndex + 1, mangledName.length - 1), null, null, null, null, null, null, null, null, null, null, null, null, null, originalDeclaration.simpleName);
        $.classMirrors[mangledName] = mirror;
        return mirror;
      }
      $constructor = init.allClasses[mangledName];
      if ($constructor == null)
        throw H.wrapException(new P.UnsupportedError("Cannot find class for: " + H.S(H.n(symbol))));
      descriptor = $constructor["@"];
      if (descriptor == null) {
        fields = null;
        fieldsMetadata = null;
      } else if ("$$isTypedef" in descriptor) {
        mirror = new H.JsTypedefMirror(mangledName, null, symbol);
        mirror.referent = new H.JsFunctionTypeMirror(init.types[descriptor.$typedefType], null, null, null, mirror);
        fields = null;
        fieldsMetadata = null;
      } else {
        fields = descriptor["^"];
        t1 = J.getInterceptor(fields);
        if (!!t1.$isList) {
          fieldsMetadata = t1.getRange$2(fields, 1, t1.get$length(fields)).toList$0(0);
          fields = t1.$index(fields, 0);
        } else
          fieldsMetadata = null;
        if (typeof fields !== "string")
          fields = "";
      }
      if (mirror == null) {
        mixins = J.split$1$s(J.split$1$s(fields, ";")[0], "+");
        if (mixins.length > 1 && $.get$mangledGlobalNames().$index(0, mangledName) == null)
          mirror = H.reflectMixinApplication(mixins, mangledName);
        else {
          classMirror = new H.JsClassMirror(mangledName, $constructor, fields, fieldsMetadata, H.JsCache_allocate(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, symbol);
          typeVariables = $constructor.prototype["<>"];
          if (typeVariables == null || typeVariables.length === 0)
            mirror = classMirror;
          else {
            for (t1 = typeVariables.length, typeArguments = "dynamic", i = 1; i < t1; ++i)
              typeArguments += ",dynamic";
            mirror = new H.JsTypeBoundClassMirror(classMirror, typeArguments, null, null, null, null, null, null, null, null, null, null, null, null, null, classMirror.simpleName);
          }
        }
      }
      $.classMirrors[mangledName] = mirror;
      return mirror;
    },
    filterMethods: function(methods) {
      var result, t1, _i, method;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = methods.length, _i = 0; _i < methods.length; methods.length === t1 || (0, H.throwConcurrentModificationError)(methods), ++_i) {
        method = methods[_i];
        if (!method.isConstructor && !method.isGetter && !method.isSetter)
          result.$indexSet(0, method.simpleName, method);
      }
      return result;
    },
    filterGetters: function(methods, fields) {
      var result, t1, _i, method, t2;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = methods.length, _i = 0; _i < methods.length; methods.length === t1 || (0, H.throwConcurrentModificationError)(methods), ++_i) {
        method = methods[_i];
        if (method.isGetter) {
          t2 = method.simpleName;
          if (fields._map.$index(0, t2) != null)
            continue;
          result.$indexSet(0, t2, method);
        }
      }
      return result;
    },
    reflectMixinApplication: function(mixinNames, mangledName) {
      var mixins, t1, _i, it, superclass;
      mixins = [];
      for (t1 = mixinNames.length, _i = 0; _i < mixinNames.length; mixinNames.length === t1 || (0, H.throwConcurrentModificationError)(mixinNames), ++_i)
        mixins.push(H.reflectClassByMangledName(mixinNames[_i]));
      it = new J.ArrayIterator(mixins, mixins.length, 0, null);
      it.$builtinTypeInfo = [H.getTypeArgumentByIndex(mixins, 0)];
      it.moveNext$0();
      superclass = it.__interceptors$_current;
      for (; it.moveNext$0();)
        superclass = new H.JsMixinApplication(superclass, it.__interceptors$_current, null, null, H.s(mangledName));
      return superclass;
    },
    findTypeVariableIndex: function(typeVariables, $name) {
      var t1, i;
      for (t1 = J.getInterceptor$asx(typeVariables), i = 0; i < t1.get$length(typeVariables); ++i)
        if (J.$eq(t1.$index(typeVariables, i).get$simpleName(), H.s($name)))
          return i;
      throw H.wrapException(P.ArgumentError$("Type variable not present in list."));
    },
    typeMirrorFromRuntimeTypeRepresentation: function(owner, type) {
      var t1, context, t2, representation, typeVariable, typeVariables, typeArgument;
      t1 = {};
      t1._captured_ownerClass_0 = null;
      for (context = owner; context != null;) {
        t2 = J.getInterceptor(context);
        if (!!t2.$isClassMirror) {
          t1._captured_ownerClass_0 = context;
          break;
        }
        if (!!t2.$isTypedefMirror)
          break;
        context = context.get$owner();
      }
      if (type == null)
        return $.get$JsMirrorSystem__dynamicType();
      else if (type instanceof H.TypeImpl)
        return H.reflectClassByMangledName(type._typeName);
      else {
        t2 = t1._captured_ownerClass_0;
        if (t2 == null)
          representation = H.runtimeTypeToString(type, null);
        else if (t2.get$isOriginalDeclaration())
          if (typeof type === "number") {
            typeVariable = init.metadata[type];
            typeVariables = t1._captured_ownerClass_0.get$typeVariables();
            return J.$index$asx(typeVariables, H.findTypeVariableIndex(typeVariables, typeVariable.name));
          } else
            representation = H.runtimeTypeToString(type, null);
        else {
          t1 = new H.typeMirrorFromRuntimeTypeRepresentation_getTypeArgument(t1);
          if (typeof type === "number") {
            typeArgument = t1.call$1(type);
            if (typeArgument instanceof H.JsTypeVariableMirror)
              return typeArgument;
          }
          representation = H.runtimeTypeToString(type, new H.typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable(t1));
        }
      }
      if (representation != null)
        return H.reflectClassByMangledName(representation);
      if (type.typedef != null)
        return H.typeMirrorFromRuntimeTypeRepresentation(owner, type.typedef);
      else if ('func' in type)
        return new H.JsFunctionTypeMirror(type, null, null, null, owner);
      return P.reflectClass(C.Type_EjN);
    },
    computeQualifiedName: function(owner, simpleName) {
      if (owner == null)
        return simpleName;
      return H.s(H.S(owner.get$qualifiedName()._name) + "." + H.S(simpleName._name));
    },
    extractMetadata: function(victim) {
      var metadataFunction, t1;
      metadataFunction = Object.prototype.hasOwnProperty.call(victim, "@") ? victim["@"] : null;
      if (metadataFunction != null)
        return metadataFunction();
      if (typeof victim != "function")
        return C.List_empty;
      if ("$metadataIndex" in victim) {
        t1 = victim.$reflectionInfo.splice(victim.$metadataIndex);
        t1.fixed$length = Array;
        t1 = new H.MappedListIterable(t1, new H.extractMetadata_closure());
        t1.$builtinTypeInfo = [null, null];
        return t1.toList$0(0);
      }
      return C.List_empty;
    },
    parseCompactFieldSpecification: function(owner, fieldSpecification, isStatic, result) {
      var t1, fields, fieldsMetadata, t2, fieldNumber, _i, field, fieldNumber0, metadata, mirror;
      t1 = J.getInterceptor(fieldSpecification);
      if (!!t1.$isList) {
        fields = H.splitFields(t1.$index(fieldSpecification, 0), ",");
        fieldsMetadata = t1.sublist$1(fieldSpecification, 1);
      } else {
        fields = typeof fieldSpecification === "string" ? H.splitFields(fieldSpecification, ",") : [];
        fieldsMetadata = null;
      }
      for (t1 = fields.length, t2 = fieldsMetadata != null, fieldNumber = 0, _i = 0; _i < fields.length; fields.length === t1 || (0, H.throwConcurrentModificationError)(fields), ++_i) {
        field = fields[_i];
        if (t2) {
          fieldNumber0 = fieldNumber + 1;
          metadata = fieldsMetadata[fieldNumber];
          fieldNumber = fieldNumber0;
        } else
          metadata = null;
        mirror = H.JsVariableMirror_JsVariableMirror$from(field, metadata, owner, isStatic);
        if (mirror != null)
          result.push(mirror);
      }
    },
    splitFields: function(string, pattern) {
      var t1;
      if (J.get$isEmpty$asx(string)) {
        t1 = [];
        t1.$builtinTypeInfo = [P.String];
        return t1;
      }
      return string.split(pattern);
    },
    isOperatorName: function($name) {
      switch ($name) {
        case "==":
        case "[]":
        case "*":
        case "/":
        case "%":
        case "~/":
        case "+":
        case "<<":
        case ">>":
        case ">=":
        case ">":
        case "<=":
        case "<":
        case "&":
        case "^":
        case "|":
        case "-":
        case "unary-":
        case "[]=":
        case "~":
          return true;
        default:
          return false;
      }
    },
    isReflectiveDataInPrototype: function(key) {
      var firstChar;
      if (key === "^" || key === "$methodsWithOptionalArguments")
        return true;
      firstChar = key[0];
      return firstChar === "*" || firstChar === "+";
    },
    JsMirrorSystem: {
      "^": "Object;_cachedLibraries,isolate",
      static: {JsMirrorSystem_librariesByName: function() {
          var t1 = $.JsMirrorSystem__librariesByName;
          if (t1 == null) {
            t1 = H.JsMirrorSystem_computeLibrariesByName();
            $.JsMirrorSystem__librariesByName = t1;
            if (!$.JsMirrorSystem__hasInstalledDeferredLoadHook) {
              $.JsMirrorSystem__hasInstalledDeferredLoadHook = true;
              $.deferredLoadHook = new H.JsMirrorSystem_librariesByName_closure();
            }
          }
          return t1;
        }, JsMirrorSystem_computeLibrariesByName: function() {
          var result, jsLibraries, t1, _i, data, t2, $name, uriString, uri, t3, scheme, userInfo, host, query, fragment, port, isFile, classes, functions, metadataFunction, fields, isRoot, globalObject, metadata;
          result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, [P.List, P.LibraryMirror]);
          jsLibraries = init.libraries;
          if (jsLibraries == null)
            return result;
          for (t1 = jsLibraries.length, _i = 0; _i < jsLibraries.length; jsLibraries.length === t1 || (0, H.throwConcurrentModificationError)(jsLibraries), ++_i) {
            data = jsLibraries[_i];
            t2 = J.getInterceptor$asx(data);
            $name = t2.$index(data, 0);
            uriString = t2.$index(data, 1);
            if (uriString !== "")
              uri = P.Uri_parse(uriString, 0, null);
            else {
              t3 = P.LinkedHashMap__makeLiteral(["lib", $name]);
              scheme = P.Uri__makeScheme("https", 0, 5);
              userInfo = P.Uri__makeUserInfo("", 0, 0);
              host = P.Uri__makeHost("dartlang.org", 0, 12, false);
              query = P.Uri__makeQuery(null, 0, 0, t3);
              fragment = P.Uri__makeFragment(null, 0, 0);
              port = P.Uri__makePort(null, scheme);
              isFile = scheme === "file";
              if (host == null)
                t3 = userInfo.length !== 0 || port != null || isFile;
              else
                t3 = false;
              if (t3)
                host = "";
              uri = new P.Uri(host, port, P.Uri__makePath("dart2js-stripped-uri", 0, 20, null, host != null, isFile), scheme, userInfo, query, fragment, null, null);
            }
            classes = t2.$index(data, 2);
            functions = t2.$index(data, 3);
            metadataFunction = t2.$index(data, 4);
            fields = t2.$index(data, 5);
            isRoot = t2.$index(data, 6);
            globalObject = t2.$index(data, 7);
            metadata = metadataFunction == null ? C.List_empty : metadataFunction();
            J.add$1$ax(result.putIfAbsent$2($name, new H.JsMirrorSystem_computeLibrariesByName_closure()), new H.JsLibraryMirror(uri, classes, functions, metadata, fields, isRoot, globalObject, null, null, null, null, null, null, null, null, null, null, H.s($name)));
          }
          return result;
        }}
    },
    JsMirrorSystem_librariesByName_closure: {
      "^": "Closure:5;",
      call$0: function() {
        $.JsMirrorSystem__librariesByName = null;
        return;
      }
    },
    JsMirrorSystem_computeLibrariesByName_closure: {
      "^": "Closure:5;",
      call$0: function() {
        var t1 = [];
        t1.$builtinTypeInfo = [P.LibraryMirror];
        return t1;
      }
    },
    JsMirror: {
      "^": "Object;",
      toString$0: function(_) {
        return this.get$_prettyName();
      },
      _getField$1: function(receiver) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      $isMirror: 1
    },
    JsIsolateMirror: {
      "^": "JsMirror;_isolateContext",
      get$_prettyName: function() {
        return "Isolate";
      },
      $isMirror: 1
    },
    JsDeclarationMirror: {
      "^": "JsMirror;simpleName<",
      get$qualifiedName: function() {
        return H.computeQualifiedName(this.get$owner(), this.get$simpleName());
      },
      toString$0: function(_) {
        return this.get$_prettyName() + " on '" + H.S(this.get$simpleName()._name) + "'";
      },
      _invoke$2: function(positionalArguments, namedArguments) {
        throw H.wrapException(new H.RuntimeError("Should not call _invoke"));
      },
      $isMirror: 1
    },
    JsTypeVariableMirror: {
      "^": "JsTypeMirror;owner<,_typeVariable,_metadataIndex,_cachedUpperBound,simpleName",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof H.JsTypeVariableMirror && J.$eq(this.simpleName, other.simpleName) && this.owner === other.owner;
      },
      get$hashCode: function(_) {
        return (1073741823 & J.get$hashCode$(C.Type_AGr._typeName) ^ 17 * J.get$hashCode$(this.simpleName) ^ 19 * H.Primitives_objectHashCode(this.owner)) >>> 0;
      },
      get$_prettyName: function() {
        return "TypeVariableMirror";
      },
      $isTypeVariableMirror: 1,
      $isTypeMirror: 1,
      $isMirror: 1
    },
    JsTypeMirror: {
      "^": "JsDeclarationMirror;simpleName",
      get$_prettyName: function() {
        return "TypeMirror";
      },
      get$owner: function() {
        return;
      },
      get$typeVariables: function() {
        return C.List_empty2;
      },
      get$typeArguments: function() {
        return C.List_empty1;
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      $isTypeMirror: 1,
      $isMirror: 1,
      static: {JsTypeMirror$: function(simpleName) {
          return new H.JsTypeMirror(simpleName);
        }}
    },
    JsLibraryMirror: {
      "^": "JsDeclarationMirror_JsObjectMirror;_uri,_classes,_functions,_metadata,_compactFieldSpecification,_isRoot,_globalObject,_cachedFunctionMirrors,_cachedFields,_cachedClasses,_cachedFunctions,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,simpleName",
      get$_prettyName: function() {
        return "LibraryMirror";
      },
      get$qualifiedName: function() {
        return this.simpleName;
      },
      get$_methods: function() {
        return this.get$_functionMirrors();
      },
      get$__classes: function() {
        var t1, result, cls, t2;
        t1 = this._cachedClasses;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = J.get$iterator$ax(this._classes); t1.moveNext$0();) {
          cls = H.reflectClassByMangledName(t1.get$current());
          if (!!J.getInterceptor(cls).$isClassMirror)
            cls = cls.get$originalDeclaration();
          t2 = J.getInterceptor(cls);
          if (!!t2.$isJsClassMirror) {
            result.$indexSet(0, cls.simpleName, cls);
            cls._owner = this;
          } else if (!!t2.$isJsTypedefMirror)
            result.$indexSet(0, cls.simpleName, cls);
        }
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.ClassMirror];
        this._cachedClasses = t1;
        return t1;
      },
      getField$1: function(fieldName) {
        var mirror, getter;
        mirror = this.get$__members()._map.$index(0, fieldName);
        if (mirror == null)
          throw H.wrapException(H.NoSuchStaticMethodError$method(null, fieldName, [], null));
        if (!mirror.$isMethodMirror)
          return H.reflect(mirror._getField$1(this));
        if (mirror.isGetter)
          return H.reflect(mirror._getField$1(this));
        getter = mirror._jsFunction.$getter;
        if (getter == null)
          throw H.wrapException(new P.UnimplementedError(null));
        return H.reflect(getter());
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        var mirror, t1, t2;
        if (!namedArguments.get$isEmpty(namedArguments))
          throw H.wrapException(new P.UnsupportedError("Named arguments are not implemented."));
        mirror = this.get$__members()._map.$index(0, memberName);
        t1 = mirror instanceof H.JsMethodMirror;
        if (t1 && !("$reflectable" in mirror._jsFunction))
          H.throwInvalidReflectionError(memberName.get$_name());
        if (mirror != null)
          t2 = t1 && mirror.isSetter;
        else
          t2 = true;
        if (t2)
          throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
        if (t1 && !mirror.isGetter)
          return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
        return this.getField$1(memberName).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
      },
      get$_functionMirrors: function() {
        var t1, result, t2, t3, i, $name, jsFunction, result0, unmangledName, isConstructor, t4, mirror;
        t1 = this._cachedFunctionMirrors;
        if (t1 != null)
          return t1;
        result = [];
        result.$builtinTypeInfo = [H.JsMethodMirror];
        for (t1 = this._functions, t2 = J.getInterceptor$asx(t1), t3 = this._globalObject, i = 0; i < t2.get$length(t1); ++i) {
          $name = t2.$index(t1, i);
          jsFunction = t3[$name];
          result0 = $.get$mangledGlobalNames()._jsMangledNames[$name];
          unmangledName = typeof result0 !== "string" ? null : result0;
          if (unmangledName == null || !!jsFunction.$getterStub)
            continue;
          isConstructor = J.getInterceptor$s(unmangledName).startsWith$1(unmangledName, "new ");
          if (isConstructor) {
            t4 = C.JSString_methods.substring$1(unmangledName, 4);
            unmangledName = H.stringReplaceAllUnchecked(t4, "$", ".");
          }
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
          result.push(mirror);
          mirror._owner = this;
        }
        this._cachedFunctionMirrors = result;
        return result;
      },
      get$_fields: function() {
        var t1, result;
        t1 = this._cachedFields;
        if (t1 != null)
          return t1;
        result = [];
        result.$builtinTypeInfo = [P.VariableMirror];
        H.parseCompactFieldSpecification(this, this._compactFieldSpecification, true, result);
        this._cachedFields = result;
        return result;
      },
      get$__functions: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedFunctions;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = this.get$_functionMirrors(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          if (!mirror.isConstructor)
            result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedFunctions = t1;
        return t1;
      },
      get$__getters: function() {
        var t1 = this._cachedGetters;
        if (t1 != null)
          return t1;
        t1 = new P.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedGetters = t1;
        return t1;
      },
      get$__setters: function() {
        var t1 = this._cachedSetters;
        if (t1 != null)
          return t1;
        t1 = new P.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedSetters = t1;
        return t1;
      },
      get$__variables: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedVariables;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = this.get$_fields(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.VariableMirror];
        this._cachedVariables = t1;
        return t1;
      },
      get$__members: function() {
        var t1, result;
        t1 = this._cachedMembers;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap$from(this.get$__classes(), null, null);
        t1 = new H.JsLibraryMirror___members_addToResult(result);
        this.get$__functions()._map.forEach$1(0, t1);
        this.get$__getters()._map.forEach$1(0, t1);
        this.get$__setters()._map.forEach$1(0, t1);
        this.get$__variables()._map.forEach$1(0, t1);
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.Mirror];
        this._cachedMembers = t1;
        return t1;
      },
      get$owner: function() {
        return;
      },
      $isLibraryMirror: 1,
      $isMirror: 1
    },
    JsDeclarationMirror_JsObjectMirror: {
      "^": "JsDeclarationMirror+JsObjectMirror;",
      $isMirror: 1
    },
    JsLibraryMirror___members_addToResult: {
      "^": "Closure:15;_captured_result_0",
      call$2: function(key, value) {
        this._captured_result_0.$indexSet(0, key, value);
      }
    },
    JsMixinApplication: {
      "^": "JsTypeMirror_JsObjectMirror;superclass,mixin,_cachedSimpleName,_cachedInstanceMembers,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      get$simpleName: function() {
        var t1, superName;
        t1 = this._cachedSimpleName;
        if (t1 != null)
          return t1;
        superName = this.superclass.get$qualifiedName()._name;
        t1 = this.mixin;
        t1 = J.contains$1$asx(superName, " with ") ? H.s(superName + ", " + H.S(t1.get$qualifiedName()._name)) : H.s(superName + " with " + H.S(t1.get$qualifiedName()._name));
        this._cachedSimpleName = t1;
        return t1;
      },
      get$qualifiedName: function() {
        return this.get$simpleName();
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
      },
      invoke$2: function(memberName, positionalArguments) {
        return this.invoke$3(memberName, positionalArguments, null);
      },
      getField$1: function(fieldName) {
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, fieldName, null, null));
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$typeVariables: function() {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      get$typeArguments: function() {
        return C.List_empty1;
      },
      $isClassMirror: 1,
      $isMirror: 1,
      $isTypeMirror: 1
    },
    JsTypeMirror_JsObjectMirror: {
      "^": "JsTypeMirror+JsObjectMirror;",
      $isMirror: 1
    },
    JsObjectMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    JsInstanceMirror: {
      "^": "JsObjectMirror;reflectee,_getterCache",
      get$type: function(_) {
        var t1 = this.reflectee;
        if (t1 == null)
          return P.reflectClass(C.Type_eZO);
        return H.reflectClassByMangledName(H.getRuntimeTypeString(t1));
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        return this._invoke$4(memberName, 0, positionalArguments, namedArguments == null ? C.Map_empty : namedArguments);
      },
      _invokeMethodWithNamedArguments$3: function(reflectiveName, positionalArguments, namedArguments) {
        var t1, jsFunction, info, t2, defaultArguments, t3, i, t4;
        t1 = this.reflectee;
        jsFunction = J.getInterceptor(t1)[reflectiveName];
        if (jsFunction == null)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        positionalArguments = P.List_List$from(positionalArguments, true, null);
        t2 = info.requiredParameterCount;
        if (t2 !== positionalArguments.length)
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
        defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
          t4 = i + t2;
          defaultArguments.$indexSet(0, info.parameterName$1(t4), init.metadata[info.defaultValue$1(0, t4)]);
        }
        namedArguments.forEach$1(0, new H.JsInstanceMirror__invokeMethodWithNamedArguments_closure(defaultArguments));
        C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
        return H.reflect(jsFunction.apply(t1, positionalArguments));
      },
      get$_classInvocationCache: function() {
        var cacheName, cacheHolder, cache;
        cacheName = $.Primitives_mirrorInvokeCacheName;
        cacheHolder = this.reflectee;
        if (cacheHolder == null)
          cacheHolder = J.getInterceptor(null);
        cache = cacheHolder.constructor[cacheName];
        if (cache == null) {
          cache = H.JsCache_allocate();
          cacheHolder.constructor[cacheName] = cache;
        }
        return cache;
      },
      _computeReflectiveName$4: function(symbolName, type, positionalArguments, namedArguments) {
        var $name, nbArgs;
        $name = symbolName._name;
        switch (type) {
          case 1:
            return $name;
          case 2:
            return H.S($name) + "=";
          case 0:
            if (namedArguments.get$length(namedArguments) !== 0)
              return H.S($name) + "*";
            nbArgs = positionalArguments.length;
            return H.S($name) + ":" + nbArgs;
        }
        throw H.wrapException(new H.RuntimeError("Could not compute reflective name for " + H.S($name)));
      },
      _getCachedInvocation$5: function($name, type, reflectiveName, positionalArguments, namedArguments) {
        var cache, cacheEntry;
        cache = this.get$_classInvocationCache();
        cacheEntry = cache[reflectiveName];
        if (cacheEntry == null) {
          cacheEntry = new H.JSInvocationMirror($name, $.get$reflectiveNames().$index(0, reflectiveName), type, positionalArguments, C.List_empty, null).__js_helper$_getCachedInvocation$1(this.reflectee);
          cache[reflectiveName] = cacheEntry;
        }
        return cacheEntry;
      },
      _invoke$4: function($name, type, positionalArguments, namedArguments) {
        var reflectiveName, cacheEntry, t1, getterCacheEntry;
        reflectiveName = this._computeReflectiveName$4($name, type, positionalArguments, namedArguments);
        if (namedArguments.get$length(namedArguments) !== 0)
          return this._invokeMethodWithNamedArguments$3(reflectiveName, positionalArguments, namedArguments);
        cacheEntry = this._getCachedInvocation$5($name, type, reflectiveName, positionalArguments, namedArguments);
        if (!cacheEntry.get$isNoSuchMethod())
          t1 = !("$reflectable" in cacheEntry.jsFunction || this.reflectee instanceof H.TearOffClosure);
        else
          t1 = true;
        if (t1) {
          if (type === 0) {
            getterCacheEntry = this._getCachedInvocation$5($name, 1, this._computeReflectiveName$4($name, 1, C.List_empty, C.Map_empty), C.List_empty, C.Map_empty);
            t1 = !getterCacheEntry.get$isNoSuchMethod() && !getterCacheEntry.get$isGetterStub();
          } else
            t1 = false;
          if (t1)
            return this.getField$1($name).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
          if (type === 2)
            $name = H.s(H.S($name._name) + "=");
          if (!cacheEntry.get$isNoSuchMethod())
            H.throwInvalidReflectionError(reflectiveName);
          return H.reflect(cacheEntry.invokeOn$2(this.reflectee, new H.JSInvocationMirror($name, $.get$reflectiveNames().$index(0, reflectiveName), type, positionalArguments, [], null)));
        } else
          return H.reflect(cacheEntry.invokeOn$2(this.reflectee, positionalArguments));
      },
      getField$1: function(fieldName) {
        var cache, getter, value, result;
        $FASTPATH$0: {
          cache = this._getterCache;
          if (typeof cache == "number" || typeof fieldName.$p == "undefined")
            break $FASTPATH$0;
          getter = fieldName.$p(cache);
          if (typeof getter == "undefined")
            break $FASTPATH$0;
          value = getter(this.reflectee);
          if (value === getter.v)
            return getter.m;
          else {
            result = H.reflect(value);
            getter.v = value;
            getter.m = result;
            return result;
          }
        }
        return this._getFieldSlow$1(fieldName);
      },
      _getFieldSlow$1: function(fieldName) {
        var result, $name, cacheEntry, cache, mangledName, getter;
        result = this._invoke$4(fieldName, 1, C.List_empty, C.Map_empty);
        $name = fieldName._name;
        cacheEntry = this.get$_classInvocationCache()[$name];
        if (cacheEntry.get$isNoSuchMethod())
          return result;
        cache = this._getterCache;
        if (typeof cache == "number") {
          cache = J.$sub$n(cache, 1);
          this._getterCache = cache;
          if (!J.$eq(cache, 0))
            return result;
          cache = Object.create(null);
          this._getterCache = cache;
        }
        if (typeof fieldName.$p == "undefined")
          fieldName.$p = this._newProbeFn$2($name, true);
        mangledName = cacheEntry.get$mangledName();
        getter = cacheEntry.get$isIntercepted() ? this._newInterceptedGetterFn$2(mangledName, true) : this._newGetterFn$2(mangledName, true);
        cache[$name] = getter;
        getter.v = getter.m = cache;
        return result;
      },
      _newProbeFn$2: function(id, useEval) {
        if (useEval)
          return new Function("c", "return c." + H.S(id) + ";");
        else
          return function(n) {
            return function(c) {
              return c[n];
            };
          }(id);
      },
      _newGetterFn$2: function($name, useEval) {
        if (!useEval)
          return function(n) {
            return function(o) {
              return o[n]();
            };
          }($name);
        return new Function("o", "/* " + this.reflectee.constructor.name + " */ return o." + H.S($name) + "();");
      },
      _newInterceptedGetterFn$2: function($name, useEval) {
        var interceptor, functionName;
        interceptor = J.getInterceptor(this.reflectee);
        if (!useEval)
          return function(n, i) {
            return function(o) {
              return i[n](o);
            };
          }($name, interceptor);
        functionName = interceptor.constructor.name + "$" + H.S($name);
        return new Function("i", "  function " + functionName + "(o){return i." + H.S($name) + "(o)}  return " + functionName + ";")(interceptor);
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.JsInstanceMirror) {
          t1 = this.reflectee;
          t2 = other.reflectee;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        return (H.objectHashCode(this.reflectee) ^ 909522486) >>> 0;
      },
      toString$0: function(_) {
        return "InstanceMirror on " + H.S(P.Error_safeToString(this.reflectee));
      },
      $isMirror: 1
    },
    JsInstanceMirror__invokeMethodWithNamedArguments_closure: {
      "^": "Closure:16;_captured_defaultArguments_0",
      call$2: function(symbol, value) {
        var parameter, t1;
        parameter = symbol._name;
        t1 = this._captured_defaultArguments_0;
        if (t1.containsKey$1(parameter))
          t1.$indexSet(0, parameter, value);
        else
          throw H.wrapException(new H.UnimplementedNoSuchMethodError("Invoking noSuchMethod with named arguments not implemented"));
      }
    },
    JsTypeBoundClassMirror: {
      "^": "JsDeclarationMirror;_class,_typeArguments,_cachedTypeArguments,_cachedDeclarations,_cachedMembers,_cachedConstructors,_cachedVariables,_cachedGetters,_cachedSetters,_cachedMethodsMap,_cachedMethods,_superclass,_cachedSuperinterfaces,_cachedInstanceMembers,_cachedStaticMembers,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      toString$0: function(_) {
        var result, t1, t2;
        result = "ClassMirror on " + H.S(this._class.simpleName._name);
        if (this.get$typeArguments() != null) {
          t1 = result + "<";
          t2 = this.get$typeArguments();
          result = t1 + t2.join$1(t2, ", ") + ">";
        }
        return result;
      },
      get$_mangledName: function() {
        for (var t1 = this.get$typeArguments(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
          if (!J.$eq(t1.__internal$_current, $.get$JsMirrorSystem__dynamicType()))
            return H.S(this._class._mangledName) + "<" + this._typeArguments + ">";
        return this._class._mangledName;
      },
      get$typeVariables: function() {
        return this._class.get$typeVariables();
      },
      get$typeArguments: function() {
        var t1, result, t2, t3, level, currentTypeArgument, i, character;
        t1 = this._cachedTypeArguments;
        if (t1 != null)
          return t1;
        result = [];
        t1 = new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument(result);
        t2 = this._typeArguments;
        if (C.JSString_methods.indexOf$1(t2, "<") === -1)
          C.JSArray_methods.forEach$1(t2.split(","), new H.JsTypeBoundClassMirror_typeArguments_closure(t1));
        else {
          for (t3 = t2.length, level = 0, currentTypeArgument = "", i = 0; i < t3; ++i) {
            character = t2[i];
            if (character === " ")
              continue;
            else if (character === "<") {
              currentTypeArgument += character;
              ++level;
            } else if (character === ">") {
              currentTypeArgument += character;
              --level;
            } else if (character === ",")
              if (level > 0)
                currentTypeArgument += character;
              else {
                t1.call$1(currentTypeArgument);
                currentTypeArgument = "";
              }
            else
              currentTypeArgument += character;
          }
          t1.call$1(currentTypeArgument);
        }
        t1 = new P.UnmodifiableListView(result);
        t1.$builtinTypeInfo = [null];
        this._cachedTypeArguments = t1;
        return t1;
      },
      get$_methods: function() {
        var t1 = this._cachedMethods;
        if (t1 != null)
          return t1;
        t1 = this._class._getMethodsWithOwner$1(this);
        this._cachedMethods = t1;
        return t1;
      },
      get$owner: function() {
        return this._class.get$owner();
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        return this._class.invoke$3(memberName, positionalArguments, namedArguments);
      },
      get$isOriginalDeclaration: function() {
        return false;
      },
      get$originalDeclaration: function() {
        return this._class;
      },
      get$qualifiedName: function() {
        var t1 = this._class;
        return H.computeQualifiedName(t1.get$owner(), t1.simpleName);
      },
      get$simpleName: function() {
        return this._class.simpleName;
      },
      $isClassMirror: 1,
      $isMirror: 1,
      $isTypeMirror: 1
    },
    JsTypeBoundClassMirror_typeArguments_addTypeArgument: {
      "^": "Closure:12;_captured_result_0",
      call$1: function(typeArgument) {
        var parsedIndex, t1, typeVariable;
        parsedIndex = H.Primitives_parseInt(typeArgument, null, new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure());
        t1 = this._captured_result_0;
        if (parsedIndex === -1)
          t1.push(H.reflectClassByMangledName(J.trim$0$s(typeArgument)));
        else {
          typeVariable = init.metadata[parsedIndex];
          t1.push(new H.JsTypeVariableMirror(P.reflectClass(typeVariable.owner), typeVariable, parsedIndex, null, H.s(typeVariable.name)));
        }
      }
    },
    JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure: {
      "^": "Closure:7;",
      call$1: function(_) {
        return -1;
      }
    },
    JsTypeBoundClassMirror_typeArguments_closure: {
      "^": "Closure:7;_captured_addTypeArgument_1",
      call$1: function(t) {
        return this._captured_addTypeArgument_1.call$1(t);
      }
    },
    JsClassMirror: {
      "^": "JsTypeMirror_JsObjectMirror0;_mangledName<,_jsConstructor,_fieldsDescriptor,_fieldsMetadata,_jsConstructorCache,_metadata,_superclass,_cachedMethods,_cachedFields,_cachedConstructors,_cachedMethodsMap,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,_cachedSuperinterfaces,_cachedTypeVariables,_cachedInstanceMembers,_cachedStaticMembers,_owner,simpleName",
      get$_prettyName: function() {
        return "ClassMirror";
      },
      _getMethodsWithOwner$1: function(methodOwner) {
        var $prototype, keys, result, t1, _i, key, simpleName, $function, stubName, mirror, mangledName, jsFunction, reflectionName, isConstructor, t2;
        $prototype = this._jsConstructor.prototype;
        $prototype.$deferredAction();
        keys = H.extractKeys($prototype);
        result = [];
        result.$builtinTypeInfo = [H.JsMethodMirror];
        for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
          key = keys[_i];
          if (H.isReflectiveDataInPrototype(key))
            continue;
          simpleName = $.get$mangledNames().$index(0, key);
          if (simpleName == null)
            continue;
          $function = $prototype[key];
          if (!($function.$reflectable === 1))
            continue;
          stubName = $function.$stubName;
          if (stubName != null && key !== stubName)
            continue;
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(simpleName, $function, false, false);
          result.push(mirror);
          mirror._owner = methodOwner;
        }
        keys = H.extractKeys(init.statics[this._mangledName]);
        for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
          mangledName = keys[_i];
          if (H.isReflectiveDataInPrototype(mangledName))
            continue;
          jsFunction = this.get$owner()._globalObject[mangledName];
          if ("$reflectable" in jsFunction) {
            reflectionName = jsFunction.$reflectionName;
            if (reflectionName == null)
              continue;
            isConstructor = C.JSString_methods.startsWith$1(reflectionName, "new ");
            if (isConstructor) {
              t2 = C.JSString_methods.substring$1(reflectionName, 4);
              reflectionName = H.stringReplaceAllUnchecked(t2, "$", ".");
            }
          } else
            continue;
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(reflectionName, jsFunction, !isConstructor, isConstructor);
          result.push(mirror);
          mirror._owner = methodOwner;
        }
        return result;
      },
      get$_methods: function() {
        var t1 = this._cachedMethods;
        if (t1 != null)
          return t1;
        t1 = this._getMethodsWithOwner$1(this);
        this._cachedMethods = t1;
        return t1;
      },
      _getFieldsWithOwner$1: function(fieldOwner) {
        var result, instanceFieldSpecfication, t1, staticDescriptor;
        result = [];
        result.$builtinTypeInfo = [P.VariableMirror];
        instanceFieldSpecfication = this._fieldsDescriptor.split(";")[1];
        t1 = this._fieldsMetadata;
        if (t1 != null) {
          instanceFieldSpecfication = [instanceFieldSpecfication];
          C.JSArray_methods.addAll$1(instanceFieldSpecfication, t1);
        }
        H.parseCompactFieldSpecification(fieldOwner, instanceFieldSpecfication, false, result);
        staticDescriptor = init.statics[this._mangledName];
        if (staticDescriptor != null)
          H.parseCompactFieldSpecification(fieldOwner, staticDescriptor["^"], true, result);
        return result;
      },
      get$_fields: function() {
        var t1 = this._cachedFields;
        if (t1 != null)
          return t1;
        t1 = this._getFieldsWithOwner$1(this);
        this._cachedFields = t1;
        return t1;
      },
      get$__methods: function() {
        var t1 = this._cachedMethodsMap;
        if (t1 != null)
          return t1;
        t1 = new P.UnmodifiableMapView(H.filterMethods(this.get$_methods()));
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedMethodsMap = t1;
        return t1;
      },
      get$__getters: function() {
        var t1 = this._cachedGetters;
        if (t1 != null)
          return t1;
        t1 = new P.UnmodifiableMapView(H.filterGetters(this.get$_methods(), this.get$__variables()));
        t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
        this._cachedGetters = t1;
        return t1;
      },
      get$__variables: function() {
        var t1, result, t2, _i, mirror;
        t1 = this._cachedVariables;
        if (t1 != null)
          return t1;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t1 = this.get$_fields(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          mirror = t1[_i];
          result.$indexSet(0, mirror.simpleName, mirror);
        }
        t1 = new P.UnmodifiableMapView(result);
        t1.$builtinTypeInfo = [P.Symbol0, P.VariableMirror];
        this._cachedVariables = t1;
        return t1;
      },
      _staticFieldExists$1: function(fieldName) {
        var mirror, getter;
        mirror = this.get$__variables()._map.$index(0, fieldName);
        if (mirror != null)
          return mirror.isStatic;
        getter = this.get$__getters()._map.$index(0, fieldName);
        return getter != null && getter.isStatic;
      },
      getField$1: function(fieldName) {
        var mirror, jsName, lazies, getterName, getter, method;
        mirror = this.get$__variables()._map.$index(0, fieldName);
        if (mirror != null && mirror.isStatic) {
          jsName = mirror._jsName;
          if (!(jsName in $))
            throw H.wrapException(new H.RuntimeError("Cannot find \"" + jsName + "\" in current isolate."));
          lazies = init.lazies;
          if (jsName in lazies) {
            getterName = lazies[jsName];
            return H.reflect($[getterName]());
          } else
            return H.reflect($[jsName]);
        }
        getter = this.get$__getters()._map.$index(0, fieldName);
        if (getter != null && getter.isStatic)
          return H.reflect(getter._invoke$2(C.List_empty, C.Map_empty));
        method = this.get$__methods()._map.$index(0, fieldName);
        if (method != null && method.isStatic) {
          getter = method._jsFunction.$getter;
          if (getter == null)
            throw H.wrapException(new P.UnimplementedError(null));
          return H.reflect(getter());
        }
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, fieldName, null, null));
      },
      get$owner: function() {
        var t1, t2;
        t1 = this._owner;
        if (t1 == null) {
          t1 = H.JsMirrorSystem_librariesByName();
          t1 = t1.get$values(t1);
          t2 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)];
          for (; t2.moveNext$0();)
            for (t1 = J.get$iterator$ax(t2.__internal$_current); t1.moveNext$0();)
              t1.get$current().get$__classes();
          t1 = this._owner;
          if (t1 == null)
            throw H.wrapException(new P.StateError("Class \"" + H.S(H.n(this.simpleName)) + "\" has no owner"));
        }
        return t1;
      },
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        var mirror, t1;
        mirror = this.get$__methods()._map.$index(0, memberName);
        t1 = mirror == null;
        if (t1 && this._staticFieldExists$1(memberName))
          return this.getField$1(memberName).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
        if (t1 || !mirror.isStatic)
          throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
        if (!("$reflectable" in mirror._jsFunction))
          H.throwInvalidReflectionError(memberName.get$_name());
        return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
      },
      invoke$2: function(memberName, positionalArguments) {
        return this.invoke$3(memberName, positionalArguments, null);
      },
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$typeVariables: function() {
        var t1, result, typeVariables, i, typeVariable;
        t1 = this._cachedTypeVariables;
        if (t1 != null)
          return t1;
        result = [];
        typeVariables = this._jsConstructor.prototype["<>"];
        if (typeVariables == null)
          return result;
        for (i = 0; i < typeVariables.length; ++i) {
          t1 = typeVariables[i];
          typeVariable = init.metadata[t1];
          result.push(new H.JsTypeVariableMirror(this, typeVariable, t1, null, H.s(typeVariable.name)));
        }
        t1 = new P.UnmodifiableListView(result);
        t1.$builtinTypeInfo = [null];
        this._cachedTypeVariables = t1;
        return t1;
      },
      get$typeArguments: function() {
        return C.List_empty1;
      },
      $isClassMirror: 1,
      $isMirror: 1,
      $isTypeMirror: 1
    },
    JsTypeMirror_JsObjectMirror0: {
      "^": "JsTypeMirror+JsObjectMirror;",
      $isMirror: 1
    },
    JsVariableMirror: {
      "^": "JsDeclarationMirror;_jsName,isFinal,isStatic,_metadataFunction,_owner,_type,_metadata,simpleName",
      get$_prettyName: function() {
        return "VariableMirror";
      },
      get$type: function(_) {
        return H.typeMirrorFromRuntimeTypeRepresentation(this._owner, init.types[this._type]);
      },
      get$owner: function() {
        return this._owner;
      },
      _getField$1: function(receiver) {
        return $[this._jsName];
      },
      $isVariableMirror: 1,
      $isMirror: 1,
      static: {JsVariableMirror_JsVariableMirror$from: function(descriptor, metadataFunction, owner, isStatic) {
          var fieldInformation, field, t1, code, isFinal, jsName, divider, accessorName, result, unmangledName, setterName, t2, _i;
          fieldInformation = descriptor.split("-");
          if (fieldInformation.length === 1)
            return;
          field = fieldInformation[0];
          t1 = field.length - 1;
          code = H.JsVariableMirror_fieldCode(J.getInterceptor$s(field).codeUnitAt$1(field, t1));
          if (code === 0)
            return;
          isFinal = C.JSInt_methods._shrOtherPositive$1(code, 2) === 0;
          jsName = C.JSString_methods.substring$2(field, 0, t1);
          divider = C.JSString_methods.indexOf$1(field, ":");
          if (divider > 0) {
            accessorName = C.JSString_methods.substring$2(jsName, 0, divider);
            jsName = C.JSString_methods.substring$1(field, divider + 1);
          } else
            accessorName = jsName;
          if (isStatic) {
            result = $.get$mangledGlobalNames()._jsMangledNames[accessorName];
            unmangledName = typeof result !== "string" ? null : result;
          } else
            unmangledName = $.get$mangledNames().$index(0, "get$" + accessorName);
          if (unmangledName == null)
            unmangledName = accessorName;
          if (isFinal) {
            setterName = H.s(H.S(unmangledName) + "=");
            t1 = owner.get$_methods();
            t2 = t1.length;
            _i = 0;
            while (true) {
              if (!(_i < t1.length)) {
                isFinal = true;
                break;
              }
              if (J.$eq(t1[_i].simpleName, setterName)) {
                isFinal = false;
                break;
              }
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1);
              ++_i;
            }
          }
          return new H.JsVariableMirror(jsName, isFinal, isStatic, metadataFunction, owner, H.Primitives_parseInt(fieldInformation[1], null, null), null, H.s(unmangledName));
        }, JsVariableMirror_fieldCode: function(code) {
          if (code >= 60 && code <= 64)
            return code - 59;
          if (code >= 123 && code <= 126)
            return code - 117;
          if (code >= 37 && code <= 43)
            return code - 27;
          return 0;
        }}
    },
    JsClosureMirror: {
      "^": "JsInstanceMirror;reflectee,_getterCache",
      toString$0: function(_) {
        return "ClosureMirror on '" + H.S(P.Error_safeToString(this.reflectee)) + "'";
      },
      $isMirror: 1
    },
    JsMethodMirror: {
      "^": "JsDeclarationMirror;_jsFunction,_requiredParameterCount,_optionalParameterCount,isGetter,isSetter,isStatic,isConstructor,isOperator,_owner,_metadata,_returnType,_parameters,simpleName",
      get$_prettyName: function() {
        return "MethodMirror";
      },
      get$parameters: function() {
        var t1 = this._parameters;
        if (t1 != null)
          return t1;
        this.get$metadata();
        return this._parameters;
      },
      get$owner: function() {
        return this._owner;
      },
      get$metadata: function() {
        var t1, raw, formals, info, functionType, type, isNamed, t2, t3, t4, i, parameter, $name, result, p, defaultValue, i0;
        t1 = this._metadata;
        if (t1 == null) {
          t1 = this._jsFunction;
          raw = H.extractMetadata(t1);
          formals = Array(this._requiredParameterCount + this._optionalParameterCount);
          info = H.ReflectionInfo_ReflectionInfo(t1);
          if (info != null) {
            functionType = info.functionType;
            if (typeof functionType === "number" && Math.floor(functionType) === functionType)
              type = new H.JsFunctionTypeMirror(info.computeFunctionRti$1(null), null, null, null, this);
            else
              type = this.get$owner() != null && !!J.getInterceptor(this.get$owner()).$isLibraryMirror ? new H.JsFunctionTypeMirror(info.computeFunctionRti$1(null), null, null, null, this._owner) : new H.JsFunctionTypeMirror(info.computeFunctionRti$1(this._owner.get$originalDeclaration()._jsConstructor), null, null, null, this._owner);
            if (this.isConstructor)
              this._returnType = this._owner;
            else
              this._returnType = type.get$returnType();
            isNamed = info.areOptionalParametersNamed;
            for (t1 = type.get$parameters(), t1 = t1.get$iterator(t1), t2 = info.requiredParameterCount, t3 = info.data, t4 = info.optionalParameterCount, i = 0; t1.moveNext$0(); i = i0) {
              parameter = t1.__internal$_current;
              $name = info.parameterName$1(i);
              result = t3[2 * i + t4 + 3 + 1];
              if (i < t2)
                p = new H.JsParameterMirror(this, parameter._type, false, false, null, result, H.s($name));
              else {
                defaultValue = info.defaultValue$1(0, i);
                p = new H.JsParameterMirror(this, parameter._type, true, isNamed, defaultValue, result, H.s($name));
              }
              i0 = i + 1;
              formals[i] = p;
            }
          }
          t1 = new P.UnmodifiableListView(formals);
          t1.$builtinTypeInfo = [P.ParameterMirror];
          this._parameters = t1;
          t1 = new P.UnmodifiableListView(J.map$1$ax(raw, H.reflect$closure()));
          t1.$builtinTypeInfo = [null];
          this._metadata = t1;
        }
        return t1;
      },
      _invoke$2: function(positionalArguments, namedArguments) {
        var positionalLength, t1, i;
        if (namedArguments != null && namedArguments.get$length(namedArguments) !== 0)
          throw H.wrapException(new P.UnsupportedError("Named arguments are not implemented."));
        if (!this.isStatic && !this.isConstructor)
          throw H.wrapException(new H.RuntimeError("Cannot invoke instance method without receiver."));
        positionalLength = positionalArguments.length;
        t1 = this._requiredParameterCount;
        if (positionalLength < t1 || positionalLength > t1 + this._optionalParameterCount || this._jsFunction == null)
          throw H.wrapException(P.NoSuchMethodError$(this.get$owner(), this.simpleName, positionalArguments, namedArguments, null));
        if (positionalLength < t1 + this._optionalParameterCount) {
          t1 = positionalArguments.slice();
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(positionalArguments, 0)];
          positionalArguments = t1;
          for (i = positionalLength; i < J.get$length$asx(this.get$parameters()._collection$_source); ++i) {
            t1 = J.elementAt$1$ax(this.get$parameters()._collection$_source, i)._defaultValue;
            positionalArguments.push((t1 != null ? H.reflect(init.metadata[t1]) : null).reflectee);
          }
        }
        return this._jsFunction.apply($, P.List_List$from(positionalArguments, true, null));
      },
      _getField$1: function(receiver) {
        if (this.isGetter)
          return this._invoke$2([], null);
        else
          throw H.wrapException(new P.UnimplementedError("getField on " + receiver.toString$0(0)));
      },
      $isMirror: 1,
      $isMethodMirror: 1,
      static: {JsMethodMirror_JsMethodMirror$fromUnmangledName: function($name, jsFunction, isStatic, isConstructor) {
          var info, isOperator, isSetter, requiredParameterCount, isGetter, optionalParameterCount, reflectionInfo;
          info = $name.split(":");
          $name = info[0];
          isOperator = H.isOperatorName($name);
          isSetter = !isOperator && J.endsWith$1$s($name, "=");
          if (info.length === 1) {
            if (isSetter) {
              requiredParameterCount = 1;
              isGetter = false;
            } else {
              requiredParameterCount = 0;
              isGetter = true;
            }
            optionalParameterCount = 0;
          } else {
            reflectionInfo = H.ReflectionInfo_ReflectionInfo(jsFunction);
            requiredParameterCount = reflectionInfo.requiredParameterCount;
            optionalParameterCount = reflectionInfo.optionalParameterCount;
            isGetter = false;
          }
          return new H.JsMethodMirror(jsFunction, requiredParameterCount, optionalParameterCount, isGetter, isSetter, isStatic, isConstructor, isOperator, null, null, null, null, H.s($name));
        }}
    },
    JsParameterMirror: {
      "^": "JsDeclarationMirror;owner<,_type,isOptional,isNamed,_defaultValue,metadataList,simpleName",
      get$_prettyName: function() {
        return "ParameterMirror";
      },
      get$type: function(_) {
        return H.typeMirrorFromRuntimeTypeRepresentation(this.owner, this._type);
      },
      get$defaultValue: function(_) {
        var t1 = this._defaultValue;
        return t1 != null ? H.reflect(init.metadata[t1]) : null;
      },
      $isParameterMirror: 1,
      $isVariableMirror: 1,
      $isMirror: 1
    },
    JsTypedefMirror: {
      "^": "JsDeclarationMirror;_mangledName<,referent,simpleName",
      get$value: function(_) {
        return this.referent;
      },
      get$_prettyName: function() {
        return "TypedefMirror";
      },
      get$originalDeclaration: function() {
        return this;
      },
      get$owner: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      $isTypedefMirror: 1,
      $isTypeMirror: 1,
      $isMirror: 1
    },
    BrokenClassMirror: {
      "^": "Object;",
      invoke$3: function(memberName, positionalArguments, namedArguments) {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$typeVariables: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$typeArguments: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$originalDeclaration: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$simpleName: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      get$qualifiedName: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      }
    },
    JsFunctionTypeMirror: {
      "^": "BrokenClassMirror;_typeData,_cachedToString,_cachedReturnType,_cachedParameters,owner<",
      get$isOriginalDeclaration: function() {
        return true;
      },
      get$returnType: function() {
        var t1 = this._cachedReturnType;
        if (t1 != null)
          return t1;
        t1 = this._typeData;
        if (!!t1.void) {
          t1 = $.get$JsMirrorSystem__voidType();
          this._cachedReturnType = t1;
          return t1;
        }
        if (!("ret" in t1)) {
          t1 = $.get$JsMirrorSystem__dynamicType();
          this._cachedReturnType = t1;
          return t1;
        }
        t1 = H.typeMirrorFromRuntimeTypeRepresentation(this.owner, t1.ret);
        this._cachedReturnType = t1;
        return t1;
      },
      get$parameters: function() {
        var t1, result, t2, t3, parameterCount, _i, parameterCount0, $name;
        t1 = this._cachedParameters;
        if (t1 != null)
          return t1;
        result = [];
        t1 = this._typeData;
        if ("args" in t1)
          for (t2 = t1.args, t3 = t2.length, parameterCount = 0, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, parameterCount = parameterCount0) {
            parameterCount0 = parameterCount + 1;
            result.push(new H.JsParameterMirror(this, t2[_i], false, false, null, C.List_empty0, H.s("argument" + parameterCount)));
          }
        else
          parameterCount = 0;
        if ("opt" in t1)
          for (t2 = t1.opt, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, parameterCount = parameterCount0) {
            parameterCount0 = parameterCount + 1;
            result.push(new H.JsParameterMirror(this, t2[_i], false, false, null, C.List_empty0, H.s("argument" + parameterCount)));
          }
        if ("named" in t1)
          for (t2 = H.extractKeys(t1.named), t3 = t2.length, _i = 0; _i < t3; ++_i) {
            $name = t2[_i];
            result.push(new H.JsParameterMirror(this, t1.named[$name], false, false, null, C.List_empty0, H.s($name)));
          }
        t1 = new P.UnmodifiableListView(result);
        t1.$builtinTypeInfo = [P.ParameterMirror];
        this._cachedParameters = t1;
        return t1;
      },
      _unmangleIfPreserved$1: function(mangled) {
        var t1 = init.mangledGlobalNames[mangled];
        if (t1 != null)
          return t1;
        return mangled;
      },
      toString$0: function(_) {
        var t1, t2, t3, s, sep, _i, argument, $name;
        t1 = this._cachedToString;
        if (t1 != null)
          return t1;
        t1 = this._typeData;
        if ("args" in t1)
          for (t2 = t1.args, t3 = t2.length, s = "FunctionTypeMirror on '(", sep = "", _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, sep = ", ") {
            argument = t2[_i];
            s = C.JSString_methods.$add(s + sep, this._unmangleIfPreserved$1(H.runtimeTypeToString(argument, null)));
          }
        else {
          s = "FunctionTypeMirror on '(";
          sep = "";
        }
        if ("opt" in t1) {
          s += sep + "[";
          for (t2 = t1.opt, t3 = t2.length, sep = "", _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i, sep = ", ") {
            argument = t2[_i];
            s = C.JSString_methods.$add(s + sep, this._unmangleIfPreserved$1(H.runtimeTypeToString(argument, null)));
          }
          s += "]";
        }
        if ("named" in t1) {
          s += sep + "{";
          for (t2 = H.extractKeys(t1.named), t3 = t2.length, sep = "", _i = 0; _i < t3; ++_i, sep = ", ") {
            $name = t2[_i];
            s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), this._unmangleIfPreserved$1(H.runtimeTypeToString(t1.named[$name], null)));
          }
          s += "}";
        }
        s += ") -> ";
        if (!!t1.void)
          s += "void";
        else
          s = "ret" in t1 ? C.JSString_methods.$add(s, this._unmangleIfPreserved$1(H.runtimeTypeToString(t1.ret, null))) : s + "dynamic";
        t1 = s + "'";
        this._cachedToString = t1;
        return t1;
      },
      get$callMethod: function() {
        return H.throwExpression(new P.UnimplementedError(null));
      },
      callMethod$2: function(arg0, arg1) {
        return this.get$callMethod().call$2(arg0, arg1);
      },
      callMethod$1: function(arg0) {
        return this.get$callMethod().call$1(arg0);
      },
      $isClassMirror: 1,
      $isMirror: 1,
      $isTypeMirror: 1
    },
    typeMirrorFromRuntimeTypeRepresentation_getTypeArgument: {
      "^": "Closure:17;__js_mirrors$_box_0",
      call$1: function(index) {
        var typeVariable, t1, variableIndex;
        typeVariable = init.metadata[index];
        t1 = this.__js_mirrors$_box_0;
        variableIndex = H.findTypeVariableIndex(t1._captured_ownerClass_0.get$typeVariables(), typeVariable.name);
        return J.$index$asx(t1._captured_ownerClass_0.get$typeArguments(), variableIndex);
      }
    },
    typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable: {
      "^": "Closure:18;_captured_getTypeArgument_1",
      call$1: function(index) {
        var typeArgument, t1;
        typeArgument = this._captured_getTypeArgument_1.call$1(index);
        t1 = J.getInterceptor(typeArgument);
        if (!!t1.$isJsTypeVariableMirror)
          return H.S(typeArgument._metadataIndex);
        if (!t1.$isJsClassMirror && !t1.$isJsTypeBoundClassMirror)
          if (t1.$eq(typeArgument, $.get$JsMirrorSystem__dynamicType()))
            return "dynamic";
          else if (t1.$eq(typeArgument, $.get$JsMirrorSystem__voidType()))
            return "void";
          else
            return "dynamic";
        return typeArgument.get$_mangledName();
      }
    },
    extractMetadata_closure: {
      "^": "Closure:19;",
      call$1: [function(i) {
        return init.metadata[i];
      }, null, null, 2, 0, null, 23, [], "call"]
    },
    NoSuchStaticMethodError: {
      "^": "Error;_cls,__js_mirrors$_name,_positionalArguments,__js_mirrors$_namedArguments,__js_mirrors$_kind",
      toString$0: function(_) {
        switch (this.__js_mirrors$_kind) {
          case 0:
            return "NoSuchMethodError: No constructor named '" + H.S(this.__js_mirrors$_name.get$_name()) + "' in class '" + H.S(this._cls.get$qualifiedName().get$_name()) + "'.";
          case 1:
            return "NoSuchMethodError: No top-level method named '" + H.S(this.__js_mirrors$_name.get$_name()) + "'.";
          default:
            return "NoSuchMethodError";
        }
      },
      static: {NoSuchStaticMethodError$method: function(_cls, _name, _positionalArguments, _namedArguments) {
          return new H.NoSuchStaticMethodError(_cls, _name, _positionalArguments, _namedArguments, 1);
        }}
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      var t1 = victim ? Object.keys(victim) : [];
      t1.$builtinTypeInfo = [null];
      t1.fixed$length = Array;
      return t1;
    },
    _LazyMangledNamesMap: {
      "^": "Object;_jsMangledNames",
      $index: ["super$_LazyMangledNamesMap$$index", function(_, key) {
        var result = this._jsMangledNames[key];
        return typeof result !== "string" ? null : result;
      }]
    },
    _LazyMangledInstanceNamesMap: {
      "^": "_LazyMangledNamesMap;_jsMangledNames",
      $index: function(_, key) {
        var result = this.super$_LazyMangledNamesMap$$index(this, key);
        if (result == null && J.startsWith$1$s(key, "set$")) {
          result = this.super$_LazyMangledNamesMap$$index(this, "get$" + J.substring$1$s(key, 4));
          return result != null ? result + "=" : null;
        }
        return result;
      }
    },
    _LazyReflectiveNamesMap: {
      "^": "Object;_jsMangledNames,_isInstance,_cacheLength,_cache",
      _updateReflectiveNames$0: function() {
        var result, t1, t2, t3, key, reflectiveName;
        result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
        t1 = this._jsMangledNames;
        for (t2 = J.get$iterator$ax(Object.keys(t1)), t3 = this._isInstance; t2.moveNext$0();) {
          key = t2.get$current();
          reflectiveName = t1[key];
          if (typeof reflectiveName !== "string")
            continue;
          result.$indexSet(0, reflectiveName, key);
          if (t3 && J.startsWith$1$s(key, "get$"))
            result.$indexSet(0, H.S(reflectiveName) + "=", "set$" + J.substring$1$s(key, 4));
        }
        return result;
      },
      $index: function(_, key) {
        if (this._cache == null || Object.keys(this._jsMangledNames).length !== this._cacheLength) {
          this._cache = this._updateReflectiveNames$0();
          this._cacheLength = Object.keys(this._jsMangledNames).length;
        }
        return this._cache.$index(0, key);
      }
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P._AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1._captured_storedCallback_0 = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P._AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P._AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 73],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    }, "call$1", "_AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 73],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, callback);
    }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 73],
    _registerErrorHandler: function(errorHandler, zone) {
      var t1 = H.getDynamicRuntimeType();
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
      if (t1)
        return zone.registerBinaryCallback$1(errorHandler);
      else
        return zone.registerUnaryCallback$1(errorHandler);
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      var replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        error = error != null ? error : new P.NullThrownError();
        stackTrace = replacement.stackTrace;
      }
      result._completeError$2(error, stackTrace);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        $.Zone__current = t1.zone;
        t1.callback$0();
      }
    },
    _microtaskLoopEntry: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $.Zone__current = C.C__RootZone;
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._microtaskLoopEntry$closure());
      }
    }, "call$0", "_microtaskLoopEntry$closure", 0, 0, 6],
    _scheduleAsyncCallback: function(newEntry) {
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._microtaskLoopEntry$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone, t1;
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      if (C.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = C.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        P._rootScheduleMicrotask(null, null, currentZone, currentZone.registerCallback$1(callback));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
    },
    Stream_Stream$fromFuture: function(future, $T) {
      var controller, t1;
      controller = P.StreamController_StreamController(null, null, null, null, true, $T);
      future.then$2$onError(new P.Stream_Stream$fromFuture_closure(controller), new P.Stream_Stream$fromFuture_closure0(controller));
      t1 = new P._ControllerStream(controller);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      var t1, t2, t3;
      t1 = new P._StreamIteratorImpl(null, null, null, 0);
      t1.$builtinTypeInfo = [$T];
      t2 = t1.get$_onData();
      t3 = t1.get$_onError();
      t1._subscription = stream.listen$4$cancelOnError$onDone$onError(t2, true, t1.get$_onDone(), t3);
      return t1;
    },
    StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
      var t1;
      if (onCancel == null)
        return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
      if (sync) {
        t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
        t1.$builtinTypeInfo = [$T];
      } else {
        t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
        t1.$builtinTypeInfo = [$T];
      }
      return t1;
    },
    StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
      var t1;
      if (sync) {
        t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
        t1.$builtinTypeInfo = [$T];
        t1._async$_previous = t1;
        t1._async$_next = t1;
      } else {
        t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
        t1.$builtinTypeInfo = [$T];
        t1._async$_previous = t1;
        t1._async$_next = t1;
      }
      return t1;
    },
    _runGuarded: function(notificationHandler) {
      var result, e, s, exception, t1;
      if (notificationHandler == null)
        return;
      try {
        result = notificationHandler.call$0();
        if (!!J.getInterceptor(result).$isFuture)
          return result;
        return;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _nullDataHandler: [function(value) {
    }, "call$1", "_nullDataHandler$closure", 2, 0, 85, 26, []],
    _nullErrorHandler: [function(error, stackTrace) {
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    }, function(error) {
      return P._nullErrorHandler(error, null);
    }, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 29, 25, 18, [], 19, []],
    _nullDoneHandler: [function() {
    }, "call$0", "_nullDoneHandler$closure", 0, 0, 6],
    _runUserCode: function(userCode, onSuccess, onError) {
      var e, s, replacement, error, stackTrace, exception, t1, error0;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        replacement = $.Zone__current.errorCallback$2(e, s);
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error0 = J.get$error$x(replacement);
          error = error0 != null ? error0 : new P.NullThrownError();
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue: function(subscription, future, value) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor(cancelFuture).$isFuture)
        cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return t1.createTimer$2(duration, callback);
      return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
    },
    Timer_Timer$periodic: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return t1.createPeriodicTimer$2(duration, callback);
      return t1.createPeriodicTimer$2(duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Zone__enter: function(zone) {
      var previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    _parentDelegate: function(zone) {
      if (zone.get$parent(zone) == null)
        return;
      return zone.get$parent(zone).get$_delegate();
    },
    _rootHandleUncaughtError: [function($self, $parent, zone, error, stackTrace) {
      var entry, t1, t2;
      entry = new P._AsyncCallbackEntry(new P._rootHandleUncaughtError_closure(error, stackTrace), C.C__RootZone, null);
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(entry);
        $._lastPriorityCallback = $._lastCallback;
      } else {
        t2 = $._lastPriorityCallback;
        if (t2 == null) {
          entry.next = t1;
          $._lastPriorityCallback = entry;
          $._nextCallback = entry;
        } else {
          entry.next = t2.next;
          t2.next = entry;
          $._lastPriorityCallback = entry;
          if (entry.next == null)
            $._lastCallback = entry;
        }
      }
    }, "call$5", "_rootHandleUncaughtError$closure", 10, 0, 178, 34, [], 35, [], 36, [], 18, [], 19, []],
    _rootRun: [function($self, $parent, zone, f) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 == null ? zone == null : t1 === zone)
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    }, "call$4", "_rootRun$closure", 8, 0, 179, 34, [], 35, [], 36, [], 33, []],
    _rootRunUnary: [function($self, $parent, zone, f, arg) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 == null ? zone == null : t1 === zone)
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    }, "call$5", "_rootRunUnary$closure", 10, 0, 180, 34, [], 35, [], 36, [], 33, [], 37, []],
    _rootRunBinary: [function($self, $parent, zone, f, arg1, arg2) {
      var old, t1;
      t1 = $.Zone__current;
      if (t1 == null ? zone == null : t1 === zone)
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    }, "call$6", "_rootRunBinary$closure", 12, 0, 181, 34, [], 35, [], 36, [], 33, [], 14, [], 15, []],
    _rootRegisterCallback: [function($self, $parent, zone, f) {
      return f;
    }, "call$4", "_rootRegisterCallback$closure", 8, 0, 182, 34, [], 35, [], 36, [], 33, []],
    _rootRegisterUnaryCallback: [function($self, $parent, zone, f) {
      return f;
    }, "call$4", "_rootRegisterUnaryCallback$closure", 8, 0, 183, 34, [], 35, [], 36, [], 33, []],
    _rootRegisterBinaryCallback: [function($self, $parent, zone, f) {
      return f;
    }, "call$4", "_rootRegisterBinaryCallback$closure", 8, 0, 184, 34, [], 35, [], 36, [], 33, []],
    _rootErrorCallback: [function($self, $parent, zone, error, stackTrace) {
      return;
    }, "call$5", "_rootErrorCallback$closure", 10, 0, 185, 34, [], 35, [], 36, [], 18, [], 19, []],
    _rootScheduleMicrotask: [function($self, $parent, zone, f) {
      var t1 = C.C__RootZone !== zone;
      if (t1) {
        f = zone.bindCallback$2$runGuarded(f, !(!t1 || C.C__RootZone.get$errorZone() === zone.get$errorZone()));
        zone = C.C__RootZone;
      }
      P._scheduleAsyncCallback(new P._AsyncCallbackEntry(f, zone, null));
    }, "call$4", "_rootScheduleMicrotask$closure", 8, 0, 186, 34, [], 35, [], 36, [], 33, []],
    _rootCreateTimer: [function($self, $parent, zone, duration, callback) {
      return P.Timer__createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
    }, "call$5", "_rootCreateTimer$closure", 10, 0, 187, 34, [], 35, [], 36, [], 27, [], 38, []],
    _rootCreatePeriodicTimer: [function($self, $parent, zone, duration, callback) {
      return P.Timer__createPeriodicTimer(duration, C.C__RootZone !== zone ? zone.bindUnaryCallback$1(callback) : callback);
    }, "call$5", "_rootCreatePeriodicTimer$closure", 10, 0, 188, 34, [], 35, [], 36, [], 27, [], 38, []],
    _rootPrint: [function($self, $parent, zone, line) {
      H.printString(H.S(line));
    }, "call$4", "_rootPrint$closure", 8, 0, 189, 34, [], 35, [], 36, [], 39, []],
    _printToZone: [function(line) {
      $.Zone__current.print$1(0, line);
    }, "call$1", "_printToZone$closure", 2, 0, 37],
    _rootFork: [function($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, t2;
      $.printToZone = P._printToZone$closure();
      if (specification == null)
        specification = C._ZoneSpecification_ALf;
      else if (!specification.$is_ZoneSpecification)
        throw H.wrapException(P.ArgumentError$("ZoneSpecifications must be instantiated with the provided constructor."));
      if (zoneValues == null)
        valueMap = zone instanceof P._Zone ? zone.get$_async$_map() : P.HashMap_HashMap(null, null, null, null, null);
      else
        valueMap = P.HashMap_HashMap$from(zoneValues, null, null);
      t1 = new P._CustomZone(null, null, null, null, null, null, null, null, null, null, null, null, null, null, zone, valueMap);
      specification.get$run();
      t1._run = zone.get$_run();
      t1._runUnary = zone.get$_runUnary();
      t1._runBinary = zone.get$_runBinary();
      t1._registerCallback = zone.get$_registerCallback();
      t1._registerUnaryCallback = zone.get$_registerUnaryCallback();
      t1._registerBinaryCallback = zone.get$_registerBinaryCallback();
      t1._errorCallback = zone.get$_errorCallback();
      t1._scheduleMicrotask = zone.get$_scheduleMicrotask();
      t1._createTimer = zone.get$_createTimer();
      t1._createPeriodicTimer = zone.get$_createPeriodicTimer();
      t1._print = zone.get$_print();
      t1._fork = zone.get$_fork();
      t2 = specification.handleUncaughtError;
      t1._handleUncaughtError = t2 != null ? new P._ZoneFunction(t1, t2) : zone.get$_handleUncaughtError();
      return t1;
    }, "call$5", "_rootFork$closure", 10, 0, 190, 34, [], 35, [], 36, [], 40, [], 41, []],
    runZoned: function(body, onError, zoneSpecification, zoneValues) {
      var zone;
      zoneSpecification = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
      zone = $.Zone__current.fork$2$specification$zoneValues(zoneSpecification, zoneValues);
      return zone.run$1(body);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:7;_async$_box_0",
      call$1: [function(_) {
        var t1, f;
        H.leaveJsAsync();
        t1 = this._async$_box_0;
        f = t1._captured_storedCallback_0;
        t1._captured_storedCallback_0 = null;
        f.call$0();
      }, null, null, 2, 0, null, 42, [], "call"]
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:20;_async$_box_0,_captured_div_1,_captured_span_2",
      call$1: function(callback) {
        var t1, t2;
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._async$_box_0._captured_storedCallback_0 = callback;
        t1 = this._captured_div_1;
        t2 = this._captured_span_2;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:5;_captured_callback_0",
      call$0: [function() {
        H.leaveJsAsync();
        this._captured_callback_0.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:5;_captured_callback_0",
      call$0: [function() {
        H.leaveJsAsync();
        this._captured_callback_0.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _UncaughtAsyncError: {
      "^": "AsyncError;error,stackTrace",
      toString$0: function(_) {
        var result, t1;
        result = "Uncaught Error: " + H.S(this.error);
        t1 = this.stackTrace;
        return t1 != null ? result + ("\nStack Trace:\n" + J.toString$0(t1)) : result;
      },
      static: {_UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
          if (stackTrace != null)
            return stackTrace;
          if (!!J.getInterceptor(error).$isError)
            return error.get$stackTrace();
          return;
        }}
    },
    _BroadcastStream: {
      "^": "_ControllerStream;_async$_controller",
      get$isBroadcast: function() {
        return true;
      }
    },
    _BroadcastSubscription: {
      "^": "_ControllerSubscription;_eventState,_async$_next@,_async$_previous?,_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      get$_async$_controller: function() {
        return this._async$_controller;
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 6],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 6],
      $is_EventSink: 1,
      $isStreamSubscription: 1
    },
    _BroadcastStreamController: {
      "^": "Object;_state?,_async$_next@,_async$_previous?",
      get$stream: function(_) {
        var t1 = new P._BroadcastStream(this);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$isClosed: function() {
        return (this._state & 4) !== 0;
      },
      get$isPaused: function() {
        return false;
      },
      get$_mayAddEvent: function() {
        return this._state < 4;
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 != null)
          return t1;
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [null];
        this._doneFuture = t1;
        return t1;
      },
      _removeListener$1: function(subscription) {
        var previous, next;
        previous = subscription._async$_previous;
        next = subscription._async$_next;
        previous.set$_async$_next(next);
        next.set$_async$_previous(previous);
        subscription._async$_previous = subscription;
        subscription._async$_next = subscription;
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription;
        if ((this._state & 4) !== 0) {
          if (onDone == null)
            onDone = P._nullDoneHandler$closure();
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          t1._schedule$0();
          return t1;
        }
        t1 = $.Zone__current;
        subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
        subscription.$builtinTypeInfo = this.$builtinTypeInfo;
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
        subscription._async$_previous = subscription;
        subscription._async$_next = subscription;
        t1 = this._async$_previous;
        subscription._async$_previous = t1;
        subscription._async$_next = this;
        t1.set$_async$_next(subscription);
        this._async$_previous = subscription;
        subscription._eventState = this._state & 1;
        if (this._async$_next === subscription)
          P._runGuarded(this._onListen);
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        var t1;
        if (subscription._async$_next === subscription)
          return;
        t1 = subscription._eventState;
        if ((t1 & 2) !== 0)
          subscription._eventState = t1 | 4;
        else {
          this._removeListener$1(subscription);
          if ((this._state & 2) === 0 && this._async$_next === this)
            this._callOnCancel$0();
        }
        return;
      },
      _recordPause$1: function(subscription) {
      },
      _recordResume$1: function(subscription) {
      },
      _addEventError$0: ["super$_BroadcastStreamController$_addEventError$0", function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add new events after calling close");
        return new P.StateError("Cannot add new events while doing an addStream");
      }],
      add$1: ["super$_BroadcastStreamController$add$1", function(_, data) {
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._sendData$1(data);
      }, null, "get$add", 2, 0, null, 43, []],
      addError$2: [function(error, stackTrace) {
        var replacement;
        error = error != null ? error : new P.NullThrownError();
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          error = error != null ? error : new P.NullThrownError();
          stackTrace = replacement.stackTrace;
        }
        this._sendError$2(error, stackTrace);
      }, null, "get$addError", 2, 2, null, 25, 18, [], 19, []],
      close$0: ["super$_BroadcastStreamController$close$0", function(_) {
        var doneFuture;
        if ((this._state & 4) !== 0)
          return this._doneFuture;
        if (!this.get$_mayAddEvent())
          throw H.wrapException(this._addEventError$0());
        this._state |= 4;
        doneFuture = this._ensureDoneFuture$0();
        this._sendDone$0();
        return doneFuture;
      }],
      get$done: function() {
        return this._ensureDoneFuture$0();
      },
      _addError$2: function(error, stackTrace) {
        this._sendError$2(error, stackTrace);
      },
      _forEachListener$1: function(action) {
        var t1, link, id, link0;
        t1 = this._state;
        if ((t1 & 2) !== 0)
          throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
        link = this._async$_next;
        if (link === this)
          return;
        id = t1 & 1;
        this._state = t1 ^ 3;
        for (; link !== this;) {
          t1 = link._eventState;
          if ((t1 & 1) === id) {
            link._eventState = t1 | 2;
            action.call$1(link);
            t1 = link._eventState ^ 1;
            link._eventState = t1;
            link0 = link._async$_next;
            if ((t1 & 4) !== 0)
              this._removeListener$1(link);
            link._eventState = link._eventState & 4294967293;
            link = link0;
          } else
            link = link._async$_next;
        }
        this._state &= 4294967293;
        if (this._async$_next === this)
          this._callOnCancel$0();
      },
      _callOnCancel$0: ["super$_BroadcastStreamController$_callOnCancel$0", function() {
        if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
          this._doneFuture._asyncComplete$1(null);
        P._runGuarded(this._onCancel);
      }]
    },
    _SyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      get$_mayAddEvent: function() {
        return P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
      },
      _addEventError$0: function() {
        if ((this._state & 2) !== 0)
          return new P.StateError("Cannot fire new event. Controller is already firing an event");
        return this.super$_BroadcastStreamController$_addEventError$0();
      },
      _sendData$1: function(data) {
        var t1 = this._async$_next;
        if (t1 === this)
          return;
        if (t1.get$_async$_next() === this) {
          this._state |= 2;
          this._async$_next._async$_add$1(data);
          this._state &= 4294967293;
          if (this._async$_next === this)
            this._callOnCancel$0();
          return;
        }
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
      },
      _sendError$2: function(error, stackTrace) {
        if (this._async$_next === this)
          return;
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
      },
      _sendDone$0: function() {
        if (this._async$_next !== this)
          this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _SyncBroadcastStreamController__sendData_closure: {
      "^": "Closure;_async$_captured_this_0,_captured_data_1",
      call$1: function(subscription) {
        subscription._async$_add$1(this._captured_data_1);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendError_closure: {
      "^": "Closure;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$1: function(subscription) {
        subscription._addError$2(this._captured_error_1, this._captured_stackTrace_2);
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BufferingStreamSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _SyncBroadcastStreamController__sendDone_closure: {
      "^": "Closure;_async$_captured_this_0",
      call$1: function(subscription) {
        subscription._async$_close$0();
      },
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [[P._BroadcastSubscription, T]]};
        }, this._async$_captured_this_0, "_SyncBroadcastStreamController");
      }
    },
    _AsyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      _sendData$1: function(data) {
        var link, t1;
        for (link = this._async$_next; link !== this; link = link._async$_next) {
          t1 = new P._DelayedData(data, null);
          t1.$builtinTypeInfo = [null];
          link._addPending$1(t1);
        }
      },
      _sendError$2: function(error, stackTrace) {
        var link;
        for (link = this._async$_next; link !== this; link = link._async$_next)
          link._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        var link = this._async$_next;
        if (link !== this)
          for (; link !== this; link = link._async$_next)
            link._addPending$1(C.C__DelayedDone);
        else
          this._doneFuture._asyncComplete$1(null);
      }
    },
    _AsBroadcastStreamController: {
      "^": "_SyncBroadcastStreamController;_pending,_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
      _addPendingEvent$1: function($event) {
        var t1 = this._pending;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._pending = t1;
        }
        t1.add$1(0, $event);
      },
      add$1: [function(_, data) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          t1 = new P._DelayedData(data, null);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          this._addPendingEvent$1(t1);
          return;
        }
        this.super$_BroadcastStreamController$add$1(this, data);
        while (true) {
          t1 = this._pending;
          if (!(t1 != null && t1.lastPendingEvent != null))
            break;
          t1.handleNext$1(this);
        }
      }, "call$1", "get$add", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_AsBroadcastStreamController");
      }, 43, []],
      addError$2: [function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          this._addPendingEvent$1(new P._DelayedError(error, stackTrace, null));
          return;
        }
        if (!(P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0))
          throw H.wrapException(this._addEventError$0());
        this._sendError$2(error, stackTrace);
        while (true) {
          t1 = this._pending;
          if (!(t1 != null && t1.lastPendingEvent != null))
            break;
          t1.handleNext$1(this);
        }
      }, function(error) {
        return this.addError$2(error, null);
      }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 21, 25, 18, [], 19, []],
      close$0: [function(_) {
        var t1 = this._state;
        if ((t1 & 4) === 0 && (t1 & 2) !== 0) {
          this._addPendingEvent$1(C.C__DelayedDone);
          this._state |= 4;
          return P._BroadcastStreamController.prototype.get$done.call(this);
        }
        return this.super$_BroadcastStreamController$close$0(this);
      }, "call$0", "get$close", 0, 0, 22],
      _callOnCancel$0: function() {
        var t1 = this._pending;
        if (t1 != null && t1.lastPendingEvent != null) {
          if (t1._state === 1)
            t1._state = 3;
          t1.lastPendingEvent = null;
          t1.firstPendingEvent = null;
          this._pending = null;
        }
        this.super$_BroadcastStreamController$_callOnCancel$0();
      }
    },
    Future: {
      "^": "Object;",
      "<>": [3],
      static: {"^": "Future__nullFuture<-278", Future_Future: [function(computation, $T) {
          var result = new P._Future(0, $.Zone__current, null);
          result.$builtinTypeInfo = [$T];
          P.Timer_Timer(C.Duration_0, new P.Future_Future_closure(computation, result));
          return result;
        }, null, null, 2, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [{func: 1}]};
          }, this.$receiver, "Future");
        }, 24, [], "new Future"], Future_Future$microtask: [function(computation, $T) {
          var result = new P._Future(0, $.Zone__current, null);
          result.$builtinTypeInfo = [$T];
          P.scheduleMicrotask(new P.Future_Future$microtask_closure(computation, result));
          return result;
        }, null, null, 2, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [{func: 1}]};
          }, this.$receiver, "Future");
        }, 24, [], "new Future$microtask"], Future_Future$sync: [function(computation, $T) {
          var result, T0, error, stackTrace, t1, exception, replacement;
          try {
            result = computation.call$0();
            t1 = new P._Future(0, $.Zone__current, null);
            t1.$builtinTypeInfo = [T0];
            t1._asyncComplete$1(result);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            error = t1;
            stackTrace = H.getTraceFromException(exception);
            error = error;
            stackTrace = stackTrace;
            error = error != null ? error : new P.NullThrownError();
            t1 = $.Zone__current;
            if (t1 !== C.C__RootZone) {
              replacement = t1.errorCallback$2(error, stackTrace);
              if (replacement != null) {
                error = replacement.error;
                error = error != null ? error : new P.NullThrownError();
                stackTrace = replacement.stackTrace;
              }
            }
            t1 = new P._Future(0, $.Zone__current, null);
            t1.$builtinTypeInfo = [T0];
            t1._asyncCompleteError$2(error, stackTrace);
            return t1;
          }
        }, null, null, 2, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [{func: 1}]};
          }, this.$receiver, "Future");
        }, 24, [], "new Future$sync"], Future_Future$value: [function(value, $T) {
          var t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [$T];
          t1._asyncComplete$1(value);
          return t1;
        }, null, null, 0, 2, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], opt: [,]};
          }, this.$receiver, "Future");
        }, 25, 26, [], "new Future$value"], Future_Future$error: [function(error, stackTrace, $T) {
          var t1, replacement;
          error = error != null ? error : new P.NullThrownError();
          t1 = $.Zone__current;
          if (t1 !== C.C__RootZone) {
            replacement = t1.errorCallback$2(error, stackTrace);
            if (replacement != null) {
              error = replacement.error;
              error = error != null ? error : new P.NullThrownError();
              stackTrace = replacement.stackTrace;
            }
          }
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [$T];
          t1._asyncCompleteError$2(error, stackTrace);
          return t1;
        }, null, null, 2, 2, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [P.Object], opt: [P.StackTrace]};
          }, this.$receiver, "Future");
        }, 25, 18, [], 19, [], "new Future$error"], Future_Future$delayed: [function(duration, computation, $T) {
          var result = new P._Future(0, $.Zone__current, null);
          result.$builtinTypeInfo = [$T];
          P.Timer_Timer(duration, new P.Future_Future$delayed_closure(computation, result));
          return result;
        }, null, null, 2, 2, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Future, T], args: [P.Duration], opt: [{func: 1, ret: T}]};
          }, this.$receiver, "Future");
        }, 25, 27, [], 24, [], "new Future$delayed"], Future_wait: [function(futures, cleanUp, eagerError) {
          var t1, result, t2, t3, values;
          t1 = {};
          result = new P._Future(0, $.Zone__current, null);
          result.$builtinTypeInfo = [P.List];
          t1._captured_values_0 = null;
          t1._captured_remaining_1 = 0;
          t1._captured_error_2 = null;
          t1._captured_stackTrace_3 = null;
          t2 = new P.Future_wait_handleError(t1, eagerError, cleanUp, result);
          for (t3 = J.get$iterator$ax(futures); t3.moveNext$0();)
            t3.get$current().then$2$onError(new P.Future_wait_closure(t1, eagerError, cleanUp, result, t1._captured_remaining_1++), t2);
          t2 = t1._captured_remaining_1;
          if (t2 === 0) {
            t1 = new P._Future(0, $.Zone__current, null);
            t1.$builtinTypeInfo = [null];
            t1._asyncComplete$1(C.List_empty);
            return t1;
          }
          values = Array(t2);
          values.fixed$length = Array;
          t1._captured_values_0 = values;
          return result;
        }, function(futures) {
          return P.Future_wait(futures, null, false);
        }, "call$3$cleanUp$eagerError", "call$1", "Future_wait$closure", 2, 5, 175, 28, 25, 29, [], 30, [], 31, [], "wait"], Future_forEach: [function(input, f) {
          return P.Future_doWhile(new P.Future_forEach_closure(f, J.get$iterator$ax(input)));
        }, "call$2", "Future_forEach$closure", 4, 0, 176, 32, [], 33, [], "forEach"], Future_doWhile: [function(f) {
          var t1, doneSignal, nextIteration;
          t1 = {};
          doneSignal = new P._Future(0, $.Zone__current, null);
          doneSignal.$builtinTypeInfo = [null];
          t1._captured_nextIteration_0 = null;
          nextIteration = $.Zone__current.bindUnaryCallback$2$runGuarded(new P.Future_doWhile_closure(t1, f, doneSignal), true);
          t1._captured_nextIteration_0 = nextIteration;
          nextIteration.call$1(true);
          return doneSignal;
        }, "call$1", "Future_doWhile$closure", 2, 0, 177, 33, [], "doWhile"]}
    },
    "+Future": [0],
    Future_Future_closure: {
      "^": "Closure:5;_captured_computation_0,_async$_captured_result_1",
      call$0: [function() {
        var e, s, exception, t1;
        try {
          this._async$_captured_result_1._complete$1(this._captured_computation_0.call$0());
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }, null, null, 0, 0, 5, "call"]
    },
    Future_Future$microtask_closure: {
      "^": "Closure:5;_captured_computation_0,_async$_captured_result_1",
      call$0: [function() {
        var e, s, exception, t1;
        try {
          this._async$_captured_result_1._complete$1(this._captured_computation_0.call$0());
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }, null, null, 0, 0, 5, "call"]
    },
    Future_Future$delayed_closure: {
      "^": "Closure:5;_captured_computation_0,_async$_captured_result_1",
      call$0: [function() {
        var e, s, t1, exception;
        try {
          t1 = this._captured_computation_0;
          t1 = t1 == null ? null : t1.call$0();
          this._async$_captured_result_1._complete$1(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
        }
      }, null, null, 0, 0, 5, "call"]
    },
    Future_wait_handleError: {
      "^": "Closure:23;_async$_box_0,_captured_eagerError_1,_captured_cleanUp_2,_captured_result_3",
      call$2: [function(theError, theStackTrace) {
        var t1, t2, t3, t4, _i, value;
        t1 = this._async$_box_0;
        t2 = --t1._captured_remaining_1;
        t3 = t1._captured_values_0;
        if (t3 != null) {
          t2 = this._captured_cleanUp_2;
          if (t2 != null)
            for (t4 = t3.length, _i = 0; _i < t4; ++_i) {
              value = t3[_i];
              if (value != null)
                P.Future_Future$sync(new P.Future_wait_handleError_closure(t2, value), null);
            }
          t1._captured_values_0 = null;
          if (t1._captured_remaining_1 === 0 || this._captured_eagerError_1)
            this._captured_result_3._completeError$2(theError, theStackTrace);
          else {
            t1._captured_error_2 = theError;
            t1._captured_stackTrace_3 = theStackTrace;
          }
        } else if (t2 === 0 && !this._captured_eagerError_1)
          this._captured_result_3._completeError$2(t1._captured_error_2, t1._captured_stackTrace_3);
      }, null, null, 4, 0, 23, 44, [], 45, [], "call"]
    },
    Future_wait_handleError_closure: {
      "^": "Closure:5;_captured_cleanUp_4,_captured_value_5",
      call$0: [function() {
        this._captured_cleanUp_4.call$1(this._captured_value_5);
      }, null, null, 0, 0, 5, "call"]
    },
    Future_wait_closure: {
      "^": "Closure:24;_async$_box_0,_captured_eagerError_6,_captured_cleanUp_7,_captured_result_8,_captured_pos_9",
      call$1: [function(value) {
        var t1, t2, t3;
        t1 = this._async$_box_0;
        t2 = --t1._captured_remaining_1;
        t3 = t1._captured_values_0;
        if (t3 != null) {
          t3[this._captured_pos_9] = value;
          if (t2 === 0)
            this._captured_result_8._completeWithValue$1(t3);
        } else {
          t2 = this._captured_cleanUp_7;
          if (t2 != null && value != null)
            P.Future_Future$sync(new P.Future_wait__closure(t2, value), null);
          if (t1._captured_remaining_1 === 0 && !this._captured_eagerError_6)
            this._captured_result_8._completeError$2(t1._captured_error_2, t1._captured_stackTrace_3);
        }
      }, null, null, 2, 0, 24, 26, [], "call"]
    },
    Future_wait__closure: {
      "^": "Closure:5;_captured_cleanUp_10,_captured_value_11",
      call$0: [function() {
        this._captured_cleanUp_10.call$1(this._captured_value_11);
      }, null, null, 0, 0, 5, "call"]
    },
    Future_forEach_closure: {
      "^": "Closure:5;_captured_f_0,_captured_iterator_1",
      call$0: [function() {
        var t1 = this._captured_iterator_1;
        if (!t1.moveNext$0())
          return false;
        return P.Future_Future$sync(new P.Future_forEach__closure(this._captured_f_0, t1), null).then$1(new P.Future_forEach__closure0());
      }, null, null, 0, 0, 5, "call"]
    },
    Future_forEach__closure: {
      "^": "Closure:5;_captured_f_2,_captured_iterator_3",
      call$0: [function() {
        return this._captured_f_2.call$1(this._captured_iterator_3.get$current());
      }, null, null, 0, 0, 5, "call"]
    },
    Future_forEach__closure0: {
      "^": "Closure:7;",
      call$1: [function(_) {
        return true;
      }, null, null, 2, 0, 7, 42, [], "call"]
    },
    Future_doWhile_closure: {
      "^": "Closure:25;_async$_box_0,_captured_f_1,_captured_doneSignal_2",
      call$1: [function(keepGoing) {
        var t1 = this._captured_doneSignal_2;
        if (keepGoing)
          P.Future_Future$sync(this._captured_f_1, null).then$2$onError(this._async$_box_0._captured_nextIteration_0, t1.get$_completeError());
        else
          t1._complete$1(null);
      }, null, null, 2, 0, 25, 46, [], "call"]
    },
    TimeoutException: {
      "^": "Object;message>,duration>",
      toString$0: function(_) {
        var t1, result;
        t1 = this.duration;
        result = t1 != null ? "TimeoutException after " + J.toString$0(t1) : "TimeoutException";
        return result + ": " + this.message;
      }
    },
    Completer: {
      "^": "Object;",
      "<>": [2],
      static: {Completer_Completer: [function($T) {
          var t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [$T];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [$T];
          return t1;
        }, null, null, 0, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Completer, T]};
          }, this.$receiver, "Completer");
        }, "new Completer"], Completer_Completer$sync: [function($T) {
          var t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [$T];
          t1 = new P._SyncCompleter(t1);
          t1.$builtinTypeInfo = [$T];
          return t1;
        }, null, null, 0, 0, function() {
          return H.computeSignature(function(T) {
            return {func: 1, ret: [P.Completer, T]};
          }, this.$receiver, "Completer");
        }, "new Completer$sync"]}
    },
    "+Completer": [0],
    _Completer: {
      "^": "Object;future<-279",
      completeError$2: [function(error, stackTrace) {
        var replacement;
        error = error != null ? error : new P.NullThrownError();
        if (this.future._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          error = error != null ? error : new P.NullThrownError();
          stackTrace = replacement.stackTrace;
        }
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 21, 25, 18, [], 19, [], "completeError"],
      get$isCompleted: [function() {
        return this.future._state !== 0;
      }, null, null, 1, 0, 26, "isCompleted"]
    },
    _AsyncCompleter: {
      "^": "_Completer;future-279",
      complete$1: [function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._asyncComplete$1(value);
      }, function($receiver) {
        return this.complete$1($receiver, null);
      }, "complete$0", "call$1", "call$0", "get$complete", 0, 2, 27, 25, 26, [], "complete"],
      _completeError$2: function(error, stackTrace) {
        this.future._asyncCompleteError$2(error, stackTrace);
      }
    },
    _SyncCompleter: {
      "^": "_Completer;future-279",
      complete$1: [function(_, value) {
        var t1 = this.future;
        if (t1._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        t1._complete$1(value);
      }, function($receiver) {
        return this.complete$1($receiver, null);
      }, "complete$0", "call$1", "call$0", "get$complete", 0, 2, 27, 25, 26, [], "complete"],
      _completeError$2: function(error, stackTrace) {
        this.future._completeError$2(error, stackTrace);
      }
    },
    _FutureListener: {
      "^": "Object;_nextListener,result,state,callback<,errorCallback",
      callback$1: function(arg0) {
        return this.callback.call$1(arg0);
      }
    },
    _Future: {
      "^": "Object;_state?,_zone,_resultOrListeners",
      set$_isChained: function(value) {
        if (value)
          this._state = 2;
        else
          this._state = 0;
      },
      then$2$onError: [function(f, onError) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = [null];
        if (t1 !== C.C__RootZone) {
          f = t1.registerUnaryCallback$1(f);
          if (onError != null)
            onError = P._registerErrorHandler(onError, t1);
        }
        this._addListener$1(new P._FutureListener(null, result, onError == null ? 1 : 3, f, onError));
        return result;
      }, function(f) {
        return this.then$2$onError(f, null);
      }, "then$1", "call$2$onError", "call$1", "get$then", 2, 3, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: P.Future, args: [{func: 1, args: [T]}], named: {onError: P.Function}};
        }, this.$receiver, "_Future");
      }, 25, 33, [], 48, [], "then"],
      catchError$2$test: [function(onError, test) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = [null];
        if (t1 !== C.C__RootZone) {
          onError = P._registerErrorHandler(onError, t1);
          if (test != null)
            test = t1.registerUnaryCallback$1(test);
        }
        this._addListener$1(new P._FutureListener(null, result, test == null ? 2 : 6, test, onError));
        return result;
      }, function(onError) {
        return this.catchError$2$test(onError, null);
      }, "catchError$1", "call$2$test", "call$1", "get$catchError", 2, 3, 28, 25, 48, [], 49, [], "catchError"],
      whenComplete$1: [function(action) {
        var t1, result;
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = this.$builtinTypeInfo;
        this._addListener$1(new P._FutureListener(null, result, 8, t1 !== C.C__RootZone ? t1.registerCallback$1(action) : action, null));
        return result;
      }, "call$1", "get$whenComplete", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: [P.Future, T], args: [{func: 1}]};
        }, this.$receiver, "_Future");
      }, 50, [], "whenComplete"],
      asStream$0: [function() {
        return P.Stream_Stream$fromFuture(this, null);
      }, "call$0", "get$asStream", 0, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: [P.Stream, T]};
        }, this.$receiver, "_Future");
      }, "asStream"],
      _markPendingCompletion$0: function() {
        if (this._state !== 0)
          throw H.wrapException(new P.StateError("Future already completed"));
        this._state = 1;
      },
      _setValue$1: function(value) {
        this._state = 4;
        this._resultOrListeners = value;
      },
      _setErrorObject$1: function(error) {
        this._state = 8;
        this._resultOrListeners = error;
      },
      _setError$2: function(error, stackTrace) {
        this._setErrorObject$1(new P.AsyncError(error, stackTrace));
      },
      _addListener$1: function(listener) {
        if (this._state >= 4)
          this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
        else {
          listener._nextListener = this._resultOrListeners;
          this._resultOrListeners = listener;
        }
      },
      _removeListeners$0: function() {
        var current, prev, next;
        current = this._resultOrListeners;
        this._resultOrListeners = null;
        for (prev = null; current != null; prev = current, current = next) {
          next = current._nextListener;
          current._nextListener = prev;
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, listeners;
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture)
          if (!!t1.$is_Future)
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          this._setValue$1(value);
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeWithValue$1: function(value) {
        var listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners = this._removeListeners$0();
        this._setErrorObject$1(new P.AsyncError(error, stackTrace));
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 29, 25, 18, [], 19, []],
      _asyncComplete$1: function(value) {
        var t1;
        if (value == null)
          ;
        else {
          t1 = J.getInterceptor(value);
          if (!!t1.$isFuture) {
            if (!!t1.$is_Future) {
              t1 = value._state;
              if (t1 >= 4 && t1 === 8) {
                this._markPendingCompletion$0();
                this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
              } else
                P._Future__chainCoreFuture(value, this);
            } else
              P._Future__chainForeignFuture(value, this);
            return;
          }
        }
        this._markPendingCompletion$0();
        this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure0(this, value));
      },
      _asyncCompleteError$2: function(error, stackTrace) {
        this._markPendingCompletion$0();
        this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
      },
      timeout$2$onTimeout: [function(timeLimit, onTimeout) {
        var t1, result, zone;
        t1 = {};
        t1._captured_onTimeout_0 = onTimeout;
        if (this._state >= 4) {
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [null];
          t1._asyncComplete$1(this);
          return t1;
        }
        result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = [null];
        t1._captured_timer_1 = null;
        if (onTimeout == null)
          t1._captured_timer_1 = P.Timer_Timer(timeLimit, new P._Future_timeout_closure(timeLimit, result));
        else {
          zone = $.Zone__current;
          t1._captured_onTimeout_0 = zone.registerCallback$1(onTimeout);
          t1._captured_timer_1 = P.Timer_Timer(timeLimit, new P._Future_timeout_closure0(t1, result, zone));
        }
        this.then$2$onError(new P._Future_timeout_closure1(t1, this, result), new P._Future_timeout_closure2(t1, result));
        return result;
      }, function(timeLimit) {
        return this.timeout$2$onTimeout(timeLimit, null);
      }, "timeout$1", "call$2$onTimeout", "call$1", "get$timeout", 2, 3, 30, 25, 51, [], 52, [], "timeout"],
      $isFuture: 1,
      static: {_Future__chainForeignFuture: function(source, target) {
          var e, s, exception, t1;
          target.set$_state(2);
          try {
            source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        }, _Future__chainCoreFuture: function(source, target) {
          var listener;
          target._state = 2;
          listener = new P._FutureListener(null, target, 0, null, null);
          if (source._state >= 4)
            P._Future__propagateToListeners(source, listener);
          else
            source._addListener$1(listener);
        }, _Future__propagateToListeners: function(source, listeners) {
          var t1, t2, t3, hasError, listeners0, sourceValue, t4, zone, oldZone, chainSource, result;
          t1 = {};
          t1._captured_source_4 = source;
          for (t2 = source; true;) {
            t3 = {};
            hasError = t2._state === 8;
            if (listeners == null) {
              if (hasError) {
                t1 = t2._resultOrListeners;
                t2._zone.handleUncaughtError$2(t1.error, t1.stackTrace);
              }
              return;
            }
            for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
              listeners._nextListener = null;
              P._Future__propagateToListeners(t1._captured_source_4, listeners);
            }
            t3._captured_listenerHasValue_1 = true;
            sourceValue = hasError ? null : t1._captured_source_4._resultOrListeners;
            t3._captured_listenerValueOrError_2 = sourceValue;
            t3._captured_isPropagationAborted_3 = false;
            t2 = !hasError;
            if (t2) {
              t4 = listeners.state;
              t4 = (t4 & 1) !== 0 || t4 === 8;
            } else
              t4 = true;
            if (t4) {
              t4 = listeners.result;
              zone = t4._zone;
              if (hasError && !t1._captured_source_4._zone.inSameErrorZone$1(zone)) {
                t2 = t1._captured_source_4;
                t3 = t2._resultOrListeners;
                t2._zone.handleUncaughtError$2(t3.error, t3.stackTrace);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              if (t2) {
                if ((listeners.state & 1) !== 0)
                  t3._captured_listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
              } else
                new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
              if (listeners.state === 8)
                new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              if (t3._captured_isPropagationAborted_3)
                return;
              if (t3._captured_listenerHasValue_1) {
                t2 = t3._captured_listenerValueOrError_2;
                t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
              } else
                t2 = false;
              if (t2) {
                chainSource = t3._captured_listenerValueOrError_2;
                if (chainSource instanceof P._Future)
                  if (chainSource._state >= 4) {
                    t4._state = 2;
                    t1._captured_source_4 = chainSource;
                    listeners = new P._FutureListener(null, t4, 0, null, null);
                    t2 = chainSource;
                    continue;
                  } else
                    P._Future__chainCoreFuture(chainSource, t4);
                else
                  P._Future__chainForeignFuture(chainSource, t4);
                return;
              }
            }
            result = listeners.result;
            listeners = result._removeListeners$0();
            t2 = t3._captured_listenerHasValue_1;
            t3 = t3._captured_listenerValueOrError_2;
            if (t2) {
              result._state = 4;
              result._resultOrListeners = t3;
            } else {
              result._state = 8;
              result._resultOrListeners = t3;
            }
            t1._captured_source_4 = result;
            t2 = result;
          }
        }}
    },
    _Future__addListener_closure: {
      "^": "Closure:5;_async$_captured_this_0,_captured_listener_1",
      call$0: [function() {
        P._Future__propagateToListeners(this._async$_captured_this_0, this._captured_listener_1);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:7;_captured_target_0",
      call$1: [function(value) {
        this._captured_target_0._completeWithValue$1(value);
      }, null, null, 2, 0, null, 26, [], "call"]
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:31;_captured_target_1",
      call$2: [function(error, stackTrace) {
        this._captured_target_1._completeError$2(error, stackTrace);
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 25, 18, [], 19, [], "call"]
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:5;_captured_target_2,_captured_e_3,_captured_s_4",
      call$0: [function() {
        this._captured_target_2._completeError$2(this._captured_e_3, this._captured_s_4);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncComplete_closure: {
      "^": "Closure:5;_async$_captured_this_0,_captured_coreFuture_1",
      call$0: [function() {
        P._Future__chainCoreFuture(this._captured_coreFuture_1, this._async$_captured_this_0);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncComplete_closure0: {
      "^": "Closure:5;_captured_this_2,_captured_value_3",
      call$0: [function() {
        this._captured_this_2._completeWithValue$1(this._captured_value_3);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__asyncCompleteError_closure: {
      "^": "Closure:5;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$0: [function() {
        this._async$_captured_this_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
      }, null, null, 0, 0, null, "call"]
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:26;_box_1,_captured_listener_3,_captured_sourceValue_4,_captured_zone_5",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this._box_1._captured_listenerValueOrError_2 = this._captured_zone_5.runUnary$2(this._captured_listener_3.callback, this._captured_sourceValue_4);
          return true;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this._box_1._captured_listenerValueOrError_2 = new P.AsyncError(e, s);
          return false;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:6;_box_2,_box_1,_captured_listener_6,_captured_zone_7",
      call$0: function() {
        var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
        asyncError = this._box_2._captured_source_4._resultOrListeners;
        matchesTest = true;
        t1 = this._captured_listener_6;
        if (t1.state === 6) {
          test = t1.callback;
          try {
            matchesTest = this._captured_zone_7.runUnary$2(test, J.get$error$x(asyncError));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = listenerValueOrError;
            t1._captured_listenerHasValue_1 = false;
            return;
          }
        }
        errorCallback = t1.errorCallback;
        if (matchesTest && errorCallback != null) {
          try {
            t1 = errorCallback;
            t2 = H.getDynamicRuntimeType();
            t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
            t3 = this._captured_zone_7;
            t4 = this._box_1;
            if (t2)
              t4._captured_listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            else
              t4._captured_listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e0 = t1;
            s0 = H.getTraceFromException(exception);
            t1 = J.get$error$x(asyncError);
            t2 = e0;
            listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
            t1 = this._box_1;
            t1._captured_listenerValueOrError_2 = listenerValueOrError;
            t1._captured_listenerHasValue_1 = false;
            return;
          }
          this._box_1._captured_listenerHasValue_1 = true;
        } else {
          t1 = this._box_1;
          t1._captured_listenerValueOrError_2 = asyncError;
          t1._captured_listenerHasValue_1 = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:6;_box_2,_box_1,_captured_hasError_8,_captured_listener_9,_captured_zone_10",
      call$0: function() {
        var t1, e, s, completeResult, t2, exception, result;
        t1 = {};
        t1._captured_completeResult_0 = null;
        try {
          completeResult = this._captured_zone_10.run$1(this._captured_listener_9.callback);
          t1._captured_completeResult_0 = completeResult;
          t2 = completeResult;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          if (this._captured_hasError_8) {
            t1 = this._box_2._captured_source_4._resultOrListeners.error;
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_1;
          if (t1)
            t2._captured_listenerValueOrError_2 = this._box_2._captured_source_4._resultOrListeners;
          else
            t2._captured_listenerValueOrError_2 = new P.AsyncError(e, s);
          t2._captured_listenerHasValue_1 = false;
          return;
        }
        if (!!J.getInterceptor(t2).$isFuture) {
          result = this._captured_listener_9.result;
          result.set$_isChained(true);
          this._box_1._captured_isPropagationAborted_3 = true;
          t2.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this._box_2, result), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, result));
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:7;_box_2,_captured_result_11",
      call$1: [function(ignored) {
        P._Future__propagateToListeners(this._box_2._captured_source_4, new P._FutureListener(null, this._captured_result_11, 0, null, null));
      }, null, null, 2, 0, null, 53, [], "call"]
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
      "^": "Closure:31;_async$_box_0,_captured_result_12",
      call$2: [function(error, stackTrace) {
        var t1, completeResult;
        t1 = this._async$_box_0;
        if (!(t1._captured_completeResult_0 instanceof P._Future)) {
          completeResult = new P._Future(0, $.Zone__current, null);
          completeResult.$builtinTypeInfo = [null];
          t1._captured_completeResult_0 = completeResult;
          completeResult._setError$2(error, stackTrace);
        }
        P._Future__propagateToListeners(t1._captured_completeResult_0, new P._FutureListener(null, this._captured_result_12, 0, null, null));
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 2, 2, null, 25, 18, [], 19, [], "call"]
    },
    _Future_timeout_closure: {
      "^": "Closure:5;_captured_timeLimit_1,_captured_result_2",
      call$0: [function() {
        this._captured_result_2._completeError$1(new P.TimeoutException("Future not completed", this._captured_timeLimit_1));
      }, null, null, 0, 0, null, "call"]
    },
    _Future_timeout_closure0: {
      "^": "Closure:5;_async$_box_0,_captured_result_3,_captured_zone_4",
      call$0: [function() {
        var e, s, exception, t1;
        try {
          this._captured_result_3._complete$1(this._captured_zone_4.run$1(this._async$_box_0._captured_onTimeout_0));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          this._captured_result_3._completeError$2(e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    _Future_timeout_closure1: {
      "^": "Closure;_async$_box_0,_captured_this_5,_captured_result_6",
      call$1: [function(v) {
        var t1 = this._async$_box_0;
        if (t1._captured_timer_1.get$isActive()) {
          t1._captured_timer_1.cancel$0();
          this._captured_result_6._completeWithValue$1(v);
        }
      }, null, null, 2, 0, null, 54, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._captured_this_5, "_Future");
      }
    },
    _Future_timeout_closure2: {
      "^": "Closure:14;_async$_box_0,_captured_result_7",
      call$2: [function(e, s) {
        var t1 = this._async$_box_0;
        if (t1._captured_timer_1.get$isActive()) {
          t1._captured_timer_1.cancel$0();
          this._captured_result_7._completeError$2(e, s);
        }
      }, null, null, 4, 0, null, 8, [], 55, [], "call"]
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback<,zone,next",
      callback$0: function() {
        return this.callback.call$0();
      },
      callback$1: function(arg0) {
        return this.callback.call$1(arg0);
      }
    },
    Stream: {
      "^": "Object;",
      get$isBroadcast: function() {
        return false;
      },
      fold$2: function(_, initialValue, combine) {
        var t1, result;
        t1 = {};
        result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = [null];
        t1._captured_value_0 = initialValue;
        t1._captured_subscription_1 = null;
        t1._captured_subscription_1 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_fold_closure(t1, this, combine, result), true, new P.Stream_fold_closure0(t1, result), new P.Stream_fold_closure1(result));
        return result;
      },
      contains$1: function(_, needle) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [P.bool];
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
        return future;
      },
      forEach$1: function(_, action) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [null];
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [P.$int];
        t1._captured_count_0 = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      },
      get$isEmpty: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [P.bool];
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
        return future;
      },
      get$first: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
        t1._captured_subscription_0 = null;
        t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
        return future;
      },
      get$last: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, null);
        future.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
        t1._captured_result_0 = null;
        t1._captured_foundResult_1 = false;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
        return future;
      },
      timeout$2$onTimeout: function(timeLimit, onTimeout) {
        var t1, t2, t3, controller;
        t1 = {};
        t1._captured_onTimeout_0 = onTimeout;
        t1._captured_controller_1 = null;
        t1._captured_subscription_2 = null;
        t1._captured_timer_3 = null;
        t1._captured_zone_4 = null;
        t1._captured_timeout_5 = null;
        t2 = new P.Stream_timeout_onListen(t1, this, timeLimit, new P.Stream_timeout_onData(t1, this, timeLimit), new P.Stream_timeout_onError(t1, this, timeLimit), new P.Stream_timeout_onDone(t1));
        t3 = new P.Stream_timeout_onCancel(t1);
        if (this.get$isBroadcast()) {
          controller = new P._SyncBroadcastStreamController(t2, t3, 0, null, null, null, null);
          controller.$builtinTypeInfo = [null];
          controller._async$_previous = controller;
          controller._async$_next = controller;
        } else {
          controller = new P._SyncStreamController(t2, new P.Stream_timeout_closure(t1), new P.Stream_timeout_closure0(t1, timeLimit), t3, null, 0, null);
          controller.$builtinTypeInfo = [null];
        }
        t1._captured_controller_1 = controller;
        return controller.get$stream(controller);
      }
    },
    Stream_Stream$fromFuture_closure: {
      "^": "Closure:7;_captured_controller_0",
      call$1: [function(value) {
        var t1 = this._captured_controller_0;
        t1._async$_add$1(value);
        t1._closeUnchecked$0();
      }, null, null, 2, 0, null, 26, [], "call"]
    },
    Stream_Stream$fromFuture_closure0: {
      "^": "Closure:14;_captured_controller_1",
      call$2: [function(error, stackTrace) {
        var t1 = this._captured_controller_1;
        t1._addError$2(error, stackTrace);
        t1._closeUnchecked$0();
      }, null, null, 4, 0, null, 18, [], 19, [], "call"]
    },
    Stream_fold_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_combine_2,_captured_result_3",
      call$1: [function(element) {
        var t1 = this._async$_box_0;
        P._runUserCode(new P.Stream_fold__closure(t1, this._captured_combine_2, element), new P.Stream_fold__closure0(t1), P._cancelAndErrorClosure(t1._captured_subscription_1, this._captured_result_3));
      }, null, null, 2, 0, null, 56, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_fold__closure: {
      "^": "Closure:5;_async$_box_0,_captured_combine_4,_captured_element_5",
      call$0: function() {
        return this._captured_combine_4.call$2(this._async$_box_0._captured_value_0, this._captured_element_5);
      }
    },
    Stream_fold__closure0: {
      "^": "Closure:7;_async$_box_0",
      call$1: function(newValue) {
        this._async$_box_0._captured_value_0 = newValue;
      }
    },
    Stream_fold_closure1: {
      "^": "Closure:14;_captured_result_6",
      call$2: [function(e, st) {
        this._captured_result_6._completeError$2(e, st);
      }, null, null, 4, 0, null, 8, [], 57, [], "call"]
    },
    Stream_fold_closure0: {
      "^": "Closure:5;_async$_box_0,_captured_result_7",
      call$0: [function() {
        this._captured_result_7._complete$1(this._async$_box_0._captured_value_0);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_contains_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_needle_2,_captured_future_3",
      call$1: [function(element) {
        var t1, t2;
        t1 = this._async$_box_0;
        t2 = this._captured_future_3;
        P._runUserCode(new P.Stream_contains__closure(this._captured_needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1._captured_subscription_0, t2));
      }, null, null, 2, 0, null, 56, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_contains__closure: {
      "^": "Closure:5;_captured_needle_4,_captured_element_5",
      call$0: function() {
        return J.$eq(this._captured_element_5, this._captured_needle_4);
      }
    },
    Stream_contains__closure0: {
      "^": "Closure:25;_async$_box_0,_captured_future_6",
      call$1: function(isMatch) {
        if (isMatch)
          P._cancelAndValue(this._async$_box_0._captured_subscription_0, this._captured_future_6, true);
      }
    },
    Stream_contains_closure0: {
      "^": "Closure:5;_captured_future_7",
      call$0: [function() {
        this._captured_future_7._complete$1(false);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_forEach_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_action_2,_captured_future_3",
      call$1: [function(element) {
        P._runUserCode(new P.Stream_forEach__closure(this._captured_action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._async$_box_0._captured_subscription_0, this._captured_future_3));
      }, null, null, 2, 0, null, 56, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_forEach__closure: {
      "^": "Closure:5;_captured_action_4,_captured_element_5",
      call$0: function() {
        return this._captured_action_4.call$1(this._captured_element_5);
      }
    },
    Stream_forEach__closure0: {
      "^": "Closure:7;",
      call$1: function(_) {
      }
    },
    Stream_forEach_closure0: {
      "^": "Closure:5;_captured_future_6",
      call$0: [function() {
        this._captured_future_6._complete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_length_closure: {
      "^": "Closure:7;_async$_box_0",
      call$1: [function(_) {
        ++this._async$_box_0._captured_count_0;
      }, null, null, 2, 0, null, 42, [], "call"]
    },
    Stream_length_closure0: {
      "^": "Closure:5;_async$_box_0,_captured_future_1",
      call$0: [function() {
        this._captured_future_1._complete$1(this._async$_box_0._captured_count_0);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_isEmpty_closure: {
      "^": "Closure:7;_async$_box_0,_captured_future_1",
      call$1: [function(_) {
        P._cancelAndValue(this._async$_box_0._captured_subscription_0, this._captured_future_1, false);
      }, null, null, 2, 0, null, 42, [], "call"]
    },
    Stream_isEmpty_closure0: {
      "^": "Closure:5;_captured_future_2",
      call$0: [function() {
        this._captured_future_2._complete$1(true);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_first_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_future_2",
      call$1: [function(value) {
        P._cancelAndValue(this._async$_box_0._captured_subscription_0, this._captured_future_2, value);
      }, null, null, 2, 0, null, 26, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_first_closure0: {
      "^": "Closure:5;_captured_future_3",
      call$0: [function() {
        var e, s, t1, exception;
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._captured_future_3, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Stream_last_closure: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1",
      call$1: [function(value) {
        var t1 = this._async$_box_0;
        t1._captured_foundResult_1 = true;
        t1._captured_result_0 = value;
      }, null, null, 2, 0, null, 26, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_last_closure0: {
      "^": "Closure:5;_async$_box_0,_captured_future_2",
      call$0: [function() {
        var e, s, t1, exception;
        t1 = this._async$_box_0;
        if (t1._captured_foundResult_1) {
          this._captured_future_2._complete$1(t1._captured_result_0);
          return;
        }
        try {
          t1 = H.IterableElementError_noElement();
          throw H.wrapException(t1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P._completeWithErrorCallback(this._captured_future_2, e, s);
        }
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onData: {
      "^": "Closure;_async$_box_0,_async$_captured_this_1,_captured_timeLimit_2",
      call$1: [function($event) {
        var t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        t1._captured_controller_1.add$1(0, $event);
        t1._captured_timer_3 = t1._captured_zone_4.createTimer$2(this._captured_timeLimit_2, t1._captured_timeout_5);
      }, null, null, 2, 0, null, 58, [], "call"],
      $signature: function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this._async$_captured_this_1, "Stream");
      }
    },
    Stream_timeout_onError: {
      "^": "Closure:32;_async$_box_0,_async$_captured_this_3,_captured_timeLimit_4",
      call$2: [function(error, stackTrace) {
        var t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        t1._captured_controller_1._addError$2(error, stackTrace);
        t1._captured_timer_3 = t1._captured_zone_4.createTimer$2(this._captured_timeLimit_4, t1._captured_timeout_5);
      }, null, null, 4, 0, null, 18, [], 19, [], "call"]
    },
    Stream_timeout_onDone: {
      "^": "Closure:6;_async$_box_0",
      call$0: [function() {
        var t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        t1._captured_controller_1.close$0(0);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onListen: {
      "^": "Closure:6;_async$_box_0,_captured_this_5,_captured_timeLimit_6,_captured_onData_7,_captured_onError_8,_captured_onDone_9",
      call$0: function() {
        var zone, t1, t2, wrapper;
        zone = $.Zone__current;
        t1 = this._async$_box_0;
        t1._captured_zone_4 = zone;
        t2 = t1._captured_onTimeout_0;
        if (t2 == null)
          t1._captured_timeout_5 = new P.Stream_timeout_onListen_closure(t1, this._captured_timeLimit_6);
        else {
          t1._captured_onTimeout_0 = zone.registerUnaryCallback$1(t2);
          wrapper = new P._ControllerEventSinkWrapper(null);
          wrapper.$builtinTypeInfo = [null];
          t1._captured_timeout_5 = new P.Stream_timeout_onListen_closure0(t1, wrapper);
        }
        t1._captured_subscription_2 = this._captured_this_5.listen$3$onDone$onError(this._captured_onData_7, this._captured_onDone_9, this._captured_onError_8);
        t1._captured_timer_3 = t1._captured_zone_4.createTimer$2(this._captured_timeLimit_6, t1._captured_timeout_5);
      }
    },
    Stream_timeout_onListen_closure: {
      "^": "Closure:5;_async$_box_0,_captured_timeLimit_10",
      call$0: [function() {
        this._async$_box_0._captured_controller_1.addError$2(new P.TimeoutException("No stream event", this._captured_timeLimit_10), null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onListen_closure0: {
      "^": "Closure:5;_async$_box_0,_captured_wrapper_11",
      call$0: [function() {
        var t1, t2;
        t1 = this._captured_wrapper_11;
        t2 = this._async$_box_0;
        t1._async$_sink = t2._captured_controller_1;
        t2._captured_zone_4.runUnaryGuarded$2(t2._captured_onTimeout_0, t1);
        t1._async$_sink = null;
      }, null, null, 0, 0, null, "call"]
    },
    Stream_timeout_onCancel: {
      "^": "Closure:22;_async$_box_0",
      call$0: function() {
        var t1, result;
        t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        result = t1._captured_subscription_2.cancel$0();
        t1._captured_subscription_2 = null;
        return result;
      }
    },
    Stream_timeout_closure: {
      "^": "Closure:5;_async$_box_0",
      call$0: function() {
        var t1 = this._async$_box_0;
        t1._captured_timer_3.cancel$0();
        t1._captured_subscription_2.pause$0(0);
      }
    },
    Stream_timeout_closure0: {
      "^": "Closure:5;_async$_box_0,_captured_timeLimit_12",
      call$0: function() {
        var t1 = this._async$_box_0;
        t1._captured_subscription_2.resume$0();
        t1._captured_timer_3 = t1._captured_zone_4.createTimer$2(this._captured_timeLimit_12, t1._captured_timeout_5);
      }
    },
    StreamSubscription: {
      "^": "Object;"
    },
    _ControllerEventSinkWrapper: {
      "^": "Object;_async$_sink",
      add$1: function(_, data) {
        this._async$_sink.add$1(0, data);
      },
      close$0: function(_) {
        this._async$_sink.close$0(0);
      }
    },
    _StreamController: {
      "^": "Object;_state?",
      get$stream: function(_) {
        var t1 = new P._ControllerStream(this);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      get$isClosed: function() {
        return (this._state & 4) !== 0;
      },
      get$isPaused: function() {
        var t1 = this._state;
        return (t1 & 1) !== 0 ? (this.get$_subscription()._state & 4) !== 0 : (t1 & 2) === 0;
      },
      get$_pendingEvents: function() {
        if ((this._state & 8) === 0)
          return this._varData;
        return this._varData.get$varData();
      },
      _ensurePendingEvents$0: function() {
        var t1, state;
        if ((this._state & 8) === 0) {
          t1 = this._varData;
          if (t1 == null) {
            t1 = new P._StreamImplEvents(null, null, 0);
            this._varData = t1;
          }
          return t1;
        }
        state = this._varData;
        state.get$varData();
        return state.get$varData();
      },
      get$_subscription: function() {
        if ((this._state & 8) !== 0)
          return this._varData.get$varData();
        return this._varData;
      },
      _badEventState$0: function() {
        if ((this._state & 4) !== 0)
          return new P.StateError("Cannot add event after closing");
        return new P.StateError("Cannot add event while adding a stream");
      },
      get$done: function() {
        return this._ensureDoneFuture$0();
      },
      _ensureDoneFuture$0: function() {
        var t1 = this._doneFuture;
        if (t1 == null) {
          if ((this._state & 2) !== 0)
            t1 = $.get$Future__nullFuture();
          else {
            t1 = new P._Future(0, $.Zone__current, null);
            t1.$builtinTypeInfo = [null];
          }
          this._doneFuture = t1;
        }
        return t1;
      },
      add$1: function(_, value) {
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        this._async$_add$1(value);
      },
      addError$2: function(error, stackTrace) {
        var replacement;
        if (this._state >= 4)
          throw H.wrapException(this._badEventState$0());
        error = error != null ? error : new P.NullThrownError();
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          error = error != null ? error : new P.NullThrownError();
          stackTrace = replacement.stackTrace;
        }
        this._addError$2(error, stackTrace);
      },
      addError$1: function(error) {
        return this.addError$2(error, null);
      },
      close$0: function(_) {
        var t1 = this._state;
        if ((t1 & 4) !== 0)
          return this._ensureDoneFuture$0();
        if (t1 >= 4)
          throw H.wrapException(this._badEventState$0());
        this._closeUnchecked$0();
        return this._ensureDoneFuture$0();
      },
      _closeUnchecked$0: function() {
        var t1 = this._state |= 4;
        if ((t1 & 1) !== 0)
          this._sendDone$0();
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      },
      _async$_add$1: function(value) {
        var t1, t2;
        t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendData$1(value);
        else if ((t1 & 3) === 0) {
          t1 = this._ensurePendingEvents$0();
          t2 = new P._DelayedData(value, null);
          t2.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "_StreamController", 0)];
          t1.add$1(0, t2);
        }
      },
      _addError$2: function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 1) !== 0)
          this._sendError$2(error, stackTrace);
        else if ((t1 & 3) === 0)
          this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace, null));
      },
      _subscribe$4: function(onData, onError, onDone, cancelOnError) {
        var t1, subscription, pendingEvents, addState;
        if ((this._state & 3) !== 0)
          throw H.wrapException(new P.StateError("Stream has already been listened to."));
        t1 = $.Zone__current;
        subscription = new P._ControllerSubscription(this, null, null, null, t1, cancelOnError ? 1 : 0, null, null);
        subscription.$builtinTypeInfo = [null];
        subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, null);
        pendingEvents = this.get$_pendingEvents();
        t1 = this._state |= 1;
        if ((t1 & 8) !== 0) {
          addState = this._varData;
          addState.set$varData(subscription);
          addState.resume$0();
        } else
          this._varData = subscription;
        subscription._setPendingEvents$1(pendingEvents);
        subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
        return subscription;
      },
      _recordCancel$1: function(subscription) {
        var result, e, s, exception, t1, result0;
        result = null;
        if ((this._state & 8) !== 0)
          result = this._varData.cancel$0();
        this._varData = null;
        this._state = this._state & 4294967286 | 2;
        if (this.get$_onCancel() != null)
          if (result == null)
            try {
              result = this._onCancel$0();
            } catch (exception) {
              t1 = H.unwrapException(exception);
              e = t1;
              s = H.getTraceFromException(exception);
              result0 = new P._Future(0, $.Zone__current, null);
              result0.$builtinTypeInfo = [null];
              result0._asyncCompleteError$2(e, s);
              result = result0;
            }
          else
            result = result.whenComplete$1(this.get$_onCancel());
        t1 = new P._StreamController__recordCancel_complete(this);
        if (result != null)
          result = result.whenComplete$1(t1);
        else
          t1.call$0();
        return result;
      },
      _recordPause$1: function(subscription) {
        if ((this._state & 8) !== 0)
          C.JSNull_methods.pause$0(this._varData);
        P._runGuarded(this.get$_onPause());
      },
      _recordResume$1: function(subscription) {
        if ((this._state & 8) !== 0)
          this._varData.resume$0();
        P._runGuarded(this.get$_onResume());
      }
    },
    _StreamController__subscribe_closure: {
      "^": "Closure:5;_async$_captured_this_0",
      call$0: function() {
        P._runGuarded(this._async$_captured_this_0.get$_onListen());
      }
    },
    _StreamController__recordCancel_complete: {
      "^": "Closure:6;_async$_captured_this_0",
      call$0: [function() {
        var t1 = this._async$_captured_this_0._doneFuture;
        if (t1 != null && t1._state === 0)
          t1._asyncComplete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    _SyncStreamControllerDispatch: {
      "^": "Object;",
      _sendData$1: function(data) {
        this.get$_subscription()._async$_add$1(data);
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addError$2(error, stackTrace);
      },
      _sendDone$0: function() {
        this.get$_subscription()._async$_close$0();
      }
    },
    _AsyncStreamControllerDispatch: {
      "^": "Object;",
      _sendData$1: function(data) {
        var t1, t2;
        t1 = this.get$_subscription();
        t2 = new P._DelayedData(data, null);
        t2.$builtinTypeInfo = [null];
        t1._addPending$1(t2);
      },
      _sendError$2: function(error, stackTrace) {
        this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _sendDone$0: function() {
        this.get$_subscription()._addPending$1(C.C__DelayedDone);
      }
    },
    _AsyncStreamController: {
      "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
      _onCancel$0: function() {
        return this._onCancel.call$0();
      }
    },
    _StreamController__AsyncStreamControllerDispatch: {
      "^": "_StreamController+_AsyncStreamControllerDispatch;"
    },
    _SyncStreamController: {
      "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
      _onCancel$0: function() {
        return this._onCancel.call$0();
      }
    },
    _StreamController__SyncStreamControllerDispatch: {
      "^": "_StreamController+_SyncStreamControllerDispatch;"
    },
    _NoCallbacks: {
      "^": "Object;",
      get$_onListen: function() {
        return;
      },
      get$_onPause: function() {
        return;
      },
      get$_onResume: function() {
        return;
      },
      get$_onCancel: function() {
        return;
      },
      _onCancel$0: function() {
        return this.get$_onCancel().call$0();
      }
    },
    _NoCallbackAsyncStreamController: {
      "^": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
    },
    _StreamController__AsyncStreamControllerDispatch0: {
      "^": "_StreamController+_AsyncStreamControllerDispatch;",
      $as_StreamController: functionThatReturnsNull
    },
    _NoCallbackSyncStreamController: {
      "^": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
    },
    _StreamController__SyncStreamControllerDispatch0: {
      "^": "_StreamController+_SyncStreamControllerDispatch;",
      $as_StreamController: functionThatReturnsNull
    },
    _ControllerStream: {
      "^": "_StreamImpl;_async$_controller",
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return this._async$_controller._subscribe$4(onData, onError, onDone, cancelOnError);
      },
      get$hashCode: function(_) {
        return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof P._ControllerStream))
          return false;
        return other._async$_controller === this._async$_controller;
      }
    },
    _ControllerSubscription: {
      "^": "_BufferingStreamSubscription;_async$_controller<,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
      _onCancel$0: function() {
        return this.get$_async$_controller()._recordCancel$1(this);
      },
      _onPause$0: [function() {
        this.get$_async$_controller()._recordPause$1(this);
      }, "call$0", "get$_onPause", 0, 0, 6],
      _onResume$0: [function() {
        this.get$_async$_controller()._recordResume$1(this);
      }, "call$0", "get$_onResume", 0, 0, 6]
    },
    _EventSink: {
      "^": "Object;"
    },
    _BufferingStreamSubscription: {
      "^": "Object;_onData,_onError,_onDone,_zone,_state?,_cancelFuture,_pending",
      _setPendingEvents$1: function(pendingEvents) {
        if (pendingEvents == null)
          return;
        this._pending = pendingEvents;
        if (pendingEvents.lastPendingEvent != null) {
          this._state = (this._state | 64) >>> 0;
          pendingEvents.schedule$1(this);
        }
      },
      onData$1: function(handleData) {
        this._onData = this._zone.registerUnaryCallback$1(handleData);
      },
      onError$1: function(_, handleError) {
        if (handleError == null)
          handleError = P._nullErrorHandler$closure();
        this._onError = P._registerErrorHandler(handleError, this._zone);
      },
      onDone$1: function(handleDone) {
        if (handleDone == null)
          handleDone = P._nullDoneHandler$closure();
        this._onDone = this._zone.registerCallback$1(handleDone);
      },
      pause$1: function(_, resumeSignal) {
        var t1, t2, t3;
        t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t2 = (t1 + 128 | 4) >>> 0;
        this._state = t2;
        if (t1 < 128 && this._pending != null) {
          t3 = this._pending;
          if (t3._state === 1)
            t3._state = 3;
        }
        if ((t1 & 4) === 0 && (t2 & 32) === 0)
          this._guardCallback$1(this.get$_onPause());
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 >= 128) {
          t1 -= 128;
          this._state = t1;
          if (t1 < 128)
            if ((t1 & 64) !== 0 && this._pending.lastPendingEvent != null)
              this._pending.schedule$1(this);
            else {
              t1 = (t1 & 4294967291) >>> 0;
              this._state = t1;
              if ((t1 & 32) === 0)
                this._guardCallback$1(this.get$_onResume());
            }
        }
      },
      cancel$0: function() {
        var t1 = (this._state & 4294967279) >>> 0;
        this._state = t1;
        if ((t1 & 8) !== 0)
          return this._cancelFuture;
        this._cancel$0();
        return this._cancelFuture;
      },
      asFuture$1: function(futureValue) {
        var result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)];
        this._onDone = new P._BufferingStreamSubscription_asFuture_closure(futureValue, result);
        this._onError = new P._BufferingStreamSubscription_asFuture_closure0(this, result);
        return result;
      },
      get$isPaused: function() {
        return this._state >= 128;
      },
      _cancel$0: function() {
        var t1, t2;
        t1 = (this._state | 8) >>> 0;
        this._state = t1;
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          if (t2._state === 1)
            t2._state = 3;
        }
        if ((t1 & 32) === 0)
          this._pending = null;
        this._cancelFuture = this._onCancel$0();
      },
      _async$_add$1: function(data) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendData$1(data);
        else {
          t1 = new P._DelayedData(data, null);
          t1.$builtinTypeInfo = [null];
          this._addPending$1(t1);
        }
      },
      _addError$2: function(error, stackTrace) {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        if (t1 < 32)
          this._sendError$2(error, stackTrace);
        else
          this._addPending$1(new P._DelayedError(error, stackTrace, null));
      },
      _async$_close$0: function() {
        var t1 = this._state;
        if ((t1 & 8) !== 0)
          return;
        t1 = (t1 | 2) >>> 0;
        this._state = t1;
        if (t1 < 32)
          this._sendDone$0();
        else
          this._addPending$1(C.C__DelayedDone);
      },
      _onPause$0: [function() {
      }, "call$0", "get$_onPause", 0, 0, 6],
      _onResume$0: [function() {
      }, "call$0", "get$_onResume", 0, 0, 6],
      _onCancel$0: function() {
        return;
      },
      _addPending$1: function($event) {
        var pending, t1;
        pending = this._pending;
        if (pending == null) {
          pending = new P._StreamImplEvents(null, null, 0);
          this._pending = pending;
        }
        pending.add$1(0, $event);
        t1 = this._state;
        if ((t1 & 64) === 0) {
          t1 = (t1 | 64) >>> 0;
          this._state = t1;
          if (t1 < 128)
            this._pending.schedule$1(this);
        }
      },
      _sendData$1: function(data) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        this._zone.runUnaryGuarded$2(this._onData, data);
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _sendError$2: function(error, stackTrace) {
        var t1, t2;
        t1 = this._state;
        t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
        if ((t1 & 1) !== 0) {
          this._state = (t1 | 16) >>> 0;
          this._cancel$0();
          t1 = this._cancelFuture;
          if (!!J.getInterceptor(t1).$isFuture)
            t1.whenComplete$1(t2);
          else
            t2.call$0();
        } else {
          t2.call$0();
          this._checkState$1((t1 & 4) !== 0);
        }
      },
      _sendDone$0: function() {
        var t1, t2;
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
        this._cancel$0();
        this._state = (this._state | 16) >>> 0;
        t2 = this._cancelFuture;
        if (!!J.getInterceptor(t2).$isFuture)
          t2.whenComplete$1(t1);
        else
          t1.call$0();
      },
      _guardCallback$1: function(callback) {
        var t1 = this._state;
        this._state = (t1 | 32) >>> 0;
        callback.call$0();
        this._state = (this._state & 4294967263) >>> 0;
        this._checkState$1((t1 & 4) !== 0);
      },
      _checkState$1: function(wasInputPaused) {
        var t1, t2, isInputPaused;
        t1 = this._state;
        if ((t1 & 64) !== 0 && this._pending.lastPendingEvent == null) {
          t1 = (t1 & 4294967231) >>> 0;
          this._state = t1;
          if ((t1 & 4) !== 0)
            if (t1 < 128) {
              t2 = this._pending;
              t2 = t2 == null || t2.lastPendingEvent == null;
            } else
              t2 = false;
          else
            t2 = false;
          if (t2) {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
          }
        }
        for (; true; wasInputPaused = isInputPaused) {
          if ((t1 & 8) !== 0) {
            this._pending = null;
            return;
          }
          isInputPaused = (t1 & 4) !== 0;
          if (wasInputPaused === isInputPaused)
            break;
          this._state = (t1 ^ 32) >>> 0;
          if (isInputPaused)
            this._onPause$0();
          else
            this._onResume$0();
          t1 = (this._state & 4294967263) >>> 0;
          this._state = t1;
        }
        if ((t1 & 64) !== 0 && t1 < 128)
          this._pending.schedule$1(this);
      },
      _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
        var t1 = this._zone;
        this._onData = t1.registerUnaryCallback$1(onData);
        this._onError = P._registerErrorHandler(onError == null ? P._nullErrorHandler$closure() : onError, t1);
        this._onDone = t1.registerCallback$1(onDone == null ? P._nullDoneHandler$closure() : onDone);
      },
      $is_EventSink: 1,
      $isStreamSubscription: 1,
      static: {_BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
          var t1 = $.Zone__current;
          t1 = new P._BufferingStreamSubscription(null, null, null, t1, cancelOnError ? 1 : 0, null, null);
          t1.$builtinTypeInfo = [$T];
          t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
          return t1;
        }}
    },
    _BufferingStreamSubscription_asFuture_closure: {
      "^": "Closure:5;_captured_futureValue_0,_async$_captured_result_1",
      call$0: [function() {
        this._async$_captured_result_1._complete$1(this._captured_futureValue_0);
      }, null, null, 0, 0, null, "call"]
    },
    _BufferingStreamSubscription_asFuture_closure0: {
      "^": "Closure:14;_captured_this_2,_captured_result_3",
      call$2: [function(error, stackTrace) {
        this._captured_this_2.cancel$0();
        this._captured_result_3._completeError$2(error, stackTrace);
      }, null, null, 4, 0, null, 18, [], 19, [], "call"]
    },
    _BufferingStreamSubscription__sendError_sendError: {
      "^": "Closure:6;_async$_captured_this_0,_captured_error_1,_captured_stackTrace_2",
      call$0: [function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = this._async$_captured_this_0;
        t2 = t1._state;
        if ((t2 & 8) !== 0 && (t2 & 16) === 0)
          return;
        t1._state = (t2 | 32) >>> 0;
        t2 = t1._onError;
        t3 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
        t4 = t1._zone;
        t5 = this._captured_error_1;
        t6 = t1._onError;
        if (t3)
          t4.runBinaryGuarded$3(t6, t5, this._captured_stackTrace_2);
        else
          t4.runUnaryGuarded$2(t6, t5);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _BufferingStreamSubscription__sendDone_sendDone: {
      "^": "Closure:6;_async$_captured_this_0",
      call$0: [function() {
        var t1, t2;
        t1 = this._async$_captured_this_0;
        t2 = t1._state;
        if ((t2 & 16) === 0)
          return;
        t1._state = (t2 | 42) >>> 0;
        t1._zone.runGuarded$1(t1._onDone);
        t1._state = (t1._state & 4294967263) >>> 0;
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImpl: {
      "^": "Stream;",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
        return P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
      }
    },
    _DelayedEvent: {
      "^": "Object;next@"
    },
    _DelayedData: {
      "^": "_DelayedEvent;value>,next",
      perform$1: function(dispatch) {
        dispatch._sendData$1(this.value);
      }
    },
    _DelayedError: {
      "^": "_DelayedEvent;error>,stackTrace<,next",
      perform$1: function(dispatch) {
        dispatch._sendError$2(this.error, this.stackTrace);
      }
    },
    _DelayedDone: {
      "^": "Object;",
      perform$1: function(dispatch) {
        dispatch._sendDone$0();
      },
      get$next: function() {
        return;
      },
      set$next: function(_) {
        throw H.wrapException(new P.StateError("No events after a done."));
      }
    },
    _PendingEvents: {
      "^": "Object;_state?",
      schedule$1: function(dispatch) {
        var t1 = this._state;
        if (t1 === 1)
          return;
        if (t1 >= 1) {
          this._state = 1;
          return;
        }
        P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
        this._state = 1;
      }
    },
    _PendingEvents_schedule_closure: {
      "^": "Closure:5;_async$_captured_this_0,_captured_dispatch_1",
      call$0: [function() {
        var t1, oldState;
        t1 = this._async$_captured_this_0;
        oldState = t1._state;
        t1._state = 0;
        if (oldState === 3)
          return;
        t1.handleNext$1(this._captured_dispatch_1);
      }, null, null, 0, 0, null, "call"]
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
      get$isEmpty: function(_) {
        return this.lastPendingEvent == null;
      },
      add$1: function(_, $event) {
        var t1 = this.lastPendingEvent;
        if (t1 == null) {
          this.lastPendingEvent = $event;
          this.firstPendingEvent = $event;
        } else {
          t1.set$next($event);
          this.lastPendingEvent = $event;
        }
      },
      handleNext$1: function(dispatch) {
        var $event, t1;
        $event = this.firstPendingEvent;
        t1 = $event.get$next();
        this.firstPendingEvent = t1;
        if (t1 == null)
          this.lastPendingEvent = null;
        $event.perform$1(dispatch);
      }
    },
    _DoneStreamSubscription: {
      "^": "Object;_zone,_state?,_onDone",
      get$isPaused: function() {
        return this._state >= 4;
      },
      _schedule$0: function() {
        if ((this._state & 2) !== 0)
          return;
        this._zone.scheduleMicrotask$1(this.get$_sendDone());
        this._state = (this._state | 2) >>> 0;
      },
      onData$1: function(handleData) {
      },
      onError$1: function(_, handleError) {
      },
      onDone$1: function(handleDone) {
        this._onDone = handleDone;
      },
      pause$1: function(_, resumeSignal) {
        this._state += 4;
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      resume$0: function() {
        var t1 = this._state;
        if (t1 >= 4) {
          t1 -= 4;
          this._state = t1;
          if (t1 < 4 && (t1 & 1) === 0)
            this._schedule$0();
        }
      },
      cancel$0: function() {
        return;
      },
      asFuture$1: function(futureValue) {
        var result = new P._Future(0, $.Zone__current, null);
        result.$builtinTypeInfo = [null];
        this._onDone = new P._DoneStreamSubscription_asFuture_closure(result);
        return result;
      },
      _sendDone$0: [function() {
        var t1 = (this._state & 4294967293) >>> 0;
        this._state = t1;
        if (t1 >= 4)
          return;
        this._state = (t1 | 1) >>> 0;
        t1 = this._onDone;
        if (t1 != null)
          this._zone.runGuarded$1(t1);
      }, "call$0", "get$_sendDone", 0, 0, 6]
    },
    _DoneStreamSubscription_asFuture_closure: {
      "^": "Closure:5;_async$_captured_result_0",
      call$0: [function() {
        this._async$_captured_result_0._completeWithValue$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    _AsBroadcastStream: {
      "^": "Stream;_async$_source,_onListenHandler,_onCancelHandler,_zone,_async$_controller,_subscription",
      get$isBroadcast: function() {
        return true;
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1, t2, t3;
        t1 = this._async$_controller;
        if (t1 == null || (t1._state & 4) !== 0) {
          t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
          t1.$builtinTypeInfo = this.$builtinTypeInfo;
          t1._schedule$0();
          return t1;
        }
        if (this._subscription == null) {
          t1 = t1.get$add(t1);
          t2 = this._async$_controller.get$addError();
          t3 = this._async$_controller;
          this._subscription = this._async$_source.listen$3$onDone$onError(t1, t3.get$close(t3), t2);
        }
        return this._async$_controller._subscribe$4(onData, onError, onDone, true === cancelOnError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      _onCancel$0: [function() {
        var t1, shutdown, t2;
        t1 = this._async$_controller;
        shutdown = t1 == null || (t1._state & 4) !== 0;
        t1 = this._onCancelHandler;
        if (t1 != null) {
          t2 = new P._BroadcastSubscriptionWrapper(this);
          t2.$builtinTypeInfo = [null];
          this._zone.runUnary$2(t1, t2);
        }
        if (shutdown) {
          t1 = this._subscription;
          if (t1 != null) {
            t1.cancel$0();
            this._subscription = null;
          }
        }
      }, "call$0", "get$_onCancel", 0, 0, 6],
      _onListen$0: [function() {
        var t1, t2;
        t1 = this._onListenHandler;
        if (t1 != null) {
          t2 = new P._BroadcastSubscriptionWrapper(this);
          t2.$builtinTypeInfo = [null];
          this._zone.runUnary$2(t1, t2);
        }
      }, "call$0", "get$_onListen", 0, 0, 6],
      _cancelSubscription$0: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        this._subscription = null;
        this._async$_controller = null;
        t1.cancel$0();
      },
      _pauseSubscription$1: function(resumeSignal) {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.pause$1(0, resumeSignal);
      },
      _resumeSubscription$0: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return;
        t1.resume$0();
      },
      get$_isSubscriptionPaused: function() {
        var t1 = this._subscription;
        if (t1 == null)
          return false;
        return t1.get$isPaused();
      }
    },
    _BroadcastSubscriptionWrapper: {
      "^": "Object;_async$_stream",
      onData$1: function(handleData) {
        throw H.wrapException(new P.UnsupportedError("Cannot change handlers of asBroadcastStream source subscription."));
      },
      onError$1: function(_, handleError) {
        throw H.wrapException(new P.UnsupportedError("Cannot change handlers of asBroadcastStream source subscription."));
      },
      onDone$1: function(handleDone) {
        throw H.wrapException(new P.UnsupportedError("Cannot change handlers of asBroadcastStream source subscription."));
      },
      pause$1: function(_, resumeSignal) {
        this._async$_stream._pauseSubscription$1(resumeSignal);
      },
      resume$0: function() {
        this._async$_stream._resumeSubscription$0();
      },
      cancel$0: function() {
        this._async$_stream._cancelSubscription$0();
        return;
      },
      get$isPaused: function() {
        return this._async$_stream.get$_isSubscriptionPaused();
      },
      asFuture$1: function(futureValue) {
        throw H.wrapException(new P.UnsupportedError("Cannot change handlers of asBroadcastStream source subscription."));
      }
    },
    _StreamIteratorImpl: {
      "^": "Object;_subscription,_async$_current,_futureOrPrefetch,_state?",
      _clear$0: function() {
        this._subscription = null;
        this._futureOrPrefetch = null;
        this._async$_current = null;
        this._state = 1;
      },
      cancel$0: function() {
        var subscription, hasNext;
        subscription = this._subscription;
        if (subscription == null)
          return;
        if (this._state === 2) {
          hasNext = this._futureOrPrefetch;
          this._clear$0();
          hasNext._complete$1(false);
        } else
          this._clear$0();
        return subscription.cancel$0();
      },
      _onData$1: [function(data) {
        var hasNext;
        if (this._state === 2) {
          this._async$_current = data;
          hasNext = this._futureOrPrefetch;
          this._futureOrPrefetch = null;
          this._state = 0;
          hasNext._complete$1(true);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = data;
        this._state = 3;
      }, "call$1", "get$_onData", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [T]};
        }, this.$receiver, "_StreamIteratorImpl");
      }, 43, []],
      _onError$2: [function(error, stackTrace) {
        var hasNext;
        if (this._state === 2) {
          hasNext = this._futureOrPrefetch;
          this._clear$0();
          hasNext._completeError$2(error, stackTrace);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = new P.AsyncError(error, stackTrace);
        this._state = 4;
      }, function(error) {
        return this._onError$2(error, null);
      }, "_onError$1", "call$2", "call$1", "get$_onError", 2, 2, 21, 25, 18, [], 19, []],
      _onDone$0: [function() {
        if (this._state === 2) {
          var hasNext = this._futureOrPrefetch;
          this._clear$0();
          hasNext._complete$1(false);
          return;
        }
        this._subscription.pause$0(0);
        this._futureOrPrefetch = null;
        this._state = 5;
      }, "call$0", "get$_onDone", 0, 0, 6]
    },
    _cancelAndError_closure: {
      "^": "Closure:5;_captured_future_0,_captured_error_1,_captured_stackTrace_2",
      call$0: [function() {
        return this._captured_future_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
      }, null, null, 0, 0, null, "call"]
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:10;_captured_subscription_0,_captured_future_1",
      call$2: function(error, stackTrace) {
        return P._cancelAndError(this._captured_subscription_0, this._captured_future_1, error, stackTrace);
      }
    },
    _cancelAndValue_closure: {
      "^": "Closure:5;_captured_future_0,_captured_value_1",
      call$0: [function() {
        return this._captured_future_0._complete$1(this._captured_value_1);
      }, null, null, 0, 0, null, "call"]
    },
    Timer: {
      "^": "Object;"
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _ZoneFunction: {
      "^": "Object;zone,$function"
    },
    ZoneSpecification: {
      "^": "Object;"
    },
    _ZoneSpecification: {
      "^": "Object;handleUncaughtError,run<,runUnary,runBinary,registerCallback,registerUnaryCallback,registerBinaryCallback,errorCallback,scheduleMicrotask,createTimer,createPeriodicTimer,print,fork",
      handleUncaughtError$3: function(arg0, arg1, arg2) {
        return this.handleUncaughtError.call$3(arg0, arg1, arg2);
      },
      runUnary$2: function(arg0, arg1) {
        return this.runUnary.call$2(arg0, arg1);
      },
      runBinary$3: function(arg0, arg1, arg2) {
        return this.runBinary.call$3(arg0, arg1, arg2);
      }
    },
    ZoneDelegate: {
      "^": "Object;"
    },
    Zone: {
      "^": "Object;"
    },
    _ZoneDelegate: {
      "^": "Object;_delegationTarget",
      handleUncaughtError$3: function(zone, error, stackTrace) {
        var implementation, implZone;
        implementation = this._delegationTarget.get$_handleUncaughtError();
        implZone = implementation.zone;
        return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, error, stackTrace);
      }
    },
    _Zone: {
      "^": "Object;",
      inSameErrorZone$1: function(otherZone) {
        return this === otherZone || this.get$errorZone() === otherZone.get$errorZone();
      }
    },
    _CustomZone: {
      "^": "_Zone;_runUnary<,_run<,_runBinary<,_registerCallback<,_registerUnaryCallback<,_registerBinaryCallback<,_errorCallback<,_scheduleMicrotask<,_createTimer<,_createPeriodicTimer<,_print<,_fork<,_handleUncaughtError<,_delegateCache,parent>,_async$_map<",
      get$_delegate: function() {
        var t1 = this._delegateCache;
        if (t1 != null)
          return t1;
        t1 = new P._ZoneDelegate(this);
        this._delegateCache = t1;
        return t1;
      },
      get$errorZone: function() {
        return this._handleUncaughtError.zone;
      },
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          t1 = this.run$1(f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return this.handleUncaughtError$2(e, s);
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          t1 = this.runUnary$2(f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return this.handleUncaughtError$2(e, s);
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          t1 = this.runBinary$3(f, arg1, arg2);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return this.handleUncaughtError$2(e, s);
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        var registered = this.registerCallback$1(f);
        if (runGuarded)
          return new P._CustomZone_bindCallback_closure(this, registered);
        else
          return new P._CustomZone_bindCallback_closure0(this, registered);
      },
      bindCallback$1: function(f) {
        return this.bindCallback$2$runGuarded(f, true);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        var registered = this.registerUnaryCallback$1(f);
        if (runGuarded)
          return new P._CustomZone_bindUnaryCallback_closure(this, registered);
        else
          return new P._CustomZone_bindUnaryCallback_closure0(this, registered);
      },
      bindUnaryCallback$1: function(f) {
        return this.bindUnaryCallback$2$runGuarded(f, true);
      },
      $index: function(_, key) {
        var t1, result, t2, value;
        t1 = this._async$_map;
        result = t1.$index(0, key);
        if (result != null || t1.containsKey$1(key))
          return result;
        t2 = this.parent;
        if (t2 != null) {
          value = t2.$index(0, key);
          if (value != null)
            t1.$indexSet(0, key, value);
          return value;
        }
        return;
      },
      handleUncaughtError$2: function(error, stackTrace) {
        var implementation, t1, parentDelegate;
        implementation = this._handleUncaughtError;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, error, stackTrace);
      },
      fork$2$specification$zoneValues: function(specification, zoneValues) {
        var implementation, t1, parentDelegate;
        implementation = this._fork;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, specification, zoneValues);
      },
      run$1: function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._run;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      },
      runUnary$2: function(f, arg) {
        var implementation, t1, parentDelegate;
        implementation = this._runUnary;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, f, arg);
      },
      runBinary$3: function(f, arg1, arg2) {
        var implementation, t1, parentDelegate;
        implementation = this._runBinary;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$6(t1, parentDelegate, this, f, arg1, arg2);
      },
      registerCallback$1: function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._registerCallback;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      },
      registerUnaryCallback$1: function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._registerUnaryCallback;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      },
      registerBinaryCallback$1: function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._registerBinaryCallback;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      },
      errorCallback$2: function(error, stackTrace) {
        var implementation, implementationZone, parentDelegate;
        implementation = this._errorCallback;
        implementationZone = implementation.zone;
        if (implementationZone === C.C__RootZone)
          return;
        parentDelegate = P._parentDelegate(implementationZone);
        return implementation.$function.call$5(implementationZone, parentDelegate, this, error, stackTrace);
      },
      scheduleMicrotask$1: function(f) {
        var implementation, t1, parentDelegate;
        implementation = this._scheduleMicrotask;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, f);
      },
      createTimer$2: function(duration, f) {
        var implementation, t1, parentDelegate;
        implementation = this._createTimer;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, duration, f);
      },
      createPeriodicTimer$2: function(duration, f) {
        var implementation, t1, parentDelegate;
        implementation = this._createPeriodicTimer;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$5(t1, parentDelegate, this, duration, f);
      },
      print$1: function(_, line) {
        var implementation, t1, parentDelegate;
        implementation = this._print;
        t1 = implementation.zone;
        parentDelegate = P._parentDelegate(t1);
        return implementation.$function.call$4(t1, parentDelegate, this, line);
      }
    },
    _CustomZone_bindCallback_closure: {
      "^": "Closure:5;_async$_captured_this_0,_captured_registered_1",
      call$0: [function() {
        return this._async$_captured_this_0.runGuarded$1(this._captured_registered_1);
      }, null, null, 0, 0, null, "call"]
    },
    _CustomZone_bindCallback_closure0: {
      "^": "Closure:5;_captured_this_2,_captured_registered_3",
      call$0: [function() {
        return this._captured_this_2.run$1(this._captured_registered_3);
      }, null, null, 0, 0, null, "call"]
    },
    _CustomZone_bindUnaryCallback_closure: {
      "^": "Closure:7;_async$_captured_this_0,_captured_registered_1",
      call$1: [function(arg) {
        return this._async$_captured_this_0.runUnaryGuarded$2(this._captured_registered_1, arg);
      }, null, null, 2, 0, null, 37, [], "call"]
    },
    _CustomZone_bindUnaryCallback_closure0: {
      "^": "Closure:7;_captured_this_2,_captured_registered_3",
      call$1: [function(arg) {
        return this._captured_this_2.runUnary$2(this._captured_registered_3, arg);
      }, null, null, 2, 0, null, 37, [], "call"]
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:5;_async$_captured_error_0,_captured_stackTrace_1",
      call$0: function() {
        var t1 = this._async$_captured_error_0;
        throw H.wrapException(new P._UncaughtAsyncError(t1, P._UncaughtAsyncError__getBestStackTrace(t1, this._captured_stackTrace_1)));
      }
    },
    _RootZone: {
      "^": "_Zone;",
      get$_run: function() {
        return C._ZoneFunction__RootZone__rootRun;
      },
      get$_runUnary: function() {
        return C._ZoneFunction__RootZone__rootRunUnary;
      },
      get$_runBinary: function() {
        return C._ZoneFunction__RootZone__rootRunBinary;
      },
      get$_registerCallback: function() {
        return C._ZoneFunction__RootZone__rootRegisterCallback;
      },
      get$_registerUnaryCallback: function() {
        return C._ZoneFunction_Eeh;
      },
      get$_registerBinaryCallback: function() {
        return C._ZoneFunction_7G2;
      },
      get$_errorCallback: function() {
        return C._ZoneFunction__RootZone__rootErrorCallback;
      },
      get$_scheduleMicrotask: function() {
        return C._ZoneFunction__RootZone__rootScheduleMicrotask;
      },
      get$_createTimer: function() {
        return C._ZoneFunction__RootZone__rootCreateTimer;
      },
      get$_createPeriodicTimer: function() {
        return C._ZoneFunction_3bB;
      },
      get$_print: function() {
        return C._ZoneFunction__RootZone__rootPrint;
      },
      get$_fork: function() {
        return C._ZoneFunction__RootZone__rootFork;
      },
      get$_handleUncaughtError: function() {
        return C._ZoneFunction_NMc;
      },
      get$parent: function(_) {
        return;
      },
      get$_async$_map: function() {
        return $.get$_RootZone__rootMap();
      },
      get$_delegate: function() {
        var t1 = $._RootZone__rootDelegate;
        if (t1 != null)
          return t1;
        t1 = new P._ZoneDelegate(this);
        $._RootZone__rootDelegate = t1;
        return t1;
      },
      get$errorZone: function() {
        return this;
      },
      runGuarded$1: function(f) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$0();
            return t1;
          }
          t1 = P._rootRun(null, null, this, f);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runUnaryGuarded$2: function(f, arg) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$1(arg);
            return t1;
          }
          t1 = P._rootRunUnary(null, null, this, f, arg);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      runBinaryGuarded$3: function(f, arg1, arg2) {
        var e, s, t1, exception;
        try {
          if (C.C__RootZone === $.Zone__current) {
            t1 = f.call$2(arg1, arg2);
            return t1;
          }
          t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          return P._rootHandleUncaughtError(null, null, this, e, s);
        }
      },
      bindCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindCallback_closure(this, f);
        else
          return new P._RootZone_bindCallback_closure0(this, f);
      },
      bindCallback$1: function(f) {
        return this.bindCallback$2$runGuarded(f, true);
      },
      bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
        if (runGuarded)
          return new P._RootZone_bindUnaryCallback_closure(this, f);
        else
          return new P._RootZone_bindUnaryCallback_closure0(this, f);
      },
      bindUnaryCallback$1: function(f) {
        return this.bindUnaryCallback$2$runGuarded(f, true);
      },
      $index: function(_, key) {
        return;
      },
      handleUncaughtError$2: function(error, stackTrace) {
        return P._rootHandleUncaughtError(null, null, this, error, stackTrace);
      },
      fork$2$specification$zoneValues: function(specification, zoneValues) {
        return P._rootFork(null, null, this, specification, zoneValues);
      },
      run$1: function(f) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f);
      },
      runUnary$2: function(f, arg) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg);
      },
      runBinary$3: function(f, arg1, arg2) {
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2);
      },
      registerCallback$1: function(f) {
        return f;
      },
      registerUnaryCallback$1: function(f) {
        return f;
      },
      registerBinaryCallback$1: function(f) {
        return f;
      },
      errorCallback$2: function(error, stackTrace) {
        return;
      },
      scheduleMicrotask$1: function(f) {
        P._rootScheduleMicrotask(null, null, this, f);
      },
      createTimer$2: function(duration, f) {
        return P.Timer__createTimer(duration, f);
      },
      createPeriodicTimer$2: function(duration, f) {
        return P.Timer__createPeriodicTimer(duration, f);
      },
      print$1: function(_, line) {
        H.printString(line);
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure:5;_async$_captured_this_0,_captured_f_1",
      call$0: [function() {
        return this._async$_captured_this_0.runGuarded$1(this._captured_f_1);
      }, null, null, 0, 0, null, "call"]
    },
    _RootZone_bindCallback_closure0: {
      "^": "Closure:5;_captured_this_2,_captured_f_3",
      call$0: [function() {
        return this._captured_this_2.run$1(this._captured_f_3);
      }, null, null, 0, 0, null, "call"]
    },
    _RootZone_bindUnaryCallback_closure: {
      "^": "Closure:7;_async$_captured_this_0,_captured_f_1",
      call$1: [function(arg) {
        return this._async$_captured_this_0.runUnaryGuarded$2(this._captured_f_1, arg);
      }, null, null, 2, 0, null, 37, [], "call"]
    },
    _RootZone_bindUnaryCallback_closure0: {
      "^": "Closure:7;_captured_this_2,_captured_f_3",
      call$1: [function(arg) {
        return this._captured_this_2.runUnary$2(this._captured_f_3, arg);
      }, null, null, 2, 0, null, 37, [], "call"]
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    _defaultEquals: [function(a, b) {
      return J.$eq(a, b);
    }, "call$2", "_defaultEquals$closure", 4, 0, 191],
    _defaultHashCode: [function(a) {
      return J.get$hashCode$(a);
    }, "call$1", "_defaultHashCode$closure", 2, 0, 170, 60, []],
    HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
      var t1 = new P._HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$K, $V];
      return t1;
    },
    HashMap_HashMap$from: function(other, $K, $V) {
      var result = P.HashMap_HashMap(null, null, null, $K, $V);
      other.forEach$1(0, new P.HashMap_HashMap$from_closure(result));
      return result;
    },
    HashSet_HashSet: function(equals, hashCode, isValidKey, $E) {
      var t1 = new P._HashSet(0, null, null, null, null);
      t1.$builtinTypeInfo = [$E];
      return t1;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.get$_toStringVisiting();
      t1.push(iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.get$_toStringVisiting();
      t1.push(iterable);
      try {
        t2 = buffer;
        t2.set$_contents(P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", "));
      } finally {
        t1.pop();
      }
      t1 = buffer;
      t1.set$_contents(t1.get$_contents() + rightDelimiter);
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.get$_toStringVisiting(), i < t1.length; ++i) {
        t1 = t1[i];
        if (o == null ? t1 == null : o === t1)
          return true;
      }
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = parts.pop();
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
      t1.$builtinTypeInfo = [$E];
      return t1;
    },
    Maps_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        $.get$_toStringVisiting().push(m);
        t2 = result;
        t2.set$_contents(t2.get$_contents() + "{");
        t1._captured_first_0 = true;
        J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
        t1 = result;
        t1.set$_contents(t1.get$_contents() + "}");
      } finally {
        $.get$_toStringVisiting().pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Maps__id: [function(x) {
      return x;
    }, "call$1", "Maps__id$closure", 2, 0, 7],
    Maps__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var t1, element;
      if (key == null)
        key = P.Maps__id$closure();
      if (value == null)
        value = P.Maps__id$closure();
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        element = t1.get$current();
        map.$indexSet(0, key.call$1(element), value.call$1(element));
      }
    },
    Maps__fillMapWithIterables: function(map, keys, values) {
      var keyIterator, valueIterator, hasNextKey, hasNextValue;
      keyIterator = J.get$iterator$ax(keys);
      valueIterator = J.get$iterator$ax(values);
      hasNextKey = keyIterator.moveNext$0();
      hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(), valueIterator.get$current());
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw H.wrapException(P.ArgumentError$("Iterables do not have same length."));
    },
    _HashMap: {
      "^": "Object;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_keys",
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      get$isNotEmpty: function(_) {
        return this._collection$_length !== 0;
      },
      get$keys: function() {
        var t1 = new P.HashMapKeyIterable(this);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        return t1;
      },
      containsKey$1: function(key) {
        var strings, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          return strings == null ? false : strings[key] != null;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          return nums == null ? false : nums[key] != null;
        } else
          return this._containsKey$1(key);
      },
      _containsKey$1: function(key) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      },
      $index: function(_, key) {
        var strings, t1, entry, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            t1 = null;
          else {
            entry = strings[key];
            t1 = entry === strings ? null : entry;
          }
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null)
            t1 = null;
          else {
            entry = nums[key];
            t1 = entry === nums ? null : entry;
          }
          return t1;
        } else
          return this._get$1(key);
      },
      _get$1: function(key) {
        var rest, t1, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        t1 = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(t1, key);
        return index < 0 ? null : t1[index + 1];
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        if (typeof key === "string" && key !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            strings = P._HashMap__newHashTable();
            this._collection$_strings = strings;
          }
          this._collection$_addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._HashMap__newHashTable();
            this._collection$_nums = nums;
          }
          this._collection$_addHashTableEntry$3(nums, key, value);
        } else
          this._set$2(key, value);
      },
      _set$2: function(key, value) {
        var rest, hash, bucket, index;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          ++this._collection$_length;
          this._collection$_keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            ++this._collection$_length;
            this._collection$_keys = null;
          }
        }
      },
      remove$1: function(_, key) {
        if (typeof key === "string" && key !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, key);
        else
          return this._remove$1(key);
      },
      _remove$1: function(key) {
        var rest, t1, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        t1 = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(t1, key);
        if (index < 0)
          return;
        --this._collection$_length;
        this._collection$_keys = null;
        return t1.splice(index, 2)[1];
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_keys = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
        }
      },
      forEach$1: function(_, action) {
        var keys, $length, i, key;
        keys = this._collection$_computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          key = keys[i];
          action.call$2(key, this.$index(0, key));
          if (keys !== this._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      _collection$_computeKeys$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._collection$_keys;
        if (t1 != null)
          return t1;
        result = Array(this._collection$_length);
        result.fixed$length = Array;
        strings = this._collection$_strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._collection$_nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._collection$_rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; i0 += 2) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._collection$_keys = result;
        return result;
      },
      _collection$_addHashTableEntry$3: function(table, key, value) {
        if (table[key] == null) {
          ++this._collection$_length;
          this._collection$_keys = null;
        }
        P._HashMap__setTableEntry(table, key, value);
      },
      _collection$_removeHashTableEntry$2: function(table, key) {
        var value;
        if (table != null && table[key] != null) {
          value = P._HashMap__getTableEntry(table, key);
          delete table[key];
          --this._collection$_length;
          this._collection$_keys = null;
          return value;
        } else
          return;
      },
      _computeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2)
          if (J.$eq(bucket[i], key))
            return i;
        return -1;
      },
      $isMap: 1,
      static: {_HashMap__getTableEntry: function(table, key) {
          var entry = table[key];
          return entry === table ? null : entry;
        }, _HashMap__setTableEntry: function(table, key, value) {
          if (value == null)
            table[key] = table;
          else
            table[key] = value;
        }, _HashMap__newHashTable: function() {
          var table = Object.create(null);
          P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
          delete table["<non-identifier-key>"];
          return table;
        }}
    },
    _IdentityHashMap: {
      "^": "_HashMap;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_keys",
      _computeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; i += 2) {
          t1 = bucket[i];
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      }
    },
    HashMapKeyIterable: {
      "^": "Iterable;_map",
      get$length: function(_) {
        return this._map._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._map._collection$_length === 0;
      },
      get$iterator: function(_) {
        var t1 = this._map;
        t1 = new P.HashMapKeyIterator(t1, t1._collection$_computeKeys$0(), 0, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      contains$1: function(_, element) {
        return this._map.containsKey$1(element);
      },
      forEach$1: function(_, f) {
        var t1, keys, $length, i;
        t1 = this._map;
        keys = t1._collection$_computeKeys$0();
        for ($length = keys.length, i = 0; i < $length; ++i) {
          f.call$1(keys[i]);
          if (keys !== t1._collection$_keys)
            throw H.wrapException(new P.ConcurrentModificationError(t1));
        }
      },
      $isEfficientLength: 1
    },
    HashMapKeyIterator: {
      "^": "Object;_map,_collection$_keys,_offset,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var keys, offset, t1;
        keys = this._collection$_keys;
        offset = this._offset;
        t1 = this._map;
        if (keys !== t1._collection$_keys)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else if (offset >= keys.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = keys[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      internalComputeHashCode$1: function(key) {
        return H.objectHashCode(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i, t1;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i) {
          t1 = bucket[i].hashMapCellKey;
          if (t1 == null ? key == null : t1 === key)
            return i;
        }
        return -1;
      }
    },
    _LinkedCustomHashMap: {
      "^": "JsLinkedHashMap;_equals,_hashCode,_validKey,__js_helper$_length,_strings,_nums,_rest,_first,_last,_modifications",
      $index: function(_, key) {
        if (!this._validKey$1(key))
          return;
        return this.super$JsLinkedHashMap$internalGet$1(key);
      },
      $indexSet: function(_, key, value) {
        this.super$JsLinkedHashMap$internalSet$2(key, value);
      },
      containsKey$1: function(key) {
        if (!this._validKey$1(key))
          return false;
        return this.super$JsLinkedHashMap$internalContainsKey$1(key);
      },
      remove$1: function(_, key) {
        if (!this._validKey$1(key))
          return;
        return this.super$JsLinkedHashMap$internalRemove$1(key);
      },
      internalComputeHashCode$1: function(key) {
        return this._hashCode$1(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (this._equals$2(bucket[i].hashMapCellKey, key))
            return i;
        return -1;
      },
      _equals$2: function(arg0, arg1) {
        return this._equals.call$2(arg0, arg1);
      },
      _hashCode$1: function(arg0) {
        return this._hashCode.call$1(arg0);
      },
      _validKey$1: function(arg0) {
        return this._validKey.call$1(arg0);
      },
      static: {_LinkedCustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
          var t1 = new P._LinkedCustomHashMap(_equals, _hashCode, validKey != null ? validKey : new P._LinkedCustomHashMap_closure($K), 0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [$K, $V];
          return t1;
        }}
    },
    _LinkedCustomHashMap_closure: {
      "^": "Closure:7;_captured_K_0",
      call$1: function(v) {
        var t1 = H.checkSubtypeOfRuntimeType(v, this._captured_K_0);
        return t1;
      }
    },
    _HashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_elements",
      get$iterator: function(_) {
        var t1 = new P.HashSetIterator(this, this._computeElements$0(), 0, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          return strings == null ? false : strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          return nums == null ? false : nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, t1, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        t1 = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(t1, object);
        if (index < 0)
          return;
        return J.$index$asx(t1, index);
      },
      add$1: function(_, element) {
        var strings, table, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_strings = table;
            strings = table;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_nums = table;
            nums = table;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._HashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [element];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(element);
        }
        ++this._collection$_length;
        this._elements = null;
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, t1, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        t1 = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(t1, object);
        if (index < 0)
          return false;
        --this._collection$_length;
        this._elements = null;
        t1.splice(index, 1);
        return true;
      },
      _computeElements$0: function() {
        var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
        t1 = this._elements;
        if (t1 != null)
          return t1;
        result = Array(this._collection$_length);
        result.fixed$length = Array;
        strings = this._collection$_strings;
        if (strings != null) {
          names = Object.getOwnPropertyNames(strings);
          entries = names.length;
          for (index = 0, i = 0; i < entries; ++i) {
            result[index] = names[i];
            ++index;
          }
        } else
          index = 0;
        nums = this._collection$_nums;
        if (nums != null) {
          names = Object.getOwnPropertyNames(nums);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            result[index] = +names[i];
            ++index;
          }
        }
        rest = this._collection$_rest;
        if (rest != null) {
          names = Object.getOwnPropertyNames(rest);
          entries = names.length;
          for (i = 0; i < entries; ++i) {
            bucket = rest[names[i]];
            $length = bucket.length;
            for (i0 = 0; i0 < $length; ++i0) {
              result[index] = bucket[i0];
              ++index;
            }
          }
        }
        this._elements = result;
        return result;
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = 0;
        ++this._collection$_length;
        this._elements = null;
        return true;
      },
      _collection$_removeHashTableEntry$2: function(table, element) {
        if (table != null && table[element] != null) {
          delete table[element];
          --this._collection$_length;
          this._elements = null;
          return true;
        } else
          return false;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq(bucket[i], element))
            return i;
        return -1;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {_HashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }}
    },
    HashSetIterator: {
      "^": "Object;_set,_elements,_offset,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var elements, offset, t1;
        elements = this._elements;
        offset = this._offset;
        t1 = this._set;
        if (elements !== t1._elements)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else if (offset >= elements.length) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = elements[offset];
          this._offset = offset + 1;
          return true;
        }
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,_collection$_strings,_collection$_nums,_collection$_rest,_collection$_first,_collection$_last,_collection$_modifications",
      get$iterator: function(_) {
        var t1 = new P.LinkedHashSetIterator(this, this._collection$_modifications, null, null);
        t1.$builtinTypeInfo = [null];
        t1._collection$_cell = this._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return strings[object] != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return nums[object] != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      },
      lookup$1: function(object) {
        var t1 = typeof object === "number" && (object & 0x3ffffff) === object;
        if (t1)
          return this.contains$1(0, object) ? object : null;
        else
          return this._lookup$1(object);
      },
      _lookup$1: function(object) {
        var rest, t1, index;
        rest = this._collection$_rest;
        if (rest == null)
          return;
        t1 = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(t1, object);
        if (index < 0)
          return;
        return J.$index$asx(t1, index).get$_element();
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        cell = this._collection$_first;
        modifications = this._collection$_modifications;
        for (; cell != null;) {
          action.call$1(cell._element);
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          cell = cell._collection$_next;
        }
      },
      get$last: function(_) {
        var t1 = this._collection$_last;
        if (t1 == null)
          throw H.wrapException(new P.StateError("No elements"));
        return t1._element;
      },
      add$1: function(_, element) {
        var strings, table, nums;
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_strings = table;
            strings = table;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            table = Object.create(null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._collection$_nums = table;
            nums = table;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, t1, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        t1 = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(t1, object);
        if (index < 0)
          return false;
        this._collection$_unlinkCell$1(t1.splice(index, 1)[0]);
        return true;
      },
      clear$0: function(_) {
        if (this._collection$_length > 0) {
          this._collection$_last = null;
          this._collection$_first = null;
          this._collection$_rest = null;
          this._collection$_nums = null;
          this._collection$_strings = null;
          this._collection$_length = 0;
          this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        }
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        if (table[element] != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _collection$_removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = table[element];
        if (cell == null)
          return false;
        this._collection$_unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P.LinkedHashSetCell(element, null, null);
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
        return cell;
      },
      _collection$_unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell._collection$_previous;
        next = cell._collection$_next;
        if (previous == null)
          this._collection$_first = next;
        else
          previous._collection$_next = next;
        if (next == null)
          this._collection$_last = previous;
        else
          next._collection$_previous = previous;
        --this._collection$_length;
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq(bucket[i]._element, element))
            return i;
        return -1;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null,
      static: {_LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }}
    },
    LinkedHashSetCell: {
      "^": "Object;_element<,_collection$_next?,_collection$_previous?"
    },
    LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,_collection$_cell,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(new P.ConcurrentModificationError(t1));
        else {
          t1 = this._collection$_cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = t1._element;
            this._collection$_cell = t1._collection$_next;
            return true;
          }
        }
      }
    },
    UnmodifiableListView: {
      "^": "UnmodifiableListBase;_collection$_source",
      get$length: function(_) {
        return J.get$length$asx(this._collection$_source);
      },
      $index: function(_, index) {
        return J.elementAt$1$ax(this._collection$_source, index);
      }
    },
    HashMap_HashMap$from_closure: {
      "^": "Closure:14;_collection$_captured_result_0",
      call$2: function(k, v) {
        this._collection$_captured_result_0.$indexSet(0, k, v);
      }
    },
    _HashSetBase: {
      "^": "SetBase;"
    },
    IterableBase: {
      "^": "Iterable;"
    },
    LinkedHashMap: {
      "^": "Object;",
      $isMap: 1,
      "<>": [0, 1],
      static: {LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
          var t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [$K, $V];
          return t1;
        }, LinkedHashMap__makeEmpty: [function() {
          var t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [null, null];
          return t1;
        }, "call$0", "LinkedHashMap__makeEmpty$closure", 0, 0, 5, "_makeEmpty"], LinkedHashMap__makeLiteral: [function(keyValuePairs) {
          var t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [null, null];
          return H.fillLiteralMap(keyValuePairs, t1);
        }, "call$1", "LinkedHashMap__makeLiteral$closure", 2, 0, 7, 59, [], "_makeLiteral"], LinkedHashMap_LinkedHashMap: [function(equals, hashCode, isValidKey, $K, $V) {
          var t1;
          if (isValidKey == null)
            if (hashCode == null) {
              if (equals == null) {
                t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
                t1.$builtinTypeInfo = [$K, $V];
                return t1;
              }
              hashCode = P._defaultHashCode$closure();
            } else {
              if (P.identityHashCode$closure() === hashCode && P.identical$closure() === equals) {
                t1 = new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0);
                t1.$builtinTypeInfo = [$K, $V];
                return t1;
              }
              if (equals == null)
                equals = P._defaultEquals$closure();
            }
          else {
            if (hashCode == null)
              hashCode = P._defaultHashCode$closure();
            if (equals == null)
              equals = P._defaultEquals$closure();
          }
          return P._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
        }, null, null, 0, 7, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V], named: {equals: {func: 1, ret: P.bool, args: [K, K]}, hashCode: {func: 1, ret: P.$int, args: [K]}, isValidKey: {func: 1, ret: P.bool, args: [,]}}};
          }, this.$receiver, "LinkedHashMap");
        }, 25, 25, 25, 61, [], 62, [], 63, [], "new LinkedHashMap"], LinkedHashMap_LinkedHashMap$identity: [function($K, $V) {
          var t1 = new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0);
          t1.$builtinTypeInfo = [$K, $V];
          return t1;
        }, null, null, 0, 0, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V]};
          }, this.$receiver, "LinkedHashMap");
        }, "new LinkedHashMap$identity"], LinkedHashMap_LinkedHashMap$from: [function(other, $K, $V) {
          var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
          other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result));
          return result;
        }, null, null, 2, 0, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V], args: [P.Map]};
          }, this.$receiver, "LinkedHashMap");
        }, 4, [], "new LinkedHashMap$from"], LinkedHashMap_LinkedHashMap$fromIterable: [function(iterable, key, value, $K, $V) {
          var map = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
          P.Maps__fillMapWithMappedIterable(map, iterable, key, value);
          return map;
        }, null, null, 2, 5, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V], args: [P.Iterable], named: {key: {func: 1, ret: K, args: [,]}, value: {func: 1, ret: V, args: [,]}}};
          }, this.$receiver, "LinkedHashMap");
        }, 25, 25, 64, [], 65, [], 26, [], "new LinkedHashMap$fromIterable"], LinkedHashMap_LinkedHashMap$fromIterables: [function(keys, values, $K, $V) {
          var map = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
          P.Maps__fillMapWithIterables(map, keys, values);
          return map;
        }, null, null, 4, 0, function() {
          return H.computeSignature(function(K, V) {
            return {func: 1, ret: [P.LinkedHashMap, K, V], args: [[P.Iterable, K], [P.Iterable, V]]};
          }, this.$receiver, "LinkedHashMap");
        }, 66, [], 67, [], "new LinkedHashMap$fromIterables"]}
    },
    "+LinkedHashMap": [0, 280],
    LinkedHashMap_LinkedHashMap$from_closure: {
      "^": "Closure:14;_collection$_captured_result_0",
      call$2: [function(k, v) {
        this._collection$_captured_result_0.$indexSet(0, k, v);
      }, null, null, 4, 0, 14, 68, [], 54, [], "call"]
    },
    LinkedList: {
      "^": "Iterable;_modificationCount,_collection$_length,_collection$_next@,_collection$_previous?",
      add$1: function(_, entry) {
        this._insertAfter$2(this._collection$_previous, entry);
      },
      remove$1: function(_, entry) {
        entry.get$_list();
        return false;
      },
      get$iterator: function(_) {
        var t1 = new P._LinkedListIterator(this, this._modificationCount, null, this._collection$_next);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$first: function(_) {
        var t1 = this._collection$_next;
        if (t1 === this)
          throw H.wrapException(new P.StateError("No such element"));
        return t1;
      },
      get$last: function(_) {
        var t1 = this._collection$_previous;
        if (t1 === this)
          throw H.wrapException(new P.StateError("No such element"));
        return t1;
      },
      forEach$1: function(_, action) {
        var modificationCount, current;
        modificationCount = this._modificationCount;
        current = this._collection$_next;
        for (; current !== this;) {
          action.call$1(current);
          if (modificationCount !== this._modificationCount)
            throw H.wrapException(new P.ConcurrentModificationError(this));
          current = current.get$_collection$_next();
        }
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      _insertAfter$2: function(entry, newEntry) {
        var successor;
        if (J.get$list$x(newEntry) != null)
          throw H.wrapException(new P.StateError("LinkedListEntry is already in a LinkedList"));
        ++this._modificationCount;
        newEntry.set$_list(this);
        successor = entry.get$_collection$_next();
        successor.set$_collection$_previous(newEntry);
        newEntry.set$_collection$_previous(entry);
        newEntry.set$_collection$_next(successor);
        entry.set$_collection$_next(newEntry);
        ++this._collection$_length;
      },
      _unlink$1: function(entry) {
        ++this._modificationCount;
        entry._collection$_next.set$_collection$_previous(entry._collection$_previous);
        entry._collection$_previous.set$_collection$_next(entry._collection$_next);
        --this._collection$_length;
        entry._collection$_previous = null;
        entry._collection$_next = null;
        entry._list = null;
      },
      LinkedList$0: function($E) {
        this._collection$_previous = this;
        this._collection$_next = this;
      }
    },
    _LinkedListIterator: {
      "^": "Object;_list,_modificationCount,_collection$_current,_collection$_next?",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2;
        t1 = this._collection$_next;
        t2 = this._list;
        if (t1 === t2) {
          this._collection$_current = null;
          return false;
        }
        if (this._modificationCount !== t2._modificationCount)
          throw H.wrapException(new P.ConcurrentModificationError(this));
        this._collection$_current = t1;
        this._collection$_next = t1.get$_collection$_next();
        return true;
      }
    },
    LinkedListEntry: {
      "^": "Object;_list?,_collection$_next@,_collection$_previous?",
      get$list: function(_) {
        return this._list;
      },
      get$next: function() {
        var t1, t2;
        t1 = this._collection$_next;
        t2 = this._list;
        if (t1 == null ? t2 == null : t1 === t2)
          return;
        return t1;
      },
      list$1: function($receiver, arg0) {
        return this.get$list(this).call$1(arg0);
      }
    },
    ListBase: {
      "^": "Object_ListMixin;"
    },
    Object_ListMixin: {
      "^": "Object+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    ListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        return t1;
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      forEach$1: function(receiver, action) {
        var $length, i;
        $length = this.get$length(receiver);
        for (i = 0; i < $length; ++i) {
          action.call$1(this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
      },
      get$isEmpty: function(receiver) {
        return this.get$length(receiver) === 0;
      },
      get$last: function(receiver) {
        if (this.get$length(receiver) === 0)
          throw H.wrapException(H.IterableElementError_noElement());
        return this.$index(receiver, this.get$length(receiver) - 1);
      },
      contains$1: function(receiver, element) {
        var $length, i;
        $length = this.get$length(receiver);
        for (i = 0; i < this.get$length(receiver); ++i) {
          if (J.$eq(this.$index(receiver, i), element))
            return true;
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return false;
      },
      join$1: function(receiver, separator) {
        var t1;
        if (this.get$length(receiver) === 0)
          return "";
        t1 = P.StringBuffer__writeAll("", receiver, separator);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      where$1: function(receiver, test) {
        var t1 = new H.WhereIterable(receiver, test);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        return t1;
      },
      map$1: function(receiver, f) {
        var t1 = new H.MappedListIterable(receiver, f);
        t1.$builtinTypeInfo = [null, null];
        return t1;
      },
      fold$2: function(receiver, initialValue, combine) {
        var $length, value, i;
        $length = this.get$length(receiver);
        for (value = initialValue, i = 0; i < $length; ++i) {
          value = combine.call$2(value, this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(new P.ConcurrentModificationError(receiver));
        }
        return value;
      },
      toList$1$growable: function(receiver, growable) {
        var result, i;
        if (growable) {
          result = [];
          result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
          C.JSArray_methods.set$length(result, this.get$length(receiver));
        } else {
          result = Array(this.get$length(receiver));
          result.fixed$length = Array;
          result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        }
        for (i = 0; i < this.get$length(receiver); ++i)
          result[i] = this.$index(receiver, i);
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(receiver, element) {
        var t1 = this.get$length(receiver);
        this.set$length(receiver, t1 + 1);
        this.$indexSet(receiver, t1, element);
      },
      addAll$1: function(receiver, iterable) {
        var t1, element, t2;
        for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
          element = t1.get$current();
          t2 = this.get$length(receiver);
          this.set$length(receiver, t2 + 1);
          this.$indexSet(receiver, t2, element);
        }
      },
      remove$1: function(receiver, element) {
        var i;
        for (i = 0; i < this.get$length(receiver); ++i)
          if (J.$eq(this.$index(receiver, i), element)) {
            this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
            this.set$length(receiver, this.get$length(receiver) - 1);
            return true;
          }
        return false;
      },
      clear$0: function(receiver) {
        this.set$length(receiver, 0);
      },
      sublist$2: function(receiver, start, end) {
        var listLength, $length, result, i;
        listLength = this.get$length(receiver);
        if (end == null)
          end = listLength;
        P.RangeError_checkValidRange(start, end, listLength, null, null, null);
        $length = end - start;
        result = [];
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        C.JSArray_methods.set$length(result, $length);
        for (i = 0; i < $length; ++i)
          result[i] = this.$index(receiver, start + i);
        return result;
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      getRange$2: function(receiver, start, end) {
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        return H.SubListIterable$(receiver, start, end, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      },
      removeRange$2: function(receiver, start, end) {
        var $length;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        $length = end - start;
        this.setRange$4(receiver, start, this.get$length(receiver) - $length, receiver, end);
        this.set$length(receiver, this.get$length(receiver) - $length);
      },
      setRange$4: ["super$ListMixin$setRange$4", function(receiver, start, end, iterable, skipCount) {
        var $length, t1, i;
        P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        t1 = J.getInterceptor$asx(iterable);
        if (skipCount + $length > t1.get$length(iterable))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i)
            this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
        else
          for (i = 0; i < $length; ++i)
            this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
      }, function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }, "setRange$3", null, null, "get$setRange", 6, 2, null, 69],
      indexOf$2: function(receiver, element, startIndex) {
        var i;
        if (startIndex >= this.get$length(receiver))
          return -1;
        for (i = startIndex; i < this.get$length(receiver); ++i)
          if (J.$eq(this.$index(receiver, i), element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      setAll$2: function(receiver, index, iterable) {
        this.setRange$3(receiver, index, index + iterable.length, iterable);
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _UnmodifiableMapMixin: {
      "^": "Object;",
      $indexSet: function(_, key, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      clear$0: function(_) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      remove$1: function(_, key) {
        throw H.wrapException(new P.UnsupportedError("Cannot modify unmodifiable map"));
      },
      $isMap: 1
    },
    MapView: {
      "^": "Object;",
      $index: function(_, key) {
        return this._map.$index(0, key);
      },
      $indexSet: function(_, key, value) {
        this._map.$indexSet(0, key, value);
      },
      clear$0: function(_) {
        this._map.clear$0(0);
      },
      containsKey$1: function(key) {
        return this._map.containsKey$1(key);
      },
      forEach$1: function(_, action) {
        this._map.forEach$1(0, action);
      },
      get$isEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isEmpty(t1);
      },
      get$isNotEmpty: function(_) {
        var t1 = this._map;
        return t1.get$isNotEmpty(t1);
      },
      get$length: function(_) {
        var t1 = this._map;
        return t1.get$length(t1);
      },
      get$keys: function() {
        return this._map.get$keys();
      },
      remove$1: function(_, key) {
        return this._map.remove$1(0, key);
      },
      toString$0: function(_) {
        return this._map.toString$0(0);
      },
      $isMap: 1
    },
    UnmodifiableMapView: {
      "^": "MapView+_UnmodifiableMapMixin;_map",
      $isMap: 1
    },
    Maps_mapToString_closure: {
      "^": "Closure:14;_box_0,_captured_result_1",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1._captured_first_0)
          this._captured_result_1._contents += ", ";
        t1._captured_first_0 = false;
        t1 = this._captured_result_1;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    ListQueue: {
      "^": "Iterable;_table,_head,_tail,_modificationCount",
      get$iterator: function(_) {
        var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      },
      forEach$1: function(_, action) {
        var modificationCount, i;
        modificationCount = this._modificationCount;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          action.call$1(this._table[i]);
          if (modificationCount !== this._modificationCount)
            H.throwExpression(new P.ConcurrentModificationError(this));
        }
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._table.length - 1) >>> 0;
      },
      get$last: function(_) {
        var t1, t2;
        t1 = this._head;
        t2 = this._tail;
        if (t1 === t2)
          throw H.wrapException(H.IterableElementError_noElement());
        t1 = this._table;
        return t1[(t2 - 1 & t1.length - 1) >>> 0];
      },
      toList$1$growable: function(_, growable) {
        var list;
        if (growable) {
          list = [];
          list.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
          C.JSArray_methods.set$length(list, this.get$length(this));
        } else {
          list = Array(this.get$length(this));
          list.fixed$length = Array;
          list.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        }
        this._writeToList$1(list);
        return list;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(_, value) {
        this._add$1(value);
      },
      remove$1: function(_, value) {
        var i;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0)
          if (J.$eq(this._table[i], value)) {
            this._remove$1(i);
            ++this._modificationCount;
            return true;
          }
        return false;
      },
      clear$0: function(_) {
        var i, t1, t2, t3;
        i = this._head;
        t1 = this._tail;
        if (i !== t1) {
          for (t2 = this._table, t3 = t2.length - 1; i !== t1; i = (i + 1 & t3) >>> 0)
            t2[i] = null;
          this._tail = 0;
          this._head = 0;
          ++this._modificationCount;
        }
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      addFirst$1: function(value) {
        var t1, t2;
        t1 = this._head;
        t2 = this._table;
        t1 = (t1 - 1 & t2.length - 1) >>> 0;
        this._head = t1;
        t2[t1] = value;
        if (t1 === this._tail)
          this._grow$0();
        ++this._modificationCount;
      },
      removeFirst$0: function() {
        var t1, t2, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._table;
        result = t2[t1];
        t2[t1] = null;
        this._head = (t1 + 1 & t2.length - 1) >>> 0;
        return result;
      },
      _add$1: function(element) {
        var t1, t2;
        t1 = this._table;
        t2 = this._tail;
        t1[t2] = element;
        t1 = (t2 + 1 & t1.length - 1) >>> 0;
        this._tail = t1;
        if (this._head === t1)
          this._grow$0();
        ++this._modificationCount;
      },
      _remove$1: function(offset) {
        var t1, mask, t2, t3, i, prevOffset, nextOffset;
        t1 = this._table;
        mask = t1.length - 1;
        t2 = this._head;
        t3 = this._tail;
        if ((offset - t2 & mask) >>> 0 < (t3 - offset & mask) >>> 0) {
          for (i = offset; i !== t2; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            t1[i] = t1[prevOffset];
          }
          t1[t2] = null;
          this._head = (t2 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else {
          t2 = (t3 - 1 & mask) >>> 0;
          this._tail = t2;
          for (i = offset; i !== t2; i = nextOffset) {
            nextOffset = (i + 1 & mask) >>> 0;
            t1[i] = t1[nextOffset];
          }
          t1[t2] = null;
          return offset;
        }
      },
      _grow$0: function() {
        var newTable, t1, t2, split;
        newTable = Array(this._table.length * 2);
        newTable.fixed$length = Array;
        newTable.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
        this._head = 0;
        this._tail = this._table.length;
        this._table = newTable;
      },
      _writeToList$1: function(target) {
        var t1, t2, t3, $length, firstPartSize;
        t1 = this._head;
        t2 = this._tail;
        t3 = this._table;
        if (t1 <= t2) {
          $length = t2 - t1;
          C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
          return $length;
        } else {
          firstPartSize = t3.length - t1;
          C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
          C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
          return this._tail + firstPartSize;
        }
      },
      ListQueue$1: function(initialCapacity, $E) {
        var t1 = Array(8);
        t1.fixed$length = Array;
        t1.$builtinTypeInfo = [$E];
        this._table = t1;
      },
      $isEfficientLength: 1,
      $asIterable: null,
      static: {ListQueue$: function(initialCapacity, $E) {
          var t1 = new P.ListQueue(null, 0, 0, 0);
          t1.$builtinTypeInfo = [$E];
          t1.ListQueue$1(initialCapacity, $E);
          return t1;
        }}
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(new P.ConcurrentModificationError(t1));
        t2 = this._collection$_position;
        if (t2 === this._end) {
          this._collection$_current = null;
          return false;
        }
        t1 = t1._table;
        this._collection$_current = t1[t2];
        this._collection$_position = (t2 + 1 & t1.length - 1) >>> 0;
        return true;
      }
    },
    SetMixin: {
      "^": "Object;",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      clear$0: function(_) {
        this.removeAll$1(this.toList$0(0));
      },
      addAll$1: function(_, elements) {
        var t1, t2;
        t1 = J.get$iterator$ax(elements._iterable);
        t2 = new H.WhereIterator(t1, elements._f);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(elements, 0)];
        for (; t2.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      removeAll$1: function(elements) {
        var t1, _i;
        for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
          this.remove$1(0, elements[_i]);
      },
      toList$1$growable: function(_, growable) {
        var result, t1, i, i0;
        if (growable) {
          result = [];
          result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
          C.JSArray_methods.set$length(result, this.get$length(this));
        } else {
          result = Array(this.get$length(this));
          result.fixed$length = Array;
          result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        }
        for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
          i0 = i + 1;
          result[i] = t1.get$current();
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      map$1: function(_, f) {
        var t1 = new H.EfficientLengthMappedIterable(this, f);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0), null];
        return t1;
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      fold$2: function(_, initialValue, combine) {
        var t1, value;
        for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
          value = combine.call$2(value, t1.get$current());
        return value;
      },
      join$1: function(_, separator) {
        var iterator, buffer, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        buffer = new P.StringBuffer("");
        if (separator === "") {
          do
            buffer._contents += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          buffer._contents = H.S(iterator.get$current());
          for (; iterator.moveNext$0();) {
            buffer._contents += separator;
            buffer._contents += H.S(iterator.get$current());
          }
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      get$last: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        do
          result = it.get$current();
        while (it.moveNext$0());
        return result;
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    SetBase: {
      "^": "SetMixin;"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    _convertJsonToDart: function(json, reviver) {
      return reviver.call$2(null, new P._convertJsonToDart_walk(reviver).call$1(json));
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null), null);
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _parseJson: function(source, reviver) {
      var parsed, e, t1, exception;
      t1 = source;
      if (typeof t1 !== "string")
        throw H.wrapException(P.ArgumentError$(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(new P.FormatException(String(e), null, null));
      }
      if (reviver == null)
        return P._convertJsonToDartLazy(parsed);
      else
        return P._convertJsonToDart(parsed, reviver);
    },
    _defaultToEncodable: [function(object) {
      return object.toJson$0();
    }, "call$1", "_defaultToEncodable$closure", 2, 0, 192, 6, []],
    _convertJsonToDart_walk: {
      "^": "Closure:7;_captured_reviver_0",
      call$1: function(e) {
        var t1, i, map, keys, t2, key;
        if (e == null || typeof e != "object")
          return e;
        if (Object.getPrototypeOf(e) === Array.prototype) {
          for (t1 = this._captured_reviver_0, i = 0; i < e.length; ++i)
            e[i] = t1.call$2(i, this.call$1(e[i]));
          return e;
        }
        t1 = Object.create(null);
        map = new P._JsonMap(e, t1, null);
        keys = map._computeKeys$0();
        for (t2 = this._captured_reviver_0, i = 0; i < keys.length; ++i) {
          key = keys[i];
          t1[key] = t2.call$2(key, this.call$1(e[key]));
        }
        map._original = t1;
        return map;
      }
    },
    _JsonMap: {
      "^": "Object;_original,_processed,_data",
      $index: function(_, key) {
        var t1, result;
        t1 = this._processed;
        if (t1 == null)
          return this._data.$index(0, key);
        else if (typeof key !== "string")
          return;
        else {
          result = t1[key];
          return typeof result == "undefined" ? this._process$1(key) : result;
        }
      },
      get$length: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1;
      },
      get$isEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1 === 0;
      },
      get$isNotEmpty: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1 > 0;
      },
      get$keys: function() {
        if (this._processed == null)
          return this._data.get$keys();
        return new P._JsonMapKeyIterable(this);
      },
      get$values: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          return t1.get$values(t1);
        }
        return H.MappedIterable_MappedIterable(this._computeKeys$0(), new P._JsonMap_values_closure(this), null, null);
      },
      $indexSet: function(_, key, value) {
        var processed, original;
        if (this._processed == null)
          this._data.$indexSet(0, key, value);
        else if (this.containsKey$1(key)) {
          processed = this._processed;
          processed[key] = value;
          original = this._original;
          if (original == null ? processed != null : original !== processed)
            original[key] = null;
        } else
          this._upgrade$0().$indexSet(0, key, value);
      },
      containsKey$1: function(key) {
        if (this._processed == null)
          return this._data.containsKey$1(key);
        if (typeof key !== "string")
          return false;
        return Object.prototype.hasOwnProperty.call(this._original, key);
      },
      putIfAbsent$2: function(key, ifAbsent) {
        var value;
        if (this.containsKey$1(key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: function(_, key) {
        if (this._processed != null && !this.containsKey$1(key))
          return;
        return this._upgrade$0().remove$1(0, key);
      },
      clear$0: function(_) {
        var t1;
        if (this._processed == null)
          this._data.clear$0(0);
        else {
          t1 = this._data;
          if (t1 != null)
            J.clear$0$ax(t1);
          this._processed = null;
          this._original = null;
          this._data = P.LinkedHashMap__makeEmpty();
        }
      },
      forEach$1: function(_, f) {
        var keys, i, key, value;
        if (this._processed == null)
          return this._data.forEach$1(0, f);
        keys = this._computeKeys$0();
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          value = this._processed[key];
          if (typeof value == "undefined") {
            value = P._convertJsonToDartLazy(this._original[key]);
            this._processed[key] = value;
          }
          f.call$2(key, value);
          if (keys !== this._data)
            throw H.wrapException(new P.ConcurrentModificationError(this));
        }
      },
      toString$0: [function(_) {
        return P.Maps_mapToString(this);
      }, "call$0", "get$toString", 0, 0, 3, "toString"],
      _computeKeys$0: function() {
        var keys = this._data;
        if (keys == null) {
          keys = Object.keys(this._original);
          this._data = keys;
        }
        return keys;
      },
      _upgrade$0: function() {
        var result, keys, i, t1, key;
        if (this._processed == null)
          return this._data;
        result = P.LinkedHashMap__makeEmpty();
        keys = this._computeKeys$0();
        for (i = 0; t1 = keys.length, i < t1; ++i) {
          key = keys[i];
          result.$indexSet(0, key, this.$index(0, key));
        }
        if (t1 === 0)
          keys.push(null);
        else
          C.JSArray_methods.set$length(keys, 0);
        this._processed = null;
        this._original = null;
        this._data = result;
        return result;
      },
      _process$1: function(key) {
        var result;
        if (!Object.prototype.hasOwnProperty.call(this._original, key))
          return;
        result = P._convertJsonToDartLazy(this._original[key]);
        return this._processed[key] = result;
      },
      $isMap: 1,
      $asMap: functionThatReturnsNull
    },
    _JsonMap_values_closure: {
      "^": "Closure:7;_convert$_captured_this_0",
      call$1: [function(each) {
        return this._convert$_captured_this_0.$index(0, each);
      }, null, null, 2, 0, null, 21, [], "call"]
    },
    _JsonMapKeyIterable: {
      "^": "ListIterable;_parent",
      get$length: function(_) {
        var t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1._data;
          t1 = t1.get$length(t1);
        } else
          t1 = t1._computeKeys$0().length;
        return t1;
      },
      elementAt$1: function(_, index) {
        var t1 = this._parent;
        return t1._processed == null ? t1.get$keys().elementAt$1(0, index) : t1._computeKeys$0()[index];
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._parent;
        if (t1._processed == null) {
          t1 = t1.get$keys();
          t1 = t1.get$iterator(t1);
        } else {
          t1 = t1._computeKeys$0();
          t2 = new J.ArrayIterator(t1, t1.length, 0, null);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
          t1 = t2;
        }
        return t1;
      },
      contains$1: function(_, key) {
        return this._parent.containsKey$1(key);
      },
      $asListIterable: functionThatReturnsNull,
      $asIterable: functionThatReturnsNull
    },
    Codec: {
      "^": "Object;",
      encode$1: function(input) {
        return this.get$encoder().convert$1(input);
      }
    },
    Converter: {
      "^": "Object;"
    },
    Encoding: {
      "^": "Codec;",
      $asCodec: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    JsonUnsupportedObjectError: {
      "^": "Error;unsupportedObject,cause",
      toString$0: function(_) {
        if (this.cause != null)
          return "Converting object to an encodable object failed.";
        else
          return "Converting object did not return an encodable object.";
      }
    },
    JsonCyclicError: {
      "^": "JsonUnsupportedObjectError;unsupportedObject,cause",
      toString$0: function(_) {
        return "Cyclic error in JSON stringify";
      }
    },
    JsonCodec: {
      "^": "Codec;_reviver,_toEncodable",
      encode$2$toEncodable: function(value, toEncodable) {
        var t1 = this.get$encoder();
        return P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      },
      encode$1: function(value) {
        return this.encode$2$toEncodable(value, null);
      },
      get$encoder: function() {
        return C.JsonEncoder_null_null;
      },
      $asCodec: function() {
        return [P.Object, P.String];
      }
    },
    JsonEncoder: {
      "^": "Converter;indent,_toEncodable",
      convert$1: function(object) {
        return P._JsonStringStringifier_stringify(object, this._toEncodable, this.indent);
      },
      $asConverter: function() {
        return [P.Object, P.String];
      },
      static: {JsonEncoder$: function(toEncodable) {
          return new P.JsonEncoder(null, toEncodable);
        }}
    },
    JsonDecoder: {
      "^": "Converter;_reviver",
      $asConverter: function() {
        return [P.String, P.Object];
      },
      static: {JsonDecoder$: function(reviver) {
          return new P.JsonDecoder(reviver);
        }}
    },
    _JsonStringifier: {
      "^": "Object;",
      writeStringContent$1: function(s) {
        var $length, t1, offset, i, charCode, t2;
        $length = s.length;
        for (t1 = J.getInterceptor$s(s), offset = 0, i = 0; i < $length; ++i) {
          charCode = t1.codeUnitAt$1(s, i);
          if (charCode > 92)
            continue;
          if (charCode < 32) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            switch (charCode) {
              case 8:
                this.writeCharCode$1(98);
                break;
              case 9:
                this.writeCharCode$1(116);
                break;
              case 10:
                this.writeCharCode$1(110);
                break;
              case 12:
                this.writeCharCode$1(102);
                break;
              case 13:
                this.writeCharCode$1(114);
                break;
              default:
                this.writeCharCode$1(117);
                this.writeCharCode$1(48);
                this.writeCharCode$1(48);
                t2 = charCode >>> 4 & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                t2 = charCode & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                break;
            }
          } else if (charCode === 34 || charCode === 92) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            this.writeCharCode$1(charCode);
          }
        }
        if (offset === 0)
          this.writeString$1(s);
        else if (offset < $length)
          this.writeStringSlice$3(s, offset, $length);
      },
      _checkCycle$1: function(object) {
        var t1, t2, i, t3;
        for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
          t3 = t1[i];
          if (object == null ? t3 == null : object === t3)
            throw H.wrapException(new P.JsonCyclicError(object, null));
        }
        t1.push(object);
      },
      _removeSeen$1: function(object) {
        this._seen.pop();
      },
      writeObject$1: function(object) {
        var customJson, e, exception, t1;
        if (this.writeJsonValue$1(object))
          return;
        this._checkCycle$1(object);
        try {
          customJson = this._toEncodable$1(object);
          if (!this.writeJsonValue$1(customJson))
            throw H.wrapException(new P.JsonUnsupportedObjectError(object, null));
          this._seen.pop();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          throw H.wrapException(new P.JsonUnsupportedObjectError(object, e));
        }
      },
      writeJsonValue$1: function(object) {
        var t1, success;
        if (typeof object === "number") {
          if (!C.JSNumber_methods.get$isFinite(object))
            return false;
          this.writeNumber$1(object);
          return true;
        } else if (object === true) {
          this.writeString$1("true");
          return true;
        } else if (object === false) {
          this.writeString$1("false");
          return true;
        } else if (object == null) {
          this.writeString$1("null");
          return true;
        } else if (typeof object === "string") {
          this.writeString$1("\"");
          this.writeStringContent$1(object);
          this.writeString$1("\"");
          return true;
        } else {
          t1 = J.getInterceptor(object);
          if (!!t1.$isList) {
            this._checkCycle$1(object);
            this.writeList$1(object);
            this._removeSeen$1(object);
            return true;
          } else if (!!t1.$isMap) {
            this._checkCycle$1(object);
            success = this.writeMap$1(object);
            this._removeSeen$1(object);
            return success;
          } else
            return false;
        }
      },
      writeList$1: function(list) {
        var t1, i;
        this.writeString$1("[");
        t1 = J.getInterceptor$asx(list);
        if (t1.get$length(list) > 0) {
          this.writeObject$1(t1.$index(list, 0));
          for (i = 1; i < t1.get$length(list); ++i) {
            this.writeString$1(",");
            this.writeObject$1(t1.$index(list, i));
          }
        }
        this.writeString$1("]");
      },
      writeMap$1: function(map) {
        var t1, t2, keyValueList, separator, i;
        t1 = {};
        if (map.get$isEmpty(map)) {
          this.writeString$1("{}");
          return true;
        }
        t2 = map.get$length(map) * 2;
        keyValueList = Array(t2);
        t1._captured_i_0 = 0;
        t1._captured_allStringKeys_1 = true;
        map.forEach$1(0, new P._JsonStringifier_writeMap_closure(t1, keyValueList));
        if (!t1._captured_allStringKeys_1)
          return false;
        this.writeString$1("{");
        for (separator = "\"", i = 0; i < t2; i += 2, separator = ",\"") {
          this.writeString$1(separator);
          this.writeStringContent$1(keyValueList[i]);
          this.writeString$1("\":");
          this.writeObject$1(keyValueList[i + 1]);
        }
        this.writeString$1("}");
        return true;
      },
      _toEncodable$1: function(arg0) {
        return this._toEncodable.call$1(arg0);
      }
    },
    _JsonStringifier_writeMap_closure: {
      "^": "Closure:14;_convert$_box_0,_captured_keyValueList_1",
      call$2: function(key, value) {
        var t1, t2, t3, i;
        if (typeof key !== "string")
          this._convert$_box_0._captured_allStringKeys_1 = false;
        t1 = this._captured_keyValueList_1;
        t2 = this._convert$_box_0;
        t3 = t2._captured_i_0;
        i = t3 + 1;
        t2._captured_i_0 = i;
        t1[t3] = key;
        t2._captured_i_0 = i + 1;
        t1[i] = value;
      }
    },
    _JsonPrettyPrintMixin: {
      "^": "Object;",
      writeList$1: function(list) {
        var t1, i;
        t1 = J.getInterceptor$asx(list);
        if (t1.get$isEmpty(list))
          this.writeString$1("[]");
        else {
          this.writeString$1("[\n");
          this.writeIndentation$1(++this._JsonPrettyPrintMixin__indentLevel);
          this.writeObject$1(t1.$index(list, 0));
          for (i = 1; i < t1.get$length(list); ++i) {
            this.writeString$1(",\n");
            this.writeIndentation$1(this._JsonPrettyPrintMixin__indentLevel);
            this.writeObject$1(t1.$index(list, i));
          }
          this.writeString$1("\n");
          this.writeIndentation$1(--this._JsonPrettyPrintMixin__indentLevel);
          this.writeString$1("]");
        }
      },
      writeMap$1: function(map) {
        var t1, t2, keyValueList, separator, i;
        t1 = {};
        if (map.get$isEmpty(map)) {
          this.writeString$1("{}");
          return true;
        }
        t2 = map.get$length(map) * 2;
        keyValueList = Array(t2);
        t1._captured_i_0 = 0;
        t1._captured_allStringKeys_1 = true;
        map.forEach$1(0, new P._JsonPrettyPrintMixin_writeMap_closure(t1, keyValueList));
        if (!t1._captured_allStringKeys_1)
          return false;
        this.writeString$1("{\n");
        ++this._JsonPrettyPrintMixin__indentLevel;
        for (separator = "", i = 0; i < t2; i += 2, separator = ",\n") {
          this.writeString$1(separator);
          this.writeIndentation$1(this._JsonPrettyPrintMixin__indentLevel);
          this.writeString$1("\"");
          this.writeStringContent$1(keyValueList[i]);
          this.writeString$1("\": ");
          this.writeObject$1(keyValueList[i + 1]);
        }
        this.writeString$1("\n");
        this.writeIndentation$1(--this._JsonPrettyPrintMixin__indentLevel);
        this.writeString$1("}");
        return true;
      }
    },
    _JsonPrettyPrintMixin_writeMap_closure: {
      "^": "Closure:14;_convert$_box_0,_captured_keyValueList_1",
      call$2: function(key, value) {
        var t1, t2, t3, i;
        if (typeof key !== "string")
          this._convert$_box_0._captured_allStringKeys_1 = false;
        t1 = this._captured_keyValueList_1;
        t2 = this._convert$_box_0;
        t3 = t2._captured_i_0;
        i = t3 + 1;
        t2._captured_i_0 = i;
        t1[t3] = key;
        t2._captured_i_0 = i + 1;
        t1[i] = value;
      }
    },
    _JsonStringStringifier: {
      "^": "_JsonStringifier;_sink,_seen,_toEncodable",
      writeNumber$1: function(number) {
        this._sink._contents += C.JSNumber_methods.toString$0(number);
      },
      writeString$1: function(string) {
        this._sink._contents += H.S(string);
      },
      writeStringSlice$3: function(string, start, end) {
        this._sink._contents += J.substring$2$s(string, start, end);
      },
      writeCharCode$1: function(charCode) {
        this._sink._contents += H.Primitives_stringFromCharCode(charCode);
      },
      static: {_JsonStringStringifier_stringify: function(object, toEncodable, indent) {
          var output, t1, stringifier;
          output = new P.StringBuffer("");
          if (indent == null) {
            t1 = toEncodable != null ? toEncodable : P._defaultToEncodable$closure();
            stringifier = new P._JsonStringStringifier(output, [], t1);
          } else {
            t1 = toEncodable != null ? toEncodable : P._defaultToEncodable$closure();
            stringifier = new P._JsonStringStringifierPretty(indent, 0, output, [], t1);
          }
          stringifier.writeObject$1(object);
          t1 = output._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }}
    },
    _JsonStringStringifierPretty: {
      "^": "_JsonStringStringifier__JsonPrettyPrintMixin;_indent,_JsonPrettyPrintMixin__indentLevel,_sink,_seen,_toEncodable",
      writeIndentation$1: function(count) {
        var t1, t2, i;
        for (t1 = this._indent, t2 = this._sink, i = 0; i < count; ++i)
          t2._contents += t1;
      }
    },
    _JsonStringStringifier__JsonPrettyPrintMixin: {
      "^": "_JsonStringStringifier+_JsonPrettyPrintMixin;"
    },
    Utf8Codec: {
      "^": "Encoding;_allowMalformed",
      get$name: function(_) {
        return "utf-8";
      },
      decode$2$allowMalformed: function(codeUnits, allowMalformed) {
        return new P.Utf8Decoder(this._allowMalformed).convert$1(codeUnits);
      },
      decode$1: function(codeUnits) {
        return this.decode$2$allowMalformed(codeUnits, null);
      },
      get$encoder: function() {
        return new P.Utf8Encoder();
      }
    },
    Utf8Encoder: {
      "^": "Converter;",
      convert$3: function(string, start, end) {
        var stringLength, $length, t1, encoder;
        stringLength = string.length;
        P.RangeError_checkValidRange(start, end, stringLength, null, null, null);
        $length = stringLength - start;
        if ($length === 0)
          return new Uint8Array(H._checkLength(0));
        t1 = new Uint8Array(H._checkLength($length * 3));
        encoder = new P._Utf8Encoder(0, 0, t1);
        if (encoder._fillBuffer$3(string, start, stringLength) !== stringLength)
          encoder._writeSurrogate$2(J.codeUnitAt$1$s(string, stringLength - 1), 0);
        return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
      },
      convert$1: function(string) {
        return this.convert$3(string, 0, null);
      },
      $asConverter: function() {
        return [P.String, [P.List, P.$int]];
      }
    },
    _Utf8Encoder: {
      "^": "Object;_carry,_bufferIndex,_buffer",
      _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
        var t1, t2, rune, t3;
        t1 = this._buffer;
        t2 = this._bufferIndex;
        if ((nextCodeUnit & 64512) === 56320) {
          rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          t1[t2] = (240 | rune >>> 18) >>> 0;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          t1[t3] = 128 | rune >>> 12 & 63;
          t3 = t2 + 1;
          this._bufferIndex = t3;
          t1[t2] = 128 | rune >>> 6 & 63;
          this._bufferIndex = t3 + 1;
          t1[t3] = 128 | rune & 63;
          return true;
        } else {
          t3 = t2 + 1;
          this._bufferIndex = t3;
          t1[t2] = 224 | leadingSurrogate >>> 12;
          t2 = t3 + 1;
          this._bufferIndex = t2;
          t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
          this._bufferIndex = t2 + 1;
          t1[t2] = 128 | leadingSurrogate & 63;
          return false;
        }
      },
      _fillBuffer$3: function(str, start, end) {
        var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
        if (start !== end && (J.codeUnitAt$1$s(str, end - 1) & 64512) === 55296)
          --end;
        for (t1 = this._buffer, t2 = t1.length, t3 = J.getInterceptor$s(str), stringIndex = start; stringIndex < end; ++stringIndex) {
          codeUnit = t3.codeUnitAt$1(str, stringIndex);
          if (codeUnit <= 127) {
            t4 = this._bufferIndex;
            if (t4 >= t2)
              break;
            this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit;
          } else if ((codeUnit & 64512) === 55296) {
            if (this._bufferIndex + 3 >= t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (this._writeSurrogate$2(codeUnit, C.JSString_methods.codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (codeUnit <= 2047) {
            t4 = this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            this._bufferIndex = t5;
            t1[t4] = 192 | codeUnit >>> 6;
            this._bufferIndex = t5 + 1;
            t1[t5] = 128 | codeUnit & 63;
          } else {
            t4 = this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = t4 + 1;
            this._bufferIndex = t5;
            t1[t4] = 224 | codeUnit >>> 12;
            t4 = t5 + 1;
            this._bufferIndex = t4;
            t1[t5] = 128 | codeUnit >>> 6 & 63;
            this._bufferIndex = t4 + 1;
            t1[t4] = 128 | codeUnit & 63;
          }
        }
        return stringIndex;
      }
    },
    Utf8Decoder: {
      "^": "Converter;_allowMalformed",
      convert$3: function(codeUnits, start, end) {
        var $length, buffer, decoder, t1;
        $length = J.get$length$asx(codeUnits);
        P.RangeError_checkValidRange(start, end, $length, null, null, null);
        buffer = new P.StringBuffer("");
        decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
        decoder.convert$3(codeUnits, start, $length);
        decoder.flush$0();
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      convert$1: function(codeUnits) {
        return this.convert$3(codeUnits, 0, null);
      },
      $asConverter: function() {
        return [[P.List, P.$int], P.String];
      }
    },
    _Utf8Decoder: {
      "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_value,_expectedUnits,_extraUnits",
      close$0: function(_) {
        this.flush$0();
      },
      flush$0: function() {
        if (this._expectedUnits > 0) {
          if (!this._allowMalformed)
            throw H.wrapException(new P.FormatException("Unfinished UTF-8 octet sequence", null, null));
          this._stringSink._contents += H.Primitives_stringFromCharCode(65533);
          this._value = 0;
          this._expectedUnits = 0;
          this._extraUnits = 0;
        }
      },
      convert$3: function(codeUnits, startIndex, endIndex) {
        var value, expectedUnits, extraUnits, t1, t2, t3, t4, t5, i, unit, oneBytes, i0;
        value = this._value;
        expectedUnits = this._expectedUnits;
        extraUnits = this._extraUnits;
        this._value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
        t1 = new P._Utf8Decoder_convert_scanOneByteCharacters(endIndex);
        t2 = new P._Utf8Decoder_convert_addSingleBytes(this, codeUnits, startIndex, endIndex);
        $loop$0:
          for (t3 = this._stringSink, t4 = !this._allowMalformed, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
            $multibyte$2:
              if (expectedUnits > 0) {
                do {
                  if (i === endIndex)
                    break $loop$0;
                  unit = t5.$index(codeUnits, i);
                  if ((unit & 192) !== 128) {
                    if (t4)
                      throw H.wrapException(new P.FormatException("Bad UTF-8 encoding 0x" + C.JSInt_methods.toRadixString$1(unit, 16), null, null));
                    this._isFirstCharacter = false;
                    t3._contents += H.Primitives_stringFromCharCode(65533);
                    expectedUnits = 0;
                    break $multibyte$2;
                  } else {
                    value = (value << 6 | unit & 63) >>> 0;
                    --expectedUnits;
                    ++i;
                  }
                } while (expectedUnits > 0);
                if (value <= C.List_127_2047_65535_1114111[extraUnits - 1]) {
                  if (t4)
                    throw H.wrapException(new P.FormatException("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                  value = 65533;
                  expectedUnits = 0;
                  extraUnits = 0;
                }
                if (value > 1114111) {
                  if (t4)
                    throw H.wrapException(new P.FormatException("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                  value = 65533;
                }
                if (!this._isFirstCharacter || value !== 65279)
                  t3._contents += H.Primitives_stringFromCharCode(value);
                this._isFirstCharacter = false;
              }
            for (; i < endIndex; i = i0) {
              oneBytes = t1.call$2(codeUnits, i);
              if (oneBytes > 0) {
                this._isFirstCharacter = false;
                i0 = i + oneBytes;
                t2.call$2(i, i0);
                if (i0 === endIndex)
                  break;
                i = i0;
              }
              i0 = i + 1;
              unit = t5.$index(codeUnits, i);
              if (unit < 0) {
                if (t4)
                  throw H.wrapException(new P.FormatException("Negative UTF-8 code unit: -0x" + C.JSInt_methods.toRadixString$1(-unit, 16), null, null));
                t3._contents += H.Primitives_stringFromCharCode(65533);
              } else {
                if ((unit & 224) === 192) {
                  value = unit & 31;
                  expectedUnits = 1;
                  extraUnits = 1;
                  continue $loop$0;
                }
                if ((unit & 240) === 224) {
                  value = unit & 15;
                  expectedUnits = 2;
                  extraUnits = 2;
                  continue $loop$0;
                }
                if ((unit & 248) === 240 && unit < 245) {
                  value = unit & 7;
                  expectedUnits = 3;
                  extraUnits = 3;
                  continue $loop$0;
                }
                if (t4)
                  throw H.wrapException(new P.FormatException("Bad UTF-8 encoding 0x" + C.JSInt_methods.toRadixString$1(unit, 16), null, null));
                this._isFirstCharacter = false;
                t3._contents += H.Primitives_stringFromCharCode(65533);
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
            }
            break $loop$0;
          }
        if (expectedUnits > 0) {
          this._value = value;
          this._expectedUnits = expectedUnits;
          this._extraUnits = extraUnits;
        }
      }
    },
    _Utf8Decoder_convert_scanOneByteCharacters: {
      "^": "Closure:33;_captured_endIndex_0",
      call$2: function(units, from) {
        var to, t1, i, unit;
        to = this._captured_endIndex_0;
        for (t1 = J.getInterceptor$asx(units), i = from; i < to; ++i) {
          unit = t1.$index(units, i);
          if (J.$and$n(unit, 127) !== unit)
            return i - from;
        }
        return to - from;
      }
    },
    _Utf8Decoder_convert_addSingleBytes: {
      "^": "Closure:34;_captured_this_1,_captured_codeUnits_2,_captured_startIndex_3,_captured_endIndex_4",
      call$2: function(from, to) {
        this._captured_this_1._stringSink._contents += P.String_String$fromCharCodes(this._captured_codeUnits_2, from, to);
      }
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), null, null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), null, null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, null, null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    Comparable_compare: [function(a, b) {
      return J.compareTo$1$ns(a, b);
    }, "call$2", "Comparable_compare$closure", 4, 0, 193],
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    Error__objectToString: function(object) {
      var t1 = J.getInterceptor(object);
      if (!!t1.$isClosure)
        return t1.toString$0(object);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Exception_Exception: function(message) {
      return new P._ExceptionImplementation(message);
    },
    identical: [function(a, b) {
      return a == null ? b == null : a === b;
    }, "call$2", "identical$closure", 4, 0, 194],
    identityHashCode: [function(object) {
      return H.objectHashCode(object);
    }, "call$1", "identityHashCode$closure", 2, 0, 195],
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = [];
      list.$builtinTypeInfo = [$E];
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current());
      if (growable)
        return list;
      list.fixed$length = Array;
      return list;
    },
    print: function(object) {
      var line, t1;
      line = H.S(object);
      t1 = $.printToZone;
      if (t1 == null)
        H.printString(line);
      else
        t1.call$1(line);
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false), null, null);
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len;
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len, null, null, null);
        return H.Primitives_stringFromCharCodes(start > 0 || end < len ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (!!J.getInterceptor(charCodes).$isNativeUint8List)
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length, null, null, null));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    NoSuchMethodError_toString_closure: {
      "^": "Closure:16;_core$_box_0,_captured_sb_1",
      call$2: function(key, value) {
        var t1, t2, t3;
        t1 = this._captured_sb_1;
        t2 = this._core$_box_0;
        t1._contents += t2._captured_comma_0;
        t3 = t1._contents += H.S(key._name);
        t1._contents = t3 + ": ";
        t1._contents += H.S(P.Error_safeToString(value));
        t2._captured_comma_0 = ", ";
      }
    },
    Deprecated: {
      "^": "Object;expires",
      toString$0: function(_) {
        return "Deprecated feature. Will be removed " + this.expires;
      }
    },
    _Override: {
      "^": "Object;"
    },
    bool: {
      "^": "Object;",
      toString$0: function(_) {
        return this ? "true" : "false";
      }
    },
    "+bool": 0,
    Comparable: {
      "^": "Object;"
    },
    DateTime: {
      "^": "Object;millisecondsSinceEpoch,isUtc",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
      },
      compareTo$1: function(_, other) {
        return C.JSInt_methods.compareTo$1(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch);
      },
      get$hashCode: function(_) {
        return this.millisecondsSinceEpoch;
      },
      toUtc$0: function() {
        if (this.isUtc)
          return this;
        return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch, true);
      },
      toString$0: function(_) {
        var y, m, d, h, min, sec, ms;
        y = P.DateTime__fourDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        if (this.isUtc)
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      },
      toIso8601String$0: function() {
        var y, m, d, h, min, sec, ms;
        y = H.Primitives_getYear(this) >= -9999 && H.Primitives_getYear(this) <= 9999 ? P.DateTime__fourDigits(H.Primitives_getYear(this)) : P.DateTime__sixDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        if (this.isUtc)
          return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms;
      },
      add$1: function(_, duration) {
        return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + C.JSInt_methods._tdivFast$1(duration._duration, 1000), this.isUtc);
      },
      get$timeZoneOffset: function() {
        if (this.isUtc)
          return P.Duration$(0, 0, 0, 0, 0, 0);
        return P.Duration$(0, 0, 0, 0, -H.Primitives_lazyAsJsDate(this).getTimezoneOffset(), 0);
      },
      DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
        if (C.JSInt_methods.abs$0(millisecondsSinceEpoch) > 864e13)
          throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
      },
      $isComparable: 1,
      $asComparable: functionThatReturnsNull,
      static: {DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
          var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
          t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
          return t1;
        }, DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + H.S(absN);
          if (absN >= 10)
            return sign + "00" + H.S(absN);
          return sign + "000" + H.S(absN);
        }, DateTime__sixDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "+";
          if (absN >= 100000)
            return sign + H.S(absN);
          return sign + "0" + H.S(absN);
        }, DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        }, DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }}
    },
    $double: {
      "^": "num;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration",
      $add: function(_, other) {
        return new P.Duration(this._duration + other._duration);
      },
      $sub: function(_, other) {
        return new P.Duration(C.JSInt_methods.$sub(this._duration, other.get$_duration()));
      },
      $lt: function(_, other) {
        return C.JSInt_methods.$lt(this._duration, other.get$_duration());
      },
      $gt: function(_, other) {
        return C.JSInt_methods.$gt(this._duration, other.get$_duration());
      },
      get$inMilliseconds: function() {
        return C.JSInt_methods._tdivFast$1(this._duration, 1000);
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return this._duration === other._duration;
      },
      get$hashCode: function(_) {
        return this._duration & 0x1FFFFFFF;
      },
      compareTo$1: function(_, other) {
        return C.JSInt_methods.compareTo$1(this._duration, other._duration);
      },
      toString$0: function(_) {
        var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        t2 = this._duration;
        if (t2 < 0)
          return "-" + new P.Duration(-t2).toString$0(0);
        twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
        twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
        return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.Duration];
      },
      static: {Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
          return new P.Duration(864e8 * days + 3600000000 * hours + 60000000 * minutes + 1000000 * seconds + 1000 * milliseconds + microseconds);
        }}
    },
    Duration_toString_sixDigits: {
      "^": "Closure:18;",
      call$1: function(n) {
        if (n >= 100000)
          return "" + n;
        if (n >= 10000)
          return "0" + n;
        if (n >= 1000)
          return "00" + n;
        if (n >= 100)
          return "000" + n;
        if (n >= 10)
          return "0000" + n;
        return "00000" + n;
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:18;",
      call$1: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name>,message>",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        }, ArgumentError$notNull: function($name) {
          return new P.ArgumentError(true, null, $name, "Must not be null");
        }}
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else if (t2 > t1)
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
        return explanation;
      },
      static: {RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        }, RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        }, RangeError_checkValueInInterval: function(value, minValue, maxValue, $name, message) {
          if (value < minValue || value > maxValue)
            throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, message));
        }, RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (start > end || end > $length)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }}
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        P.Error_safeToString(this.indexable);
        var explanation = ": index should be less than " + this.length;
        return J.$lt$n(this.invalidValue, 0) ? ": index must not be negative" : explanation;
      },
      static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = $length != null ? $length : J.get$length$asx(indexable);
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }}
    },
    NoSuchMethodError: {
      "^": "Error;_receiver,_core$_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
      toString$0: function(_) {
        var t1, sb, t2, argument, memberName, receiverText, actualParameters, formalParameters;
        t1 = {};
        sb = new P.StringBuffer("");
        t1._captured_comma_0 = "";
        t2 = this._core$_arguments;
        if (t2 != null)
          for (t2 = J.get$iterator$ax(t2); t2.moveNext$0();) {
            argument = t2.get$current();
            sb._contents += t1._captured_comma_0;
            sb._contents += H.S(P.Error_safeToString(argument));
            t1._captured_comma_0 = ", ";
          }
        t2 = this._namedArguments;
        if (t2 != null)
          t2.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1, sb));
        memberName = this._core$_memberName._name;
        receiverText = P.Error_safeToString(this._receiver);
        actualParameters = H.S(sb);
        t1 = this._existingArgumentNames;
        if (t1 == null)
          return "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
        else {
          formalParameters = J.join$1$ax(t1, ", ");
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nTried calling: " + H.S(memberName) + "(" + actualParameters + ")\nFound: " + H.S(memberName) + "(" + formalParameters + ")";
        }
      },
      static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
          return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
        }}
    },
    UnsupportedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      }
    },
    UnimplementedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      }
    },
    StateError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        return "Reading static variable '" + this.variableName + "' during its initialization";
      }
    },
    _ExceptionImplementation: {
      "^": "Object;message>",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      }
    },
    FormatException: {
      "^": "Object;message>,source,offset",
      toString$0: function(_) {
        var t1, report, offset, source, lineNum, lineStart, lastWasCR, i, $char, lineEnd, end, start, prefix, postfix, slice;
        t1 = this.message;
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
        offset = this.offset;
        source = this.source;
        if (typeof source !== "string")
          return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = J.substring$2$s(source, 0, 75) + "...";
          return report + "\n" + H.S(source);
        }
        for (t1 = J.getInterceptor$s(source), lineNum = 1, lineStart = 0, lastWasCR = null, i = 0; i < offset; ++i) {
          $char = t1.codeUnitAt$1(source, i);
          if ($char === 10) {
            if (lineStart !== i || !lastWasCR)
              ++lineNum;
            lineStart = i + 1;
            lastWasCR = false;
          } else if ($char === 13) {
            ++lineNum;
            lineStart = i + 1;
            lastWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          $char = t1.codeUnitAt$1(source, i);
          if ($char === 10 || $char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = t1.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      }
    },
    Expando: {
      "^": "Object;name>",
      toString$0: function(_) {
        return "Expando:" + H.S(this.name);
      },
      $index: function(_, object) {
        var values = H.Primitives_getProperty(object, "expando$values");
        return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
      },
      $indexSet: function(_, object, value) {
        var values = H.Primitives_getProperty(object, "expando$values");
        if (values == null) {
          values = new P.Object();
          H.Primitives_setProperty(object, "expando$values", values);
        }
        H.Primitives_setProperty(values, this._getKey$0(), value);
      },
      _getKey$0: function() {
        var key, t1;
        key = H.Primitives_getProperty(this, "expando$key");
        if (key == null) {
          t1 = $.Expando__keyCount;
          $.Expando__keyCount = t1 + 1;
          key = "expando$key$" + t1;
          H.Primitives_setProperty(this, "expando$key", key);
        }
        return key;
      }
    },
    Function: {
      "^": "Object;"
    },
    $int: {
      "^": "num;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+int": 0,
    Invocation: {
      "^": "Object;"
    },
    Iterable: {
      "^": "Object;",
      map$1: function(_, f) {
        return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "Iterable", 0), null);
      },
      contains$1: function(_, element) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (J.$eq(t1.get$current(), element))
            return true;
        return false;
      },
      forEach$1: function(_, f) {
        var t1;
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      fold$2: function(_, initialValue, combine) {
        var t1, value;
        for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
          value = combine.call$2(value, t1.get$current());
        return value;
      },
      join$1: function(_, separator) {
        var iterator, buffer, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        buffer = new P.StringBuffer("");
        if (separator === "") {
          do
            buffer._contents += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          buffer._contents = H.S(iterator.get$current());
          for (; iterator.moveNext$0();) {
            buffer._contents += separator;
            buffer._contents += H.S(iterator.get$current());
          }
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      toList$1$growable: function(_, growable) {
        return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$isNotEmpty: function(_) {
        return !this.get$isEmpty(this);
      },
      get$last: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        do
          result = it.get$current();
        while (it.moveNext$0());
        return result;
      },
      firstWhere$2$orElse: function(_, test, orElse) {
        var t1, element;
        for (t1 = this.get$iterator(this); t1.moveNext$0();) {
          element = t1.get$current();
          if (test.call$1(element))
            return element;
        }
        return orElse.call$0();
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      },
      $asIterable: null
    },
    Iterator: {
      "^": "Object;"
    },
    List: {
      "^": "Object;",
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    "+List": 0,
    Map: {
      "^": "Object;"
    },
    Null: {
      "^": "Object;",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: [function(_, other) {
        return this === other;
      }, null, "get$==", 2, 0, 1, 4, [], "=="],
      get$hashCode: [function(_) {
        return H.Primitives_objectHashCode(this);
      }, null, null, 1, 0, 2, "hashCode"],
      toString$0: ["super$Object$toString$0", function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      }, "call$0", "get$toString", 0, 0, 3, "toString"],
      noSuchMethod$1: [function(_, invocation) {
        throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, "call$1", "get$noSuchMethod", 2, 0, 4, 5, [], "noSuchMethod"],
      get$runtimeType: [function(_) {
        return new H.TypeImpl(H.getRuntimeTypeString(this), null);
      }, null, null, 1, 0, 35, "runtimeType"]
    },
    Match: {
      "^": "Object;"
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      }
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents@",
      get$length: function(_) {
        return this._contents.length;
      },
      get$isEmpty: function(_) {
        return this._contents.length === 0;
      },
      write$1: function(obj) {
        this._contents += H.S(obj);
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }}
    },
    Symbol0: {
      "^": "Object;"
    },
    Type: {
      "^": "Object;"
    },
    Uri: {
      "^": "Object;_host<,_port<,_path<,scheme<,_userInfo<,_query<,_fragment,_pathSegments,_queryParameters",
      get$host: function(_) {
        var t1 = this._host;
        if (t1 == null)
          return "";
        if (J.getInterceptor$s(t1).startsWith$1(t1, "["))
          return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
        return t1;
      },
      get$port: function(_) {
        var t1 = this._port;
        if (t1 == null)
          return P.Uri__defaultPort(this.scheme);
        return t1;
      },
      get$path: function(_) {
        return this._path;
      },
      get$pathSegments: function() {
        var t1, pathToSplit;
        t1 = this._pathSegments;
        if (t1 == null) {
          pathToSplit = this._path;
          if (pathToSplit.length !== 0 && C.JSString_methods.codeUnitAt$1(pathToSplit, 0) === 47)
            pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
          if (pathToSplit === "")
            t1 = C.List_empty3;
          else {
            t1 = new H.MappedListIterable(pathToSplit.split("/"), P.Uri_decodeComponent$closure());
            t1.$builtinTypeInfo = [null, null];
            t1 = t1.toList$1$growable(0, false);
          }
          t1 = new P.UnmodifiableListView(t1);
          t1.$builtinTypeInfo = [null];
          this._pathSegments = t1;
        }
        return t1;
      },
      _merge$2: function(base, reference) {
        var backCount, refStart, baseEnd, newEnd, delta, t1;
        if (base.length === 0)
          return "/" + reference;
        for (backCount = 0, refStart = 0; C.JSString_methods.startsWith$2(reference, "../", refStart);) {
          refStart += 3;
          ++backCount;
        }
        baseEnd = C.JSString_methods.lastIndexOf$1(base, "/");
        while (true) {
          if (!(baseEnd > 0 && backCount > 0))
            break;
          newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
          if (newEnd < 0)
            break;
          delta = baseEnd - newEnd;
          t1 = delta !== 2;
          if (!t1 || delta === 3)
            if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
              t1 = !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
            else
              t1 = false;
          else
            t1 = false;
          if (t1)
            break;
          --backCount;
          baseEnd = newEnd;
        }
        return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
      },
      _hasDotSegments$1: function(path) {
        if (path.length > 0 && C.JSString_methods.codeUnitAt$1(path, 0) === 46)
          return true;
        return C.JSString_methods.indexOf$1(path, "/.") !== -1;
      },
      _removeDotSegments$1: function(path) {
        var output, t1, t2, appendSlash, _i, segment, t3;
        if (!this._hasDotSegments$1(path))
          return path;
        output = [];
        for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          segment = t1[_i];
          if (segment === "..") {
            t3 = output.length;
            if (t3 !== 0)
              t3 = t3 !== 1 || output[0] !== "";
            else
              t3 = false;
            if (t3)
              output.pop();
            appendSlash = true;
          } else if ("." === segment)
            appendSlash = true;
          else {
            output.push(segment);
            appendSlash = false;
          }
        }
        if (appendSlash)
          output.push("");
        return C.JSArray_methods.join$1(output, "/");
      },
      toFilePath$1$windows: function(windows) {
        var t1 = this.scheme;
        if (t1 !== "" && t1 !== "file")
          throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a " + t1 + " URI"));
        t1 = this._query;
        if ((t1 == null ? "" : t1) !== "")
          throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a URI with a query component"));
        t1 = this._fragment;
        if ((t1 == null ? "" : t1) !== "")
          throw H.wrapException(new P.UnsupportedError("Cannot extract a file path from a URI with a fragment component"));
        if (this.get$host(this) !== "")
          H.throwExpression(new P.UnsupportedError("Cannot extract a non-Windows file path from a file URI with an authority"));
        P.Uri__checkNonWindowsPathReservedCharacters(this.get$pathSegments(), false);
        t1 = this.get$_isPathAbsolute() ? "/" : "";
        t1 = P.StringBuffer__writeAll(t1, this.get$pathSegments(), "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
        return t1;
      },
      toFilePath$0: function() {
        return this.toFilePath$1$windows(null);
      },
      get$_isPathAbsolute: function() {
        if (this._path.length === 0)
          return false;
        return C.JSString_methods.startsWith$1(this._path, "/");
      },
      toString$0: function(_) {
        var t1, t2, t3, t4;
        t1 = this.scheme;
        t2 = "" !== t1 ? t1 + ":" : "";
        t3 = this._host;
        t4 = t3 == null;
        if (!t4 || C.JSString_methods.startsWith$1(this._path, "//") || t1 === "file") {
          t1 = t2 + "//";
          t2 = this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += H.S(t3);
          t2 = this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += this._path;
        t2 = this._query;
        if (t2 != null)
          t1 = t1 + "?" + H.S(t2);
        t2 = this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + H.S(t2);
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $eq: function(_, other) {
        var t1, t2, t3, t4;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isUri)
          return false;
        if (this.scheme === other.scheme)
          if (this._host != null === (other._host != null))
            if (this._userInfo === other._userInfo) {
              t2 = this.get$host(this);
              t3 = t1.get$host(other);
              if (t2 == null ? t3 == null : t2 === t3) {
                t2 = this.get$port(this);
                t1 = t1.get$port(other);
                if (t2 == null ? t1 == null : t2 === t1)
                  if (this._path === other._path) {
                    t1 = this._query;
                    t2 = t1 == null;
                    t3 = other._query;
                    t4 = t3 == null;
                    if (!t2 === !t4) {
                      if (t2)
                        t1 = "";
                      if (t1 == null ? (t4 ? "" : t3) == null : t1 === (t4 ? "" : t3)) {
                        t1 = this._fragment;
                        t2 = t1 == null;
                        t3 = other._fragment;
                        t4 = t3 == null;
                        if (!t2 === !t4) {
                          if (t2)
                            t1 = "";
                          t1 = t1 == null ? (t4 ? "" : t3) == null : t1 === (t4 ? "" : t3);
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
        return t1;
      },
      get$hashCode: function(_) {
        var t1, t2, t3, t4, t5;
        t1 = new P.Uri_hashCode_combine();
        t2 = this.get$host(this);
        t3 = this.get$port(this);
        t4 = this._query;
        if (t4 == null)
          t4 = "";
        t5 = this._fragment;
        return t1.call$2(this.scheme, t1.call$2(this._userInfo, t1.call$2(t2, t1.call$2(t3, t1.call$2(this._path, t1.call$2(t4, t1.call$2(t5 == null ? "" : t5, 1)))))));
      },
      static: {Uri__defaultPort: function(scheme) {
          if (scheme === "http")
            return 80;
          if (scheme === "https")
            return 443;
          return 0;
        }, Uri_parse: function(uri, start, end) {
          var t1, pathStart, state, t2, i, $char, index, t3, t4, path, numberSignIndex, query, fragment;
          t1 = {};
          t1._captured_end_0 = end;
          t1._captured_scheme_1 = "";
          t1._captured_userinfo_2 = "";
          t1._captured_host_3 = null;
          t1._captured_port_4 = null;
          t1._captured_end_0 = uri.length;
          t1._captured_index_5 = start;
          t1._captured_char_6 = -1;
          t2 = J.getInterceptor$s(uri);
          i = start;
          while (true) {
            if (!(i < t1._captured_end_0)) {
              pathStart = start;
              state = 0;
              break;
            }
            $char = t2.codeUnitAt$1(uri, i);
            t1._captured_char_6 = $char;
            if ($char === 63 || $char === 35) {
              pathStart = start;
              state = 0;
              break;
            }
            if ($char === 47) {
              state = i === start ? 2 : 1;
              pathStart = start;
              break;
            }
            if ($char === 58) {
              if (i === start)
                P.Uri__fail(uri, start, "Invalid empty scheme");
              t1._captured_scheme_1 = P.Uri__makeScheme(uri, start, i);
              ++i;
              if (i === t1._captured_end_0) {
                t1._captured_char_6 = -1;
                state = 0;
              } else {
                $char = C.JSString_methods.codeUnitAt$1(uri, i);
                t1._captured_char_6 = $char;
                if ($char === 63 || $char === 35)
                  state = 0;
                else
                  state = $char === 47 ? 2 : 1;
              }
              pathStart = i;
              break;
            }
            ++i;
            t1._captured_char_6 = -1;
          }
          t1._captured_index_5 = i;
          if (state === 2) {
            index = i + 1;
            t1._captured_index_5 = index;
            if (index === t1._captured_end_0) {
              t1._captured_char_6 = -1;
              state = 0;
            } else {
              $char = t2.codeUnitAt$1(uri, index);
              t1._captured_char_6 = $char;
              if ($char === 47) {
                t1._captured_index_5 = t1._captured_index_5 + 1;
                new P.Uri_parse_parseAuth(t1, uri, -1).call$0();
                pathStart = t1._captured_index_5;
              }
              t3 = t1._captured_char_6;
              state = t3 === 63 || t3 === 35 || t3 === -1 ? 0 : 1;
            }
          }
          if (state === 1)
            for (; index = t1._captured_index_5 + 1, t1._captured_index_5 = index, index < t1._captured_end_0;) {
              $char = t2.codeUnitAt$1(uri, index);
              t1._captured_char_6 = $char;
              if ($char === 63 || $char === 35)
                break;
              t1._captured_char_6 = -1;
            }
          t3 = t1._captured_scheme_1;
          t4 = t1._captured_host_3;
          path = P.Uri__makePath(uri, pathStart, t1._captured_index_5, null, t4 != null, t3 === "file");
          t3 = t1._captured_char_6;
          if (t3 === 63) {
            i = t1._captured_index_5 + 1;
            while (true) {
              if (!(i < t1._captured_end_0)) {
                numberSignIndex = -1;
                break;
              }
              if (t2.codeUnitAt$1(uri, i) === 35) {
                numberSignIndex = i;
                break;
              }
              ++i;
            }
            t2 = t1._captured_index_5;
            if (numberSignIndex < 0) {
              query = P.Uri__makeQuery(uri, t2 + 1, t1._captured_end_0, null);
              fragment = null;
            } else {
              query = P.Uri__makeQuery(uri, t2 + 1, numberSignIndex, null);
              fragment = P.Uri__makeFragment(uri, numberSignIndex + 1, t1._captured_end_0);
            }
          } else {
            fragment = t3 === 35 ? P.Uri__makeFragment(uri, t1._captured_index_5 + 1, t1._captured_end_0) : null;
            query = null;
          }
          t2 = t1._captured_scheme_1;
          t3 = t1._captured_userinfo_2;
          return new P.Uri(t1._captured_host_3, t1._captured_port_4, path, t2, t3, query, fragment, null, null);
        }, Uri__fail: function(uri, index, message) {
          throw H.wrapException(new P.FormatException(message, uri, index));
        }, Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
          segments.forEach$1(segments, new P.Uri__checkNonWindowsPathReservedCharacters_closure(argumentError));
        }, Uri__makePort: function(port, scheme) {
          if (port != null && port === P.Uri__defaultPort(scheme))
            return;
          return port;
        }, Uri__makeHost: function(host, start, end, strictIPv6) {
          var t1, i;
          if (host == null)
            return;
          if (start == null ? end == null : start === end)
            return "";
          if (C.JSString_methods.codeUnitAt$1(host, start) === 91) {
            t1 = end - 1;
            if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
              P.Uri__fail(host, start, "Missing end `]` to match `[` in host");
            P.Uri_parseIPv6Address(host, start + 1, t1);
            return C.JSString_methods.substring$2(host, start, end).toLowerCase();
          }
          if (!strictIPv6)
            for (i = start; i < end; ++i)
              if (C.JSString_methods.codeUnitAt$1(host, i) === 58) {
                P.Uri_parseIPv6Address(host, start, end);
                return "[" + host + "]";
              }
          return P.Uri__normalizeRegName(host, start, end);
        }, Uri__normalizeRegName: function(host, start, end) {
          var index, sectionStart, buffer, isNormalized, $char, replacement, t1, slice, sourceLength, tail;
          for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
            $char = C.JSString_methods.codeUnitAt$1(host, index);
            if ($char === 37) {
              replacement = P.Uri__normalizeEscape(host, index, true);
              t1 = replacement == null;
              if (t1 && isNormalized) {
                index += 3;
                continue;
              }
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = C.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              buffer._contents = buffer._contents + slice;
              if (t1) {
                replacement = C.JSString_methods.substring$2(host, index, index + 3);
                sourceLength = 3;
              } else if (replacement === "%") {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
              buffer._contents += replacement;
              index += sourceLength;
              sectionStart = index;
              isNormalized = true;
            } else if ($char < 127 && (C.List_qNA[$char >>> 4] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0) {
              if (isNormalized && 65 <= $char && 90 >= $char) {
                if (buffer == null)
                  buffer = new P.StringBuffer("");
                if (sectionStart < index) {
                  t1 = C.JSString_methods.substring$2(host, sectionStart, index);
                  buffer._contents = buffer._contents + t1;
                  sectionStart = index;
                }
                isNormalized = false;
              }
              ++index;
            } else if ($char <= 93 && (C.List_2Vk[$char >>> 4] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0)
              P.Uri__fail(host, index, "Invalid character");
            else {
              if (($char & 64512) === 55296 && index + 1 < end) {
                tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  $char = (65536 | ($char & 1023) << 10 | tail & 1023) >>> 0;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = C.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              buffer._contents = buffer._contents + slice;
              buffer._contents += P.Uri__escapeChar($char);
              index += sourceLength;
              sectionStart = index;
            }
          }
          if (buffer == null)
            return C.JSString_methods.substring$2(host, start, end);
          if (sectionStart < end) {
            slice = C.JSString_methods.substring$2(host, sectionStart, end);
            buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          }
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, Uri__makeScheme: function(scheme, start, end) {
          var firstCodeUnit, allLowercase, t1, i, codeUnit;
          if (start === end)
            return "";
          firstCodeUnit = J.getInterceptor$s(scheme).codeUnitAt$1(scheme, start);
          allLowercase = firstCodeUnit >= 97;
          if (!(allLowercase && firstCodeUnit <= 122))
            t1 = firstCodeUnit >= 65 && firstCodeUnit <= 90;
          else
            t1 = true;
          if (!t1)
            P.Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
          for (i = start; i < end; ++i) {
            codeUnit = C.JSString_methods.codeUnitAt$1(scheme, i);
            if (!(codeUnit < 128 && (C.List_JYB[codeUnit >>> 4] & C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0))
              P.Uri__fail(scheme, i, "Illegal scheme character");
            if (codeUnit < 97 || codeUnit > 122)
              allLowercase = false;
          }
          scheme = C.JSString_methods.substring$2(scheme, start, end);
          return !allLowercase ? scheme.toLowerCase() : scheme;
        }, Uri__makeUserInfo: function(userInfo, start, end) {
          if (userInfo == null)
            return "";
          return P.Uri__normalize(userInfo, start, end, C.List_gRj);
        }, Uri__makePath: function(path, start, end, pathSegments, ensureLeadingSlash, isFile) {
          var t1, result;
          t1 = path == null;
          if (t1 && true)
            return isFile ? "/" : "";
          t1 = !t1;
          if (t1)
            ;
          result = t1 ? P.Uri__normalize(path, start, end, C.List_qg4) : C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()).join$1(0, "/");
          if (result.length === 0) {
            if (isFile)
              return "/";
          } else if ((isFile || ensureLeadingSlash) && C.JSString_methods.codeUnitAt$1(result, 0) !== 47)
            return "/" + result;
          return result;
        }, Uri__makeQuery: function(query, start, end, queryParameters) {
          var t1, t2, result;
          t1 = {};
          t2 = query == null;
          if (t2 && queryParameters == null)
            return;
          t2 = !t2;
          if (t2 && queryParameters != null)
            throw H.wrapException(P.ArgumentError$("Both query and queryParameters specified"));
          if (t2)
            return P.Uri__normalize(query, start, end, C.List_CVk);
          result = new P.StringBuffer("");
          t1._captured_first_0 = true;
          queryParameters.forEach$1(0, new P.Uri__makeQuery_closure(t1, result));
          t1 = result._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, Uri__makeFragment: function(fragment, start, end) {
          if (fragment == null)
            return;
          return P.Uri__normalize(fragment, start, end, C.List_CVk);
        }, Uri__isHexDigit: function($char) {
          if (57 >= $char)
            return 48 <= $char;
          $char |= 32;
          return 97 <= $char && 102 >= $char;
        }, Uri__hexValue: function($char) {
          if (57 >= $char)
            return $char - 48;
          return ($char | 32) - 87;
        }, Uri__normalizeEscape: function(source, index, lowerCase) {
          var t1, firstDigit, secondDigit, value;
          t1 = index + 2;
          if (t1 >= source.length)
            return "%";
          firstDigit = C.JSString_methods.codeUnitAt$1(source, index + 1);
          secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
          if (!P.Uri__isHexDigit(firstDigit) || !P.Uri__isHexDigit(secondDigit))
            return "%";
          value = P.Uri__hexValue(firstDigit) * 16 + P.Uri__hexValue(secondDigit);
          if (value < 127 && (C.List_nxB[C.JSInt_methods._shrOtherPositive$1(value, 4)] & C.JSInt_methods._shlPositive$1(1, value & 15)) !== 0)
            return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
          if (firstDigit >= 97 || secondDigit >= 97)
            return C.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
          return;
        }, Uri__escapeChar: function($char) {
          var codeUnits, flag, encodedBytes, index, $byte;
          if ($char < 128) {
            codeUnits = Array(3);
            codeUnits.fixed$length = Array;
            codeUnits[0] = 37;
            codeUnits[1] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $char >>> 4);
            codeUnits[2] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $char & 15);
          } else {
            if ($char > 2047)
              if ($char > 65535) {
                flag = 240;
                encodedBytes = 4;
              } else {
                flag = 224;
                encodedBytes = 3;
              }
            else {
              flag = 192;
              encodedBytes = 2;
            }
            codeUnits = Array(3 * encodedBytes);
            codeUnits.fixed$length = Array;
            for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
              $byte = C.JSInt_methods._shrReceiverPositive$1($char, 6 * encodedBytes) & 63 | flag;
              codeUnits[index] = 37;
              codeUnits[index + 1] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte >>> 4);
              codeUnits[index + 2] = C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15);
              index += 3;
            }
          }
          return P.String_String$fromCharCodes(codeUnits, 0, null);
        }, Uri__normalize: function(component, start, end, charTable) {
          var index, sectionStart, buffer, $char, replacement, sourceLength, t1, tail;
          for (index = start, sectionStart = index, buffer = null; index < end;) {
            $char = C.JSString_methods.codeUnitAt$1(component, index);
            if ($char < 127 && (charTable[$char >>> 4] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0)
              ++index;
            else {
              if ($char === 37) {
                replacement = P.Uri__normalizeEscape(component, index, false);
                if (replacement == null) {
                  index += 3;
                  continue;
                }
                if ("%" === replacement) {
                  replacement = "%25";
                  sourceLength = 1;
                } else
                  sourceLength = 3;
              } else if ($char <= 93 && (C.List_2Vk[$char >>> 4] & C.JSInt_methods._shlPositive$1(1, $char & 15)) !== 0) {
                P.Uri__fail(component, index, "Invalid character");
                replacement = null;
                sourceLength = null;
              } else {
                if (($char & 64512) === 55296) {
                  t1 = index + 1;
                  if (t1 < end) {
                    tail = C.JSString_methods.codeUnitAt$1(component, t1);
                    if ((tail & 64512) === 56320) {
                      $char = (65536 | ($char & 1023) << 10 | tail & 1023) >>> 0;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
                replacement = P.Uri__escapeChar($char);
              }
              if (buffer == null)
                buffer = new P.StringBuffer("");
              t1 = C.JSString_methods.substring$2(component, sectionStart, index);
              buffer._contents = buffer._contents + t1;
              buffer._contents += H.S(replacement);
              index += sourceLength;
              sectionStart = index;
            }
          }
          if (buffer == null)
            return C.JSString_methods.substring$2(component, start, end);
          if (sectionStart < end)
            buffer._contents += C.JSString_methods.substring$2(component, sectionStart, end);
          t1 = buffer._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, Uri_decodeComponent: [function(encodedComponent) {
          return P.Uri__uriDecode(encodedComponent, C.Utf8Codec_false, false);
        }, "call$1", "Uri_decodeComponent$closure", 2, 0, 87, 70, []], Uri_parseIPv4Address: function(host) {
          var t1, bytes;
          t1 = new P.Uri_parseIPv4Address_error();
          bytes = host.split(".");
          if (bytes.length !== 4)
            t1.call$1("IPv4 address should contain exactly 4 parts");
          t1 = new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1));
          t1.$builtinTypeInfo = [null, null];
          return t1.toList$0(0);
        }, Uri_parseIPv6Address: function(host, start, end) {
          var error, parseHex, parts, partStart, last, i, wildcardSeen, atEnd, t1, exception, bytes, index, value, wildCardLength, j;
          if (end == null)
            end = J.get$length$asx(host);
          error = new P.Uri_parseIPv6Address_error(host);
          parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
          if (J.get$length$asx(host) < 2)
            error.call$1("address is too short");
          parts = [];
          partStart = start;
          for (i = start, wildcardSeen = false; i < end; ++i)
            if (J.codeUnitAt$1$s(host, i) === 58) {
              if (i === start) {
                ++i;
                if (J.codeUnitAt$1$s(host, i) !== 58)
                  error.call$2("invalid start colon.", i);
                partStart = i;
              }
              if (i === partStart) {
                if (wildcardSeen)
                  error.call$2("only one wildcard `::` is allowed", i);
                J.add$1$ax(parts, -1);
                wildcardSeen = true;
              } else
                J.add$1$ax(parts, parseHex.call$2(partStart, i));
              partStart = i + 1;
            }
          if (J.get$length$asx(parts) === 0)
            error.call$1("too few parts");
          atEnd = J.$eq(partStart, end);
          t1 = J.get$last$ax(parts);
          if (atEnd && t1 !== -1)
            error.call$2("expected a part after last `:`", end);
          if (!atEnd)
            try {
              J.add$1$ax(parts, parseHex.call$2(partStart, end));
            } catch (exception) {
              H.unwrapException(exception);
              try {
                last = P.Uri_parseIPv4Address(J.substring$2$s(host, partStart, end));
                J.add$1$ax(parts, (J.$shl$n(J.$index$asx(last, 0), 8) | J.$index$asx(last, 1)) >>> 0);
                J.add$1$ax(parts, (J.$shl$n(J.$index$asx(last, 2), 8) | J.$index$asx(last, 3)) >>> 0);
              } catch (exception) {
                H.unwrapException(exception);
                error.call$2("invalid end of IPv6 address.", partStart);
              }
            }
          if (wildcardSeen) {
            if (J.get$length$asx(parts) > 7)
              error.call$1("an address with a wildcard must have less than 7 parts");
          } else if (J.get$length$asx(parts) !== 8)
            error.call$1("an address without a wildcard must contain exactly 8 parts");
          bytes = Array(16);
          bytes.$builtinTypeInfo = [P.$int];
          for (i = 0, index = 0; i < J.get$length$asx(parts); ++i) {
            value = J.$index$asx(parts, i);
            if (value === -1) {
              wildCardLength = 9 - J.get$length$asx(parts);
              for (j = 0; j < wildCardLength; ++j) {
                bytes[index] = 0;
                bytes[index + 1] = 0;
                index += 2;
              }
            } else {
              t1 = J.getInterceptor$n(value);
              bytes[index] = t1.$shr(value, 8);
              bytes[index + 1] = t1.$and(value, 255);
              index += 2;
            }
          }
          return bytes;
        }, Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
          var t1, result, bytes, t2, i, $byte;
          t1 = new P.Uri__uriEncode_byteToHex();
          result = new P.StringBuffer("");
          bytes = encoding.get$encoder().convert$1(text);
          for (t2 = bytes.length, i = 0; i < t2; ++i) {
            $byte = bytes[i];
            if ($byte < 128 && (canonicalTable[$byte >>> 4] & C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0)
              result._contents += H.Primitives_stringFromCharCode($byte);
            else if (spaceToPlus && $byte === 32)
              result._contents += H.Primitives_stringFromCharCode(43);
            else {
              result._contents += H.Primitives_stringFromCharCode(37);
              t1.call$2($byte, result);
            }
          }
          t1 = result._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }, Uri__hexCharPairToByte: function(s, pos) {
          var t1, $byte, i, charCode;
          for (t1 = J.getInterceptor$s(s), $byte = 0, i = 0; i < 2; ++i) {
            charCode = t1.codeUnitAt$1(s, pos + i);
            if (48 <= charCode && charCode <= 57)
              $byte = $byte * 16 + charCode - 48;
            else {
              charCode |= 32;
              if (97 <= charCode && charCode <= 102)
                $byte = $byte * 16 + charCode - 87;
              else
                throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
            }
          }
          return $byte;
        }, Uri__uriDecode: function(text, encoding, plusToSpace) {
          var t1, simple, i, codeUnit, bytes;
          t1 = text.length;
          simple = true;
          i = 0;
          while (true) {
            if (!(i < t1 && simple))
              break;
            codeUnit = C.JSString_methods.codeUnitAt$1(text, i);
            simple = codeUnit !== 37 && codeUnit !== 43;
            ++i;
          }
          if (simple)
            if (encoding === C.Utf8Codec_false || false)
              return text;
            else
              bytes = C.JSString_methods.get$codeUnits(text);
          else {
            bytes = [];
            for (i = 0; i < t1; ++i) {
              codeUnit = C.JSString_methods.codeUnitAt$1(text, i);
              if (codeUnit > 127)
                throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
              if (codeUnit === 37) {
                if (i + 3 > t1)
                  throw H.wrapException(P.ArgumentError$("Truncated URI"));
                bytes.push(P.Uri__hexCharPairToByte(text, i + 1));
                i += 2;
              } else if (plusToSpace && codeUnit === 43)
                bytes.push(32);
              else
                bytes.push(codeUnit);
            }
          }
          return encoding.decode$1(bytes);
        }}
    },
    Uri_parse_parseAuth: {
      "^": "Closure:6;_core$_box_0,_captured_uri_1,_captured_EOI_2",
      call$0: function() {
        var t1, hostStart, t2, $char, lastColon, lastAt, t3, char0, endBracket, hostEnd, i, portNumber, digit;
        t1 = this._core$_box_0;
        hostStart = t1._captured_index_5;
        t2 = t1._captured_end_0;
        if (hostStart == null ? t2 == null : hostStart === t2) {
          t1._captured_char_6 = this._captured_EOI_2;
          return;
        }
        t2 = this._captured_uri_1;
        t1._captured_char_6 = J.getInterceptor$s(t2).codeUnitAt$1(t2, hostStart);
        for ($char = this._captured_EOI_2, lastColon = -1, lastAt = -1; t3 = t1._captured_index_5, t3 < t1._captured_end_0;) {
          char0 = C.JSString_methods.codeUnitAt$1(t2, t3);
          t1._captured_char_6 = char0;
          if (char0 === 47 || char0 === 63 || char0 === 35)
            break;
          if (char0 === 64) {
            lastAt = t1._captured_index_5;
            lastColon = -1;
          } else if (char0 === 58)
            lastColon = t1._captured_index_5;
          else if (char0 === 91) {
            endBracket = C.JSString_methods.indexOf$2(t2, "]", t1._captured_index_5 + 1);
            if (endBracket === -1) {
              t1._captured_index_5 = t1._captured_end_0;
              t1._captured_char_6 = $char;
              lastColon = -1;
              break;
            } else
              t1._captured_index_5 = endBracket;
            lastColon = -1;
          }
          t1._captured_index_5 = t1._captured_index_5 + 1;
          t1._captured_char_6 = $char;
        }
        hostEnd = t1._captured_index_5;
        if (lastAt >= 0) {
          t1._captured_userinfo_2 = P.Uri__makeUserInfo(t2, hostStart, lastAt);
          hostStart = lastAt + 1;
        }
        if (lastColon >= 0) {
          i = lastColon + 1;
          if (i < t1._captured_index_5)
            for (portNumber = 0; i < t1._captured_index_5; ++i) {
              digit = C.JSString_methods.codeUnitAt$1(t2, i);
              if (48 > digit || 57 < digit)
                P.Uri__fail(t2, i, "Invalid port number");
              portNumber = portNumber * 10 + (digit - 48);
            }
          else
            portNumber = null;
          t1._captured_port_4 = P.Uri__makePort(portNumber, t1._captured_scheme_1);
          hostEnd = lastColon;
        }
        t1._captured_host_3 = P.Uri__makeHost(t2, hostStart, hostEnd, true);
        t3 = t1._captured_index_5;
        if (t3 < t1._captured_end_0)
          t1._captured_char_6 = C.JSString_methods.codeUnitAt$1(t2, t3);
      }
    },
    Uri__checkNonWindowsPathReservedCharacters_closure: {
      "^": "Closure:7;_captured_argumentError_0",
      call$1: function(segment) {
        if (J.contains$1$asx(segment, "/"))
          if (this._captured_argumentError_0)
            throw H.wrapException(P.ArgumentError$("Illegal path character " + H.S(segment)));
          else
            throw H.wrapException(new P.UnsupportedError("Illegal path character " + H.S(segment)));
      }
    },
    Uri__makePath_closure: {
      "^": "Closure:7;",
      call$1: function(s) {
        return P.Uri__uriEncode(C.List_qg40, s, C.Utf8Codec_false, false);
      }
    },
    Uri__makeQuery_closure: {
      "^": "Closure:14;_core$_box_0,_core$_captured_result_1",
      call$2: function(key, value) {
        var t1 = this._core$_box_0;
        if (!t1._captured_first_0)
          this._core$_captured_result_1._contents += "&";
        t1._captured_first_0 = false;
        t1 = this._core$_captured_result_1;
        t1._contents += P.Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true);
        if (value != null && !J.get$isEmpty$asx(value)) {
          t1._contents += "=";
          t1._contents += P.Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true);
        }
      }
    },
    Uri_hashCode_combine: {
      "^": "Closure:36;",
      call$2: function(part, current) {
        return current * 31 + J.get$hashCode$(part) & 1073741823;
      }
    },
    Uri_parseIPv4Address_error: {
      "^": "Closure:37;",
      call$1: function(msg) {
        throw H.wrapException(new P.FormatException("Illegal IPv4 address, " + msg, null, null));
      }
    },
    Uri_parseIPv4Address_closure: {
      "^": "Closure:7;_captured_error_0",
      call$1: [function(byteString) {
        var $byte = H.Primitives_parseInt(byteString, null, null);
        if ($byte < 0 || $byte > 255)
          this._captured_error_0.call$1("each part must be in the range of `0..255`");
        return $byte;
      }, null, null, 2, 0, null, 71, [], "call"]
    },
    Uri_parseIPv6Address_error: {
      "^": "Closure:38;_captured_host_0",
      call$2: function(msg, position) {
        throw H.wrapException(new P.FormatException("Illegal IPv6 address, " + msg, this._captured_host_0, position));
      },
      call$1: function(msg) {
        return this.call$2(msg, null);
      }
    },
    Uri_parseIPv6Address_parseHex: {
      "^": "Closure:39;_captured_host_1,_captured_error_2",
      call$2: function(start, end) {
        var value;
        if (end - start > 4)
          this._captured_error_2.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
        value = H.Primitives_parseInt(C.JSString_methods.substring$2(this._captured_host_1, start, end), 16, null);
        if (value < 0 || value > 65535)
          this._captured_error_2.call$2("each part must be in the range of `0x0..0xFFFF`", start);
        return value;
      }
    },
    Uri__uriEncode_byteToHex: {
      "^": "Closure:14;",
      call$2: function($byte, buffer) {
        buffer._contents += H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte >>> 4));
        buffer._contents += H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15));
      }
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    _convertNativeToDart_Window: function(win) {
      if (win == null)
        return;
      return W._DOMWindowCrossFrame__createSafe(win);
    },
    _wrapZone: function(callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallback$2$runGuarded(callback, true);
    },
    HtmlElement: {
      "^": "Element;",
      $isHtmlElement: 1,
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;type%",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLAnchorElement"
    },
    ApplicationCacheErrorEvent: {
      "^": "Event;message=,status=,url=",
      "%": "ApplicationCacheErrorEvent"
    },
    AreaElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLAreaElement"
    },
    Blob: {
      "^": "Interceptor;type=",
      close$0: function(receiver) {
        return receiver.close();
      },
      $isBlob: 1,
      "%": ";Blob"
    },
    Body: {
      "^": "Interceptor;",
      "%": ";Body"
    },
    BodyElement: {
      "^": "HtmlElement;",
      get$onError: function(receiver) {
        var t1 = new W._ElementEventStreamImpl(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;name%,type%,value%",
      "%": "HTMLButtonElement"
    },
    CanvasElement: {
      "^": "HtmlElement;",
      $isObject: 1,
      "%": "HTMLCanvasElement"
    },
    CharacterData: {
      "^": "Node;data%,length=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    CompositionEvent: {
      "^": "UIEvent;data=",
      "%": "CompositionEvent"
    },
    CustomEvent: {
      "^": "Event;",
      get$detail: function(receiver) {
        var t1 = receiver._dartDetail;
        if (t1 != null)
          return t1;
        return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
      },
      "%": "CustomEvent"
    },
    DeviceLightEvent: {
      "^": "Event;value=",
      "%": "DeviceLightEvent"
    },
    DeviceOrientationEvent: {
      "^": "Event;absolute=",
      "%": "DeviceOrientationEvent"
    },
    DialogElement: {
      "^": "HtmlElement;",
      close$1: function(receiver, $returnValue) {
        return receiver.close($returnValue);
      },
      "%": "HTMLDialogElement"
    },
    DivElement: {
      "^": "HtmlElement;",
      "%": ";HTMLDivElement"
    },
    Document: {
      "^": "Node;",
      get$onError: function(receiver) {
        var t1 = new W._EventStream(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      "%": "Document|HTMLDocument|XMLDocument"
    },
    DocumentFragment: {
      "^": "Node;",
      get$children: function(receiver) {
        var t1;
        if (receiver._docChildren == null) {
          t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
          t1.$builtinTypeInfo = [null];
          receiver._docChildren = t1;
        }
        return receiver._docChildren;
      },
      set$children: function(receiver, value) {
        var copy, t1, children;
        copy = P.List_List$from(value, true, null);
        if (receiver._docChildren == null) {
          t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
          t1.$builtinTypeInfo = [null];
          receiver._docChildren = t1;
        }
        children = receiver._docChildren;
        t1 = J.getInterceptor$ax(children);
        t1.clear$0(children);
        t1.addAll$1(children, copy);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "DocumentFragment|ShadowRoot"
    },
    DomError: {
      "^": "Interceptor;message=,name=",
      "%": "DOMError|FileError"
    },
    DomException: {
      "^": "Interceptor;message=",
      get$name: function(receiver) {
        var errorName = receiver.name;
        if (P.Device_isWebKit() && errorName === "SECURITY_ERR")
          return "SecurityError";
        if (P.Device_isWebKit() && errorName === "SYNTAX_ERR")
          return "SyntaxError";
        return errorName;
      },
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomRectReadOnly: {
      "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$width(receiver);
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = this.get$height(receiver);
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(this.get$width(receiver));
        t4 = J.get$hashCode$(this.get$height(receiver));
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      $isRectangle: 1,
      $asRectangle: functionThatReturnsNull,
      $isObject: 1,
      "%": ";DOMRectReadOnly"
    },
    _ChildrenElementList: {
      "^": "ListBase;_html$_element,_childElements",
      contains$1: function(_, element) {
        return J.contains$1$asx(this._childElements, element);
      },
      get$isEmpty: function(_) {
        return this._html$_element.firstElementChild == null;
      },
      get$length: function(_) {
        return this._childElements.length;
      },
      $index: function(_, index) {
        return this._childElements[index];
      },
      $indexSet: function(_, index, value) {
        this._html$_element.replaceChild(value, this._childElements[index]);
      },
      set$length: function(_, newLength) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize element lists"));
      },
      add$1: function(_, value) {
        this._html$_element.appendChild(value);
        return value;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.toList$0(this);
        t2 = new J.ArrayIterator(t1, t1.length, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        return t2;
      },
      addAll$1: function(_, iterable) {
        var t1, t2;
        for (t1 = J.get$iterator$ax(iterable instanceof W._ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._html$_element; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnimplementedError(null));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      remove$1: function(_, object) {
        object.get$parentNode(object);
        return false;
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._html$_element);
      },
      get$last: function(_) {
        var result = this._html$_element.lastElementChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asObject_ListMixin: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      }
    },
    Element: {
      "^": "Node;",
      get$attributes: function(receiver) {
        return new W._ElementAttributeMap(receiver);
      },
      set$attributes: function(receiver, value) {
        var t1, key;
        new W._ElementAttributeMap(receiver).clear$0(0);
        for (t1 = value.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current();
          receiver.setAttribute(key, value.$index(0, key));
        }
      },
      get$children: function(receiver) {
        return new W._ChildrenElementList(receiver, receiver.children);
      },
      set$children: function(receiver, value) {
        var copy, children;
        copy = P.List_List$from(value, true, null);
        children = this.get$children(receiver);
        children.clear$0(0);
        children.addAll$1(0, copy);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      getAttribute$1: function(receiver, $name) {
        return receiver.getAttribute($name);
      },
      get$onError: function(receiver) {
        var t1 = new W._ElementEventStreamImpl(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      $isInterceptor: 1,
      "%": ";Element"
    },
    EmbedElement: {
      "^": "HtmlElement;name%,type%",
      "%": "HTMLEmbedElement"
    },
    ErrorEvent: {
      "^": "Event;error=,message=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;path=,type=",
      $isEvent: 1,
      "%": "AnimationPlayerEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CloseEvent|DeviceMotionEvent|ExtendableEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MediaKeyNeededEvent|MediaQueryListEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;ClipboardEvent|Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, useCapture);
      },
      removeEventListener$3: function(receiver, type, listener, useCapture) {
        if (listener != null)
          this._removeEventListener$3(receiver, type, listener, useCapture);
      },
      _addEventListener$3: function(receiver, type, listener, useCapture) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
      },
      _removeEventListener$3: function(receiver, type, listener, useCapture) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
      },
      "%": ";EventTarget"
    },
    FetchEvent: {
      "^": "Event;request=",
      "%": "FetchEvent"
    },
    FieldSetElement: {
      "^": "HtmlElement;name%,type=",
      "%": "HTMLFieldSetElement"
    },
    File0: {
      "^": "Blob;name=",
      "%": "File"
    },
    FormElement: {
      "^": "HtmlElement;length=,name%",
      "%": "HTMLFormElement"
    },
    Headers: {
      "^": "Interceptor;",
      forEach$2: function(receiver, callback, thisArg) {
        return receiver.forEach(H.convertDartClosureToJS(callback, 3), thisArg);
      },
      forEach$1: function($receiver, callback) {
        callback = H.convertDartClosureToJS(callback, 3);
        return $receiver.forEach(callback);
      },
      "%": "Headers"
    },
    HtmlCollection: {
      "^": "Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin: {
      "^": "Interceptor_ListMixin+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    IFrameElement: {
      "^": "HtmlElement;name%",
      "%": "HTMLIFrameElement"
    },
    ImageData: {
      "^": "Interceptor;data=",
      $isImageData: 1,
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;",
      complete$1: function($receiver, arg0) {
        return $receiver.complete.call$1(arg0);
      },
      $isObject: 1,
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;defaultValue%,list=,max%,min%,name%,type%,value%",
      list$1: function($receiver, arg0) {
        return $receiver.list.call$1(arg0);
      },
      $isElement: 1,
      $isInterceptor: 1,
      $isObject: 1,
      $isNode: 1,
      "%": "HTMLInputElement"
    },
    KeygenElement: {
      "^": "HtmlElement;name%,type=",
      "%": "HTMLKeygenElement"
    },
    LIElement: {
      "^": "HtmlElement;value%",
      "%": "HTMLLIElement"
    },
    LinkElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLLinkElement"
    },
    MapElement: {
      "^": "HtmlElement;name%",
      "%": "HTMLMapElement"
    },
    MediaElement: {
      "^": "HtmlElement;duration=,error=",
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MediaKeyEvent: {
      "^": "Event;message=",
      "%": "MediaKeyEvent"
    },
    MediaKeyMessageEvent: {
      "^": "Event;message=",
      "%": "MediaKeyMessageEvent"
    },
    MediaStream: {
      "^": "EventTarget;",
      stop$0: function(receiver) {
        return receiver.stop();
      },
      "%": "MediaStream"
    },
    MediaStreamEvent: {
      "^": "Event;stream=",
      "%": "MediaStreamEvent"
    },
    MenuElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLMenuElement"
    },
    MenuItemElement: {
      "^": "HtmlElement;defaultValue:default%,type%",
      "%": "HTMLMenuItemElement"
    },
    MessageEvent: {
      "^": "Event;",
      get$data: function(receiver) {
        return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
      },
      "%": "MessageEvent"
    },
    MetaElement: {
      "^": "HtmlElement;name%",
      "%": "HTMLMetaElement"
    },
    MeterElement: {
      "^": "HtmlElement;max%,min%,value%",
      "%": "HTMLMeterElement"
    },
    MidiMessageEvent: {
      "^": "Event;data=",
      "%": "MIDIMessageEvent"
    },
    MidiOutput: {
      "^": "MidiPort;",
      send$2: function(receiver, data, timestamp) {
        return receiver.send(data, timestamp);
      },
      send$1: function($receiver, data) {
        return $receiver.send(data);
      },
      "%": "MIDIOutput"
    },
    MidiPort: {
      "^": "EventTarget;name=,type=,version=",
      get$onDisconnect: function(receiver) {
        var t1 = new W._EventStream(receiver, "disconnect", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onDisconnect$0: function($receiver) {
        return this.get$onDisconnect($receiver).call$0();
      },
      "%": "MIDIInput;MIDIPort"
    },
    Navigator: {
      "^": "Interceptor;connection=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "Navigator"
    },
    NavigatorUserMediaError: {
      "^": "Interceptor;message=,name=",
      "%": "NavigatorUserMediaError"
    },
    NetworkInformation: {
      "^": "EventTarget;type=",
      "%": "NetworkInformation"
    },
    _ChildNodeListLazy: {
      "^": "ListBase;_this",
      get$last: function(_) {
        var result = this._this.lastChild;
        if (result == null)
          throw H.wrapException(new P.StateError("No elements"));
        return result;
      },
      add$1: function(_, value) {
        this._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2, len, i;
        t1 = J.getInterceptor(iterable);
        if (!!t1.$is_ChildNodeListLazy) {
          t1 = iterable._this;
          t2 = this._this;
          if (t1 !== t2)
            for (len = t1.childNodes.length, i = 0; i < len; ++i)
              t2.appendChild(t1.firstChild);
          return;
        }
        for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      remove$1: function(_, object) {
        object.get$parentNode(object);
        return false;
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._this);
      },
      $indexSet: function(_, index, value) {
        var t1 = this._this;
        t1.replaceChild(value, t1.childNodes[index]);
      },
      get$iterator: function(_) {
        return C.NodeList_methods.get$iterator(this._this.childNodes);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on Node list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      get$length: function(_) {
        return this._this.childNodes.length;
      },
      set$length: function(_, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot set length on immutable List."));
      },
      $index: function(_, index) {
        return this._this.childNodes[index];
      },
      $asListBase: function() {
        return [W.Node];
      },
      $asObject_ListMixin: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;parent:parentElement=,parentNode=,text:textContent}",
      get$nodes: function(receiver) {
        return new W._ChildNodeListLazy(receiver);
      },
      set$nodes: function(receiver, value) {
        var copy, t1, _i;
        copy = P.List_List$from(value, true, null);
        this.set$text(receiver, "");
        for (t1 = copy.length, _i = 0; _i < copy.length; copy.length === t1 || (0, H.throwConcurrentModificationError)(copy), ++_i)
          receiver.appendChild(copy[_i]);
      },
      remove$0: function(receiver) {
        var t1 = receiver.parentNode;
        if (t1 != null)
          t1.removeChild(receiver);
      },
      replaceWith$1: function(receiver, otherNode) {
        var $parent, exception;
        try {
          $parent = receiver.parentNode;
          J._replaceChild$2$x($parent, otherNode, receiver);
        } catch (exception) {
          H.unwrapException(exception);
        }
        return receiver;
      },
      _clearChildren$0: function(receiver) {
        var t1;
        for (; t1 = receiver.firstChild, t1 != null;)
          receiver.removeChild(t1);
      },
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString$0(receiver) : value;
      },
      contains$1: function(receiver, other) {
        return receiver.contains(other);
      },
      _replaceChild$2: function(receiver, newChild, oldChild) {
        return receiver.replaceChild(newChild, oldChild);
      },
      $isNode: 1,
      $isObject: 1,
      "%": ";Node"
    },
    "+Node": 0,
    NodeList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin0;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "NodeList|RadioNodeList"
    },
    Interceptor_ListMixin0: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin0: {
      "^": "Interceptor_ListMixin0+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    OListElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;data%,name%,type%",
      "%": "HTMLObjectElement"
    },
    OptionElement: {
      "^": "HtmlElement;value%",
      "%": "HTMLOptionElement"
    },
    OutputElement: {
      "^": "HtmlElement;defaultValue%,name%,type=,value%",
      "%": "HTMLOutputElement"
    },
    ParamElement: {
      "^": "HtmlElement;name%,value%",
      "%": "HTMLParamElement"
    },
    PluginPlaceholderElement: {
      "^": "DivElement;message=",
      "%": "PluginPlaceholderElement"
    },
    PositionError: {
      "^": "Interceptor;message=",
      "%": "PositionError"
    },
    ProgressElement: {
      "^": "HtmlElement;max%,value%",
      "%": "HTMLProgressElement"
    },
    ProgressEvent: {
      "^": "Event;loaded=",
      "%": "XMLHttpRequestProgressEvent;ProgressEvent"
    },
    PushEvent: {
      "^": "Event;data=",
      "%": "PushEvent"
    },
    ResourceProgressEvent: {
      "^": "ProgressEvent;url=",
      "%": "ResourceProgressEvent"
    },
    ScriptElement: {
      "^": "HtmlElement;nonce=,type%",
      "%": "HTMLScriptElement"
    },
    SelectElement: {
      "^": "HtmlElement;length=,name%,type=,value%",
      "%": "HTMLSelectElement"
    },
    SourceElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLSourceElement"
    },
    SpeechRecognitionError: {
      "^": "Event;error=,message=",
      "%": "SpeechRecognitionError"
    },
    SpeechRecognitionResult: {
      "^": "Interceptor;length=",
      $isObject: 1,
      "%": "SpeechRecognitionResult"
    },
    SpeechSynthesisEvent: {
      "^": "Event;name=",
      "%": "SpeechSynthesisEvent"
    },
    StorageEvent: {
      "^": "Event;url=",
      "%": "StorageEvent"
    },
    StyleElement: {
      "^": "HtmlElement;type%",
      "%": "HTMLStyleElement"
    },
    TableElement: {
      "^": "HtmlElement;",
      get$rows: function(receiver) {
        var t1 = new W._WrappedList(receiver.rows);
        t1.$builtinTypeInfo = [W.TableRowElement];
        return t1;
      },
      "%": "HTMLTableElement"
    },
    TableRowElement: {
      "^": "HtmlElement;",
      $isTableRowElement: 1,
      $isHtmlElement: 1,
      $isElement: 1,
      $isNode: 1,
      $isObject: 1,
      "%": "HTMLTableRowElement"
    },
    TableSectionElement: {
      "^": "HtmlElement;",
      get$rows: function(receiver) {
        var t1 = new W._WrappedList(receiver.rows);
        t1.$builtinTypeInfo = [W.TableRowElement];
        return t1;
      },
      "%": "HTMLTableSectionElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;defaultValue%,name%,rows%,type=,value%",
      "%": "HTMLTextAreaElement"
    },
    TextEvent: {
      "^": "UIEvent;data=",
      "%": "TextEvent"
    },
    TrackElement: {
      "^": "HtmlElement;defaultValue:default%",
      "%": "HTMLTrackElement"
    },
    UIEvent: {
      "^": "Event;detail=",
      "%": "DragEvent|FocusEvent|KeyboardEvent|MSPointerEvent|MouseEvent|PointerEvent|SVGZoomEvent|TouchEvent|WheelEvent;UIEvent"
    },
    VideoElement: {
      "^": "MediaElement;",
      $isObject: 1,
      "%": "HTMLVideoElement"
    },
    Window: {
      "^": "EventTarget;name%,status%",
      get$parent: function(receiver) {
        return W._convertNativeToDart_Window(receiver.parent);
      },
      close$0: function(receiver) {
        return receiver.close();
      },
      stop$0: function(receiver) {
        return receiver.stop();
      },
      get$onError: function(receiver) {
        var t1 = new W._EventStream(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isWindow: 1,
      $isInterceptor: 1,
      $isObject: 1,
      "%": "DOMWindow|Window"
    },
    _Attr: {
      "^": "Node;name=,value%",
      set$text: function(receiver, value) {
        receiver.textContent = value;
      },
      "%": "Attr"
    },
    _ClientRect: {
      "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1, t2, t3;
        if (other == null)
          return false;
        t1 = J.getInterceptor(other);
        if (!t1.$isRectangle)
          return false;
        t2 = receiver.left;
        t3 = t1.get$left(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.top;
          t3 = t1.get$top(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.width;
            t3 = t1.get$width(other);
            if (t2 == null ? t3 == null : t2 === t3) {
              t2 = receiver.height;
              t1 = t1.get$height(other);
              t1 = t2 == null ? t1 == null : t2 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      },
      get$hashCode: function(receiver) {
        var t1, t2, t3, t4;
        t1 = J.get$hashCode$(receiver.left);
        t2 = J.get$hashCode$(receiver.top);
        t3 = J.get$hashCode$(receiver.width);
        t4 = J.get$hashCode$(receiver.height);
        return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
      },
      $isRectangle: 1,
      $asRectangle: functionThatReturnsNull,
      $isObject: 1,
      "%": "ClientRect"
    },
    _DocumentType: {
      "^": "Node;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "DocumentType"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      "%": "DOMRect"
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "HTMLFrameSetElement"
    },
    _NamedNodeMap: {
      "^": "Interceptor_ListMixin_ImmutableListMixin1;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    Interceptor_ListMixin1: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin1: {
      "^": "Interceptor_ListMixin1+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      }
    },
    _Request: {
      "^": "Body;url=",
      "%": "Request"
    },
    _SpeechRecognitionResultList: {
      "^": "Interceptor_ListMixin_ImmutableListMixin2;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot resize immutable List."));
      },
      get$last: function(receiver) {
        var len = receiver.length;
        if (len > 0)
          return receiver[len - 1];
        throw H.wrapException(new P.StateError("No elements"));
      },
      elementAt$1: function(receiver, index) {
        return receiver[index];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isObject: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1,
      "%": "SpeechRecognitionResultList"
    },
    Interceptor_ListMixin2: {
      "^": "Interceptor+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      }
    },
    Interceptor_ListMixin_ImmutableListMixin2: {
      "^": "Interceptor_ListMixin2+ImmutableListMixin;",
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      }
    },
    _AttributeMap: {
      "^": "Object;",
      clear$0: function(_) {
        var t1, t2, _i;
        for (t1 = this.get$keys(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          this.remove$1(0, t1[_i]);
      },
      forEach$1: function(_, f) {
        var t1, t2, _i, key;
        for (t1 = this.get$keys(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, this.$index(0, key));
        }
      },
      get$keys: function() {
        var attributes, keys, len, i;
        attributes = this._html$_element.attributes;
        keys = [];
        keys.$builtinTypeInfo = [P.String];
        for (len = attributes.length, i = 0; i < len; ++i)
          if (this._matches$1(attributes[i]))
            keys.push(J.get$name$x(attributes[i]));
        return keys;
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$isNotEmpty: function(_) {
        return this.get$length(this) !== 0;
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_html$_element",
      containsKey$1: function(key) {
        return this._html$_element.hasAttribute(key);
      },
      $index: function(_, key) {
        return this._html$_element.getAttribute(key);
      },
      $indexSet: function(_, key, value) {
        this._html$_element.setAttribute(key, value);
      },
      remove$1: function(_, key) {
        var t1, value;
        t1 = this._html$_element;
        value = t1.getAttribute(key);
        t1.removeAttribute(key);
        return value;
      },
      get$length: function(_) {
        return this.get$keys().length;
      },
      _matches$1: function(node) {
        return node.namespaceURI == null;
      }
    },
    _EventStream: {
      "^": "Stream;_html$_target,_eventType,_useCapture",
      get$isBroadcast: function() {
        return true;
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        t1._tryResume$0();
        return t1;
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture"
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_html$_onData,_useCapture",
      cancel$0: function() {
        if (this._html$_target == null)
          return;
        this._unlisten$0();
        this._html$_target = null;
        this._html$_onData = null;
        return;
      },
      onData$1: function(handleData) {
        if (this._html$_target == null)
          throw H.wrapException(new P.StateError("Subscription has been canceled."));
        this._unlisten$0();
        this._html$_onData = W._wrapZone(handleData);
        this._tryResume$0();
      },
      onError$1: function(_, handleError) {
      },
      onDone$1: function(handleDone) {
      },
      pause$1: function(_, resumeSignal) {
        if (this._html$_target == null)
          return;
        ++this._pauseCount;
        this._unlisten$0();
      },
      pause$0: function($receiver) {
        return this.pause$1($receiver, null);
      },
      get$isPaused: function() {
        return this._pauseCount > 0;
      },
      resume$0: function() {
        if (this._html$_target == null || this._pauseCount <= 0)
          return;
        --this._pauseCount;
        this._tryResume$0();
      },
      _tryResume$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null && this._pauseCount <= 0)
          J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
      },
      _unlisten$0: function() {
        var t1 = this._html$_onData;
        if (t1 != null)
          J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
      },
      asFuture$1: function(futureValue) {
        var t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [null];
        new P._AsyncCompleter(t1).$builtinTypeInfo = [null];
        return t1;
      }
    },
    ImmutableListMixin: {
      "^": "Object;",
      get$iterator: function(receiver) {
        var t1 = new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)];
        return t1;
      },
      add$1: function(receiver, value) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      addAll$1: function(receiver, iterable) {
        throw H.wrapException(new P.UnsupportedError("Cannot add to immutable List."));
      },
      remove$1: function(receiver, object) {
        throw H.wrapException(new P.UnsupportedError("Cannot remove from immutable List."));
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on immutable List."));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      removeRange$2: function(receiver, start, end) {
        throw H.wrapException(new P.UnsupportedError("Cannot removeRange on immutable List."));
      },
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _WrappedList: {
      "^": "ListBase;_html$_list",
      get$iterator: function(_) {
        var t1 = new W._WrappedIterator(J.get$iterator$ax(this._html$_list));
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      get$length: function(_) {
        return this._html$_list.length;
      },
      add$1: function(_, element) {
        J.add$1$ax(this._html$_list, element);
      },
      remove$1: function(_, element) {
        return J.remove$1$ax(this._html$_list, element);
      },
      clear$0: function(_) {
        J.clear$0$ax(this._html$_list);
      },
      $index: function(_, index) {
        return this._html$_list[index];
      },
      $indexSet: function(_, index, value) {
        this._html$_list[index] = value;
      },
      set$length: function(_, newLength) {
        J.set$length$asx(this._html$_list, newLength);
      },
      indexOf$2: function(_, element, start) {
        return J.indexOf$2$asx(this._html$_list, element, start);
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        J.setRange$4$ax(this._html$_list, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      removeRange$2: function(_, start, end) {
        J.removeRange$2$ax(this._html$_list, start, end);
      }
    },
    _WrappedIterator: {
      "^": "Object;_html$_iterator",
      moveNext$0: function() {
        return this._html$_iterator.moveNext$0();
      },
      get$current: function() {
        return this._html$_iterator._current;
      }
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_length,_position,_current",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._length;
        if (nextPosition < t1) {
          this._current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._current;
      }
    },
    _DOMWindowCrossFrame: {
      "^": "Object;_window",
      get$parent: function(_) {
        return W._DOMWindowCrossFrame__createSafe(this._window.parent);
      },
      close$0: function(_) {
        return this._window.close();
      },
      addEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      removeEventListener$3: function(_, type, listener, useCapture) {
        return H.throwExpression(new P.UnsupportedError("You can only attach EventListeners to your own window."));
      },
      $isInterceptor: 1,
      static: {_DOMWindowCrossFrame__createSafe: function(w) {
          if (w === window)
            return w;
          else
            return new W._DOMWindowCrossFrame(w);
        }}
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    KeyRange: {
      "^": "Interceptor;",
      $isKeyRange: 1,
      "%": "IDBKeyRange"
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    AElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAElement"
    },
    AltGlyphElement: {
      "^": "TextPositioningElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAltGlyphElement"
    },
    AnimationElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
    },
    FEBlendElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;type=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEOffsetElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFESpecularLightingElement"
    },
    FETileElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;type=",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFilterElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGForeignObjectElement|SVGGElement|SVGGeometryElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGImageElement"
    },
    MarkerElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMarkerElement"
    },
    MaskElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMaskElement"
    },
    PatternElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGPatternElement"
    },
    ScriptElement0: {
      "^": "SvgElement;type%",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGScriptElement"
    },
    StyleElement0: {
      "^": "SvgElement;type%",
      "%": "SVGStyleElement"
    },
    SvgElement: {
      "^": "Element;",
      get$children: function(receiver) {
        var t1 = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
        t1.$builtinTypeInfo = [W.Element];
        return t1;
      },
      set$children: function(receiver, value) {
        var children = new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
        children.$builtinTypeInfo = [W.Element];
        this._clearChildren$0(receiver);
        children.addAll$1(0, value);
      },
      get$onError: function(receiver) {
        var t1 = new W._ElementEventStreamImpl(receiver, "error", false);
        t1.$builtinTypeInfo = [null];
        return t1;
      },
      onError$1: function($receiver, arg0) {
        return this.get$onError($receiver).call$1(arg0);
      },
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGTitleElement|SVGVKernElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGSVGElement"
    },
    SymbolElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGSymbolElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": ";SVGTextContentElement"
    },
    TextPathElement: {
      "^": "TextContentElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGTextPathElement"
    },
    TextPositioningElement: {
      "^": "TextContentElement;",
      "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
    },
    UseElement: {
      "^": "GraphicsElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGUseElement"
    },
    ViewElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGViewElement"
    },
    _GradientElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
    },
    _SVGCursorElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGCursorElement"
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGFEDropShadowElement"
    },
    _SVGGlyphRefElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGGlyphRefElement"
    },
    _SVGMPathElement: {
      "^": "SvgElement;",
      $isInterceptor: 1,
      $isObject: 1,
      "%": "SVGMPathElement"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": ""
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": ""
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlError: {
      "^": "Interceptor;message=",
      "%": "SQLError"
    }
  }], ["dart.isolate", "dart:isolate",, P, {
    "^": "",
    Capability: {
      "^": "Object;"
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    _callDartFunction: [function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      if (captureThis) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null);
      return P._convertToJS(H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs));
    }, null, null, 8, 0, null, 38, [], 72, [], 34, [], 73, []],
    _defineProperty: function(o, $name, value) {
      var exception;
      if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name))
        try {
          Object.defineProperty(o, $name, {value: value});
          return true;
        } catch (exception) {
          H.unwrapException(exception);
        }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: [function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor(o);
      if (!!t1.$isJsObject)
        return o._js$_jsObject;
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
    }, "call$1", "_convertToJS$closure", 2, 0, 7, 74, []],
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: [function(o) {
      var t1;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else {
        if (o instanceof Object) {
          t1 = J.getInterceptor(o);
          t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
        } else
          t1 = false;
        if (t1)
          return o;
        else if (o instanceof Date)
          return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
        else if (o.constructor === $.get$_dartProxyCtor())
          return o.o;
        else
          return P._wrapToDart(o);
      }
    }, "call$1", "_convertToDart$closure", 2, 0, 192, 74, []],
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: {
      "^": "Object;_js$_jsObject",
      $index: ["super$JsObject$$index", function(_, property) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return P._convertToDart(this._js$_jsObject[property]);
      }],
      $indexSet: ["super$JsObject$$indexSet", function(_, property, value) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        this._js$_jsObject[property] = P._convertToJS(value);
      }],
      get$hashCode: function(_) {
        return 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
      },
      toString$0: function(_) {
        var t1, exception;
        try {
          t1 = String(this._js$_jsObject);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
          return this.super$Object$toString$0(this);
        }
      },
      callMethod$2: function(method, args) {
        var t1, t2;
        t1 = this._js$_jsObject;
        t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure()), true, null);
        return P._convertToDart(t1[method].apply(t1, t2));
      },
      callMethod$1: function(method) {
        return this.callMethod$2(method, null);
      },
      static: {JsObject_JsObject: function($constructor, $arguments) {
          var constr, args, t1, factoryFunction;
          constr = P._convertToJS($constructor);
          if ($arguments instanceof Array)
            switch ($arguments.length) {
              case 0:
                return P._wrapToDart(new constr());
              case 1:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0])));
              case 2:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1])));
              case 3:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2])));
              case 4:
                return P._wrapToDart(new constr(P._convertToJS($arguments[0]), P._convertToJS($arguments[1]), P._convertToJS($arguments[2]), P._convertToJS($arguments[3])));
            }
          args = [null];
          t1 = new H.MappedListIterable($arguments, P._convertToJS$closure());
          t1.$builtinTypeInfo = [null, null];
          C.JSArray_methods.addAll$1(args, t1);
          factoryFunction = constr.bind.apply(constr, args);
          String(factoryFunction);
          return P._wrapToDart(new factoryFunction());
        }, JsObject_JsObject$jsify: function(object) {
          return P._wrapToDart(P.JsObject__convertDataTree(object));
        }, JsObject__convertDataTree: function(data) {
          var _convertedObjects = new P._IdentityHashMap(0, null, null, null, null);
          _convertedObjects.$builtinTypeInfo = [null, null];
          return new P.JsObject__convertDataTree__convert(_convertedObjects).call$1(data);
        }}
    },
    JsObject__convertDataTree__convert: {
      "^": "Closure:7;_captured__convertedObjects_0",
      call$1: [function(o) {
        var t1, t2, convertedMap, key, convertedList;
        t1 = this._captured__convertedObjects_0;
        if (t1.containsKey$1(o))
          return t1.$index(0, o);
        t2 = J.getInterceptor(o);
        if (!!t2.$isMap) {
          convertedMap = {};
          t1.$indexSet(0, o, convertedMap);
          for (t1 = J.get$iterator$ax(o.get$keys()); t1.moveNext$0();) {
            key = t1.get$current();
            convertedMap[key] = this.call$1(t2.$index(o, key));
          }
          return convertedMap;
        } else if (!!t2.$isIterable) {
          convertedList = [];
          t1.$indexSet(0, o, convertedList);
          C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
          return convertedList;
        } else
          return P._convertToJS(o);
      }, null, null, 2, 0, null, 74, [], "call"]
    },
    JsFunction: {
      "^": "JsObject;_js$_jsObject"
    },
    JsArray: {
      "^": "JsObject_ListMixin;_js$_jsObject",
      $index: function(_, index) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        return this.super$JsObject$$index(this, index);
      },
      $indexSet: function(_, index, value) {
        var t1;
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
          if (typeof index === "number" && Math.floor(index) === index)
            t1 = index < 0 || index >= this.get$length(this);
          else
            t1 = false;
          if (t1)
            H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
        }
        this.super$JsObject$$indexSet(this, index, value);
      },
      get$length: function(_) {
        var len = this._js$_jsObject.length;
        if (typeof len === "number" && len >>> 0 === len)
          return len;
        throw H.wrapException(new P.StateError("Bad JsArray length"));
      },
      set$length: function(_, $length) {
        this.super$JsObject$$indexSet(this, "length", $length);
      },
      add$1: function(_, value) {
        this.callMethod$2("push", [value]);
      },
      addAll$1: function(_, iterable) {
        this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
      },
      removeRange$2: function(_, start, end) {
        P.JsArray__checkRange(start, end, this.get$length(this));
        this.callMethod$2("splice", [start, end - start]);
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        var $length, args, t1;
        P.JsArray__checkRange(start, end, this.get$length(this));
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          throw H.wrapException(P.ArgumentError$(skipCount));
        args = [start, $length];
        t1 = new H.SubListIterable(iterable, skipCount, null);
        t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(iterable, "ListMixin", 0)];
        C.JSArray_methods.addAll$1(args, t1.take$1(0, $length));
        this.callMethod$2("splice", args);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      static: {JsArray__checkRange: function(start, end, $length) {
          if (start < 0 || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, null, null));
          if (end < start || end > $length)
            throw H.wrapException(P.RangeError$range(end, start, $length, null, null));
        }}
    },
    JsObject_ListMixin: {
      "^": "JsObject+ListMixin;",
      $isList: 1,
      $asList: null,
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: null
    },
    _convertToJS_closure: {
      "^": "Closure:7;",
      call$1: function(o) {
        var jsFunction = function(_call, f, captureThis) {
          return function() {
            return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
          };
        }(P._callDartFunction, o, false);
        P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
        return jsFunction;
      }
    },
    _convertToJS_closure0: {
      "^": "Closure:7;_captured_ctor_0",
      call$1: function(o) {
        return new this._captured_ctor_0(o);
      }
    },
    _wrapToDart_closure: {
      "^": "Closure:7;",
      call$1: function(o) {
        return new P.JsFunction(o);
      }
    },
    _wrapToDart_closure0: {
      "^": "Closure:7;",
      call$1: function(o) {
        var t1 = new P.JsArray(o);
        t1.$builtinTypeInfo = [null];
        return t1;
      }
    },
    _wrapToDart_closure1: {
      "^": "Closure:7;",
      call$1: function(o) {
        return new P.JsObject(o);
      }
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish0: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    max: function(a, b) {
      var t1;
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if (isNaN(b))
          return b;
        return a;
      }
      if (b === 0)
        t1 = a === 0 ? 1 / a < 0 : a < 0;
      else
        t1 = false;
      if (t1)
        return b;
      return a;
    }
  }], ["dart.mirrors", "dart:mirrors",, P, {
    "^": "",
    reflectClass: function(key) {
      var t1, tm;
      t1 = J.getInterceptor(key);
      if (!t1.$isType || t1.$eq(key, C.Type_dynamic))
        throw H.wrapException(P.ArgumentError$(t1.toString$0(key) + " does not denote a class"));
      tm = P.reflectType(key);
      if (!J.getInterceptor(tm).$isClassMirror)
        throw H.wrapException(P.ArgumentError$(t1.toString$0(key) + " does not denote a class"));
      return tm.get$originalDeclaration();
    },
    reflectType: function(key) {
      if (J.$eq(key, C.Type_dynamic)) {
        $.get$currentJsMirrorSystem().toString;
        return $.get$JsMirrorSystem__dynamicType();
      }
      return H.reflectClassByMangledName(key._typeName);
    },
    Mirror: {
      "^": "Object;"
    },
    InstanceMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    LibraryMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    TypeMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    ClassMirror: {
      "^": "Object;",
      $isTypeMirror: 1,
      $isMirror: 1
    },
    TypeVariableMirror: {
      "^": "TypeMirror;",
      $isMirror: 1
    },
    MethodMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    VariableMirror: {
      "^": "Object;",
      $isMirror: 1
    },
    ParameterMirror: {
      "^": "Object;",
      $isMirror: 1,
      $isVariableMirror: 1
    },
    MirrorsUsed: {
      "^": "Object;symbols,targets,metaTargets,override"
    }
  }], ["dart.typed_data", "dart:typed_data",, P, {
    "^": "",
    ByteBuffer: {
      "^": "Object;"
    },
    Endianness: {
      "^": "Object;_littleEndian"
    },
    ByteData: {
      "^": "Object;",
      $isTypedData: 1,
      static: {ByteData_ByteData: [function($length) {
          return new DataView(new ArrayBuffer(H._checkLength($length)));
        }, null, null, 2, 0, 196, 75, [], "new ByteData"], ByteData_ByteData$view: [function(buffer, offsetInBytes, $length) {
          return J.asByteData$2$x(buffer, offsetInBytes, $length);
        }, null, null, 2, 4, 197, 69, 25, 76, [], 77, [], 75, [], "new ByteData$view"]}
    },
    "+ByteData": [0, 281],
    Uint8List: {
      "^": "Object;",
      $isTypedData: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkLength: function($length) {
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$("Invalid length " + H.S($length)));
      return $length;
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
      if ($length != null)
        ;
    },
    _ensureNativeList: function(list) {
      var t1, result, i;
      t1 = J.getInterceptor(list);
      if (!!t1.$isJSIndexable)
        return list;
      result = Array(t1.get$length(list));
      result.fixed$length = Array;
      for (i = 0; i < t1.get$length(list); ++i)
        result[i] = t1.$index(list, i);
      return result;
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    NativeByteBuffer: {
      "^": "Interceptor;",
      get$runtimeType: function(receiver) {
        return C.Type_wAg;
      },
      asByteData$2: function(receiver, offsetInBytes, $length) {
        H._checkViewArguments(receiver, offsetInBytes, $length);
        return $length == null ? new DataView(receiver, offsetInBytes) : new DataView(receiver, offsetInBytes, $length);
      },
      $isNativeByteBuffer: 1,
      $isObject: 1,
      "%": "ArrayBuffer"
    },
    NativeTypedData: {
      "^": "Interceptor;buffer=,lengthInBytes:byteLength=",
      _invalidIndex$2: function(receiver, index, $length) {
        if (index < 0 || index >= $length) {
          if (!!this.$isList)
            if ($length === receiver.length)
              throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
          throw H.wrapException(P.RangeError$range(index, 0, $length - 1, null, null));
        } else
          throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
      },
      _checkIndex$2: function(receiver, index, $length) {
        if (index >>> 0 !== index || index >= $length)
          this._invalidIndex$2(receiver, index, $length);
      },
      _checkSublistArguments$3: function(receiver, start, end, $length) {
        var t1 = $length + 1;
        this._checkIndex$2(receiver, start, t1);
        if (end == null)
          return $length;
        this._checkIndex$2(receiver, end, t1);
        if (start > end)
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        return end;
      },
      $isNativeTypedData: 1,
      $isTypedData: 1,
      $isObject: 1,
      "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
    },
    NativeByteData: {
      "^": "NativeTypedData;",
      get$runtimeType: [function(receiver) {
        return C.Type_oGP;
      }, null, null, 1, 0, 35, "runtimeType"],
      getFloat32$2: [function(receiver, byteOffset, endian) {
        return receiver.getFloat32(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getFloat32$2($receiver, byteOffset, C.Endianness_false);
      }, "getFloat32$1", "call$2", "call$1", "get$getFloat32", 2, 2, 40, 78, 79, [], 80, [], "getFloat32"],
      getFloat64$2: [function(receiver, byteOffset, endian) {
        return receiver.getFloat64(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getFloat64$2($receiver, byteOffset, C.Endianness_false);
      }, "getFloat64$1", "call$2", "call$1", "get$getFloat64", 2, 2, 40, 78, 79, [], 80, [], "getFloat64"],
      getInt16$2: [function(receiver, byteOffset, endian) {
        return receiver.getInt16(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getInt16$2($receiver, byteOffset, C.Endianness_false);
      }, "getInt16$1", "call$2", "call$1", "get$getInt16", 2, 2, 41, 78, 79, [], 80, [], "getInt16"],
      getInt32$2: [function(receiver, byteOffset, endian) {
        return receiver.getInt32(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getInt32$2($receiver, byteOffset, C.Endianness_false);
      }, "getInt32$1", "call$2", "call$1", "get$getInt32", 2, 2, 41, 78, 79, [], 80, [], "getInt32"],
      getInt64$2: [function(receiver, byteOffset, endian) {
        throw H.wrapException(new P.UnsupportedError("Int64 accessor not supported by dart2js."));
      }, function($receiver, byteOffset) {
        return this.getInt64$2($receiver, byteOffset, C.Endianness_false);
      }, "getInt64$1", "call$2", "call$1", "get$getInt64", 2, 2, 41, 78, 79, [], 80, [], "getInt64"],
      getInt8$1: [function(receiver, byteOffset) {
        return receiver.getInt8(byteOffset);
      }, "call$1", "get$getInt8", 2, 0, 8, 79, [], "getInt8"],
      getUint16$2: [function(receiver, byteOffset, endian) {
        return receiver.getUint16(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getUint16$2($receiver, byteOffset, C.Endianness_false);
      }, "getUint16$1", "call$2", "call$1", "get$getUint16", 2, 2, 41, 78, 79, [], 80, [], "getUint16"],
      getUint32$2: [function(receiver, byteOffset, endian) {
        return receiver.getUint32(byteOffset, C.Endianness_true === endian);
      }, function($receiver, byteOffset) {
        return this.getUint32$2($receiver, byteOffset, C.Endianness_false);
      }, "getUint32$1", "call$2", "call$1", "get$getUint32", 2, 2, 41, 78, 79, [], 80, [], "getUint32"],
      getUint64$2: [function(receiver, byteOffset, endian) {
        throw H.wrapException(new P.UnsupportedError("Uint64 accessor not supported by dart2js."));
      }, function($receiver, byteOffset) {
        return this.getUint64$2($receiver, byteOffset, C.Endianness_false);
      }, "getUint64$1", "call$2", "call$1", "get$getUint64", 2, 2, 41, 78, 79, [], 80, [], "getUint64"],
      getUint8$1: [function(receiver, byteOffset) {
        return receiver.getUint8(byteOffset);
      }, "call$1", "get$getUint8", 2, 0, 8, 79, [], "getUint8"],
      setFloat32$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setFloat32(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setFloat32$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setFloat32$2", "call$3", "call$2", "get$setFloat32", 4, 2, 42, 78, 79, [], 26, [], 80, [], "setFloat32"],
      setFloat64$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setFloat64(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setFloat64$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setFloat64$2", "call$3", "call$2", "get$setFloat64", 4, 2, 42, 78, 79, [], 26, [], 80, [], "setFloat64"],
      setInt16$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setInt16(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setInt16$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setInt16$2", "call$3", "call$2", "get$setInt16", 4, 2, 43, 78, 79, [], 26, [], 80, [], "setInt16"],
      setInt32$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setInt32(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setInt32$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setInt32$2", "call$3", "call$2", "get$setInt32", 4, 2, 43, 78, 79, [], 26, [], 80, [], "setInt32"],
      setInt64$3: [function(receiver, byteOffset, value, endian) {
        throw H.wrapException(new P.UnsupportedError("Int64 accessor not supported by dart2js."));
      }, function($receiver, byteOffset, value) {
        return this.setInt64$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setInt64$2", "call$3", "call$2", "get$setInt64", 4, 2, 43, 78, 79, [], 26, [], 80, [], "setInt64"],
      setInt8$2: [function(receiver, byteOffset, value) {
        return receiver.setInt8(byteOffset, value);
      }, "call$2", "get$setInt8", 4, 0, 34, 79, [], 26, [], "setInt8"],
      setUint16$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setUint16(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setUint16$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setUint16$2", "call$3", "call$2", "get$setUint16", 4, 2, 43, 78, 79, [], 26, [], 80, [], "setUint16"],
      setUint32$3: [function(receiver, byteOffset, value, endian) {
        return receiver.setUint32(byteOffset, value, C.Endianness_true === endian);
      }, function($receiver, byteOffset, value) {
        return this.setUint32$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setUint32$2", "call$3", "call$2", "get$setUint32", 4, 2, 43, 78, 79, [], 26, [], 80, [], "setUint32"],
      setUint64$3: [function(receiver, byteOffset, value, endian) {
        throw H.wrapException(new P.UnsupportedError("Uint64 accessor not supported by dart2js."));
      }, function($receiver, byteOffset, value) {
        return this.setUint64$3($receiver, byteOffset, value, C.Endianness_false);
      }, "setUint64$2", "call$3", "call$2", "get$setUint64", 4, 2, 43, 78, 79, [], 26, [], 80, [], "setUint64"],
      setUint8$2: [function(receiver, byteOffset, value) {
        return receiver.setUint8(byteOffset, value);
      }, "call$2", "get$setUint8", 4, 0, 34, 79, [], 26, [], "setUint8"],
      $isByteData: 1,
      $isTypedData: 1,
      $isObject: 1,
      "%": "DataView"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      _setRangeFast$4: function(receiver, start, end, source, skipCount) {
        var t1, count, sourceLength;
        t1 = receiver.length + 1;
        this._checkIndex$2(receiver, start, t1);
        this._checkIndex$2(receiver, end, t1);
        if (start > end)
          throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
        count = end - start;
        if (skipCount < 0)
          throw H.wrapException(P.ArgumentError$(skipCount));
        sourceLength = source.length;
        if (sourceLength - skipCount < count)
          throw H.wrapException(new P.StateError("Not enough elements"));
        if (skipCount !== 0 || sourceLength !== count)
          source = source.subarray(skipCount, skipCount + count);
        receiver.set(source, start);
      },
      $isJavaScriptIndexingBehavior: 1,
      $isJSIndexable: 1
    },
    NativeTypedArrayOfDouble: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange$4(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      }
    },
    NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    NativeTypedArrayOfInt: {
      "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
      $indexSet: function(receiver, index, value) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        receiver[index] = value;
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
          this._setRangeFast$4(receiver, start, end, iterable, skipCount);
          return;
        }
        this.super$ListMixin$setRange$4(receiver, start, end, iterable, skipCount);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin0: {
      "^": "NativeTypedArray+ListMixin;",
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      }
    },
    NativeTypedArray_ListMixin_FixedLengthListMixin0: {
      "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;",
      get$runtimeType: function(receiver) {
        return C.Type_Art;
      },
      sublist$2: function(receiver, start, end) {
        return new Float32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float32Array"
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;",
      get$runtimeType: function(receiver) {
        return C.Type_ckn;
      },
      sublist$2: function(receiver, start, end) {
        return new Float64Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$double];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$double];
      },
      "%": "Float64Array"
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_UoK;
      },
      $index: function(receiver, index) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_dTZ;
      },
      $index: function(receiver, index) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_mp3;
      },
      $index: function(receiver, index) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Int8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_CAk;
      },
      $index: function(receiver, index) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_irB;
      },
      $index: function(receiver, index) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_QuW;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint8ClampedArray(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$runtimeType: function(receiver) {
        return C.Type_6L0;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        var t1 = receiver.length;
        if (index >>> 0 !== index || index >= t1)
          this._invalidIndex$2(receiver, index, t1);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      $isNativeUint8List: 1,
      $isUint8List: 1,
      $isTypedData: 1,
      $isObject: 1,
      $isList: 1,
      $asList: function() {
        return [P.$int];
      },
      $isEfficientLength: 1,
      $isIterable: 1,
      $asIterable: function() {
        return [P.$int];
      },
      "%": ";Uint8Array"
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["dslink.broker", "package:dslink/broker.dart",, Z, {
    "^": "",
    BrokerDiscoveryClient: {
      "^": "Object;_socket,_discoverController,_brokerController",
      init$1: function(broadcast) {
        var $goto = 0, completer = new P.Completer_Completer(), handler = 1, currentError, $self = this, t1;
        function init$1(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                t1 = $self.get$RawDatagramSocket();
                $goto = 2;
                return H.asyncHelper(t1.bind$2("0.0.0.0", broadcast ? 1900 : 0), init$1, completer);
              case 2:
                // returning from await.
                t1 = result;
                $self._socket = t1;
                t1.set$multicastHops(10);
                $self._socket.set$broadcastEnabled(true);
                $self._socket.listen$1(new Z.BrokerDiscoveryClient_init_closure($self));
                $self._socket.set$writeEventsEnabled(true);
                $self._socket.joinMulticast$1(H.throwNoSuchMethod("", "", ["239.255.255.230"], []));
                // implicit return
                return H.asyncHelper(null, 0, completer, null);
              case 1:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, init$1, completer, null);
      },
      init$0: function() {
        return this.init$1(false);
      },
      discover$1$timeout: function(timeout) {
        J.send$3$x(this._socket, C.Utf8Codec_false.get$encoder().convert$1("DISCOVER"), H.throwNoSuchMethod("", "", ["239.255.255.230"], []), 1900);
      },
      discover$0: function() {
        return this.discover$1$timeout(C.Duration_5000000);
      },
      close$0: function(_) {
        J.close$0$x(this._socket);
      }
    },
    BrokerDiscoveryClient_init_closure: {
      "^": "Closure:7;_broker$_captured_this_0",
      call$1: [function($event) {
        var t1, packet, parts, type, argument, t2;
        t1 = this._broker$_captured_this_0;
        if (J.$eq($event, t1.get$RawSocketEvent().get$READ())) {
          packet = t1._socket.receive$0();
          t1._socket.set$writeEventsEnabled(true);
          parts = C.Utf8Codec_false.decode$1(packet.get$data(packet)).split(" ");
          type = parts[0];
          argument = H.SubListIterable$(parts, 1, null, H.getTypeArgumentByIndex(parts, 0)).join$1(0, " ");
          t2 = J.getInterceptor(type);
          if (t2.$eq(type, "BROKER")) {
            t1 = t1._brokerController;
            if (!t1.get$_mayAddEvent())
              H.throwExpression(t1._addEventError$0());
            t1._sendData$1(argument);
          } else if (t2.$eq(type, "DISCOVER")) {
            t2 = t1._discoverController;
            if (!t2.get$_mayAddEvent())
              H.throwExpression(t2._addEventError$0());
            t2._sendData$1(new Z.BrokerDiscoverRequest(t1, packet));
          }
        }
      }, null, null, 2, 0, null, 58, [], "call"]
    },
    BrokerDiscoverRequest: {
      "^": "Object;client,packet"
    }
  }], ["dslink.client", "package:dslink/client.dart",, X, {
    "^": "",
    getKeyFromFile: [function(path) {
      var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, t1, key;
      function getKeyFromFile(errorCode, result) {
        if (errorCode === 1) {
          currentError = result;
          $goto = handler;
        }
        while (true)
          switch ($goto) {
            case 0:
              // Function start
              t1 = C.Utf8Codec_false.decode$1(new G.File(path).readAsBytesSync$0());
              key = $.get$_CRYPTO_PROVIDER().loadFromString$1(t1);
              $returnValue = key;
              // goto return
              $goto = 1;
              break;
            case 1:
              // return
              return H.asyncHelper($returnValue, 0, completer, null);
            case 2:
              // rethrow
              return H.asyncHelper(currentError, 1, completer);
          }
      }
      return H.asyncHelper(null, getKeyFromFile, completer, null);
    }, "call$1", "getKeyFromFile$closure", 2, 0, 201, 107, [], "getKeyFromFile"],
    LinkProvider: {
      "^": "Object;link@-282,provider@-283,privateKey@-284,brokerUrl@-285,_nodesFile@-286,prefix@-285,args@-287,isRequester@-288,command@-285,isResponder@-288,defaultNodes@-289,profiles@-289,enableHttp@-288,encodePrettyJson@-288,strictOptions@-288,exitOnFailure@-288,loadNodesJson@-288,defaultLogLevel@-285,_basePath@-285,_configured@-288,_discoverBroker@-288,_reconnecting@-288,dslinkJson@-289,_initialized@-288,_ready@-288,_connectOnReady@-288,_connectedCompleter@-290",
      configure$2$argp$optionsHandler: [function(argp, optionsHandler) {
        var dslinkFile, e, configStr, err, keyFile, key, macs, t1, t2, t3, t4, t5, opts, helpStr, $name, exception;
        this._configured = true;
        t1 = this.link;
        if (t1 != null) {
          t1.close$0(0);
          this.link = null;
        }
        if (argp == null) {
          t1 = this.strictOptions;
          t2 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, E.Option);
          t3 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, S.ArgParser);
          t4 = new P.UnmodifiableMapView(t2);
          t4.$builtinTypeInfo = [null, null];
          t5 = new P.UnmodifiableMapView(t3);
          t5.$builtinTypeInfo = [null, null];
          argp = new S.ArgParser(t2, t3, t4, t5, [], !t1);
        }
        argp.addOption$4$abbr$defaultsTo$help("broker", "b", "http://127.0.0.1:8080/conn", "Broker URL");
        argp.addOption$3$abbr$help("name", "n", "Link Name");
        argp.addOption$2$help("base-path", "Base Path for DSLink");
        t1 = new H.MappedListIterable(C.List_O1R, new X.LinkProvider_configure_closure());
        t1.$builtinTypeInfo = [null, null];
        t1 = t1.toList$0(0);
        C.JSArray_methods.addAll$1(t1, ["auto"]);
        argp.addOption$5$abbr$allowed$defaultsTo$help("log", "l", t1, "AUTO", "Log Level");
        argp._addOption$11$hide$negatable("help", "h", "Displays this Help Message", null, null, null, false, null, C.OptionType_woc, false, false);
        argp._addOption$11$hide$negatable("discover", "d", "Automatically Discover a Broker", null, null, null, false, null, C.OptionType_woc, false, false);
        t1 = J.toList$0$ax(this.args);
        t2 = [];
        t2.$builtinTypeInfo = [P.String];
        opts = new S.Parser(null, null, argp, t1, t2, P.LinkedHashMap_LinkedHashMap$_empty(P.String, null)).parse$0();
        if (J.$eq(opts.$index(0, "log"), "auto"))
          if (Q.DEBUG_MODE())
            Q.updateLogLevel("all");
          else
            Q.updateLogLevel(this.defaultLogLevel);
        else
          Q.updateLogLevel(opts.$index(0, "log"));
        if (opts.$index(0, "base-path") != null) {
          t1 = opts.$index(0, "base-path");
          this._basePath = t1;
          if (J.endsWith$1$s(t1, "/")) {
            t1 = this._basePath;
            this._basePath = J.substring$2$s(t1, 0, t1.length - 1);
          }
        }
        helpStr = "usage: " + H.S(this.command) + " [--broker URL] [--log LEVEL] [--name NAME] [--discover]";
        if (opts.$index(0, "help")) {
          P.print(helpStr);
          P.print(new A.Usage(argp._optionsAndSeparators, null, 0, null, 0, 0).generate$0());
          if (this.exitOnFailure)
            $.get$_process().callMethod$2("exit", [1]);
          else
            return false;
        }
        t1 = opts.$index(0, "broker");
        this.brokerUrl = t1;
        if (t1 == null && !opts.$index(0, "discover")) {
          P.print("No Broker URL Specified. One of [--broker, --discover] is required.");
          P.print(helpStr);
          P.print(new A.Usage(argp._optionsAndSeparators, null, 0, null, 0, 0).generate$0());
          if (this.exitOnFailure)
            $.get$_process().callMethod$2("exit", [1]);
          else
            return false;
        }
        $name = opts.$index(0, "name");
        if ($name != null)
          if (C.JSString_methods.endsWith$1($name, "-"))
            this.prefix = $name;
          else
            this.prefix = $name + "-";
        dslinkFile = new G.File(H.S(this._basePath) + "/dslink.json");
        e = null;
        try {
          configStr = C.Utf8Codec_false.decode$1(dslinkFile.readAsBytesSync$0());
          this.dslinkJson = P._parseJson(configStr, $.get$DsJson_instance().decoder._reviver);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          err = t1;
          e = err;
        }
        if (this.dslinkJson == null) {
          Q.logger().log$4(C.Level_SEVERE_1000, "Invalid dslink.json", e, null);
          if (this.exitOnFailure)
            $.get$_process().callMethod$2("exit", [1]);
          else
            return false;
        }
        t1 = this.brokerUrl;
        if (t1 != null)
          if (!J.startsWith$1$s(t1, "http"))
            this.brokerUrl = "http://" + H.S(this.brokerUrl);
        P.Uri_parse(this.brokerUrl, 0, null);
        keyFile = this.getConfig$1("key") == null ? new G.File(H.S(this._basePath) + "/.dslink.key") : new G.File(P.Uri_parse(this.getConfig$1("key"), 0, null).toFilePath$0());
        key = null;
        try {
          key = C.Utf8Codec_false.decode$1(keyFile.readAsBytesSync$0());
          this.privateKey = $.get$_CRYPTO_PROVIDER().loadFromString$1(key);
        } catch (exception) {
          H.unwrapException(exception);
        }
        if (key == null || J.get$length$asx(key) !== 131) {
          if ($.get$_CRYPTO_PROVIDER().get$random().get$needsEntropy()) {
            macs = null;
            if (J.$eq($.get$_process().$index(0, "platform"), "win32"))
              macs = J.toString$0(Z.Process_runSync("getmac", [], null, true, false, C.Utf8Codec_false, C.Utf8Codec_false, null).stdout);
            else
              try {
                macs = J.toString$0(Z.Process_runSync("arp", ["-an"], null, true, false, C.Utf8Codec_false, C.Utf8Codec_false, null).stdout);
              } catch (exception) {
                H.unwrapException(exception);
                macs = J.toString$0(Z.Process_runSync("ifconfig", [], null, true, false, C.Utf8Codec_false, C.Utf8Codec_false, null).stdout);
              }
            $.get$_CRYPTO_PROVIDER().get$random().addEntropy$1(macs);
          }
          t1 = $.get$_CRYPTO_PROVIDER().generateSync$0();
          this.privateKey = t1;
          key = t1.saveToString$0();
          t1 = C.Utf8Codec_false.get$encoder().convert$1(key);
          $.get$_fs().callMethod$2("writeFileSync", [keyFile.get$_file$_path(), K.listToBuf(t1)]);
        }
        if (opts.$index(0, "discover"))
          this._discoverBroker = true;
        if (optionsHandler != null)
          optionsHandler.call$1(opts);
        return true;
      }, function() {
        return this.configure$2$argp$optionsHandler(null, null);
      }, "configure$0", "call$2$argp$optionsHandler", "call$0", "get$configure", 0, 5, 44, 25, 25, 108, [], 109, [], "configure"],
      chooseBroker$1: [function(brokers) {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError;
        function chooseBroker$1(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                $goto = 3;
                return H.asyncHelper(brokers.get$first(brokers), chooseBroker$1, completer);
              case 3:
                // returning from await.
                $returnValue = result;
                // goto return
                $goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, chooseBroker$1, completer, null);
      }, "call$1", "get$chooseBroker", 2, 0, 45, 110, [], "chooseBroker"],
      onValueChange$2$cacheLevel: [function(path, cacheLevel) {
        var t1, controller;
        t1 = {};
        t1._captured_listener_0 = null;
        t1._captured_controller_1 = null;
        t1._captured_subs_2 = 0;
        controller = P.StreamController_StreamController$broadcast(new X.LinkProvider_onValueChange_closure(t1), new X.LinkProvider_onValueChange_closure0(t1, this, path, cacheLevel), false, O.ValueUpdate);
        t1._captured_controller_1 = controller;
        t1 = new P._BroadcastStream(controller);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(controller, 0)];
        return t1;
      }, function(path) {
        return this.onValueChange$2$cacheLevel(path, 1);
      }, "onValueChange$1", "call$2$cacheLevel", "call$1", "get$onValueChange", 2, 3, 46, 111, 107, [], 112, [], "onValueChange"],
      syncValue$1: [function(path) {
        var n = this.provider.getNode$1(path);
        n.updateValue$2$force(n.get$lastValueUpdate().value, true);
      }, "call$1", "get$syncValue", 2, 0, 37, 107, [], "syncValue"],
      init$0: [function() {
        var loadedNodesData, nodesStr, t1, t2, exception;
        if (!this._configured)
          if (!this.configure$0())
            return;
        this._initialized = true;
        t1 = this.provider;
        if (t1 == null) {
          t1 = this.profiles;
          t2 = new T.SimpleNodeProvider(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.LocalNode), P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, {func: 1, ret: T.SimpleNode, args: [P.String]}), new T.DummyPermissionManager());
          t2.init$2(null, t1);
          this.provider = t2;
          t1 = t2;
        }
        if (this.loadNodesJson && !!J.getInterceptor(t1).$isSerializableNodeProvider && !this._reconnecting) {
          t1 = this.getConfig$1("nodes") == null ? new G.File(H.S(this._basePath) + "/nodes.json") : new G.File(P.Uri_parse(this.getConfig$1("nodes"), 0, null).toFilePath$0());
          this._nodesFile = t1;
          loadedNodesData = null;
          try {
            nodesStr = C.Utf8Codec_false.decode$1(t1.readAsBytesSync$0());
            loadedNodesData = P._parseJson(nodesStr, $.get$DsJson_instance().decoder._reviver);
          } catch (exception) {
            H.unwrapException(exception);
          }
          if (loadedNodesData != null)
            H.interceptedTypeCast(this.provider, "$isSerializableNodeProvider").init$1(loadedNodesData);
          else {
            t1 = this.defaultNodes;
            if (t1 != null)
              H.interceptedTypeCast(this.provider, "$isSerializableNodeProvider").init$1(t1);
          }
        }
        t1 = new X.LinkProvider_init_doRun(this);
        if (this._discoverBroker)
          P.Future_Future(new X.LinkProvider_init_closure(this, t1, new Z.BrokerDiscoveryClient(null, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null))), null);
        else
          t1.call$0();
      }, "call$0", "get$init", 0, 0, 6, "init"],
      getConfig$1: [function(key) {
        var t1 = this.dslinkJson;
        if (t1 != null && !!J.getInterceptor(t1.$index(0, "configs")).$isMap && !!J.getInterceptor(J.$index$asx(this.dslinkJson.$index(0, "configs"), key)).$isMap && J.$index$asx(this.dslinkJson.$index(0, "configs"), key).containsKey$1("value"))
          return J.$index$asx(J.$index$asx(this.dslinkJson.$index(0, "configs"), key), "value");
        return;
      }, "call$1", "get$getConfig", 2, 0, 47, 65, [], "getConfig"],
      connect$0: [function() {
        var t1, t2;
        if (this._connectedCompleter == null) {
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [null];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [null];
          this._connectedCompleter = t1;
        }
        if (!this._configured || !this._initialized)
          this.init$0();
        if (this._ready) {
          t1 = this.link._onConnectedCompleter.get$future();
          t2 = this._connectedCompleter;
          t1.then$1(t2.get$complete(t2));
          t1 = this.link;
          if (t1 != null)
            t1.connect$0();
        } else
          this._connectOnReady = true;
        return this._connectedCompleter.get$future();
      }, "call$0", "get$connect", 0, 0, 22, "connect"],
      get$requester: [function() {
        return this.link.requester;
      }, null, null, 1, 0, 48, "requester"],
      get$onRequesterReady: [function() {
        return this.link._onRequesterReadyCompleter.get$future();
      }, null, null, 1, 0, 49, "onRequesterReady"],
      close$0: [function(_) {
        var t1;
        this._connectedCompleter = null;
        t1 = this.link;
        if (t1 != null) {
          t1.close$0(0);
          this.link = null;
          this._initialized = false;
          this._reconnecting = true;
        }
      }, "call$0", "get$close", 0, 0, 6, "close"],
      stop$0: [function(_) {
        return this.close$0(0);
      }, "call$0", "get$stop", 0, 0, 6, "stop"],
      get$didInitializationFail: [function() {
        return this.link == null;
      }, null, null, 1, 0, 26, "didInitializationFail"],
      get$isInitialized: [function() {
        return this.link != null;
      }, null, null, 1, 0, 26, "isInitialized"],
      save$0: [function() {
        var t1, t2, t3, t4;
        t1 = this._nodesFile;
        if (t1 != null && this.provider != null) {
          t2 = this.provider;
          if (!J.getInterceptor(t2).$isSerializableNodeProvider)
            return;
          t2 = H.interceptedTypeCast(t2, "$isSerializableNodeProvider").getNode$1("/").save$0();
          t3 = this.encodePrettyJson;
          t4 = $.get$DsJson_instance();
          t4.toString;
          if (t3) {
            t3 = t4._prettyEncoder;
            if (t3 == null) {
              t3 = new P.JsonEncoder("  ", Q.DsJsonCodecImpl__safeEncoder$closure());
              t4.encoder = t3;
              t4._prettyEncoder = t3;
            } else
              t4.encoder = t3;
          }
          t3 = t4.encoder;
          t3 = P._JsonStringStringifier_stringify(t2, t3._toEncodable, t3.indent);
          t1.toString;
          t3 = C.Utf8Codec_false.get$encoder().convert$1(t3);
          $.get$_fs().callMethod$2("writeFileSync", [t1._file$_path, K.listToBuf(t3)]);
        }
      }, "call$0", "get$save", 0, 0, 6, "save"],
      saveAsync$0: [function() {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, $self = this, t1, t2, t3, encoded;
        function saveAsync$0(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                $goto = $self._nodesFile != null && $self.provider != null ? 3 : 4;
                break;
              case 3:
                // then
                t1 = $self.provider;
                if (!J.getInterceptor(t1).$isSerializableNodeProvider) {
                  // goto return
                  $goto = 1;
                  break;
                } else
                  ;
                t1 = H.interceptedTypeCast(t1, "$isSerializableNodeProvider").getNode$1("/").save$0();
                t2 = $self.encodePrettyJson;
                t3 = $.get$DsJson_instance();
                t3.toString;
                if (t2) {
                  t2 = t3._prettyEncoder;
                  if (t2 == null) {
                    t2 = new P.JsonEncoder("  ", Q.DsJsonCodecImpl__safeEncoder$closure());
                    t3.encoder = t2;
                    t3._prettyEncoder = t2;
                  } else
                    t3.encoder = t2;
                } else
                  ;
                t2 = t3.encoder;
                encoded = P._JsonStringStringifier_stringify(t1, t2._toEncodable, t2.indent);
                t2 = $self._nodesFile;
                t2.toString;
                $goto = 5;
                return H.asyncHelper(t2.writeAsBytes$1(C.Utf8Codec_false.get$encoder().convert$1(encoded)), saveAsync$0, completer);
              case 5:
                // returning from await.
              case 4:
                // join
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, saveAsync$0, completer, null);
      }, "call$0", "get$saveAsync", 0, 0, 22, "saveAsync"],
      getNode$1: [function(path) {
        return this.provider.getNode$1(path);
      }, "call$1", "get$getNode", 2, 0, 50, 107, [], "getNode"],
      addNode$2: [function(path, m) {
        var t1 = this.provider;
        if (!J.getInterceptor(t1).$isMutableNodeProvider)
          throw H.wrapException(P.Exception_Exception("Unable to Modify Node Provider: It is not mutable."));
        return H.interceptedTypeCast(t1, "$isMutableNodeProvider").addNode$2(path, m);
      }, "call$2", "get$addNode", 4, 0, 51, 107, [], 113, [], "addNode"],
      removeNode$1: [function(path) {
        var t1 = this.provider;
        if (!J.getInterceptor(t1).$isMutableNodeProvider)
          throw H.wrapException(P.Exception_Exception("Unable to Modify Node Provider: It is not mutable."));
        H.interceptedTypeCast(t1, "$isMutableNodeProvider").removeNode$1(path);
      }, "call$1", "get$removeNode", 2, 0, 37, 107, [], "removeNode"],
      updateValue$2: [function(path, value) {
        var t1 = this.provider;
        if (!J.getInterceptor(t1).$isMutableNodeProvider)
          throw H.wrapException(P.Exception_Exception("Unable to Modify Node Provider: It is not mutable."));
        H.interceptedTypeCast(t1, "$isMutableNodeProvider").getNode$1(path).updateValue$1(value);
      }, "call$2", "get$updateValue", 4, 0, 52, 107, [], 26, [], "updateValue"],
      $index: [function(_, path) {
        return this.provider.getNode$1(path);
      }, null, "get$[]", 2, 0, 50, 107, [], "[]"],
      $not: [function(_) {
        return this.provider.getNode$1("/");
      }, null, "get$~", 0, 0, 53, "~"],
      val$2: [function(path, value) {
        var t1;
        if (value instanceof O.Unspecified)
          return this.provider.getNode$1(path).get$lastValueUpdate().value;
        else {
          t1 = this.provider;
          if (!J.getInterceptor(t1).$isMutableNodeProvider)
            H.throwExpression(P.Exception_Exception("Unable to Modify Node Provider: It is not mutable."));
          H.interceptedTypeCast(t1, "$isMutableNodeProvider").getNode$1(path).updateValue$1(value);
          return value;
        }
      }, function(path) {
        return this.val$2(path, C.C_Unspecified);
      }, "val$1", "call$2", "call$1", "get$val", 2, 2, 54, 114, 107, [], 26, [], "val"],
      static: {LinkProvider$: [function(args, prefix, autoInitialize, command, defaultLogLevel, defaultNodes, enableHttp, encodePrettyJson, exitOnFailure, isRequester, isResponder, loadNodesJson, nodeProvider, profiles, provider, strictOptions) {
          var t1 = new X.LinkProvider(null, provider, null, null, null, prefix, args, isRequester, command, isResponder, defaultNodes, profiles, enableHttp, encodePrettyJson, strictOptions, exitOnFailure, loadNodesJson, defaultLogLevel, ".", false, false, false, null, false, false, false, null);
          if (nodeProvider != null)
            t1.provider = nodeProvider;
          if (autoInitialize)
            t1.init$0();
          return t1;
        }, null, null, 4, 29, 198, 28, 81, 82, 25, 25, 25, 82, 28, 82, 28, 82, 82, 83, 25, 84, [], 85, [], 86, [], 87, [], 88, [], 89, [], 90, [], 91, [], 92, [], 93, [], 94, [], 95, [], 96, [], 97, [], 98, [], 99, [], "new LinkProvider"]}
    },
    "+LinkProvider": [0],
    LinkProvider_configure_closure: {
      "^": "Closure:7;",
      call$1: [function(it) {
        return J.toLowerCase$0$s(J.get$name$x(it));
      }, null, null, 2, 0, 7, 115, [], "call"]
    },
    LinkProvider_onValueChange_closure0: {
      "^": "Closure:5;_client$_box_0,_client$_captured_this_1,_captured_path_2,_captured_cacheLevel_3",
      call$0: [function() {
        var t1 = this._client$_box_0;
        ++t1._captured_subs_2;
        if (t1._captured_listener_0 == null)
          t1._captured_listener_0 = this._client$_captured_this_1.provider.getNode$1(this._captured_path_2).subscribe$2(new X.LinkProvider_onValueChange__closure(t1), this._captured_cacheLevel_3);
      }, null, null, 0, 0, 5, "call"]
    },
    LinkProvider_onValueChange__closure: {
      "^": "Closure:55;_client$_box_0",
      call$1: [function(update) {
        var t1 = this._client$_box_0._captured_controller_1;
        if (!t1.get$_mayAddEvent())
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(update);
      }, null, null, 2, 0, 55, 116, [], "call"]
    },
    LinkProvider_onValueChange_closure: {
      "^": "Closure:5;_client$_box_0",
      call$0: [function() {
        var t1 = this._client$_box_0;
        if (--t1._captured_subs_2 === 0) {
          t1._captured_listener_0.cancel$0();
          t1._captured_listener_0 = null;
        }
      }, null, null, 0, 0, 5, "call"]
    },
    LinkProvider_init_doRun: {
      "^": "Closure:6;_client$_captured_this_0",
      call$0: [function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
        t1 = this._client$_captured_this_0;
        t2 = t1.brokerUrl;
        t3 = t1.prefix;
        t4 = t1.privateKey;
        t5 = t1.isRequester;
        t6 = t1.isResponder;
        t7 = t1.provider;
        t8 = t1.enableHttp;
        t9 = new P._Future(0, $.Zone__current, null);
        t9.$builtinTypeInfo = [L.Requester];
        t9 = new P._AsyncCompleter(t9);
        t9.$builtinTypeInfo = [L.Requester];
        t10 = new P._Future(0, $.Zone__current, null);
        t10.$builtinTypeInfo = [null];
        t10 = new P._AsyncCompleter(t10);
        t10.$builtinTypeInfo = [null];
        t11 = Array(3);
        t11.fixed$length = Array;
        t11.$builtinTypeInfo = [P.String];
        t3 = H.S(t3) + H.S(t4.get$publicKey().get$qHash64());
        if (t5) {
          t5 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.Request);
          t12 = new L.RemoteNodeCache(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.RemoteNode));
          t12 = new L.Requester(t5, t12, null, 1, 1, 0, false, null, null, null, [], [], false);
          t5 = L.SubscribeRequest$(t12, 0);
          t12._subsciption = t5;
          t12._requests.$indexSet(0, 0, t5);
          t5 = t12;
        } else
          t5 = null;
        if (t6 && t7 != null) {
          t6 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.Response);
          t7 = new T.Responder(null, [], t6, null, t7, null, null, null, [], [], false);
          t12 = new T.SubscribeResponse(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.RespSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.RespSubscribeController), P.LinkedHashSet_LinkedHashSet(null, null, null, T.RespSubscribeController), t7, 0, "initialize");
          t7._responder$_subscription = t12;
          t6.$indexSet(0, 0, t12);
          t6 = t7;
        } else
          t6 = null;
        t1.link = new X.HttpClientLink(t9, t10, t3, t5, t6, t4, null, null, t11, null, t2, t8, 1, 1, false);
        t1._ready = true;
        if (t1._connectOnReady) {
          if (t1._connectedCompleter == null) {
            t2 = new P._Future(0, $.Zone__current, null);
            t2.$builtinTypeInfo = [null];
            t2 = new P._AsyncCompleter(t2);
            t2.$builtinTypeInfo = [null];
            t1._connectedCompleter = t2;
          }
          if (!t1._configured || !t1._initialized)
            t1.init$0();
          if (t1._ready) {
            t2 = t1.link._onConnectedCompleter.get$future();
            t3 = t1._connectedCompleter;
            t2.then$1(t3.get$complete(t3));
            t2 = t1.link;
            if (t2 != null)
              t2.connect$0();
          } else
            t1._connectOnReady = true;
          t1._connectedCompleter.get$future();
        }
      }, null, null, 0, 0, 6, "call"]
    },
    LinkProvider_init_closure: {
      "^": "Closure:22;_client$_captured_this_1,_captured_doRun_2,_captured_discovery_3",
      call$0: [function() {
        var $goto = 0, completer = new P.Completer_Completer(), handler = 1, currentError, next = [], $self = this, broker, t1, t2, exception, exception1;
        function call$0(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                t1 = $self._captured_discovery_3;
                $goto = 2;
                return H.asyncHelper(t1.init$0(), call$0, completer);
              case 2:
                // returning from await.
                handler = 4;
                t2 = $self._client$_captured_this_1;
                $goto = 7;
                return H.asyncHelper(t2.chooseBroker$1(t1.discover$0()), call$0, completer);
              case 7:
                // returning from await.
                broker = result;
                P.print("Discovered Broker at " + H.S(broker));
                t2.brokerUrl = broker;
                $self._captured_doRun_2.call$0();
                handler = 1;
                // goto after finally
                $goto = 6;
                break;
              case 4:
                // catch
                handler = 3;
                exception1 = currentError;
                H.unwrapException(exception1);
                P.print("Failed to discover a broker.");
                $.get$_process().callMethod$2("exit", [1]);
                // goto after finally
                $goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $goto = 1;
                break;
              case 6:
                // after finally
                // implicit return
                return H.asyncHelper(null, 0, completer, null);
              case 1:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, call$0, completer, null);
      }, null, null, 0, 0, 22, "call"]
    },
    HttpClientConnection: {
      "^": "Object;_client$_responderChannel@-291,_client$_requesterChannel@-291,_onRequestReadyCompleter@-292,_client$_onDisconnectedCompleter@-293,_connectedOnce@-288,url>-285,clientLink<-294,saltL@-285,saltS@-285,_pendingCheck@-288,_pendingSendS@-288,_sending@-288,_sendingS@-288,_needRetryL@-288,_lastRequestS@-295,_needRetryS@-288,_client$_done@-288,retryDelay@-296,_authError@-288",
      get$responderChannel: [function() {
        return this._client$_responderChannel;
      }, null, null, 1, 0, 56, "responderChannel"],
      get$requesterChannel: [function() {
        return this._client$_requesterChannel;
      }, null, null, 1, 0, 56, "requesterChannel"],
      get$onRequesterReady: [function() {
        return this._onRequestReadyCompleter.get$future();
      }, null, null, 1, 0, 57, "onRequesterReady"],
      get$onDisconnected: [function() {
        return this._client$_onDisconnectedCompleter.get$future();
      }, null, null, 1, 0, 58, "onDisconnected"],
      connected$0: [function() {
        if (this._connectedOnce)
          return;
        this._connectedOnce = true;
        this._client$_responderChannel.updateConnect$0();
        this._client$_requesterChannel.updateConnect$0();
      }, "call$0", "get$connected", 0, 0, 6, "connected"],
      requireSend$0: [function() {
        this._pendingSendS = true;
        if (!this._pendingCheck) {
          this._pendingCheck = true;
          Q.DsTimer_callLaterOnce(this.get$_checkSend());
        }
      }, "call$0", "get$requireSend", 0, 0, 6, "requireSend"],
      close$0: [function(_) {
      }, "call$0", "get$close", 0, 0, 6, "close"],
      _checkSend$0: [function() {
        this._pendingCheck = false;
        if (this._pendingSendS)
          if (this._sendingS === false)
            this._sendS$0();
      }, "call$0", "get$_checkSend", 0, 0, 6, "_checkSend"],
      _sendL$0: [function() {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, next = [], $self = this, client, resp, connUri, request, err, t1, exception, exception1;
        function _sendL$0(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                client = new Z._HttpClient();
                resp = null;
                handler = 4;
                t1 = $self.clientLink;
                connUri = P.Uri_parse(H.S($self.url) + "&authL=" + t1.get$nonce(t1).hashSalt$1($self.saltL), 0, null);
                $goto = 7;
                return H.asyncHelper(client.postUrl$1(connUri), _sendL$0, completer);
              case 7:
                // returning from await.
                request = result;
                J.add$1$ax(request, $.get$HttpClientConnection__fixedLongPollData());
                $goto = 8;
                return H.asyncHelper(J.close$0$x(request), _sendL$0, completer);
              case 8:
                // returning from await.
                resp = result;
                handler = 2;
                // goto after finally
                $goto = 6;
                break;
              case 4:
                // catch
                handler = 3;
                exception1 = currentError;
                t1 = H.unwrapException(exception1);
                err = t1;
                $self._onDataErrorL$1(err);
                // goto return
                $goto = 1;
                break;
                // goto after finally
                $goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $goto = 2;
                break;
              case 6:
                // after finally
                $self._onDataL$1(resp);
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, _sendL$0, completer, null);
      }, "call$0", "get$_sendL", 0, 0, 5, "_sendL"],
      _onDataErrorL$1: [function(err) {
        var t1;
        Q.logger().log$4(C.Level_FINE_500, "http long error: " + H.S(err), null, null);
        if (!this._connectedOnce) {
          this._client$_onDone$0();
          return;
        } else if (!this._client$_done) {
          this._needRetryL = true;
          Q.DsTimer_timerOnceBefore(this.get$retry(), this.retryDelay * 1000);
          t1 = this.retryDelay;
          if (t1 < 60)
            this.retryDelay = t1 + 1;
        }
      }, "call$1", "get$_onDataErrorL", 2, 0, 59, 117, [], "_onDataErrorL"],
      retryL$0: [function() {
        this._needRetryL = false;
        this._sendL$0();
      }, "call$0", "get$retryL", 0, 0, 6, "retryL"],
      _onDataL$1: [function(response) {
        if (response.get$statusCode(response) !== 200) {
          Q.logger().log$4(C.Level_FINE_500, "http long response.statusCode: " + H.S(response.get$statusCode(response)), null, null);
          if (response.get$statusCode(response) === 401) {
            this._authError = true;
            this._client$_onDone$0();
            return;
          }
        }
        response.fold$2(0, [], O.foldList$closure()).then$1(new X.HttpClientConnection__onDataL_closure(this));
      }, "call$1", "get$_onDataL", 2, 0, 60, 118, [], "_onDataL"],
      _sendS$0: [function() {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, next = [], $self = this, m, resp, client, connUri, request, err, t1, rslt, needSend, exception, exception1;
        function _sendS$0(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                $self._pendingSendS = false;
                m = P.LinkedHashMap__makeEmpty();
                t1 = $self._client$_responderChannel;
                if (t1.getData != null) {
                  rslt = t1.getData$0();
                  if (rslt != null && J.get$length$asx(rslt) !== 0) {
                    J.$indexSet$ax(m, "responses", rslt);
                    needSend = true;
                  } else
                    needSend = false;
                } else
                  needSend = false;
                t1 = $self._client$_requesterChannel;
                if (t1.getData != null) {
                  rslt = t1.getData$0();
                  if (rslt != null && J.get$length$asx(rslt) !== 0) {
                    J.$indexSet$ax(m, "requests", rslt);
                    needSend = true;
                  } else
                    ;
                } else
                  ;
                $goto = needSend ? 3 : 4;
                break;
              case 3:
                // then
                resp = null;
                Q.logger().log$4(C.Level_FINE_500, "http send: " + H.S(m), null, null);
                handler = 6;
                $self._sendingS = true;
                client = new Z._HttpClient();
                t1 = $self.clientLink;
                connUri = P.Uri_parse(H.S($self.url) + "&authS=" + t1.get$nonce(t1).hashSalt$1($self.saltS), 0, null);
                $goto = 9;
                return H.asyncHelper(client.postUrl$1(connUri), _sendS$0, completer);
              case 9:
                // returning from await.
                request = result;
                t1 = C.JsonCodec_null_null.encode$1(m);
                t1 = C.Utf8Codec_false.get$encoder().convert$1(t1);
                $self._lastRequestS = t1;
                J.add$1$ax(request, t1);
                $goto = 10;
                return H.asyncHelper(J.close$0$x(request), _sendS$0, completer);
              case 10:
                // returning from await.
                resp = result;
                handler = 2;
                // goto after finally
                $goto = 8;
                break;
              case 6:
                // catch
                handler = 5;
                exception1 = currentError;
                t1 = H.unwrapException(exception1);
                err = t1;
                $self._onDataErrorS$1(err);
                // goto return
                $goto = 1;
                break;
                // goto after finally
                $goto = 8;
                break;
              case 5:
                // uncaught
                // goto rethrow
                $goto = 2;
                break;
              case 8:
                // after finally
                $self._onDataS$1(resp);
              case 4:
                // join
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, _sendS$0, completer, null);
      }, "call$0", "get$_sendS", 0, 0, 5, "_sendS"],
      _onDataErrorS$1: [function(err) {
        Q.logger().log$4(C.Level_FINE_500, "http short error: " + H.S(err), null, null);
        if (!this._connectedOnce) {
          this._client$_onDone$0();
          return;
        } else if (!this._client$_done) {
          this._needRetryS = true;
          Q.DsTimer_timerOnceBefore(this.get$retry(), this.retryDelay * 1000);
        }
      }, "call$1", "get$_onDataErrorS", 2, 0, 59, 117, [], "_onDataErrorS"],
      retryS$0: [function() {
        this._needRetryS = false;
        var t1 = this.clientLink;
        new Z._HttpClient().postUrl$1(P.Uri_parse(H.S(this.url) + "&authS=" + t1.get$nonce(t1).hashSalt$1(this.saltS), 0, null)).then$1(new X.HttpClientConnection_retryS_closure(this));
      }, "call$0", "get$retryS", 0, 0, 6, "retryS"],
      _onDataS$1: [function(response) {
        if (response.get$statusCode(response) !== 200) {
          Q.logger().log$4(C.Level_FINE_500, "http short response.statusCode: " + H.S(response.get$statusCode(response)), null, null);
          if (response.get$statusCode(response) === 401) {
            this._authError = true;
            this._client$_onDone$0();
          }
        }
        response.fold$2(0, [], O.foldList$closure()).then$1(new X.HttpClientConnection__onDataS_closure(this));
      }, "call$1", "get$_onDataS", 2, 0, 60, 118, [], "_onDataS"],
      retry$0: [function() {
        if (this._needRetryL) {
          this._needRetryL = false;
          this._sendL$0();
        }
        if (this._needRetryS)
          this.retryS$0();
      }, "call$0", "get$retry", 0, 0, 6, "retry"],
      _client$_onDone$0: [function() {
        this._client$_done = true;
        Q.logger().log$4(C.Level_FINE_500, "http disconnected", null, null);
        if (!this._client$_requesterChannel.onReceiveController.get$isClosed())
          this._client$_requesterChannel.onReceiveController.close$0(0);
        if (!this._client$_requesterChannel.onDisconnectController.get$isCompleted()) {
          var t1 = this._client$_requesterChannel;
          t1.onDisconnectController.complete$1(0, t1);
        }
        if (!this._client$_responderChannel.onReceiveController.get$isClosed())
          this._client$_responderChannel.onReceiveController.close$0(0);
        if (!this._client$_responderChannel.onDisconnectController.get$isCompleted()) {
          t1 = this._client$_responderChannel;
          t1.onDisconnectController.complete$1(0, t1);
        }
        if (!this._client$_onDisconnectedCompleter.get$isCompleted())
          this._client$_onDisconnectedCompleter.complete$1(0, this._authError);
      }, "call$0", "get$_client$_onDone", 0, 0, 6, "_client$_onDone"],
      HttpClientConnection$4: function(url, clientLink, saltL, saltS) {
        var t1, t2, t3;
        t1 = P.StreamController_StreamController(null, null, null, null, false, P.List);
        t2 = new P._Future(0, $.Zone__current, null);
        t2.$builtinTypeInfo = [O.ConnectionChannel];
        t2 = new P._AsyncCompleter(t2);
        t2.$builtinTypeInfo = [O.ConnectionChannel];
        t3 = new P._Future(0, $.Zone__current, null);
        t3.$builtinTypeInfo = [O.ConnectionChannel];
        t3 = new P._AsyncCompleter(t3);
        t3.$builtinTypeInfo = [O.ConnectionChannel];
        this._client$_responderChannel = new O.PassiveChannel(t1, [], this, null, false, false, t2, t3);
        t1 = P.StreamController_StreamController(null, null, null, null, false, P.List);
        t2 = new P._Future(0, $.Zone__current, null);
        t2.$builtinTypeInfo = [O.ConnectionChannel];
        t2 = new P._AsyncCompleter(t2);
        t2.$builtinTypeInfo = [O.ConnectionChannel];
        t3 = new P._Future(0, $.Zone__current, null);
        t3.$builtinTypeInfo = [O.ConnectionChannel];
        t3 = new P._AsyncCompleter(t3);
        t3.$builtinTypeInfo = [O.ConnectionChannel];
        t1 = new O.PassiveChannel(t1, [], this, null, false, false, t2, t3);
        this._client$_requesterChannel = t1;
        t2 = this._onRequestReadyCompleter;
        t3 = new P._Future(0, $.Zone__current, null);
        t3.$builtinTypeInfo = [null];
        t3._asyncComplete$1(t1);
        t2.complete$1(0, t3);
        this._sendL$0();
      },
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      static: {"^": "HttpClientConnection__fixedLongPollData@-295", HttpClientConnection$: [function(url, clientLink, saltL, saltS) {
          var t1, t2;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [O.ConnectionChannel];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [O.ConnectionChannel];
          t2 = new P._Future(0, $.Zone__current, null);
          t2.$builtinTypeInfo = [P.bool];
          t2 = new P._AsyncCompleter(t2);
          t2.$builtinTypeInfo = [P.bool];
          t1 = new X.HttpClientConnection(null, null, t1, t2, false, url, clientLink, saltL, saltS, false, false, false, false, false, null, false, false, 1, false);
          t1.HttpClientConnection$4(url, clientLink, saltL, saltS);
          return t1;
        }, null, null, 8, 0, 199, 100, [], 101, [], 102, [], 103, [], "new HttpClientConnection"]}
    },
    "+HttpClientConnection": [0, 297],
    HttpClientConnection__onDataL_closure: {
      "^": "Closure:61;_client$_captured_this_0",
      call$1: [function(merged) {
        var m, t1, exception, t2;
        t1 = this._client$_captured_this_0;
        t1.connected$0();
        t1._sending = false;
        m = null;
        try {
          m = P._parseJson(C.Utf8Codec_false.decode$1(merged), $.get$DsJson_instance().decoder._reviver);
          Q.logger().log$4(C.Level_FINE_500, "http receive: " + H.S(m), null, null);
        } catch (exception) {
          H.unwrapException(exception);
          return;
        }
        t2 = J.$index$asx(m, "saltL");
        if (typeof t2 === "string") {
          t2 = J.$index$asx(m, "saltL");
          t1.saltL = t2;
          t1.clientLink.updateSalt$2(t2, 2);
        }
        t1._sendL$0();
        if (!!J.getInterceptor(J.$index$asx(m, "responses")).$isList)
          t1._client$_requesterChannel.onReceiveController.add$1(0, J.$index$asx(m, "responses"));
        if (!!J.getInterceptor(J.$index$asx(m, "requests")).$isList)
          t1._client$_responderChannel.onReceiveController.add$1(0, J.$index$asx(m, "requests"));
      }, null, null, 2, 0, 61, 119, [], "call"]
    },
    HttpClientConnection_retryS_closure: {
      "^": "Closure:62;_client$_captured_this_0",
      call$1: [function(request) {
        var t1, t2, onError, result;
        t1 = this._client$_captured_this_0;
        request.add$1(0, t1._lastRequestS);
        t2 = request.close$0(0).then$1(t1.get$_onDataS());
        onError = t1.get$_onDataErrorS();
        t1 = $.Zone__current;
        result = new P._Future(0, t1, null);
        result.$builtinTypeInfo = [null];
        if (t1 !== C.C__RootZone)
          onError = P._registerErrorHandler(onError, t1);
        t2._addListener$1(new P._FutureListener(null, result, 2, null, onError));
      }, null, null, 2, 0, 62, 120, [], "call"]
    },
    HttpClientConnection__onDataS_closure: {
      "^": "Closure:61;_client$_captured_this_0",
      call$1: [function(merged) {
        var m, t1, exception, t2;
        t1 = this._client$_captured_this_0;
        t1.connected$0();
        t1._sendingS = false;
        m = null;
        try {
          m = P._parseJson(C.Utf8Codec_false.decode$1(merged), $.get$DsJson_instance().decoder._reviver);
        } catch (exception) {
          H.unwrapException(exception);
          return;
        }
        t2 = J.$index$asx(m, "saltS");
        if (typeof t2 === "string") {
          t2 = J.$index$asx(m, "saltS");
          t1.saltS = t2;
          t1.clientLink.updateSalt$2(t2, 1);
        }
        if (t1._pendingSendS && !t1._pendingCheck)
          t1._checkSend$0();
      }, null, null, 2, 0, 61, 119, [], "call"]
    },
    HttpClientLink: {
      "^": "Object;_onRequesterReadyCompleter@-298,_onConnectedCompleter@-290,dsId<-285,requester<-299,responder<-300,privateKey<-284,_nonce@-301,_wsConnection@-302,salts<-287,_wsUpdateUri@-285,_client$_conn@-285,enableHttp@-288,_connDelay@-296,_wsDelay@-296,_closed@-288",
      get$onRequesterReady: [function() {
        return this._onRequesterReadyCompleter.get$future();
      }, null, null, 1, 0, 49, "onRequesterReady"],
      get$onConnected: [function() {
        return this._onConnectedCompleter.get$future();
      }, null, null, 1, 0, 22, "onConnected"],
      get$nonce: [function(_) {
        return this._nonce;
      }, null, null, 1, 0, 63, "nonce"],
      updateSalt$2: [function(salt, saltId) {
        J.$indexSet$ax(this.salts, saltId, salt);
      }, function(salt) {
        return this.updateSalt$2(salt, 0);
      }, "updateSalt$1", "call$2", "call$1", "get$updateSalt", 2, 2, 64, 69, 121, [], 122, [], "updateSalt"],
      connect$0: [function() {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, next = [], $self = this, client, connUri, request, requestJson, response, merged, rslt, serverConfig, tempKey, t1, t2, t3, targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t4, fragment, exception, exception1, temp1;
        function connect$0(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                if ($self._closed) {
                  // goto return
                  $goto = 1;
                  break;
                } else
                  ;
                $._isCryptoProviderLocked = true;
                t1 = $self.get$initWebsocket();
                if ($.get$DsTimer__functionsMap().containsKey$1(t1))
                  C.JSArray_methods.remove$1($.get$DsTimer__functionsMap().$index(0, t1)._utils$_functions, t1);
                else
                  ;
                client = new Z._HttpClient();
                t1 = $self.dsId;
                connUri = P.Uri_parse(H.S($self._client$_conn) + "?dsId=" + H.S(t1), 0, null);
                Q.logger().log$4(C.Level_INFO_800, "Connecting to " + H.S($self._client$_conn), null, null);
                handler = 4;
                $goto = 7;
                return H.asyncHelper(client.postUrl$1(connUri), connect$0, completer);
              case 7:
                // returning from await.
                request = result;
                t2 = $self.privateKey;
                requestJson = P.LinkedHashMap__makeLiteral(["publicKey", t2.get$publicKey().get$qBase64(), "isRequester", $self.requester != null, "isResponder", $self.responder != null, "version", "1.0.3"]);
                Q.logger().log$4(C.Level_FINE_500, "DS ID: " + H.S(t1), null, null);
                t3 = $.get$DsJson_instance();
                t3 = t3.encoder;
                t3 = P._JsonStringStringifier_stringify(requestJson, t3._toEncodable, t3.indent);
                J.add$1$ax(request, C.Utf8Codec_false.get$encoder().convert$1(t3));
                $goto = 8;
                return H.asyncHelper(J.close$0$x(request), connect$0, completer);
              case 8:
                // returning from await.
                response = result;
                $goto = 9;
                return H.asyncHelper(J.fold$2$ax(response, [], O.foldList$closure()), connect$0, completer);
              case 9:
                // returning from await.
                merged = result;
                rslt = C.Utf8Codec_false.decode$1(merged);
                serverConfig = P._parseJson(rslt, $.get$DsJson_instance().decoder._reviver);
                C.Map_gVGBQ.forEach$1(0, new X.HttpClientLink_connect_closure($self, serverConfig));
                tempKey = J.$index$asx(serverConfig, "tempKey");
                $goto = tempKey == null ? 10 : 12;
                break;
              case 10:
                // then
                $self._nonce = C.DummyECDH_Zqn;
                // goto join
                $goto = 11;
                break;
              case 12:
                // else
                temp1 = $self;
                $goto = 13;
                return H.asyncHelper(t2.getSecret$1(tempKey), connect$0, completer);
              case 13:
                // returning from await.
                temp1._nonce = result;
              case 11:
                // join
                t2 = J.$index$asx(serverConfig, "wsUri");
                if (typeof t2 === "string") {
                  t2 = connUri;
                  t3 = P.Uri_parse(J.$index$asx(serverConfig, "wsUri"), 0, null);
                  targetScheme = t3.scheme;
                  if (targetScheme.length !== 0) {
                    if (t3._host != null) {
                      targetUserInfo = t3._userInfo;
                      targetHost = t3.get$host(t3);
                      targetPort = t3._port != null ? t3.get$port(t3) : null;
                    } else {
                      targetUserInfo = "";
                      targetHost = null;
                      targetPort = null;
                    }
                    targetPath = t2._removeDotSegments$1(t3._path);
                    targetQuery = t3._query;
                    if (targetQuery != null)
                      ;
                    else
                      targetQuery = null;
                  } else {
                    targetScheme = t2.get$scheme();
                    if (t3._host != null) {
                      targetUserInfo = t3._userInfo;
                      targetHost = t3.get$host(t3);
                      targetPort = P.Uri__makePort(t3._port != null ? t3.get$port(t3) : null, targetScheme);
                      targetPath = t2._removeDotSegments$1(t3._path);
                      targetQuery = t3._query;
                      if (targetQuery != null)
                        ;
                      else
                        targetQuery = null;
                    } else {
                      t4 = t3._path;
                      if (t4 === "") {
                        targetPath = t2.get$_path();
                        targetQuery = t3._query;
                        if (targetQuery != null)
                          ;
                        else
                          targetQuery = t2.get$_query();
                      } else {
                        targetPath = C.JSString_methods.startsWith$1(t4, "/") ? t2._removeDotSegments$1(t4) : t2._removeDotSegments$1(t2._merge$2(t2.get$_path(), t4));
                        targetQuery = t3._query;
                        if (targetQuery != null)
                          ;
                        else
                          targetQuery = null;
                      }
                      targetUserInfo = t2.get$_userInfo();
                      targetHost = t2.get$_host();
                      targetPort = t2.get$_port();
                    }
                  }
                  fragment = t3._fragment;
                  if (fragment != null)
                    ;
                  else
                    fragment = null;
                  t1 = new P.Uri(targetHost, targetPort, targetPath, targetScheme, targetUserInfo, targetQuery, fragment, null, null).toString$0(0) + "?dsId=" + H.S(t1);
                  H.checkString("ws");
                  H.checkInt(0);
                  P.RangeError_checkValueInInterval(0, 0, t1.length, "startIndex", null);
                  $self._wsUpdateUri = H.stringReplaceFirstUnchecked(t1, "http", "ws", 0);
                } else
                  ;
                $self.initWebsocket$1(false);
                $self._connDelay = 1;
                $self._wsDelay = 1;
                handler = 2;
                // goto after finally
                $goto = 6;
                break;
              case 4:
                // catch
                handler = 3;
                exception1 = currentError;
                H.unwrapException(exception1);
                Q.DsTimer_timerOnceAfter($self.get$connect(), $self._connDelay * 1000);
                t1 = $self._connDelay;
                if (t1 < 60)
                  $self._connDelay = t1 + 1;
                else
                  ;
                // goto after finally
                $goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $goto = 2;
                break;
              case 6:
                // after finally
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, connect$0, completer, null);
      }, "call$0", "get$connect", 0, 0, 5, "connect"],
      initWebsocket$1: [function(reconnect) {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, next = [], $self = this, socket, error, t1, t2, t3, t4, t5, exception, exception1;
        function initWebsocket$1(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                if ($self._closed) {
                  // goto return
                  $goto = 1;
                  break;
                } else
                  ;
                handler = 4;
                $goto = 7;
                return H.asyncHelper(B._WebSocket_connect(H.S($self._wsUpdateUri) + "&auth=" + $self._nonce.hashSalt$1(J.$index$asx($self.salts, 0)), null, null), initWebsocket$1, completer);
              case 7:
                // returning from await.
                socket = result;
                t1 = socket;
                t2 = new P._Future(0, $.Zone__current, null);
                t2.$builtinTypeInfo = [O.ConnectionChannel];
                t2 = new P._AsyncCompleter(t2);
                t2.$builtinTypeInfo = [O.ConnectionChannel];
                t3 = new P._Future(0, $.Zone__current, null);
                t3.$builtinTypeInfo = [P.bool];
                t3 = new P._AsyncCompleter(t3);
                t3.$builtinTypeInfo = [P.bool];
                t2 = new T.WebSocketConnection(null, null, t2, t3, $self, t1, null, 0, false, 0, 0, null, new Q.BinaryInCache(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, Q.BinaryData)), new Q.BinaryOutCache(0, P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, Q.BinaryData)));
                t3 = P.StreamController_StreamController(null, null, null, null, false, P.List);
                t4 = new P._Future(0, $.Zone__current, null);
                t4.$builtinTypeInfo = [O.ConnectionChannel];
                t4 = new P._AsyncCompleter(t4);
                t4.$builtinTypeInfo = [O.ConnectionChannel];
                t5 = new P._Future(0, $.Zone__current, null);
                t5.$builtinTypeInfo = [O.ConnectionChannel];
                t5 = new P._AsyncCompleter(t5);
                t5.$builtinTypeInfo = [O.ConnectionChannel];
                t2._responderChannel = new O.PassiveChannel(t3, [], t2, null, false, true, t4, t5);
                t3 = P.StreamController_StreamController(null, null, null, null, false, P.List);
                t4 = new P._Future(0, $.Zone__current, null);
                t4.$builtinTypeInfo = [O.ConnectionChannel];
                t4 = new P._AsyncCompleter(t4);
                t4.$builtinTypeInfo = [O.ConnectionChannel];
                t5 = new P._Future(0, $.Zone__current, null);
                t5.$builtinTypeInfo = [O.ConnectionChannel];
                t5 = new P._AsyncCompleter(t5);
                t5.$builtinTypeInfo = [O.ConnectionChannel];
                t2._requesterChannel = new O.PassiveChannel(t3, [], t2, null, false, true, t4, t5);
                t1.listen$2$onDone(t2.get$onData(), t2.get$_websocket$_onDone());
                t1.add$1(0, $.get$fixedBlankData());
                t2.pingTimer = P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 0, 0, 20), t2.get$onPingTimer());
                $self._wsConnection = t2;
                Q.logger().log$4(C.Level_INFO_800, "Connected", null, null);
                if (!$self._onConnectedCompleter.get$isCompleted())
                  $self._onConnectedCompleter.complete$0(0);
                else
                  ;
                t1 = $self.responder;
                if (t1 != null)
                  t1.set$connection(0, $self._wsConnection._responderChannel);
                else
                  ;
                if ($self.requester != null)
                  $self._wsConnection.onRequestReadyCompleter.future.then$1(new X.HttpClientLink_initWebsocket_closure($self));
                else
                  ;
                $self._wsConnection._onDisconnectedCompleter.future.then$1(new X.HttpClientLink_initWebsocket_closure0($self));
                handler = 2;
                // goto after finally
                $goto = 6;
                break;
              case 4:
                // catch
                handler = 3;
                exception1 = currentError;
                t1 = H.unwrapException(exception1);
                error = t1;
                Q.logger().log$4(C.Level_FINE_500, error, null, null);
                if (reconnect) {
                  Q.DsTimer_timerOnceAfter($self.get$initWebsocket(), $self._wsDelay * 1000);
                  t1 = $self._wsDelay;
                  if (t1 < 60)
                    $self._wsDelay = t1 + 1;
                  else
                    ;
                } else
                  ;
                // goto after finally
                $goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $goto = 2;
                break;
              case 6:
                // after finally
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, initWebsocket$1, completer, null);
      }, function() {
        return this.initWebsocket$1(true);
      }, "initWebsocket$0", "call$1", "call$0", "get$initWebsocket", 0, 2, 65, 82, 123, [], "initWebsocket"],
      close$0: [function(_) {
        var t1;
        if (this._closed)
          return;
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [null];
        t1 = new P._AsyncCompleter(t1);
        t1.$builtinTypeInfo = [null];
        this._onConnectedCompleter = t1;
        this._closed = true;
        t1 = this._wsConnection;
        if (t1 != null) {
          t1.close$0(0);
          this._wsConnection = null;
        }
      }, "call$0", "get$close", 0, 0, 6, "close"],
      salts$0: function() {
        return this.salts.call$0();
      },
      static: {"^": "HttpClientLink_saltNameMap<-303", HttpClientLink$: [function(_conn, dsIdPrefix, privateKey, enableHttp, isRequester, isResponder, nodeProvider) {
          var t1, t2, t3, t4, t5, t6, t7, t8;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [L.Requester];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [L.Requester];
          t2 = new P._Future(0, $.Zone__current, null);
          t2.$builtinTypeInfo = [null];
          t2 = new P._AsyncCompleter(t2);
          t2.$builtinTypeInfo = [null];
          t3 = Array(3);
          t3.fixed$length = Array;
          t3.$builtinTypeInfo = [P.String];
          t4 = H.S(dsIdPrefix) + H.S(privateKey.get$publicKey().get$qHash64());
          if (isRequester) {
            t5 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.Request);
            t6 = new L.RemoteNodeCache(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.RemoteNode));
            t6 = new L.Requester(t5, t6, null, 1, 1, 0, false, null, null, null, [], [], false);
            t5 = L.SubscribeRequest$(t6, 0);
            t6._subsciption = t5;
            t6._requests.$indexSet(0, 0, t5);
            t5 = t6;
          } else
            t5 = null;
          if (isResponder && nodeProvider != null) {
            t6 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.Response);
            t7 = new T.Responder(null, [], t6, null, nodeProvider, null, null, null, [], [], false);
            t8 = new T.SubscribeResponse(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.RespSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.RespSubscribeController), P.LinkedHashSet_LinkedHashSet(null, null, null, T.RespSubscribeController), t7, 0, "initialize");
            t7._responder$_subscription = t8;
            t6.$indexSet(0, 0, t8);
            t6 = t7;
          } else
            t6 = null;
          return new X.HttpClientLink(t1, t2, t4, t5, t6, privateKey, null, null, t3, null, _conn, enableHttp, 1, 1, false);
        }, null, null, 6, 9, 200, 25, 82, 82, 28, 104, [], 105, [], 106, [], 99, [], 86, [], 88, [], 92, [], "new HttpClientLink"]}
    },
    "+HttpClientLink": [0, 294],
    HttpClientLink_connect_closure: {
      "^": "Closure:14;_client$_captured_this_0,_captured_serverConfig_1",
      call$2: [function($name, idx) {
        J.$indexSet$ax(this._client$_captured_this_0.salts, idx, this._captured_serverConfig_1.$index(0, $name));
      }, null, null, 4, 0, 14, 124, [], 125, [], "call"]
    },
    HttpClientLink_initWebsocket_closure: {
      "^": "Closure:7;_client$_captured_this_0",
      call$1: [function(channel) {
        var t1, t2;
        t1 = this._client$_captured_this_0;
        t2 = t1.requester;
        t2.set$connection(0, channel);
        if (!t1._onRequesterReadyCompleter.get$isCompleted())
          t1._onRequesterReadyCompleter.complete$1(0, t2);
      }, null, null, 2, 0, 7, 126, [], "call"]
    },
    HttpClientLink_initWebsocket_closure0: {
      "^": "Closure:7;_client$_captured_this_1",
      call$1: [function(connection) {
        this._client$_captured_this_1.initWebsocket$0();
      }, null, null, 2, 0, 7, 127, [], "call"]
    },
    OptionResultsHandler: {
      "^": "Object;",
      $typedefType: 378,
      $$isTypedef: true
    },
    "+OptionResultsHandler": ""
  }], ["dslink.common", "package:dslink/common.dart",, O, {
    "^": "unspecified<-323,fixedBlankData<-295",
    foldList: [function(a, b) {
      J.addAll$1$ax(a, b);
      return a;
    }, "call$2", "foldList$closure", 4, 0, 202, 60, [], 128, [], "foldList"],
    Connection: {
      "^": "Object;",
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      static: {Connection$: [function() {
          return new O.Connection();
        }, null, null, 0, 0, 203, "new Connection"]}
    },
    "+Connection": [0],
    ServerConnection: {
      "^": "Connection;",
      static: {ServerConnection$: [function() {
          return new O.ServerConnection();
        }, null, null, 0, 0, 204, "new ServerConnection"]}
    },
    "+ServerConnection": [304],
    ClientConnection: {
      "^": "Connection;",
      static: {ClientConnection$: [function() {
          return new O.ClientConnection();
        }, null, null, 0, 0, 205, "new ClientConnection"]}
    },
    "+ClientConnection": [304],
    ConnectionChannel: {
      "^": "Object;",
      connected$0: function() {
        return this.get$connected().call$0();
      },
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      static: {ConnectionChannel$: [function() {
          return new O.ConnectionChannel();
        }, null, null, 0, 0, 56, "new ConnectionChannel"]}
    },
    "+ConnectionChannel": [0],
    Link: {
      "^": "Object;",
      static: {Link$: [function() {
          return new O.Link();
        }, null, null, 0, 0, 206, "new Link"]}
    },
    "+Link": [0],
    ServerLink: {
      "^": "Link;",
      static: {ServerLink$: [function() {
          return new O.ServerLink();
        }, null, null, 0, 0, 207, "new ServerLink"]}
    },
    "+ServerLink": [305],
    ClientLink: {
      "^": "Link;",
      static: {ClientLink$: [function() {
          return new O.ClientLink();
        }, null, null, 0, 0, 208, "new ClientLink"]}
    },
    "+ClientLink": [305],
    ServerLinkManager: {
      "^": "Object;",
      static: {ServerLinkManager$: [function() {
          return new O.ServerLinkManager();
        }, null, null, 0, 0, 209, "new ServerLinkManager"]}
    },
    "+ServerLinkManager": [0],
    StreamStatus: {
      "^": "Object;",
      static: {"^": "StreamStatus_initialize<-285,StreamStatus_open<-285,StreamStatus_closed<-285", StreamStatus$: [function() {
          return new O.StreamStatus();
        }, null, null, 0, 0, 210, "new StreamStatus"]}
    },
    "+StreamStatus": [0],
    ErrorPhase: {
      "^": "Object;",
      static: {"^": "ErrorPhase_request<-285,ErrorPhase_response<-285", ErrorPhase$: [function() {
          return new O.ErrorPhase();
        }, null, null, 0, 0, 211, "new ErrorPhase"]}
    },
    "+ErrorPhase": [0],
    DSError: {
      "^": "Object;type*-285,detail*-285,msg@-285,path*-285,phase@-285",
      getMessage$0: [function() {
        var t1 = this.msg;
        if (t1 != null)
          return t1;
        t1 = this.type;
        if (t1 != null)
          return t1;
        return "Error";
      }, "call$0", "get$getMessage", 0, 0, 3, "getMessage"],
      serialize$0: [function() {
        var rslt, t1;
        rslt = P.LinkedHashMap__makeEmpty();
        t1 = this.msg;
        if (t1 != null)
          rslt.$indexSet(0, "msg", t1);
        t1 = this.type;
        if (t1 != null)
          rslt.$indexSet(0, "type", t1);
        t1 = this.path;
        if (t1 != null)
          rslt.$indexSet(0, "path", t1);
        if (this.phase === "request")
          rslt.$indexSet(0, "phase", "request");
        t1 = this.detail;
        if (t1 != null)
          rslt.$indexSet(0, "detail", t1);
        return rslt;
      }, "call$0", "get$serialize", 0, 0, 66, "serialize"],
      static: {"^": "DSError_PERMISSION_DENIED<-306,DSError_INVALID_METHOD<-306,DSError_NOT_IMPLEMENTED<-306,DSError_INVALID_PATH<-306,DSError_INVALID_PATHS<-306,DSError_INVALID_VALUE<-306,DSError_INVALID_PARAMETER<-306,DSError_DISCONNECTED<-306", DSError$: [function(type, detail, msg, path, phase) {
          return new O.DSError(type, detail, msg, path, phase);
        }, null, null, 2, 9, 212, 25, 25, 25, 118, 129, [], 130, [], 131, [], 107, [], 132, [], "new DSError"], DSError$fromMap: [function(m) {
          var t1, t2;
          t1 = new O.DSError(null, null, null, null, null);
          t2 = m.$index(0, "type");
          if (typeof t2 === "string")
            t1.type = m.$index(0, "type");
          t2 = m.$index(0, "msg");
          if (typeof t2 === "string")
            t1.msg = m.$index(0, "msg");
          t2 = m.$index(0, "path");
          if (typeof t2 === "string")
            t1.path = m.$index(0, "path");
          t2 = m.$index(0, "phase");
          if (typeof t2 === "string")
            t1.phase = m.$index(0, "phase");
          t2 = m.$index(0, "detail");
          if (typeof t2 === "string")
            t1.detail = m.$index(0, "detail");
          return t1;
        }, null, null, 2, 0, 163, 113, [], "new DSError$fromMap"]}
    },
    "+DSError": [0],
    Unspecified: {
      "^": "Object;",
      static: {Unspecified$: [function() {
          return new O.Unspecified();
        }, null, null, 0, 0, 5, "new Unspecified"]}
    },
    "+Unspecified": [0],
    PassiveChannel: {
      "^": "Object;onReceiveController<-307,_processors@-308,conn<-304,getData@-276,_isReady@-288,connected@-288,onDisconnectController<-292,onConnectController<-292",
      get$onReceive: [function() {
        var t1 = this.onReceiveController;
        return t1.get$stream(t1);
      }, null, null, 1, 0, 67, "onReceive"],
      sendWhenReady$1: [function(getData) {
        this.getData = getData;
        this.conn.requireSend$0();
      }, "call$1", "get$sendWhenReady", 2, 0, 68, 155, [], "sendWhenReady"],
      get$isReady: [function() {
        return this._isReady;
      }, null, null, 1, 0, 26, "isReady"],
      set$isReady: [function(val) {
        this._isReady = val;
      }, null, null, 3, 0, 69, 156, [], "isReady"],
      get$onDisconnected: [function() {
        return this.onDisconnectController.get$future();
      }, null, null, 1, 0, 57, "onDisconnected"],
      get$onConnected: [function() {
        return this.onConnectController.get$future();
      }, null, null, 1, 0, 57, "onConnected"],
      updateConnect$0: [function() {
        if (this.connected)
          return;
        this.connected = true;
        this.onConnectController.complete$1(0, this);
      }, "call$0", "get$updateConnect", 0, 0, 6, "updateConnect"],
      getData$0: function() {
        return this.getData.call$0();
      },
      connected$0: function() {
        return this.connected.call$0();
      },
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      $isConnectionChannel: 1,
      static: {PassiveChannel$: [function(conn, connected) {
          var t1, t2, t3;
          t1 = P.StreamController_StreamController(null, null, null, null, false, P.List);
          t2 = new P._Future(0, $.Zone__current, null);
          t2.$builtinTypeInfo = [O.ConnectionChannel];
          t2 = new P._AsyncCompleter(t2);
          t2.$builtinTypeInfo = [O.ConnectionChannel];
          t3 = new P._Future(0, $.Zone__current, null);
          t3.$builtinTypeInfo = [O.ConnectionChannel];
          t3 = new P._AsyncCompleter(t3);
          t3.$builtinTypeInfo = [O.ConnectionChannel];
          return new O.PassiveChannel(t1, [], conn, null, false, connected, t2, t3);
        }, null, null, 2, 2, 213, 28, 133, [], 134, [], "new PassiveChannel"]}
    },
    "+PassiveChannel": [0, 309],
    ConnectionHandler: {
      "^": "Object;_conn@-309,_connListener@-310,_beforeSendListener@-310,_toSendList@-311,_processors@-308,_pendingSend@-288",
      get$connection: [function(_) {
        return this._conn;
      }, null, null, 1, 0, 56, "connection"],
      set$connection: [function(_, conn) {
        var t1 = this._connListener;
        if (t1 != null) {
          t1.cancel$0();
          this._connListener = null;
          this._onDisconnected$1(this._conn);
        }
        this._conn = conn;
        this._connListener = conn.get$onReceive().listen$1(this.get$onData());
        this._conn.get$onDisconnected().then$1(this.get$_onDisconnected());
        if (this._conn.get$connected())
          this.onReconnected$0();
        else
          this._conn.get$onConnected().then$1(new O.ConnectionHandler_connection_closure(this));
      }, null, null, 3, 0, 70, 133, [], "connection"],
      _onDisconnected$1: [function(conn) {
        var t1 = this._conn;
        if (t1 == null ? conn == null : t1 === conn) {
          t1 = this._connListener;
          if (t1 != null) {
            t1.cancel$0();
            this._connListener = null;
          }
          this.onDisconnected$0();
          this._conn = null;
        }
      }, "call$1", "get$_onDisconnected", 2, 0, 71, 133, [], "_onDisconnected"],
      onReconnected$0: ["super$ConnectionHandler$onReconnected$0", function() {
        if (this._pendingSend)
          this._conn.sendWhenReady$1(this.get$doSend());
      }, "call$0", "get$onReconnected", 0, 0, 6, "onReconnected"],
      addToSendList$1: [function(m) {
        J.add$1$ax(this._toSendList, m);
        if (!this._pendingSend && this._conn != null) {
          this._conn.sendWhenReady$1(this.get$doSend());
          this._pendingSend = true;
        }
      }, "call$1", "get$addToSendList", 2, 0, 72, 113, [], "addToSendList"],
      addProcessor$1: [function(processor) {
        if (!J.contains$1$asx(this._processors, processor))
          J.add$1$ax(this._processors, processor);
        if (!this._pendingSend && this._conn != null) {
          this._conn.sendWhenReady$1(this.get$doSend());
          this._pendingSend = true;
        }
      }, "call$1", "get$addProcessor", 2, 0, 73, 157, [], "addProcessor"],
      doSend$0: ["super$ConnectionHandler$doSend$0", function() {
        var processors, t1, rslt;
        this._pendingSend = false;
        processors = this._processors;
        this._processors = [];
        for (t1 = J.get$iterator$ax(processors); t1.moveNext$0();)
          t1.get$current().call$0();
        rslt = this._toSendList;
        this._toSendList = [];
        return rslt;
      }, "call$0", "get$doSend", 0, 0, 74, "doSend"],
      static: {ConnectionHandler$: [function() {
          return new O.ConnectionHandler(null, null, null, [], [], false);
        }, null, null, 0, 0, 214, "new ConnectionHandler"]}
    },
    "+ConnectionHandler": [0],
    ConnectionHandler_connection_closure: {
      "^": "Closure:7;_common$_captured_this_0",
      call$1: [function(conn) {
        return this._common$_captured_this_0.onReconnected$0();
      }, null, null, 2, 0, 7, 133, [], "call"]
    },
    Node0: {
      "^": "Object;profile@-312,attributes*-313,configs@-313,children*-314",
      getAttribute$1: [function(_, $name) {
        var t1;
        if (this.attributes.containsKey$1($name))
          return this.attributes.$index(0, $name);
        t1 = this.profile;
        if (t1 != null && t1.attributes.containsKey$1($name))
          return this.profile.attributes.$index(0, $name);
        return;
      }, "call$1", "get$getAttribute", 2, 0, 47, 124, [], "getAttribute"],
      getConfig$1: [function($name) {
        var t1;
        if (this.configs.containsKey$1($name))
          return this.configs.$index(0, $name);
        t1 = this.profile;
        if (t1 != null && t1.configs.containsKey$1($name))
          return this.profile.configs.$index(0, $name);
        return;
      }, "call$1", "get$getConfig", 2, 0, 47, 124, [], "getConfig"],
      addChild$2: ["super$Node$addChild$2", function($name, node) {
        this.children.$indexSet(0, $name, node);
      }, "call$2", "get$addChild", 4, 0, 75, 124, [], 158, [], "addChild"],
      removeChild$1: ["super$Node$removeChild$1", function(input) {
        if (typeof input === "string") {
          this.children.remove$1(0, this.getChild$1(input));
          return input;
        } else if (input instanceof O.Node0)
          this.children.remove$1(0, input);
        else
          throw H.wrapException(P.Exception_Exception("Invalid Input"));
        return;
      }, "call$1", "get$removeChild", 2, 0, 76, 32, [], "removeChild"],
      getChild$1: [function($name) {
        var t1;
        if (this.children.containsKey$1($name))
          return this.children.$index(0, $name);
        t1 = this.profile;
        if (t1 != null && t1.children.containsKey$1($name))
          return this.profile.children.$index(0, $name);
        return;
      }, "call$1", "get$getChild", 2, 0, 77, 124, [], "getChild"],
      $get$1: [function($name) {
        if (J.getInterceptor$s($name).startsWith$1($name, "$"))
          return this.getConfig$1($name);
        if (C.JSString_methods.startsWith$1($name, "@"))
          return this.getAttribute$1(0, $name);
        return this.getChild$1($name);
      }, "call$1", "get$get", 2, 0, 47, 124, [], "get"],
      forEachChild$1: [function(callback) {
        var t1;
        this.children.forEach$1(0, callback);
        t1 = this.profile;
        if (t1 != null)
          t1.children.forEach$1(0, new O.Node_forEachChild_closure(this, callback));
      }, "call$1", "get$forEachChild", 2, 0, 78, 38, [], "forEachChild"],
      getSimpleMap$0: [function() {
        var rslt = P.LinkedHashMap__makeEmpty();
        if (this.configs.containsKey$1("$is"))
          rslt.$indexSet(0, "$is", this.configs.$index(0, "$is"));
        if (this.configs.containsKey$1("$type"))
          rslt.$indexSet(0, "$type", this.configs.$index(0, "$type"));
        if (this.configs.containsKey$1("$name"))
          rslt.$indexSet(0, "$name", this.configs.$index(0, "$name"));
        if (this.configs.containsKey$1("$invokable"))
          rslt.$indexSet(0, "$invokable", this.configs.$index(0, "$invokable"));
        if (this.configs.containsKey$1("$writable"))
          rslt.$indexSet(0, "$writable", this.configs.$index(0, "$writable"));
        return rslt;
      }, "call$0", "get$getSimpleMap", 0, 0, 66, "getSimpleMap"],
      static: {Node$: [function() {
          return new O.Node0(null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 0, 0, 5, "new Node"]}
    },
    "+Node": [0],
    Node_forEachChild_closure: {
      "^": "Closure:79;_common$_captured_this_0,_common$_captured_callback_1",
      call$2: [function(str, n) {
        if (!this._common$_captured_this_0.children.containsKey$1(str))
          this._common$_captured_callback_1.call$2(str, n);
      }, null, null, 4, 0, 79, 159, [], 160, [], "call"]
    },
    Path: {
      "^": "Object;path*-285,parentPath@-285,name*-285,valid@-288",
      _parse$0: [function() {
        var t1, pos;
        t1 = this.path;
        if (t1 === "" || J.contains$1$asx(t1, $.get$Path_invalidChar()) || J.contains$1$asx(this.path, "//"))
          this.valid = false;
        t1 = this.path;
        if (t1 === "/") {
          this.valid = true;
          this.name = "/";
          this.parentPath = "";
          return;
        }
        if (J.endsWith$1$s(t1, "/")) {
          t1 = this.path;
          this.path = J.substring$2$s(t1, 0, t1.length - 1);
        }
        pos = J.lastIndexOf$1$asx(this.path, "/");
        if (pos < 0) {
          this.name = this.path;
          this.parentPath = "";
        } else if (pos === 0) {
          this.parentPath = "/";
          this.name = J.substring$1$s(this.path, 1);
        } else {
          this.parentPath = J.substring$2$s(this.path, 0, pos);
          this.name = J.substring$1$s(this.path, pos + 1);
          if (J.contains$1$asx(this.parentPath, "/$") || J.contains$1$asx(this.parentPath, "/@"))
            this.valid = false;
        }
      }, "call$0", "get$_parse", 0, 0, 6, "_parse"],
      get$absolute: [function(_) {
        return this.name === "/" || J.startsWith$1$s(this.parentPath, "/");
      }, null, null, 1, 0, 26, "absolute"],
      get$isRoot: [function() {
        return this.name === "/";
      }, null, null, 1, 0, 26, "isRoot"],
      get$isConfig: [function() {
        return J.startsWith$1$s(this.name, "$");
      }, null, null, 1, 0, 26, "isConfig"],
      get$isAttribute: [function() {
        return J.startsWith$1$s(this.name, "@");
      }, null, null, 1, 0, 26, "isAttribute"],
      get$isNode: [function() {
        return !J.startsWith$1$s(this.name, "@") && !J.startsWith$1$s(this.name, "$");
      }, null, null, 1, 0, 26, "isNode"],
      mergeBasePath$2: [function(base, force) {
        var t1;
        if (base == null)
          return;
        if (!(this.name === "/" || J.startsWith$1$s(this.parentPath, "/"))) {
          t1 = this.parentPath;
          if (t1 === "") {
            this.parentPath = base;
            t1 = base;
          } else {
            t1 = base + "/" + H.S(t1);
            this.parentPath = t1;
          }
          this.path = t1 + "/" + H.S(this.name);
        } else if (force)
          if (this.name === "") {
            this.path = base;
            this._parse$0();
          } else {
            t1 = base + H.S(this.parentPath);
            this.parentPath = t1;
            this.path = t1 + "/" + H.S(this.name);
          }
      }, function(base) {
        return this.mergeBasePath$2(base, false);
      }, "mergeBasePath$1", "call$2", "call$1", "get$mergeBasePath", 2, 2, 80, 28, 161, [], 162, [], "mergeBasePath"],
      static: {"^": "Path_invalidChar<-315,Path_invalidNameChar<-315", Path_getValidPath: [function(path, basePath) {
          var p;
          if (typeof path === "string") {
            p = new O.Path(path, null, null, true);
            p._parse$0();
            if (p.valid) {
              p.mergeBasePath$1(basePath);
              return p;
            }
          }
          return;
        }, function(path) {
          return O.Path_getValidPath(path, null);
        }, "call$2", "call$1", "Path_getValidPath$closure", 2, 2, 215, 25, 107, [], 135, [], "getValidPath"], Path_getValidNodePath: [function(path, basePath) {
          var p;
          if (typeof path === "string") {
            p = new O.Path(path, null, null, true);
            p._parse$0();
            if (p.valid && !J.startsWith$1$s(p.name, "@") && !J.startsWith$1$s(p.name, "$")) {
              p.mergeBasePath$1(basePath);
              return p;
            }
          }
          return;
        }, function(path) {
          return O.Path_getValidNodePath(path, null);
        }, "call$2", "call$1", "Path_getValidNodePath$closure", 2, 2, 215, 25, 107, [], 135, [], "getValidNodePath"], Path_getValidAttributePath: [function(path, basePath) {
          var p;
          if (typeof path === "string") {
            p = new O.Path(path, null, null, true);
            p._parse$0();
            if (p.valid && J.startsWith$1$s(p.name, "@")) {
              p.mergeBasePath$1(basePath);
              return p;
            }
          }
          return;
        }, function(path) {
          return O.Path_getValidAttributePath(path, null);
        }, "call$2", "call$1", "Path_getValidAttributePath$closure", 2, 2, 215, 25, 107, [], 135, [], "getValidAttributePath"], Path_getValidConfigPath: [function(path, basePath) {
          var p;
          if (typeof path === "string") {
            p = new O.Path(path, null, null, true);
            p._parse$0();
            if (p.valid && J.startsWith$1$s(p.name, "$")) {
              p.mergeBasePath$1(basePath);
              return p;
            }
          }
          return;
        }, function(path) {
          return O.Path_getValidConfigPath(path, null);
        }, "call$2", "call$1", "Path_getValidConfigPath$closure", 2, 2, 215, 25, 107, [], 135, [], "getValidConfigPath"], Path$: [function(path) {
          var t1 = new O.Path(path, null, null, true);
          t1._parse$0();
          return t1;
        }, null, null, 2, 0, 12, 107, [], "new Path"]}
    },
    "+Path": [0],
    Permission: {
      "^": "Object;",
      static: {"^": "Permission_NONE<-296,Permission_READ<-296,Permission_WRITE<-296,Permission_CONFIG<-296,Permission_NEVER<-296,Permission_names<-287,Permission_nameParser<-303", Permission$: [function() {
          return new O.Permission();
        }, null, null, 0, 0, 216, "new Permission"], Permission_parse: [function(obj, defaultVal) {
          if (typeof obj === "string" && C.Map_50eJC.containsKey$1(obj))
            return C.Map_50eJC.$index(0, obj);
          return defaultVal;
        }, function(obj) {
          return O.Permission_parse(obj, 4);
        }, "call$2", "call$1", "Permission_parse$closure", 2, 2, 217, 136, 137, [], 138, [], "parse"]}
    },
    "+Permission": [0],
    PermissionList: {
      "^": "Object;idMatchs@-303,groupMatchs@-303,defaultPermission@-296",
      updatePermissions$1: [function(data) {
        var t1, obj, t2, t3;
        this.idMatchs.clear$0(0);
        this.groupMatchs.clear$0(0);
        this.defaultPermission = 0;
        for (t1 = J.get$iterator$ax(data); t1.moveNext$0();) {
          obj = t1.get$current();
          t2 = J.getInterceptor(obj);
          if (!!t2.$isMap) {
            t3 = t2.$index(obj, "id");
            if (typeof t3 === "string")
              this.idMatchs.$indexSet(0, t2.$index(obj, "id"), C.Map_50eJC.$index(0, t2.$index(obj, "permission")));
            else {
              t3 = t2.$index(obj, "group");
              if (typeof t3 === "string")
                if (J.$eq(t2.$index(obj, "group"), "default"))
                  this.defaultPermission = C.Map_50eJC.$index(0, t2.$index(obj, "permission"));
                else
                  this.groupMatchs.$indexSet(0, t2.$index(obj, "group"), C.Map_50eJC.$index(0, t2.$index(obj, "permission")));
            }
          }
        }
      }, "call$1", "get$updatePermissions", 2, 0, 81, 43, [], "updatePermissions"],
      getPermission$1: [function(responder) {
        return 3;
      }, "call$1", "get$getPermission", 2, 0, 82, 163, [], "getPermission"],
      static: {PermissionList$: [function() {
          return new O.PermissionList(P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), 0);
        }, null, null, 0, 0, 218, "new PermissionList"]}
    },
    "+PermissionList": [0],
    StreamConnectionAdapter: {
      "^": "Object;",
      static: {StreamConnectionAdapter$: [function() {
          return new O.StreamConnectionAdapter();
        }, null, null, 0, 0, 219, "new StreamConnectionAdapter"]}
    },
    "+StreamConnectionAdapter": [0],
    StreamConnection: {
      "^": "Object;adapter<-316,clientLink@-294,_common$_responderChannel@-291,_common$_requesterChannel@-291,onRequestReadyCompleter@-292,_common$_onDisconnectedCompleter@-293,pingTimer@-317,pingCount@-296,_common$_dataSent@-288,_common$_dataReceiveCount@-296,_common$_serverCommand@-289",
      get$responderChannel: [function() {
        return this._common$_responderChannel;
      }, null, null, 1, 0, 56, "responderChannel"],
      get$requesterChannel: [function() {
        return this._common$_requesterChannel;
      }, null, null, 1, 0, 56, "requesterChannel"],
      get$onRequesterReady: [function() {
        return this.onRequestReadyCompleter.get$future();
      }, null, null, 1, 0, 57, "onRequesterReady"],
      get$onDisconnected: [function() {
        return this._common$_onDisconnectedCompleter.get$future();
      }, null, null, 1, 0, 58, "onDisconnected"],
      onPingTimer$1: [function(t) {
        var t1, t2;
        t1 = this._common$_dataReceiveCount;
        if (t1 >= 3) {
          this.close$0(0);
          return;
        }
        this._common$_dataReceiveCount = t1 + 1;
        if (this._common$_dataSent) {
          this._common$_dataSent = false;
          return;
        }
        t1 = this._common$_serverCommand;
        if (t1 == null) {
          t1 = P.LinkedHashMap__makeEmpty();
          this._common$_serverCommand = t1;
        }
        t2 = this.pingCount + 1;
        this.pingCount = t2;
        t1.$indexSet(0, "ping", t2);
        Q.DsTimer_callLaterOnce(this.get$_common$_send());
      }, "call$1", "get$onPingTimer", 2, 0, 83, 164, [], "onPingTimer"],
      requireSend$0: [function() {
        Q.DsTimer_callLaterOnce(this.get$_common$_send());
      }, "call$0", "get$requireSend", 0, 0, 6, "requireSend"],
      addServerCommand$2: [function(key, value) {
        var t1 = this._common$_serverCommand;
        if (t1 == null) {
          t1 = P.LinkedHashMap__makeEmpty();
          this._common$_serverCommand = t1;
        }
        t1.$indexSet(0, key, value);
        Q.DsTimer_callLaterOnce(this.get$_common$_send());
      }, "call$2", "get$addServerCommand", 4, 0, 84, 65, [], 26, [], "addServerCommand"],
      onData$1: [function(data) {
        var m, err, stack, err0, stack0, t1, t2, exception;
        if (this._common$_onDisconnectedCompleter.get$isCompleted())
          return;
        Q.logger().log$4(C.Level_FINEST_300, "begin StreamConnection.onData", null, null);
        if (!this.onRequestReadyCompleter.get$isCompleted())
          this.onRequestReadyCompleter.complete$1(0, this._common$_requesterChannel);
        this._common$_dataReceiveCount = 0;
        m = null;
        t1 = data;
        t2 = H.checkSubtype(t1, "$isList", [P.$int], "$asList");
        if (t2) {
          try {
            m = P._parseJson(C.Utf8Codec_false.decode$1(data), $.get$DsJson_instance().decoder._reviver);
            Q.logger().log$4(C.Level_FINE_500, "Stream JSON (bytes): " + H.S(m), null, null);
          } catch (exception) {
            t1 = H.unwrapException(exception);
            err = t1;
            stack = H.getTraceFromException(exception);
            Q.logger().log$4(C.Level_FINE_500, "Failed to decode JSON bytes in Stream Connection", err, stack);
            this.close$0(0);
            return;
          }
          if (!!J.getInterceptor(J.$index$asx(m, "responses")).$isList)
            this._common$_requesterChannel.onReceiveController.add$1(0, J.$index$asx(m, "responses"));
          if (!!J.getInterceptor(J.$index$asx(m, "requests")).$isList)
            this._common$_responderChannel.onReceiveController.add$1(0, J.$index$asx(m, "requests"));
        } else {
          t1 = data;
          if (typeof t1 === "string") {
            try {
              m = P._parseJson(data, $.get$DsJson_instance().decoder._reviver);
              Q.logger().log$4(C.Level_FINE_500, "Stream JSON: " + H.S(m), null, null);
            } catch (exception) {
              t1 = H.unwrapException(exception);
              err0 = t1;
              stack0 = H.getTraceFromException(exception);
              Q.logger().log$4(C.Level_SEVERE_1000, "Failed to decode JSON from Stream Connection", err0, stack0);
              this.close$0(0);
              return;
            }
            t1 = J.$index$asx(m, "salt");
            if (typeof t1 === "string" && this.clientLink != null)
              this.clientLink.updateSalt$1(J.$index$asx(m, "salt"));
            if (!!J.getInterceptor(J.$index$asx(m, "responses")).$isList)
              this._common$_requesterChannel.onReceiveController.add$1(0, J.$index$asx(m, "responses"));
            if (!!J.getInterceptor(J.$index$asx(m, "requests")).$isList)
              this._common$_responderChannel.onReceiveController.add$1(0, J.$index$asx(m, "requests"));
          }
        }
        Q.logger().log$4(C.Level_FINEST_300, "end StreamConnection.onData", null, null);
      }, "call$1", "get$onData", 2, 0, 85, 43, [], "onData"],
      _common$_send$0: [function() {
        var m, needSend, t1, rslt;
        m = this._common$_serverCommand;
        if (m != null) {
          this._common$_serverCommand = null;
          needSend = true;
        } else {
          m = P.LinkedHashMap__makeEmpty();
          needSend = false;
        }
        t1 = this._common$_responderChannel;
        if (t1.getData != null) {
          rslt = t1.getData$0();
          if (rslt != null && J.get$length$asx(rslt) !== 0) {
            m.$indexSet(0, "responses", rslt);
            needSend = true;
          }
        }
        t1 = this._common$_requesterChannel;
        if (t1.getData != null) {
          rslt = t1.getData$0();
          if (rslt != null && J.get$length$asx(rslt) !== 0) {
            m.$indexSet(0, "requests", rslt);
            needSend = true;
          }
        }
        if (needSend) {
          Q.logger().log$4(C.Level_FINE_500, "send: " + H.S(m), null, null);
          t1 = $.get$DsJson_instance();
          t1 = t1.encoder;
          this.adapter.send$1(0, P._JsonStringStringifier_stringify(m, t1._toEncodable, t1.indent));
          this._common$_dataSent = true;
        }
      }, "call$0", "get$_common$_send", 0, 0, 6, "_common$_send"],
      addData$1: [function(m) {
        var t1 = $.get$DsJson_instance();
        t1 = t1.encoder;
        this.adapter.send$1(0, P._JsonStringStringifier_stringify(m, t1._toEncodable, t1.indent));
      }, "call$1", "get$addData", 2, 0, 72, 113, [], "addData"],
      _common$_onDone$0: [function() {
        Q.logger().log$4(C.Level_FINE_500, "Stream disconnected", null, null);
        if (!this._common$_requesterChannel.onReceiveController.get$isClosed())
          this._common$_requesterChannel.onReceiveController.close$0(0);
        if (!this._common$_requesterChannel.onDisconnectController.get$isCompleted()) {
          var t1 = this._common$_requesterChannel;
          t1.onDisconnectController.complete$1(0, t1);
        }
        if (!this._common$_responderChannel.onReceiveController.get$isClosed())
          this._common$_responderChannel.onReceiveController.close$0(0);
        if (!this._common$_responderChannel.onDisconnectController.get$isCompleted()) {
          t1 = this._common$_responderChannel;
          t1.onDisconnectController.complete$1(0, t1);
        }
        if (!this._common$_onDisconnectedCompleter.get$isCompleted())
          this._common$_onDisconnectedCompleter.complete$1(0, false);
        t1 = this.pingTimer;
        if (t1 != null)
          t1.cancel$0();
      }, "call$0", "get$_common$_onDone", 0, 0, 6, "_common$_onDone"],
      close$0: [function(_) {
        this.adapter.close$0(0).then$1(new O.StreamConnection_close_closure(this));
      }, "call$0", "get$close", 0, 0, 6, "close", 165],
      StreamConnection$3$clientLink$enableTimeout: function(adapter, clientLink, enableTimeout) {
        var t1, t2, t3;
        t1 = P.StreamController_StreamController(null, null, null, null, false, P.List);
        t2 = new P._Future(0, $.Zone__current, null);
        t2.$builtinTypeInfo = [O.ConnectionChannel];
        t2 = new P._AsyncCompleter(t2);
        t2.$builtinTypeInfo = [O.ConnectionChannel];
        t3 = new P._Future(0, $.Zone__current, null);
        t3.$builtinTypeInfo = [O.ConnectionChannel];
        t3 = new P._AsyncCompleter(t3);
        t3.$builtinTypeInfo = [O.ConnectionChannel];
        this._common$_responderChannel = new O.PassiveChannel(t1, [], this, null, false, true, t2, t3);
        t1 = P.StreamController_StreamController(null, null, null, null, false, P.List);
        t2 = new P._Future(0, $.Zone__current, null);
        t2.$builtinTypeInfo = [O.ConnectionChannel];
        t2 = new P._AsyncCompleter(t2);
        t2.$builtinTypeInfo = [O.ConnectionChannel];
        t3 = new P._Future(0, $.Zone__current, null);
        t3.$builtinTypeInfo = [O.ConnectionChannel];
        t3 = new P._AsyncCompleter(t3);
        t3.$builtinTypeInfo = [O.ConnectionChannel];
        this._common$_requesterChannel = new O.PassiveChannel(t1, [], this, null, false, true, t2, t3);
        t1 = this.adapter;
        t1.receive$0().listen$2$onDone(this.get$onData(), this.get$_common$_onDone());
        t1.send$1(0, $.get$fixedBlankData());
        if (enableTimeout)
          this.pingTimer = P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 0, 0, 20), this.get$onPingTimer());
      },
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      },
      static: {StreamConnection$: [function(adapter, clientLink, enableTimeout) {
          var t1, t2;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [O.ConnectionChannel];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [O.ConnectionChannel];
          t2 = new P._Future(0, $.Zone__current, null);
          t2.$builtinTypeInfo = [P.bool];
          t2 = new P._AsyncCompleter(t2);
          t2.$builtinTypeInfo = [P.bool];
          t1 = new O.StreamConnection(adapter, clientLink, null, null, t1, t2, null, 0, false, 0, null);
          t1.StreamConnection$3$clientLink$enableTimeout(adapter, clientLink, enableTimeout);
          return t1;
        }, null, null, 2, 5, 220, 25, 28, 139, [], 101, [], 140, [], "new StreamConnection"]}
    },
    "+StreamConnection": [0, 318, 297],
    StreamConnection_close_closure: {
      "^": "Closure:7;_common$_captured_this_0",
      call$1: [function(_) {
        return this._common$_captured_this_0._common$_onDone$0();
      }, null, null, 2, 0, 7, 42, [], "call"]
    },
    TableColumn: {
      "^": "Object;type*-285,name*-285,defaultValue*-0",
      getData$0: [function() {
        var rslt, t1;
        rslt = P.LinkedHashMap__makeLiteral(["type", this.type, "name", this.name]);
        t1 = this.defaultValue;
        if (t1 != null)
          rslt.$indexSet(0, "default", t1);
        return rslt;
      }, "call$0", "get$getData", 0, 0, 66, "getData"],
      static: {TableColumn$: [function($name, type, defaultValue) {
          return new O.TableColumn(type, $name, defaultValue);
        }, null, null, 4, 2, 221, 25, 124, [], 129, [], 141, [], "new TableColumn"], TableColumn_serializeColumns: [function(list) {
          var rslts, t1, m, t2, rslt;
          rslts = [];
          for (t1 = J.get$iterator$ax(list); t1.moveNext$0();) {
            m = t1.get$current();
            t2 = J.getInterceptor(m);
            if (!!t2.$isMap)
              rslts.push(m);
            else if (!!t2.$isTableColumn) {
              rslt = P.LinkedHashMap__makeLiteral(["type", m.type, "name", m.name]);
              t2 = m.defaultValue;
              if (t2 != null)
                rslt.$indexSet(0, "default", t2);
              rslts.push(rslt);
            }
          }
          return rslts;
        }, "call$1", "TableColumn_serializeColumns$closure", 2, 0, 222, 142, [], "serializeColumns"], TableColumn_parseColumns: [function(list) {
          var rslt, t1, m, t2, t3, type;
          rslt = [];
          rslt.$builtinTypeInfo = [O.TableColumn];
          for (t1 = J.get$iterator$ax(list); t1.moveNext$0();) {
            m = t1.get$current();
            t2 = J.getInterceptor(m);
            if (!!t2.$isMap) {
              t3 = t2.$index(m, "name");
              t3 = typeof t3 === "string";
            } else
              t3 = false;
            if (t3) {
              t3 = t2.$index(m, "type");
              type = typeof t3 === "string" ? t2.$index(m, "type") : "string";
              rslt.push(new O.TableColumn(type, t2.$index(m, "name"), t2.$index(m, "default")));
            } else if (!!t2.$isTableColumn)
              rslt.push(m);
            else
              return;
          }
          return rslt;
        }, "call$1", "TableColumn_parseColumns$closure", 2, 0, 223, 142, [], "parseColumns"]}
    },
    "+TableColumn": [0],
    Table: {
      "^": "Object;columns@-319,rows*-320",
      static: {Table$: [function(columns, rows) {
          return new O.Table(columns, rows);
        }, null, null, 4, 0, 224, 143, [], 144, [], "new Table"]}
    },
    "+Table": [0],
    ValueUpdate: {
      "^": "Object;value*-321,ts@-285,status*-285,count@-296,sum@-322,min*-322,max*-322",
      ValueUpdate$merge$2: function(oldUpdate, newUpdate) {
        var t1;
        this.value = newUpdate.value;
        this.ts = newUpdate.ts;
        this.status = newUpdate.status;
        this.count = oldUpdate.count + newUpdate.count;
        if (!J.get$isNaN$n(oldUpdate.sum))
          this.sum = this.sum + oldUpdate.sum;
        if (!J.get$isNaN$n(newUpdate.sum))
          this.sum = this.sum + newUpdate.sum;
        t1 = oldUpdate.min;
        this.min = t1;
        if (J.get$isNaN$n(t1) || newUpdate.min < this.min)
          this.min = newUpdate.min;
        t1 = oldUpdate.min;
        this.max = t1;
        if (J.get$isNaN$n(t1) || newUpdate.max > this.max)
          this.max = newUpdate.max;
      },
      ValueUpdate$8$count$max$meta$min$status$sum$ts: function(value, count, max, meta, min, $status, sum, ts) {
        var t1, t2;
        if (this.ts == null)
          this.ts = O.ValueUpdate_getTs();
        if (meta != null) {
          t1 = meta.$index(0, "count");
          if (typeof t1 === "number" && Math.floor(t1) === t1)
            this.count = meta.$index(0, "count");
          else if (this.value == null)
            this.count = 0;
          t1 = meta.$index(0, "status");
          if (typeof t1 === "string")
            this.status = meta.$index(0, "status");
          t1 = meta.$index(0, "sum");
          if (typeof t1 === "number")
            this.sum = meta.$index(0, "sum");
          t1 = meta.$index(0, "max");
          if (typeof t1 === "number")
            this.max = meta.$index(0, "max");
          t1 = meta.$index(0, "min");
          if (typeof t1 === "number")
            this.min = meta.$index(0, "min");
        }
        t1 = this.value;
        if (typeof t1 === "number" && this.count === 1) {
          t2 = this.sum;
          if (t2 == null ? t2 != null : t2 !== t2)
            this.sum = t1;
          t2 = this.max;
          if (t2 == null ? t2 != null : t2 !== t2)
            this.max = t1;
          t2 = this.min;
          if (t2 == null ? t2 != null : t2 !== t2)
            this.min = t1;
        }
      },
      static: {"^": "ValueUpdate_TIME_ZONE<-285", ValueUpdate_getTs: [function() {
          return new P.DateTime(Date.now(), false).toIso8601String$0() + H.S($.get$ValueUpdate_TIME_ZONE());
        }, "call$0", "ValueUpdate_getTs$closure", 0, 0, 3, "getTs"], ValueUpdate$: [function(value, count, max, meta, min, $status, sum, ts) {
          var t1 = new O.ValueUpdate(value, ts, $status, count, sum, min, max);
          t1.ValueUpdate$8$count$max$meta$min$status$sum$ts(value, count, max, meta, min, $status, sum, ts);
          return t1;
        }, null, null, 2, 15, 225, 25, 25, 25, 111, 145, 145, 145, 26, [], 146, [], 147, [], 148, [], 149, [], 150, [], 151, [], 152, [], "new ValueUpdate"], ValueUpdate$merge: [function(oldUpdate, newUpdate) {
          var t1 = new O.ValueUpdate(null, null, null, null, 0, null, null);
          t1.ValueUpdate$merge$2(oldUpdate, newUpdate);
          return t1;
        }, null, null, 4, 0, 226, 153, [], 154, [], "new ValueUpdate$merge"]}
    },
    "+ValueUpdate": [0],
    closure: {
      "^": "Closure:5;",
      call$0: [function() {
        var timeZoneOffset, s, hh, mm, t1;
        timeZoneOffset = C.JSInt_methods._tdivFast$1(new P.DateTime(Date.now(), false).get$timeZoneOffset()._duration, 60000000);
        if (timeZoneOffset < 0) {
          timeZoneOffset = -timeZoneOffset;
          s = "-";
        } else
          s = "+";
        hh = C.JSInt_methods._tdivFast$1(timeZoneOffset, 60);
        mm = C.JSInt_methods.$mod(timeZoneOffset, 60);
        t1 = s + (hh < 10 ? "0" : "") + hh + ":";
        return t1 + (mm < 10 ? "0" : "") + mm;
      }, null, null, 0, 0, 5, "call"]
    }
  }], ["dslink.http.websocket", "package:dslink/src/http/websocket_conn.dart",, T, {
    "^": "",
    WebSocketConnection: {
      "^": "Object;_responderChannel,_requesterChannel,onRequestReadyCompleter@,_onDisconnectedCompleter,clientLink<,socket,pingTimer@,pingCount@,_dataSent,_dataReceiveCount,throughput,_serverCommand,binaryInCache,binaryOutCache",
      get$responderChannel: [function() {
        return this._responderChannel;
      }, null, null, 1, 0, 56, "responderChannel"],
      get$requesterChannel: [function() {
        return this._requesterChannel;
      }, null, null, 1, 0, 56, "requesterChannel"],
      get$onRequesterReady: [function() {
        return this.onRequestReadyCompleter.future;
      }, null, null, 1, 0, 57, "onRequesterReady"],
      get$onDisconnected: [function() {
        return this._onDisconnectedCompleter.future;
      }, null, null, 1, 0, 58, "onDisconnected"],
      onPingTimer$1: [function(t) {
        var t1 = this._dataReceiveCount;
        if (t1 >= 3) {
          this.close$0(0);
          return;
        }
        this._dataReceiveCount = t1 + 1;
        if (this._dataSent) {
          this._dataSent = false;
          return;
        }
        t1 = this._serverCommand;
        if (t1 == null) {
          t1 = P.LinkedHashMap__makeEmpty();
          this._serverCommand = t1;
        }
        t1.$indexSet(0, "ping", ++this.pingCount);
        Q.DsTimer_callLaterOnce(this.get$_send());
      }, "call$1", "get$onPingTimer", 2, 0, 83, 164, []],
      requireSend$0: [function() {
        Q.DsTimer_callLaterOnce(this.get$_send());
      }, "call$0", "get$requireSend", 0, 0, 6, "requireSend"],
      addServerCommand$2: [function(key, value) {
        var t1 = this._serverCommand;
        if (t1 == null) {
          t1 = P.LinkedHashMap__makeEmpty();
          this._serverCommand = t1;
        }
        t1.$indexSet(0, key, value);
        Q.DsTimer_callLaterOnce(this.get$_send());
      }, "call$2", "get$addServerCommand", 4, 0, 84, 65, [], 26, [], "addServerCommand"],
      onData$1: [function(data) {
        var m, err, stack, err0, t1, t2, exception;
        if (this._onDisconnectedCompleter.future._state !== 0)
          return;
        Q.logger().log$4(C.Level_FINEST_300, "begin WebSocketConnection.onData", null, null);
        t1 = this.onRequestReadyCompleter;
        if (t1.future._state === 0)
          t1.complete$1(0, this._requesterChannel);
        this._dataReceiveCount = 0;
        m = null;
        t1 = data;
        t2 = H.checkSubtype(t1, "$isList", [P.$int], "$asList");
        if (t2) {
          this.throughput = this.throughput + J.get$length$asx(data);
          if (J.get$length$asx(data) !== 0 && J.$eq(J.$index$asx(data, 0), 0)) {
            Q.logger().log$4(C.Level_FINEST_300, " receive binary length " + H.S(J.get$length$asx(data)), null, null);
            this.binaryInCache.receiveData$1(data);
            return;
          }
          try {
            t1 = C.Utf8Codec_false.decode$1(data);
            m = $.get$DsJson_instance().decodeJsonFrame$2(t1, this.binaryInCache);
            Q.logger().log$4(C.Level_FINE_500, "WebSocket JSON (bytes): " + H.S(m), null, null);
          } catch (exception) {
            t1 = H.unwrapException(exception);
            err = t1;
            stack = H.getTraceFromException(exception);
            Q.logger().log$4(C.Level_FINE_500, "Failed to decode JSON bytes in WebSocket Connection", err, stack);
            this.close$0(0);
            return;
          }
          if (!!J.getInterceptor(J.$index$asx(m, "responses")).$isList)
            this._requesterChannel.onReceiveController.add$1(0, J.$index$asx(m, "responses"));
          if (!!J.getInterceptor(J.$index$asx(m, "requests")).$isList)
            this._responderChannel.onReceiveController.add$1(0, J.$index$asx(m, "requests"));
        } else {
          t1 = data;
          if (typeof t1 === "string") {
            this.throughput = this.throughput + J.get$length$asx(data);
            try {
              m = $.get$DsJson_instance().decodeJsonFrame$2(data, this.binaryInCache);
              Q.logger().log$4(C.Level_FINE_500, "WebSocket JSON: " + H.S(m), null, null);
            } catch (exception) {
              t1 = H.unwrapException(exception);
              err0 = t1;
              Q.logger().log$4(C.Level_SEVERE_1000, "Failed to decode JSON from WebSocket Connection", err0, null);
              this.close$0(0);
              return;
            }
            t1 = J.$index$asx(m, "salt");
            if (typeof t1 === "string" && true)
              J.$indexSet$ax(this.clientLink.salts, 0, J.$index$asx(m, "salt"));
            if (!!J.getInterceptor(J.$index$asx(m, "responses")).$isList)
              this._requesterChannel.onReceiveController.add$1(0, J.$index$asx(m, "responses"));
            if (!!J.getInterceptor(J.$index$asx(m, "requests")).$isList)
              this._responderChannel.onReceiveController.add$1(0, J.$index$asx(m, "requests"));
          }
        }
        Q.logger().log$4(C.Level_FINEST_300, "end WebSocketConnection.onData", null, null);
      }, "call$1", "get$onData", 2, 0, 85, 43, []],
      _send$0: [function() {
        var m, needSend, t1, rslt, json;
        m = this._serverCommand;
        if (m != null) {
          this._serverCommand = null;
          needSend = true;
        } else {
          m = P.LinkedHashMap__makeEmpty();
          needSend = false;
        }
        t1 = this._responderChannel;
        if (t1.getData != null) {
          rslt = t1.getData$0();
          if (rslt != null && J.get$length$asx(rslt) !== 0) {
            m.$indexSet(0, "responses", rslt);
            needSend = true;
          }
        }
        t1 = this._requesterChannel;
        if (t1.getData != null) {
          rslt = t1.getData$0();
          if (rslt != null && J.get$length$asx(rslt) !== 0) {
            m.$indexSet(0, "requests", rslt);
            needSend = true;
          }
        }
        if (needSend) {
          t1 = this.binaryOutCache;
          json = $.get$DsJson_instance().encodeJsonFrame$3$pretty(m, t1, false);
          if (t1.caches.__js_helper$_length !== 0) {
            Q.logger().log$4(C.Level_FINEST_300, "send binary", null, null);
            this.socket.add$1(0, t1.export$0());
          }
          Q.logger().log$4(C.Level_FINEST_300, "send: " + json, null, null);
          this.throughput = this.throughput + json.length;
          this.socket.add$1(0, json);
          this._dataSent = true;
        }
      }, "call$0", "get$_send", 0, 0, 6],
      addData$1: function(m) {
        var t1, json;
        t1 = this.binaryOutCache;
        json = $.get$DsJson_instance().encodeJsonFrame$3$pretty(m, t1, false);
        if (t1.caches.__js_helper$_length !== 0) {
          Q.logger().log$4(C.Level_FINEST_300, "send binary", null, null);
          this.socket.add$1(0, t1.export$0());
        }
        Q.logger().log$4(C.Level_FINEST_300, "send: " + json, null, null);
        this.throughput = this.throughput + json.length;
        this.socket.add$1(0, json);
      },
      _websocket$_onDone$0: [function() {
        Q.logger().log$4(C.Level_FINE_500, "socket disconnected", null, null);
        if (!this._requesterChannel.onReceiveController.get$isClosed())
          this._requesterChannel.onReceiveController.close$0(0);
        if (!this._requesterChannel.onDisconnectController.get$isCompleted()) {
          var t1 = this._requesterChannel;
          t1.onDisconnectController.complete$1(0, t1);
        }
        if (!this._responderChannel.onReceiveController.get$isClosed())
          this._responderChannel.onReceiveController.close$0(0);
        if (!this._responderChannel.onDisconnectController.get$isCompleted()) {
          t1 = this._responderChannel;
          t1.onDisconnectController.complete$1(0, t1);
        }
        t1 = this._onDisconnectedCompleter;
        if (t1.future._state === 0)
          t1.complete$1(0, false);
        t1 = this.pingTimer;
        if (t1 != null)
          t1.cancel$0();
      }, "call$0", "get$_websocket$_onDone", 0, 0, 6],
      close$0: [function(_) {
        var t1 = this.socket;
        if (t1.get$readyState(t1) === 1 || t1.get$readyState(t1) === 0)
          t1.close$0(0);
        this._websocket$_onDone$0();
      }, "call$0", "get$close", 0, 0, 6, "close"],
      onDisconnected$0: function() {
        return this.get$onDisconnected().call$0();
      }
    }
  }], ["dslink.pk", "package:dslink/src/crypto/pk.dart",, K, {
    "^": "_isCryptoProviderLocked@-288,_CRYPTO_PROVIDER@-324",
    setCryptoProvider: [function(provider) {
      if ($._isCryptoProviderLocked)
        throw H.wrapException(new P.StateError("crypto provider is locked"));
      $._CRYPTO_PROVIDER = provider;
      $._isCryptoProviderLocked = true;
    }, "call$1", "setCryptoProvider$closure", 2, 0, 227, 91, [], "setCryptoProvider"],
    lockCryptoProvider: [function() {
      $._isCryptoProviderLocked = true;
      return true;
    }, "call$0", "lockCryptoProvider$closure", 0, 0, 5, "lockCryptoProvider"],
    CryptoProvider: {
      "^": "Object;",
      static: {CryptoProvider$: [function() {
          return new K.CryptoProvider();
        }, null, null, 0, 0, 228, "new CryptoProvider"]}
    },
    "+CryptoProvider": [0],
    ECDH: {
      "^": "Object;",
      verifySalt$2: [function(salt, hash) {
        return this.hashSalt$1(salt) === hash;
      }, "call$2", "get$verifySalt", 4, 0, 86, 121, [], 169, [], "verifySalt"],
      static: {ECDH$: [function() {
          return new K.ECDH();
        }, null, null, 0, 0, 63, "new ECDH"], ECDH_assign: [function(publicKeyRemote, old) {
          var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError;
          function ECDH_assign(errorCode, result) {
            if (errorCode === 1) {
              currentError = result;
              $goto = handler;
            }
            while (true)
              switch ($goto) {
                case 0:
                  // Function start
                  $returnValue = $.get$_CRYPTO_PROVIDER().assign$2(publicKeyRemote, old);
                  // goto return
                  $goto = 1;
                  break;
                case 1:
                  // return
                  return H.asyncHelper($returnValue, 0, completer, null);
                case 2:
                  // rethrow
                  return H.asyncHelper(currentError, 1, completer);
              }
          }
          return H.asyncHelper(null, ECDH_assign, completer, null);
        }, "call$2", "ECDH_assign$closure", 4, 0, 229, 166, [], 167, [], "assign"]}
    },
    "+ECDH": [0],
    PublicKey: {
      "^": "Object;",
      getDsId$1: [function(prefix) {
        return H.S(prefix) + H.S(this.get$qHash64());
      }, "call$1", "get$getDsId", 2, 0, 87, 85, [], "getDsId"],
      verifyDsId$1: [function(dsId) {
        var t1 = dsId.length;
        return t1 >= 43 && J.substring$1$s(dsId, t1 - 43) === this.get$qHash64();
      }, "call$1", "get$verifyDsId", 2, 0, 88, 170, [], "verifyDsId"],
      static: {PublicKey$: [function() {
          return new K.PublicKey();
        }, null, null, 0, 0, 5, "new PublicKey"], PublicKey_PublicKey$fromBytes: [function(bytes) {
          return $.get$_CRYPTO_PROVIDER().getKeyFromBytes$1(bytes);
        }, null, null, 2, 0, 94, 168, [], "new PublicKey$fromBytes"]}
    },
    "+PublicKey": [0],
    PrivateKey: {
      "^": "Object;",
      static: {PrivateKey_generate: [function() {
          var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError;
          function PrivateKey_generate(errorCode, result) {
            if (errorCode === 1) {
              currentError = result;
              $goto = handler;
            }
            while (true)
              switch ($goto) {
                case 0:
                  // Function start
                  $returnValue = $.get$_CRYPTO_PROVIDER().generate$0();
                  // goto return
                  $goto = 1;
                  break;
                case 1:
                  // return
                  return H.asyncHelper($returnValue, 0, completer, null);
                case 2:
                  // rethrow
                  return H.asyncHelper(currentError, 1, completer);
              }
          }
          return H.asyncHelper(null, PrivateKey_generate, completer, null);
        }, "call$0", "PrivateKey_generate$closure", 0, 0, 91, "generate"], PrivateKey_PrivateKey$generateSync: [function() {
          return $.get$_CRYPTO_PROVIDER().generateSync$0();
        }, null, null, 0, 0, 92, "new PrivateKey$generateSync"], PrivateKey_PrivateKey$loadFromString: [function(str) {
          return $.get$_CRYPTO_PROVIDER().loadFromString$1(str);
        }, null, null, 2, 0, 93, 159, [], "new PrivateKey$loadFromString"]}
    },
    "+PrivateKey": [0],
    DSRandom: {
      "^": "Object;",
      nextUint16$0: [function() {
        var data = new DataView(new ArrayBuffer(H._checkLength(2)));
        data.setUint8(0, this.nextUint8$0());
        data.setUint8(1, this.nextUint8$0());
        return data.getUint16(0, false);
      }, "call$0", "get$nextUint16", 0, 0, 2, "nextUint16"],
      static: {DSRandom$: [function() {
          return new K.DSRandom();
        }, null, null, 0, 0, 230, "new DSRandom"], DSRandom_instance: [function() {
          return $.get$_CRYPTO_PROVIDER().get$random();
        }, null, null, 1, 0, 230, "instance"]}
    },
    "+DSRandom": [0],
    DummyECDH: {
      "^": "Object;encodedPublicKey<-285",
      hashSalt$1: [function(salt) {
        return "";
      }, "call$1", "get$hashSalt", 2, 0, 87, 121, [], "hashSalt"],
      verifySalt$2: [function(salt, hash) {
        return true;
      }, "call$2", "get$verifySalt", 4, 0, 86, 121, [], 169, [], "verifySalt"],
      static: {DummyECDH$: [function() {
          return new K.DummyECDH("");
        }, null, null, 0, 0, 5, "new DummyECDH"]}
    },
    "+DummyECDH": [0, 301]
  }], ["dslink.pk.node", "package:dslink/src/crypto/node/pk.dart",, M, {
    "^": "",
    require: function(input) {
      return $.get$context().callMethod$2("require", [input]);
    },
    _hash: function(obj) {
      var hash, t1;
      hash = $.get$_crypto().callMethod$2("createHash", ["sha256"]);
      hash.callMethod$2("update", [obj]);
      t1 = J.replaceAll$2$s(hash.callMethod$2("digest", ["base64"]), "+", "-");
      H.checkString("_");
      t1 = H.stringReplaceAllUnchecked(t1, "/", "_");
      H.checkString("");
      return H.stringReplaceAllUnchecked(t1, "=", "");
    },
    listToBuf0: function(bytes) {
      var $length, buf, t1, offset, $byte;
      $length = J.getInterceptor$asx(bytes).get$length(bytes);
      buf = P.JsObject_JsObject($.get$context().$index(0, "Buffer"), [$length]);
      for (t1 = C.NativeUint8List_methods.get$iterator(bytes), offset = 0; t1.moveNext$0();) {
        $byte = t1.__internal$_current;
        if (offset >= $length)
          break;
        buf.callMethod$2("writeUInt8", [$byte, offset]);
        ++offset;
      }
      return buf;
    },
    NodeCryptoProvider: {
      "^": "Object;random<-325,_cachedPrivate@-284,_cachedTime@-296",
      assign$2: [function(publicKeyRemote, old) {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, $self = this, t1, t2, t3;
        function assign$2(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                t1 = Date.now();
                t2 = $self._cachedPrivate;
                if (t2 != null)
                  if (t1 - $self._cachedTime <= 60000)
                    t3 = old instanceof M.ECDHImpl && old.privateKey === t2;
                  else
                    t3 = true;
                else
                  t3 = true;
                if (t3) {
                  t2 = $self.generateSync$0();
                  $self._cachedPrivate = t2;
                  $self._cachedTime = t1;
                  t1 = t2;
                } else
                  t1 = t2;
                $returnValue = t1.getSecret$1(publicKeyRemote.qBase64);
                // goto return
                $goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, assign$2, completer, null);
      }, "call$2", "get$assign", 4, 0, 89, 166, [], 167, [], "assign"],
      getSecret$1: [function(publicKeyRemote) {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, $self = this;
        function getSecret$1(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                $returnValue = $self.generateSync$0().getSecret$1(publicKeyRemote.qBase64);
                // goto return
                $goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, getSecret$1, completer, null);
      }, "call$1", "get$getSecret", 2, 0, 90, 166, [], "getSecret"],
      generate$0: [function() {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, $self = this;
        function generate$0(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                $returnValue = $self.generateSync$0();
                // goto return
                $goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, generate$0, completer, null);
      }, "call$0", "get$generate", 0, 0, 91, "generate"],
      generateSync$0: [function() {
        var keys, t1;
        keys = $.get$_curve().callMethod$2("generateKeyPair", ["prime256v1"]);
        t1 = J.getInterceptor$asx(keys);
        return new M.PrivateKeyImpl(M.PublicKeyImpl$(t1.$index(keys, "publicKey")), t1.$index(keys, "privateKey"));
      }, "call$0", "get$generateSync", 0, 0, 92, "generateSync"],
      loadFromString$1: [function(str) {
        var parts, privateKeyBuf, privateKey;
        parts = str.split(" ");
        privateKeyBuf = P.JsObject_JsObject($.get$context().$index(0, "Buffer"), [parts[0], "base64"]);
        privateKey = P.JsObject_JsObject($.get$_curve().$index(0, "PrivateKey"), ["prime256v1", privateKeyBuf]);
        return new M.PrivateKeyImpl(M.PublicKeyImpl$(privateKey.callMethod$2("getPublicKey", [])), privateKey);
      }, "call$1", "get$loadFromString", 2, 0, 93, 159, [], "loadFromString"],
      getKeyFromBytes$1: [function(bytes) {
        var buf = M.listToBuf0(bytes);
        return M.PublicKeyImpl$($.get$_curve().$index(0, "Point").callMethod$2("fromEncoded", ["prime256v1", buf]));
      }, "call$1", "get$getKeyFromBytes", 2, 0, 94, 168, [], "getKeyFromBytes"],
      static: {"^": "NodeCryptoProvider_INSTANCE<-326", NodeCryptoProvider$: [function() {
          return new M.NodeCryptoProvider(new M.DSRandomImpl(), null, -1);
        }, null, null, 0, 0, 231, "new NodeCryptoProvider"]}
    },
    "+NodeCryptoProvider": [0, 324],
    ECDHImpl: {
      "^": "ECDH;publicKey@,privateKey@,_node$_buffer",
      get$encodedPublicKey: [function() {
        return this.publicKey._point.callMethod$1("toEncoded");
      }, null, null, 1, 0, 3, "encodedPublicKey"],
      hashSalt$1: [function(salt) {
        var t1, saltBuffer, t2, newBuffer;
        t1 = $.get$context();
        saltBuffer = P.JsObject_JsObject(t1.$index(0, "Buffer"), [salt]);
        t2 = this._node$_buffer;
        newBuffer = P.JsObject_JsObject(t1.$index(0, "Buffer"), [J.$add$ns(saltBuffer.$index(0, "length"), t2.$index(0, "length"))]);
        saltBuffer.callMethod$2("copy", [newBuffer, 0]);
        t2.callMethod$2("copy", [newBuffer, saltBuffer.$index(0, "length")]);
        return M._hash(newBuffer);
      }, "call$1", "get$hashSalt", 2, 0, 87, 121, [], "hashSalt"]
    },
    PublicKeyImpl: {
      "^": "PublicKey;_point,qBase64@-285,qHash64@-285",
      PublicKeyImpl$1: function(_point) {
        var encoded, t1;
        encoded = this._point.callMethod$2("getEncoded", []);
        t1 = J.replaceAll$2$s(encoded.callMethod$2("toString", ["base64"]), "+", "-");
        H.checkString("_");
        t1 = H.stringReplaceAllUnchecked(t1, "/", "_");
        H.checkString("");
        this.qBase64 = H.stringReplaceAllUnchecked(t1, "=", "");
        this.qHash64 = M._hash(encoded);
      },
      static: {PublicKeyImpl$: function(_point) {
          var t1 = new M.PublicKeyImpl(_point, null, null);
          t1.PublicKeyImpl$1(_point);
          return t1;
        }}
    },
    PrivateKeyImpl: {
      "^": "Object;publicKey@-327,_privateKey",
      saveToString$0: [function() {
        var t1 = J.replaceAll$2$s(this._privateKey.$index(0, "d").callMethod$2("toString", ["base64"]), "+", "-");
        H.checkString("_");
        t1 = H.stringReplaceAllUnchecked(t1, "/", "_");
        H.checkString("");
        return H.stringReplaceAllUnchecked(t1, "=", "") + (" " + H.S(this.publicKey.get$qBase64()));
      }, "call$0", "get$saveToString", 0, 0, 3, "saveToString"],
      getSecret$1: [function(key) {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, $self = this, buf, secret, t1;
        function getSecret$1(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                buf = P.JsObject_JsObject($.get$context().$index(0, "Buffer"), [key, "base64"]);
                secret = $self._privateKey.callMethod$2("getSharedSecret", [$.get$_curve().$index(0, "Point").callMethod$2("fromEncoded", ["prime256v1", buf])]);
                t1 = new P._Future(0, $.Zone__current, null);
                t1.$builtinTypeInfo = [null];
                t1._asyncComplete$1(new M.ECDHImpl($self.publicKey, $self, secret));
                $returnValue = t1;
                // goto return
                $goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, getSecret$1, completer, null);
      }, "call$1", "get$getSecret", 2, 0, 95, 65, [], "getSecret"]
    },
    DSRandomImpl: {
      "^": "DSRandom;",
      get$needsEntropy: [function() {
        return false;
      }, null, null, 1, 0, 26, "needsEntropy"],
      nextUint8$0: [function() {
        return $.get$_crypto().callMethod$2("randomBytes", [1]).callMethod$2("readUInt8", [0]);
      }, "call$0", "get$nextUint8", 0, 0, 2, "nextUint8"],
      addEntropy$1: [function(str) {
      }, "call$1", "get$addEntropy", 2, 0, 37, 159, [], "addEntropy"]
    }
  }], ["dslink.requester", "package:dslink/requester.dart",, L, {
    "^": "",
    DefaultDefNodes: {
      "^": "Object;",
      static: {"^": "DefaultDefNodes__defaultDefs<-289,DefaultDefNodes_nameMap<-314,DefaultDefNodes_pathMap<-314", DefaultDefNodes$: [function() {
          return new L.DefaultDefNodes();
        }, null, null, 0, 0, 232, "new DefaultDefNodes"]}
    },
    "+DefaultDefNodes": [0],
    closure0: {
      "^": "Closure:5;",
      call$0: [function() {
        var rslt = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.Node0);
        $.get$DefaultDefNodes__defaultDefs().forEach$1(0, new L._closure(rslt));
        return rslt;
      }, null, null, 0, 0, 5, "call"]
    },
    _closure: {
      "^": "Closure:96;_captured_rslt_0",
      call$2: [function(k, m) {
        var node = new L.RemoteDefNode("/defs/profile/" + H.S(k), false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        node._getRawName$0();
        m.forEach$1(0, new L.__closure(node));
        node.listed = true;
        this._captured_rslt_0.$indexSet(0, k, node);
      }, null, null, 4, 0, 96, 68, [], 113, [], "call"]
    },
    __closure: {
      "^": "Closure:97;_captured_node_1",
      call$2: [function(n, v) {
        if (J.getInterceptor$s(n).startsWith$1(n, "$"))
          this._captured_node_1.configs.$indexSet(0, n, v);
        else if (C.JSString_methods.startsWith$1(n, "@"))
          this._captured_node_1.attributes.$indexSet(0, n, v);
      }, null, null, 4, 0, 97, 160, [], 54, [], "call"]
    },
    closure1: {
      "^": "Closure:5;",
      call$0: [function() {
        var rslt = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.Node0);
        $.get$DefaultDefNodes_nameMap().forEach$1(0, new L._closure0(rslt));
        return rslt;
      }, null, null, 0, 0, 5, "call"]
    },
    _closure0: {
      "^": "Closure:14;_captured_rslt_0",
      call$2: [function(k, node) {
        this._captured_rslt_0.$indexSet(0, node.get$remotePath(), node);
      }, null, null, 4, 0, 14, 68, [], 158, [], "call"]
    },
    RemoteNodeCache: {
      "^": "Object;_nodes@-328",
      getRemoteNode$1: [function(path) {
        var t1, t2;
        if (!this._nodes.containsKey$1(path)) {
          t1 = J.startsWith$1$s(path, "defs");
          t2 = this._nodes;
          if (t1) {
            t1 = new L.RemoteDefNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
            t1._getRawName$0();
            t2.$indexSet(0, path, t1);
          } else {
            t1 = new L.RemoteNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
            t1._getRawName$0();
            t2.$indexSet(0, path, t1);
          }
        }
        return this._nodes.$index(0, path);
      }, "call$1", "get$getRemoteNode", 2, 0, 98, 107, [], "getRemoteNode"],
      getDefNode$2: [function(path, defName) {
        var t1 = $.get$DefaultDefNodes_nameMap();
        if (t1.containsKey$1(defName))
          return t1.$index(0, defName);
        return this.getRemoteNode$1(path);
      }, "call$2", "get$getDefNode", 4, 0, 99, 107, [], 183, [], "getDefNode"],
      updateRemoteChildNode$3: [function($parent, $name, m) {
        var t1, path, rslt;
        t1 = $parent.remotePath;
        path = t1 === "/" ? "/" + H.S($name) : H.S(t1) + "/" + H.S($name);
        if (this._nodes.containsKey$1(path)) {
          rslt = this._nodes.$index(0, path);
          rslt.updateRemoteChildData$2(m, this);
        } else {
          rslt = new L.RemoteNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
          rslt._getRawName$0();
          this._nodes.$indexSet(0, path, rslt);
          rslt.updateRemoteChildData$2(m, this);
        }
        return rslt;
      }, "call$3", "get$updateRemoteChildNode", 6, 0, 100, 35, [], 124, [], 113, [], "updateRemoteChildNode"],
      static: {RemoteNodeCache$: [function() {
          return new L.RemoteNodeCache(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.RemoteNode));
        }, null, null, 0, 0, 5, "new RemoteNodeCache"]}
    },
    "+RemoteNodeCache": [0],
    RemoteNode: {
      "^": "Node0;remotePath<-285,listed@-288,name*-285,_listController@-329,_subscribeController@-330,profile-312,attributes-313,configs-313,children-314",
      _getRawName$0: [function() {
        var t1 = this.remotePath;
        if (t1 === "/")
          this.name = "/";
        else
          this.name = C.JSArray_methods.get$last(t1.split("/"));
      }, "call$0", "get$_getRawName", 0, 0, 6, "_getRawName"],
      isUpdated$0: [function() {
        var t1 = this._listController;
        if (t1 != null) {
          t1 = t1.request;
          t1 = t1 != null && t1.streamStatus !== "initialize";
        } else
          t1 = false;
        if (!t1)
          return false;
        t1 = this.profile;
        if (t1 instanceof L.RemoteNode) {
          t1 = H.interceptedTypeCast(t1, "$isRemoteNode")._listController;
          if (t1 != null) {
            t1 = t1.request;
            t1 = t1 != null && t1.streamStatus !== "initialize";
          } else
            t1 = false;
          t1 = !t1;
        } else
          t1 = false;
        if (t1)
          return false;
        return true;
      }, "call$0", "get$isUpdated", 0, 0, 26, "isUpdated"],
      isSelfUpdated$0: [function() {
        var t1 = this._listController;
        if (t1 != null) {
          t1 = t1.request;
          t1 = t1 != null && t1.streamStatus !== "initialize";
        } else
          t1 = false;
        return t1;
      }, "call$0", "get$isSelfUpdated", 0, 0, 26, "isSelfUpdated"],
      _requester$_list$1: [function(requester) {
        var t1 = this._listController;
        if (t1 == null) {
          t1 = new L.ListController(this, requester, null, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null, true, false);
          t1._requester$_controller = Q.BroadcastStreamController$(t1.get$onStartListen(), t1.get$_onAllCancel(), t1.get$_requester$_onListen(), L.RequesterListUpdate);
          this._listController = t1;
        }
        return t1._requester$_controller._stream;
      }, "call$1", "get$_requester$_list", 2, 0, 101, 172, [], "_requester$_list"],
      createListController$1: [function(requester) {
        var t1 = new L.ListController(this, requester, null, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null, true, false);
        t1._requester$_controller = Q.BroadcastStreamController$(t1.get$onStartListen(), t1.get$_onAllCancel(), t1.get$_requester$_onListen(), L.RequesterListUpdate);
        return t1;
      }, "call$1", "get$createListController", 2, 0, 102, 172, [], "createListController"],
      _requester$_subscribe$3: [function(requester, callback, cacheLevel) {
        var t1, t2;
        t1 = this._subscribeController;
        if (t1 == null) {
          t1 = new L.ReqSubscribeController(this, requester, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), 0, null, null);
          t2 = requester.nextSid;
          requester.nextSid = t2 + 1;
          t1.sid = t2;
          this._subscribeController = t1;
        }
        t1.toString;
        if (cacheLevel < 1)
          cacheLevel = 1;
        if (cacheLevel > 1000000)
          cacheLevel = 1000000;
        if (cacheLevel > t1.maxCache) {
          t1.maxCache = cacheLevel;
          t1.requester._subsciption.addSubscription$2(t1, cacheLevel);
        }
        if (t1.callbacks.containsKey$1(callback))
          if (J.$eq(t1.callbacks.$index(0, callback), t1.maxCache) && cacheLevel < t1.maxCache) {
            t1.callbacks.$indexSet(0, callback, cacheLevel);
            t1.updateCacheLevel$0();
          } else
            t1.callbacks.$indexSet(0, callback, cacheLevel);
        else {
          t1.callbacks.$indexSet(0, callback, cacheLevel);
          t1 = t1._lastUpdate;
          if (t1 != null)
            callback.call$1(t1);
        }
      }, "call$3", "get$_requester$_subscribe", 6, 0, 103, 172, [], 38, [], 112, [], "_requester$_subscribe"],
      _unsubscribe$2: [function(requester, callback) {
        var t1, cacheLevel, t2, t3, path, t4;
        t1 = this._subscribeController;
        if (t1 != null)
          if (t1.callbacks.containsKey$1(callback)) {
            cacheLevel = t1.callbacks.remove$1(0, callback);
            t2 = t1.callbacks;
            if (t2.get$isEmpty(t2)) {
              t2 = t1.requester._subsciption;
              t2.toString;
              t3 = t1.node;
              path = t3.remotePath;
              t4 = t2.subsriptions;
              if (t4.containsKey$1(path)) {
                J.add$1$ax(t2.toRemove, t4.$index(0, path).get$sid());
                t4.remove$1(0, path);
                t2.subsriptionids.remove$1(0, t1.sid);
                t2.requester.addProcessor$1(t2.get$_sendSubscriptionReuests());
              } else if (t2.subsriptionids.containsKey$1(t1.sid))
                Q.logger().log$4(C.Level_SEVERE_1000, "unexpected remoteSubscription in the requester, sid: " + H.S(t1.sid), null, null);
              t1.callbacks.clear$0(0);
              t3._subscribeController = null;
            } else {
              t2 = t1.maxCache;
              if ((cacheLevel == null ? t2 == null : cacheLevel === t2) && t2 > 1)
                t1.updateCacheLevel$0();
            }
          }
      }, "call$2", "get$_unsubscribe", 4, 0, 104, 172, [], 38, [], "_unsubscribe"],
      _requester$_invoke$3: [function(params, requester, maxPermission) {
        var t1, t2, reqMap;
        t1 = new L.InvokeController(this, requester, null, null, null, null);
        t2 = P.StreamController_StreamController(null, null, null, null, false, L.RequesterInvokeUpdate);
        t1._requester$_controller = t2;
        t2.get$done().then$1(t1.get$_onUnsubscribe());
        t2 = t1._requester$_controller;
        t1._requester$_stream = t2.get$stream(t2);
        reqMap = P.LinkedHashMap__makeLiteral(["method", "invoke", "path", this.remotePath, "params", params]);
        if (maxPermission !== 3)
          reqMap.$indexSet(0, "permit", C.List_504[maxPermission]);
        t1._cachedColumns = L.InvokeController_getNodeColumns(this);
        t1._request = requester._sendRequest$2(reqMap, t1);
        return t1._requester$_stream;
      }, function(params, requester) {
        return this._requester$_invoke$3(params, requester, 3);
      }, "_requester$_invoke$2", "call$3", "call$2", "get$_requester$_invoke", 4, 2, 105, 178, 179, [], 172, [], 180, [], "_requester$_invoke"],
      updateRemoteChildData$2: [function(m, cache) {
        var t1, t2;
        t1 = {};
        t1._captured_childPathPre_0 = null;
        t2 = this.remotePath;
        if (t2 === "/")
          t1._captured_childPathPre_0 = "/";
        else
          t1._captured_childPathPre_0 = H.S(t2) + "/";
        m.forEach$1(0, new L.RemoteNode_updateRemoteChildData_closure(t1, this, cache));
      }, "call$2", "get$updateRemoteChildData", 4, 0, 106, 113, [], 182, [], "updateRemoteChildData"],
      resetNodeCache$0: [function() {
        this.configs.clear$0(0);
        this.attributes.clear$0(0);
        this.children.clear$0(0);
      }, "call$0", "get$resetNodeCache", 0, 0, 6, "resetNodeCache"],
      static: {RemoteNode$: [function(remotePath) {
          var t1 = new L.RemoteNode(remotePath, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
          t1._getRawName$0();
          return t1;
        }, null, null, 2, 0, 12, 171, [], "new RemoteNode"]}
    },
    "+RemoteNode": [312],
    RemoteNode_updateRemoteChildData_closure: {
      "^": "Closure:9;_requester$_box_0,_requester$_captured_this_1,_captured_cache_2",
      call$2: [function(key, value) {
        var t1, node;
        if (J.getInterceptor$s(key).startsWith$1(key, "$"))
          this._requester$_captured_this_1.configs.$indexSet(0, key, value);
        else if (C.JSString_methods.startsWith$1(key, "@"))
          this._requester$_captured_this_1.attributes.$indexSet(0, key, value);
        else if (!!J.getInterceptor(value).$isMap) {
          t1 = this._captured_cache_2;
          node = t1.getRemoteNode$1(H.S(this._requester$_box_0._captured_childPathPre_0) + "/" + key);
          this._requester$_captured_this_1.children.$indexSet(0, key, node);
          if (node instanceof L.RemoteNode)
            node.updateRemoteChildData$2(value, t1);
        }
      }, null, null, 4, 0, 9, 65, [], 26, [], "call"]
    },
    RemoteDefNode: {
      "^": "RemoteNode;remotePath-285,listed-288,name-285,_listController-329,_subscribeController-330,profile-312,attributes-313,configs-313,children-314",
      static: {RemoteDefNode$: [function(path) {
          var t1 = new L.RemoteDefNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
          t1._getRawName$0();
          return t1;
        }, null, null, 2, 0, 12, 107, [], "new RemoteDefNode"]}
    },
    "+RemoteDefNode": [331],
    Request: {
      "^": "Object;requester<-299,rid<-296,data>-289,updater<-332,_requester$_isClosed@-288,streamStatus@-285",
      get$isClosed: [function() {
        return this._requester$_isClosed;
      }, null, null, 1, 0, 26, "isClosed"],
      resend$0: [function() {
        this.requester.addToSendList$1(this.data);
      }, "call$0", "get$resend", 0, 0, 6, "resend"],
      _update$1: [function(m) {
        var t1, updates, columns, error, t2;
        t1 = m.$index(0, "stream");
        if (typeof t1 === "string")
          this.streamStatus = m.$index(0, "stream");
        updates = !!J.getInterceptor(m.$index(0, "updates")).$isList ? m.$index(0, "updates") : null;
        columns = !!J.getInterceptor(m.$index(0, "columns")).$isList ? m.$index(0, "columns") : null;
        if (this.streamStatus === "closed")
          this.requester._requests.remove$1(0, this.rid);
        if (m.containsKey$1("error") && !!J.getInterceptor(m.$index(0, "error")).$isMap) {
          t1 = m.$index(0, "error");
          error = new O.DSError(null, null, null, null, null);
          t2 = t1.$index(0, "type");
          if (typeof t2 === "string")
            error.type = t1.$index(0, "type");
          t2 = t1.$index(0, "msg");
          if (typeof t2 === "string")
            error.msg = t1.$index(0, "msg");
          t2 = t1.$index(0, "path");
          if (typeof t2 === "string")
            error.path = t1.$index(0, "path");
          t2 = t1.$index(0, "phase");
          if (typeof t2 === "string")
            error.phase = t1.$index(0, "phase");
          t2 = t1.$index(0, "detail");
          if (typeof t2 === "string")
            error.detail = t1.$index(0, "detail");
        } else
          error = null;
        this.updater.onUpdate$4(this.streamStatus, updates, columns, error);
      }, "call$1", "get$_update", 2, 0, 72, 113, [], "_update"],
      _requester$_close$1: [function(error) {
        if (this.streamStatus !== "closed") {
          this.streamStatus = "closed";
          this.updater.onUpdate$4("closed", null, null, error);
        }
      }, function() {
        return this._requester$_close$1(null);
      }, "_requester$_close$0", "call$1", "call$0", "get$_requester$_close", 0, 2, 107, 25, 18, [], "_requester$_close"],
      close$0: [function(_) {
        this.requester.closeRequest$1(this);
      }, "call$0", "get$close", 0, 0, 6, "close"],
      static: {Request$: [function(requester, rid, updater, data) {
          return new L.Request(requester, rid, data, updater, false, "initialize");
        }, null, null, 8, 0, 233, 172, [], 173, [], 174, [], 43, [], "new Request"]}
    },
    "+Request": [0],
    RequesterInvokeUpdate: {
      "^": "RequesterUpdate;rawColumns@-311,columns@-319,updates@-311,error*-306,_rows*-320,streamStatus-285",
      get$rows: [function(_) {
        var t1, obj, t2, row, i, t3, column;
        if (this._rows == null) {
          this._rows = [];
          for (t1 = J.get$iterator$ax(this.updates); t1.moveNext$0();) {
            obj = t1.get$current();
            t2 = J.getInterceptor(obj);
            if (!!t2.$isList)
              if (t2.get$length(obj) < J.get$length$asx(this.columns)) {
                row = t2.toList$0(obj);
                for (i = t2.get$length(obj); i < J.get$length$asx(this.columns); ++i)
                  C.JSArray_methods.add$1(row, J.get$defaultValue$x(J.$index$asx(this.columns, i)));
              } else
                row = t2.get$length(obj) > J.get$length$asx(this.columns) ? t2.sublist$2(obj, 0, J.get$length$asx(this.columns)) : obj;
            else if (!!t2.$isMap) {
              row = [];
              for (t3 = J.get$iterator$ax(this.columns); t3.moveNext$0();) {
                column = t3.get$current();
                if (obj.containsKey$1(column.name))
                  row.push(t2.$index(obj, column.name));
                else
                  row.push(column.defaultValue);
              }
            } else
              row = null;
            J.add$1$ax(this._rows, row);
          }
        }
        return this._rows;
      }, null, null, 1, 0, 108, "rows"],
      static: {RequesterInvokeUpdate$: [function(updates, rawColumns, columns, streamStatus, error) {
          return new L.RequesterInvokeUpdate(rawColumns, columns, updates, error, null, streamStatus);
        }, null, null, 8, 2, 234, 25, 175, [], 176, [], 143, [], 177, [], 18, [], "new RequesterInvokeUpdate"]}
    },
    "+RequesterInvokeUpdate": [333],
    InvokeController: {
      "^": "Object;node<-331,requester<-299,_requester$_controller@-334,_requester$_stream@-335,_request@-336,_cachedColumns@-319",
      _onUnsubscribe$1: [function(obj) {
        var t1 = this._request;
        if (t1 != null && t1.streamStatus !== "closed")
          t1.requester.closeRequest$1(t1);
      }, "call$1", "get$_onUnsubscribe", 2, 0, 85, 137, [], "_onUnsubscribe"],
      _onNodeUpdate$1: [function(listUpdate) {
      }, "call$1", "get$_onNodeUpdate", 2, 0, 109, 184, [], "_onNodeUpdate"],
      onUpdate$4: [function(streamStatus, updates, columns, error) {
        var t1;
        if (columns != null)
          this._cachedColumns = O.TableColumn_parseColumns(columns);
        t1 = this._cachedColumns;
        if (t1 == null) {
          t1 = [];
          this._cachedColumns = t1;
        }
        if (error != null) {
          this._requester$_controller.add$1(0, new L.RequesterInvokeUpdate(null, null, null, error, null, "closed"));
          streamStatus = "closed";
        } else if (updates != null)
          this._requester$_controller.add$1(0, new L.RequesterInvokeUpdate(columns, t1, updates, null, null, streamStatus));
        if (streamStatus === "closed")
          this._requester$_controller.close$0(0);
      }, function(streamStatus, updates, columns) {
        return this.onUpdate$4(streamStatus, updates, columns, null);
      }, "onUpdate$3", "call$4", "call$3", "get$onUpdate", 6, 2, 110, 25, 177, [], 175, [], 143, [], 18, [], "onUpdate"],
      onDisconnect$0: [function(_) {
      }, "call$0", "get$onDisconnect", 0, 0, 6, "onDisconnect"],
      onReconnect$0: [function() {
      }, "call$0", "get$onReconnect", 0, 0, 6, "onReconnect"],
      static: {InvokeController_getNodeColumns: [function(node) {
          var columns = node.getConfig$1("$columns");
          if (!J.getInterceptor(columns).$isList && node.profile != null)
            columns = node.profile.getConfig$1("$columns");
          if (!!J.getInterceptor(columns).$isList)
            return O.TableColumn_parseColumns(columns);
          return;
        }, "call$1", "InvokeController_getNodeColumns$closure", 2, 0, 235, 158, [], "getNodeColumns"], InvokeController$: [function(node, requester, params, maxPermission) {
          var t1, t2, reqMap;
          t1 = new L.InvokeController(node, requester, null, null, null, null);
          t2 = P.StreamController_StreamController(null, null, null, null, false, L.RequesterInvokeUpdate);
          t1._requester$_controller = t2;
          t2.get$done().then$1(t1.get$_onUnsubscribe());
          t2 = t1._requester$_controller;
          t1._requester$_stream = t2.get$stream(t2);
          reqMap = P.LinkedHashMap__makeLiteral(["method", "invoke", "path", node.remotePath, "params", params]);
          if (maxPermission !== 3)
            reqMap.$indexSet(0, "permit", C.List_504[maxPermission]);
          t1._cachedColumns = L.InvokeController_getNodeColumns(node);
          t1._request = requester._sendRequest$2(reqMap, t1);
          return t1;
        }, null, null, 6, 2, 236, 178, 158, [], 172, [], 179, [], 180, [], "new InvokeController"]}
    },
    "+InvokeController": [0, 332],
    RequesterListUpdate: {
      "^": "RequesterUpdate;changes@-287,node@-331,streamStatus-285",
      static: {RequesterListUpdate$: [function(node, changes, streamStatus) {
          return new L.RequesterListUpdate(changes, node, streamStatus);
        }, null, null, 6, 0, 237, 158, [], 181, [], 177, [], "new RequesterListUpdate"]}
    },
    "+RequesterListUpdate": [333],
    ListDefListener: {
      "^": "Object;node<-331,requester<-299,listener@-310,ready@-288",
      cancel$0: [function() {
        this.listener.cancel$0();
      }, "call$0", "get$cancel", 0, 0, 6, "cancel"],
      ListDefListener$3: function(node, requester, callback) {
        this.listener = this.requester.list$1(0, this.node.remotePath).listen$1(new L.ListDefListener_closure(this, callback));
      },
      static: {ListDefListener$: [function(node, requester, callback) {
          var t1 = new L.ListDefListener(node, requester, null, false);
          t1.ListDefListener$3(node, requester, callback);
          return t1;
        }, null, null, 6, 0, 238, 158, [], 172, [], 38, [], "new ListDefListener"]}
    },
    "+ListDefListener": [0],
    ListDefListener_closure: {
      "^": "Closure:111;_requester$_captured_this_0,_requester$_captured_callback_1",
      call$1: [function(update) {
        this._requester$_captured_this_0.ready = update.streamStatus !== "initialize";
        this._requester$_captured_callback_1.call$1(update);
      }, null, null, 2, 0, 111, 116, [], "call"]
    },
    ListController: {
      "^": "Object;node<-331,requester<-299,_requester$_controller@-337,request*-336,disconnectTs@-285,changes@-338,_profileLoader@-339,_requester$_ready@-288,_pendingRemoveDef@-288",
      get$stream: [function(_) {
        return this._requester$_controller._stream;
      }, null, null, 1, 0, 112, "stream"],
      get$initialized: [function() {
        var t1 = this.request;
        return t1 != null && t1.streamStatus !== "initialize";
      }, null, null, 1, 0, 26, "initialized"],
      onDisconnect$0: [function(_) {
        var t1, t2, t3;
        t1 = O.ValueUpdate_getTs();
        this.disconnectTs = t1;
        t2 = this.node;
        t2.configs.$indexSet(0, "$disconnectedTs", t1);
        t1 = this._requester$_controller;
        t2 = new L.RequesterListUpdate(["$disconnectedTs"], t2, this.request.streamStatus);
        t3 = t1._utils$_controller;
        if (t3._state >= 4)
          H.throwExpression(t3._badEventState$0());
        t3._async$_add$1(t2);
        t1._stream.lastValue = t2;
      }, "call$0", "get$onDisconnect", 0, 0, 6, "onDisconnect"],
      onReconnect$0: [function() {
        if (this.disconnectTs != null) {
          this.node.configs.remove$1(0, "$disconnectedTs");
          this.disconnectTs = null;
          this.changes.add$1(0, "$disconnectedTs");
        }
      }, "call$0", "get$onReconnect", 0, 0, 6, "onReconnect"],
      onUpdate$4: [function(streamStatus, updates, columns, error) {
        var t1, t2, t3, reseted, update, t4, t5, $name, value, removed, t6, path, rslt;
        if (updates != null) {
          for (t1 = J.get$iterator$ax(updates), t2 = this.node, t3 = this.requester, reseted = false; t1.moveNext$0();) {
            update = t1.get$current();
            t4 = J.getInterceptor(update);
            if (!!t4.$isMap) {
              t5 = t4.$index(update, "name");
              if (typeof t5 === "string")
                $name = t4.$index(update, "name");
              else
                continue;
              if (J.$eq(t4.$index(update, "change"), "remove")) {
                value = null;
                removed = true;
              } else {
                value = t4.$index(update, "value");
                removed = false;
              }
            } else {
              if (!!t4.$isList) {
                if (t4.get$length(update) > 0) {
                  t5 = t4.$index(update, 0);
                  t5 = typeof t5 === "string";
                } else
                  t5 = false;
                if (t5) {
                  $name = t4.$index(update, 0);
                  value = t4.get$length(update) > 1 ? t4.$index(update, 1) : null;
                } else
                  continue;
              } else
                continue;
              removed = false;
            }
            if (J.getInterceptor$s($name).startsWith$1($name, "$")) {
              if (!reseted)
                if ($name !== "$is")
                  if ($name !== "$base")
                    t4 = $name === "$disconnectedTs" && typeof value === "string";
                  else
                    t4 = true;
                else
                  t4 = true;
              else
                t4 = false;
              if (t4) {
                t2.configs.clear$0(0);
                t2.attributes.clear$0(0);
                t2.children.clear$0(0);
                reseted = true;
              }
              if ($name === "$is")
                this.loadProfile$1(value);
              this.changes.add$1(0, $name);
              if (removed)
                t2.configs.remove$1(0, $name);
              else
                t2.configs.$indexSet(0, $name, value);
            } else {
              t4 = C.JSString_methods.startsWith$1($name, "@");
              t5 = this.changes;
              if (t4) {
                t5.add$1(0, $name);
                if (removed)
                  t2.attributes.remove$1(0, $name);
                else
                  t2.attributes.$indexSet(0, $name, value);
              } else {
                t5.add$1(0, $name);
                if (removed)
                  t2.children.remove$1(0, $name);
                else if (!!J.getInterceptor(value).$isMap) {
                  t4 = t2.children;
                  t5 = t3.nodeCache;
                  t5.toString;
                  t6 = t2.remotePath;
                  path = t6 === "/" ? "/" + $name : H.S(t6) + "/" + $name;
                  if (t5._nodes.containsKey$1(path)) {
                    rslt = t5._nodes.$index(0, path);
                    rslt.updateRemoteChildData$2(value, t5);
                  } else {
                    rslt = new L.RemoteNode(path, false, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
                    if (path === "/")
                      rslt.name = "/";
                    else
                      rslt.name = C.JSArray_methods.get$last(path.split("/"));
                    t5._nodes.$indexSet(0, path, rslt);
                    rslt.updateRemoteChildData$2(value, t5);
                  }
                  t4.$indexSet(0, $name, rslt);
                }
              }
            }
          }
          if (this.request.streamStatus !== "initialize")
            t2.listed = true;
          if (this._pendingRemoveDef)
            this._pendingRemoveDef = false;
          this.onProfileUpdated$0();
        }
      }, function(streamStatus, updates, columns) {
        return this.onUpdate$4(streamStatus, updates, columns, null);
      }, "onUpdate$3", "call$4", "call$3", "get$onUpdate", 6, 2, 110, 25, 177, [], 175, [], 143, [], 18, [], "onUpdate"],
      loadProfile$1: [function(defName) {
        var defPath, t1, t2, t3;
        this._requester$_ready = true;
        defPath = !J.startsWith$1$s(defName, "/") ? "/defs/profile/" + defName : defName;
        t1 = this.node;
        t2 = t1.profile;
        if (t2 instanceof L.RemoteNode && H.interceptedTypeCast(t2, "$isRemoteNode").remotePath === defPath)
          return;
        t2 = this.requester;
        t3 = t2.nodeCache.getDefNode$2(defPath, defName);
        t1.profile = t3;
        if (defName === "node")
          return;
        if (t3 instanceof L.RemoteNode && !H.interceptedTypeCast(t3, "$isRemoteNode").listed) {
          this._requester$_ready = false;
          this._profileLoader = L.ListDefListener$(t3, t2, this.get$_onProfileUpdate());
        }
      }, "call$1", "get$loadProfile", 2, 0, 37, 183, [], "loadProfile"],
      _onProfileUpdate$1: [function(update) {
        this.changes.addAll$1(0, J.where$1$ax(update.changes, new L.ListController__onProfileUpdate_closure()));
        this._requester$_ready = true;
        this.onProfileUpdated$0();
        Q.logger().log$4(C.Level_FINE_500, "_onDefUpdated", null, null);
      }, "call$1", "get$_onProfileUpdate", 2, 0, 109, 116, [], "_onProfileUpdate"],
      onProfileUpdated$0: [function() {
        var t1, t2, t3;
        if (this._requester$_ready) {
          if (this.request.streamStatus !== "initialize") {
            t1 = this._requester$_controller;
            t2 = new L.RequesterListUpdate(this.changes.toList$0(0), this.node, this.request.streamStatus);
            t3 = t1._utils$_controller;
            if (t3._state >= 4)
              H.throwExpression(t3._badEventState$0());
            t3._async$_add$1(t2);
            t1._stream.lastValue = t2;
            this.changes.clear$0(0);
          }
          if (this.request.streamStatus === "closed")
            this._requester$_controller._utils$_controller.close$0(0);
        }
      }, "call$0", "get$onProfileUpdated", 0, 0, 6, "onProfileUpdated"],
      _checkRemoveDef$0: [function() {
        this._pendingRemoveDef = false;
      }, "call$0", "get$_checkRemoveDef", 0, 0, 6, "_checkRemoveDef"],
      onStartListen$0: [function() {
        if (this.request == null)
          this.request = this.requester._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "list", "path", this.node.remotePath]), this);
      }, "call$0", "get$onStartListen", 0, 0, 6, "onStartListen"],
      _requester$_onListen$1: [function(callback) {
        if (this._requester$_ready && this.request != null) {
          if (!$.DsTimer__pending) {
            P.Timer_Timer(C.Duration_0, Q.DsTimer__dsLoop$closure());
            $.DsTimer__pending = true;
          }
          $.get$DsTimer__callbacks().push(new L.ListController__onListen_closure(this, callback));
        }
      }, "call$1", "get$_requester$_onListen", 2, 0, 113, 38, [], "_requester$_onListen"],
      _onAllCancel$0: [function() {
        var t1 = this._profileLoader;
        if (t1 != null) {
          t1.listener.cancel$0();
          this._profileLoader = null;
        }
        t1 = this.request;
        if (t1 != null) {
          this.requester.closeRequest$1(t1);
          this.request = null;
        }
        this._requester$_controller._utils$_controller.close$0(0);
        this.node._listController = null;
      }, "call$0", "get$_onAllCancel", 0, 0, 6, "_onAllCancel"],
      _destroy$0: [function() {
        var t1 = this._profileLoader;
        if (t1 != null) {
          t1.listener.cancel$0();
          this._profileLoader = null;
        }
        t1 = this.request;
        if (t1 != null) {
          this.requester.closeRequest$1(t1);
          this.request = null;
        }
        this._requester$_controller._utils$_controller.close$0(0);
        this.node._listController = null;
      }, "call$0", "get$_destroy", 0, 0, 6, "_destroy"],
      static: {"^": "ListController__ignoreProfileProps<-287", ListController$: [function(node, requester) {
          var t1 = new L.ListController(node, requester, null, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null, true, false);
          t1._requester$_controller = Q.BroadcastStreamController$(t1.get$onStartListen(), t1.get$_onAllCancel(), t1.get$_requester$_onListen(), L.RequesterListUpdate);
          return t1;
        }, null, null, 4, 0, 239, 158, [], 172, [], "new ListController"]}
    },
    "+ListController": [0, 332],
    ListController__onProfileUpdate_closure: {
      "^": "Closure:7;",
      call$1: [function(str) {
        return !C.JSArray_methods.contains$1(C.List_$is_$permission_$settings, str);
      }, null, null, 2, 0, 7, 159, [], "call"]
    },
    ListController__onListen_closure: {
      "^": "Closure:5;_requester$_captured_this_0,_requester$_captured_callback_1",
      call$0: [function() {
        var changes, t1, t2;
        changes = [];
        t1 = this._requester$_captured_this_0;
        t2 = t1.node;
        C.JSArray_methods.addAll$1(changes, t2.configs.get$keys());
        C.JSArray_methods.addAll$1(changes, t2.attributes.get$keys());
        C.JSArray_methods.addAll$1(changes, t2.children.get$keys());
        this._requester$_captured_callback_1.call$1(new L.RequesterListUpdate(changes, t2, t1.request.streamStatus));
      }, null, null, 0, 0, 5, "call"]
    },
    RemoveController: {
      "^": "Object;completer<-340,requester<-299,path>-285,_request@-336",
      get$future: [function() {
        return this.completer.get$future();
      }, null, null, 1, 0, 114, "future"],
      onUpdate$4: [function($status, updates, columns, error) {
        this.completer.complete$1(0, new L.RequesterUpdate($status));
      }, function($status, updates, columns) {
        return this.onUpdate$4($status, updates, columns, null);
      }, "onUpdate$3", "call$4", "call$3", "get$onUpdate", 6, 2, 110, 25, 148, [], 175, [], 143, [], 18, [], "onUpdate"],
      onDisconnect$0: [function(_) {
      }, "call$0", "get$onDisconnect", 0, 0, 6, "onDisconnect"],
      onReconnect$0: [function() {
      }, "call$0", "get$onReconnect", 0, 0, 6, "onReconnect"],
      static: {RemoveController$: [function(requester, path) {
          var t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [L.RequesterUpdate];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [L.RequesterUpdate];
          t1 = new L.RemoveController(t1, requester, path, null);
          t1._request = requester._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "remove", "path", path]), t1);
          return t1;
        }, null, null, 4, 0, 240, 172, [], 107, [], "new RemoveController"]}
    },
    "+RemoveController": [0, 332],
    SetController: {
      "^": "Object;completer<-340,requester<-299,path>-285,value>-0,_request@-336",
      get$future: [function() {
        return this.completer.get$future();
      }, null, null, 1, 0, 114, "future"],
      onUpdate$4: [function($status, updates, columns, error) {
        this.completer.complete$1(0, new L.RequesterUpdate($status));
      }, function($status, updates, columns) {
        return this.onUpdate$4($status, updates, columns, null);
      }, "onUpdate$3", "call$4", "call$3", "get$onUpdate", 6, 2, 110, 25, 148, [], 175, [], 143, [], 18, [], "onUpdate"],
      onDisconnect$0: [function(_) {
      }, "call$0", "get$onDisconnect", 0, 0, 6, "onDisconnect"],
      onReconnect$0: [function() {
      }, "call$0", "get$onReconnect", 0, 0, 6, "onReconnect"],
      static: {SetController$: [function(requester, path, value, maxPermission) {
          var t1, reqMap;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [L.RequesterUpdate];
          t1 = new P._AsyncCompleter(t1);
          t1.$builtinTypeInfo = [L.RequesterUpdate];
          t1 = new L.SetController(t1, requester, path, value, null);
          reqMap = P.LinkedHashMap__makeLiteral(["method", "set", "path", path, "value", value]);
          if (maxPermission !== 3)
            reqMap.$indexSet(0, "permit", C.List_504[maxPermission]);
          t1._request = requester._sendRequest$2(reqMap, t1);
          return t1;
        }, null, null, 6, 2, 241, 178, 172, [], 107, [], 26, [], 180, [], "new SetController"]}
    },
    "+SetController": [0, 332],
    ReqSubscribeListener: {
      "^": "Object;callback@-276,requester@-299,path*-285",
      cancel$0: [function() {
        var t1, t2, t3, cacheLevel, path, t4;
        t1 = this.callback;
        if (t1 != null) {
          t2 = this.requester;
          t3 = this.path;
          t2 = t2.nodeCache.getRemoteNode$1(t3)._subscribeController;
          if (t2 != null)
            if (t2.callbacks.containsKey$1(t1)) {
              cacheLevel = t2.callbacks.remove$1(0, t1);
              t1 = t2.callbacks;
              if (t1.get$isEmpty(t1)) {
                t1 = t2.requester._subsciption;
                t1.toString;
                t3 = t2.node;
                path = t3.remotePath;
                t4 = t1.subsriptions;
                if (t4.containsKey$1(path)) {
                  J.add$1$ax(t1.toRemove, t4.$index(0, path).get$sid());
                  t4.remove$1(0, path);
                  t1.subsriptionids.remove$1(0, t2.sid);
                  t1.requester.addProcessor$1(t1.get$_sendSubscriptionReuests());
                } else if (t1.subsriptionids.containsKey$1(t2.sid))
                  Q.logger().log$4(C.Level_SEVERE_1000, "unexpected remoteSubscription in the requester, sid: " + H.S(t2.sid), null, null);
                t2.callbacks.clear$0(0);
                t3._subscribeController = null;
              } else {
                t1 = t2.maxCache;
                if ((cacheLevel == null ? t1 == null : cacheLevel === t1) && t1 > 1)
                  t2.updateCacheLevel$0();
              }
            }
          this.callback = null;
        }
        return;
      }, "call$0", "get$cancel", 0, 0, 22, "cancel"],
      asFuture$1: [function(futureValue) {
        return;
      }, function() {
        return this.asFuture$1(null);
      }, "asFuture$0", "call$1", "call$0", "get$asFuture", 0, 2, 115, 25, 185, [], "asFuture"],
      get$isPaused: [function() {
        return false;
      }, null, null, 1, 0, 26, "isPaused"],
      onData$1: [function(handleData) {
      }, "call$1", "get$onData", 2, 0, 116, 186, [], "onData"],
      onDone$1: [function(handleDone) {
      }, "call$1", "get$onDone", 2, 0, 73, 187, [], "onDone"],
      onError$1: [function(_, handleError) {
      }, "call$1", "get$onError", 2, 0, 117, 188, [], "onError"],
      pause$1: [function(_, resumeSignal) {
      }, function($receiver) {
        return this.pause$1($receiver, null);
      }, "pause$0", "call$1", "call$0", "get$pause", 0, 2, 118, 25, 189, [], "pause"],
      resume$0: [function() {
      }, "call$0", "get$resume", 0, 0, 6, "resume"],
      callback$1: function(arg0) {
        return this.callback.call$1(arg0);
      },
      static: {ReqSubscribeListener$: [function(requester, path, callback) {
          return new L.ReqSubscribeListener(callback, requester, path);
        }, null, null, 6, 0, 242, 172, [], 107, [], 38, [], "new ReqSubscribeListener"]}
    },
    "+ReqSubscribeListener": [0, 310],
    SubscribeController: {
      "^": "Object;request*-341",
      onDisconnect$0: [function(_) {
      }, "call$0", "get$onDisconnect", 0, 0, 6, "onDisconnect"],
      onReconnect$0: [function() {
      }, "call$0", "get$onReconnect", 0, 0, 6, "onReconnect"],
      onUpdate$4: [function($status, updates, columns, error) {
      }, "call$4", "get$onUpdate", 8, 0, 119, 148, [], 175, [], 143, [], 18, [], "onUpdate"],
      static: {SubscribeController$: [function() {
          return new L.SubscribeController(null);
        }, null, null, 0, 0, 5, "new SubscribeController"]}
    },
    "+SubscribeController": [0, 332],
    SubscribeRequest: {
      "^": "Request;subsriptions<-342,subsriptionids<-343,_changedPaths@-344,toRemove@-311,requester-299,rid-296,data-289,updater-332,_requester$_isClosed-288,streamStatus-285",
      resend$0: [function() {
        this.requester.addProcessor$1(this.get$_sendSubscriptionReuests());
      }, "call$0", "get$resend", 0, 0, 6, "resend", 165],
      _requester$_close$1: [function(error) {
        var t1 = this.subsriptions;
        if (t1.get$isNotEmpty(t1))
          t1.forEach$1(0, new L.SubscribeRequest__close_closure(this));
      }, function() {
        return this._requester$_close$1(null);
      }, "_requester$_close$0", "call$1", "call$0", "get$_requester$_close", 0, 2, 107, 25, 18, [], "_requester$_close", 165],
      _update$1: [function(m) {
        var updates, t1, t2, t3, update, t4, t5, path, ts, sid, value, meta;
        updates = m.$index(0, "updates");
        t1 = J.getInterceptor(updates);
        if (!!t1.$isList)
          for (t1 = t1.get$iterator(updates), t2 = this.subsriptions, t3 = this.subsriptionids; t1.moveNext$0();) {
            update = t1.get$current();
            t4 = J.getInterceptor(update);
            if (!!t4.$isMap) {
              t5 = t4.$index(update, "ts");
              if (typeof t5 === "string") {
                path = t4.$index(update, "path");
                ts = t4.$index(update, "ts");
                t5 = t4.$index(update, "path");
                if (typeof t5 === "string") {
                  path = t4.$index(update, "path");
                  sid = -1;
                } else {
                  t5 = t4.$index(update, "sid");
                  if (typeof t5 === "number" && Math.floor(t5) === t5)
                    sid = t4.$index(update, "sid");
                  else
                    continue;
                }
              } else {
                path = null;
                sid = -1;
                ts = null;
              }
              value = t4.$index(update, "value");
              meta = update;
            } else {
              if (!!t4.$isList && t4.get$length(update) > 2) {
                t5 = t4.$index(update, 0);
                if (typeof t5 === "string") {
                  path = t4.$index(update, 0);
                  sid = -1;
                } else {
                  t5 = t4.$index(update, 0);
                  if (typeof t5 === "number" && Math.floor(t5) === t5)
                    sid = t4.$index(update, 0);
                  else
                    continue;
                  path = null;
                }
                value = t4.$index(update, 1);
                ts = t4.$index(update, 2);
              } else
                continue;
              meta = null;
            }
            if (path != null && t2.containsKey$1(path))
              t2.$index(0, path).addValue$1(O.ValueUpdate$(value, 1, 0 / 0, meta, 0 / 0, null, 0 / 0, ts));
            else if (sid > -1 && t3.containsKey$1(sid))
              t3.$index(0, sid).addValue$1(O.ValueUpdate$(value, 1, 0 / 0, meta, 0 / 0, null, 0 / 0, ts));
          }
      }, "call$1", "get$_update", 2, 0, 72, 113, [], "_update", 165],
      addSubscription$2: [function(controller, level) {
        var path = controller.node.remotePath;
        this.subsriptions.$indexSet(0, path, controller);
        this.subsriptionids.$indexSet(0, controller.sid, controller);
        this.requester.addProcessor$1(this.get$_sendSubscriptionReuests());
        this._changedPaths.add$1(0, path);
      }, "call$2", "get$addSubscription", 4, 0, 120, 190, [], 191, [], "addSubscription"],
      removeSubscription$1: [function(controller) {
        var path, t1;
        path = controller.node.remotePath;
        t1 = this.subsriptions;
        if (t1.containsKey$1(path)) {
          J.add$1$ax(this.toRemove, t1.$index(0, path).get$sid());
          t1.remove$1(0, path);
          this.subsriptionids.remove$1(0, controller.sid);
          this.requester.addProcessor$1(this.get$_sendSubscriptionReuests());
        } else if (this.subsriptionids.containsKey$1(controller.sid))
          Q.logger().log$4(C.Level_SEVERE_1000, "unexpected remoteSubscription in the requester, sid: " + H.S(controller.sid), null, null);
      }, "call$1", "get$removeSubscription", 2, 0, 121, 190, [], "removeSubscription"],
      _sendSubscriptionReuests$0: [function() {
        var t1, toAdd, processingPaths, t2, t3, path, sub, m, t4;
        t1 = this.requester;
        if (t1._conn == null)
          return;
        toAdd = [];
        processingPaths = this._changedPaths;
        this._changedPaths = P.HashSet_HashSet(null, null, null, P.String);
        for (t2 = processingPaths.get$iterator(processingPaths), t3 = this.subsriptions; t2.moveNext$0();) {
          path = t2.get$current();
          if (t3.containsKey$1(path)) {
            sub = t3.$index(0, path);
            m = P.LinkedHashMap__makeLiteral(["path", path, "sid", sub.sid]);
            t4 = sub.maxCache;
            if (t4 > 1)
              m.$indexSet(0, "cache", t4);
            toAdd.push(m);
          }
        }
        if (toAdd.length !== 0)
          t1._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "subscribe", "paths", toAdd]), null);
        if (!J.get$isEmpty$asx(this.toRemove)) {
          t1._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "unsubscribe", "sids", this.toRemove]), null);
          this.toRemove = [];
        }
      }, "call$0", "get$_sendSubscriptionReuests", 0, 0, 6, "_sendSubscriptionReuests"],
      SubscribeRequest$2: function(requester, rid) {
        H.interceptedTypeCast(this.updater, "$isSubscribeController").request = this;
      },
      static: {SubscribeRequest$: [function(requester, rid) {
          var t1 = new L.SubscribeRequest(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.ReqSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.ReqSubscribeController), P.HashSet_HashSet(null, null, null, P.String), [], requester, rid, null, new L.SubscribeController(null), false, "initialize");
          t1.SubscribeRequest$2(requester, rid);
          return t1;
        }, null, null, 4, 0, 243, 172, [], 173, [], "new SubscribeRequest"]}
    },
    "+SubscribeRequest": [336],
    SubscribeRequest__close_closure: {
      "^": "Closure:122;_requester$_captured_this_0",
      call$2: [function(path, controller) {
        this._requester$_captured_this_0._changedPaths.add$1(0, path);
      }, null, null, 4, 0, 122, 107, [], 190, [], "call"]
    },
    ReqSubscribeController: {
      "^": "Object;node<-331,requester<-299,callbacks@-345,maxCache@-296,sid@-296,_lastUpdate@-346",
      listen$2: [function(callback, cacheLevel) {
        var t1, t2;
        if (cacheLevel < 1)
          cacheLevel = 1;
        if (cacheLevel > 1000000)
          cacheLevel = 1000000;
        if (cacheLevel > this.maxCache) {
          this.maxCache = cacheLevel;
          this.requester._subsciption.addSubscription$2(this, cacheLevel);
        }
        if (this.callbacks.containsKey$1(callback)) {
          t1 = J.$eq(this.callbacks.$index(0, callback), this.maxCache) && cacheLevel < this.maxCache;
          t2 = this.callbacks;
          if (t1) {
            t2.$indexSet(0, callback, cacheLevel);
            this.updateCacheLevel$0();
          } else
            t2.$indexSet(0, callback, cacheLevel);
        } else {
          this.callbacks.$indexSet(0, callback, cacheLevel);
          t1 = this._lastUpdate;
          if (t1 != null)
            callback.call$1(t1);
        }
      }, "call$2", "get$listen", 4, 0, 123, 38, [], 112, [], "listen"],
      unlisten$1: [function(callback) {
        var cacheLevel, t1, t2, path, t3;
        if (this.callbacks.containsKey$1(callback)) {
          cacheLevel = this.callbacks.remove$1(0, callback);
          t1 = this.callbacks;
          if (t1.get$isEmpty(t1)) {
            t1 = this.requester._subsciption;
            t1.toString;
            t2 = this.node;
            path = t2.remotePath;
            t3 = t1.subsriptions;
            if (t3.containsKey$1(path)) {
              J.add$1$ax(t1.toRemove, t3.$index(0, path).get$sid());
              t3.remove$1(0, path);
              t1.subsriptionids.remove$1(0, this.sid);
              t1.requester.addProcessor$1(t1.get$_sendSubscriptionReuests());
            } else if (t1.subsriptionids.containsKey$1(this.sid))
              Q.logger().log$4(C.Level_SEVERE_1000, "unexpected remoteSubscription in the requester, sid: " + H.S(this.sid), null, null);
            this.callbacks.clear$0(0);
            t2._subscribeController = null;
          } else {
            t1 = this.maxCache;
            if ((cacheLevel == null ? t1 == null : cacheLevel === t1) && t1 > 1)
              this.updateCacheLevel$0();
          }
        }
      }, "call$1", "get$unlisten", 2, 0, 113, 38, [], "unlisten"],
      updateCacheLevel$0: [function() {
        var t1, t2;
        t1 = {};
        t1._captured_maxCacheLevel_0 = 1;
        this.callbacks.forEach$1(0, new L.ReqSubscribeController_updateCacheLevel_closure(t1));
        t1 = t1._captured_maxCacheLevel_0;
        t2 = this.maxCache;
        if (t1 == null ? t2 != null : t1 !== t2) {
          this.maxCache = t1;
          this.requester._subsciption.addSubscription$2(this, t1);
        }
      }, "call$0", "get$updateCacheLevel", 0, 0, 6, "updateCacheLevel"],
      addValue$1: [function(update) {
        var t1, t2, _i;
        this._lastUpdate = update;
        for (t1 = J.toList$0$ax(this.callbacks.get$keys()), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].call$1(this._lastUpdate);
      }, "call$1", "get$addValue", 2, 0, 124, 116, [], "addValue"],
      _destroy$0: [function() {
        var t1, t2, path, t3;
        t1 = this.requester._subsciption;
        t1.toString;
        t2 = this.node;
        path = t2.remotePath;
        t3 = t1.subsriptions;
        if (t3.containsKey$1(path)) {
          J.add$1$ax(t1.toRemove, t3.$index(0, path).get$sid());
          t3.remove$1(0, path);
          t1.subsriptionids.remove$1(0, this.sid);
          t1.requester.addProcessor$1(t1.get$_sendSubscriptionReuests());
        } else if (t1.subsriptionids.containsKey$1(this.sid))
          Q.logger().log$4(C.Level_SEVERE_1000, "unexpected remoteSubscription in the requester, sid: " + H.S(this.sid), null, null);
        this.callbacks.clear$0(0);
        t2._subscribeController = null;
      }, "call$0", "get$_destroy", 0, 0, 6, "_destroy"],
      static: {ReqSubscribeController$: [function(node, requester) {
          var t1, t2;
          t1 = new L.ReqSubscribeController(node, requester, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), 0, null, null);
          t2 = requester.nextSid;
          requester.nextSid = t2 + 1;
          t1.sid = t2;
          return t1;
        }, null, null, 4, 0, 239, 158, [], 172, [], "new ReqSubscribeController"]}
    },
    "+ReqSubscribeController": [0],
    ReqSubscribeController_updateCacheLevel_closure: {
      "^": "Closure:14;_requester$_box_0",
      call$2: [function(callback, level) {
        var t1 = this._requester$_box_0;
        if (J.$gt$n(level, t1._captured_maxCacheLevel_0))
          t1._captured_maxCacheLevel_0 = level;
      }, null, null, 4, 0, 14, 38, [], 191, [], "call"]
    },
    RequestUpdater: {
      "^": "Object;",
      static: {RequestUpdater$: [function() {
          return new L.RequestUpdater();
        }, null, null, 0, 0, 244, "new RequestUpdater"]}
    },
    "+RequestUpdater": [0],
    RequesterUpdate: {
      "^": "Object;streamStatus<-285",
      static: {RequesterUpdate$: [function(streamStatus) {
          return new L.RequesterUpdate(streamStatus);
        }, null, null, 2, 0, 12, 177, [], "new RequesterUpdate"]}
    },
    "+RequesterUpdate": [0],
    Requester: {
      "^": "ConnectionHandler;_requests@-347,nodeCache<-348,_subsciption@-341,nextRid@-296,nextSid@-296,lastSentId@-296,_connected@-288,_conn-309,_connListener-310,_beforeSendListener-310,_toSendList-311,_processors-308,_pendingSend-288",
      onData$1: [function(list) {
        var t1, resp, t2, t3;
        for (t1 = J.get$iterator$ax(list); t1.moveNext$0();) {
          resp = t1.get$current();
          t2 = J.getInterceptor(resp);
          if (!!t2.$isMap) {
            t3 = t2.$index(resp, "rid");
            if (typeof t3 === "number" && Math.floor(t3) === t3 && this._requests.containsKey$1(t2.$index(resp, "rid")))
              this._requests.$index(0, t2.$index(resp, "rid"))._update$1(resp);
          }
        }
      }, "call$1", "get$onData", 2, 0, 81, 142, [], "onData"],
      _onReceiveUpdate$1: [function(m) {
        var t1 = m.$index(0, "rid");
        if (typeof t1 === "number" && Math.floor(t1) === t1 && this._requests.containsKey$1(m.$index(0, "rid")))
          this._requests.$index(0, m.$index(0, "rid"))._update$1(m);
      }, "call$1", "get$_onReceiveUpdate", 2, 0, 72, 113, [], "_onReceiveUpdate"],
      doSend$0: [function() {
        var rslt = this.super$ConnectionHandler$doSend$0();
        this.lastSentId = this.nextRid - 1;
        return rslt;
      }, "call$0", "get$doSend", 0, 0, 74, "doSend"],
      _sendRequest$2: [function(m, updater) {
        var t1, req;
        m.$indexSet(0, "rid", this.nextRid);
        if (updater != null) {
          t1 = this.nextRid;
          req = new L.Request(this, t1, m, updater, false, "initialize");
          this._requests.$indexSet(0, t1, req);
        } else
          req = null;
        this.addToSendList$1(m);
        this.nextRid = this.nextRid + 1;
        return req;
      }, "call$2", "get$_sendRequest", 4, 0, 125, 113, [], 174, [], "_sendRequest"],
      subscribe$3: [function(path, callback, cacheLevel) {
        var node, t1, t2;
        node = this.nodeCache.getRemoteNode$1(path);
        t1 = node._subscribeController;
        if (t1 == null) {
          t1 = new L.ReqSubscribeController(node, this, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), 0, null, null);
          t2 = this.nextSid;
          this.nextSid = t2 + 1;
          t1.sid = t2;
          node._subscribeController = t1;
        }
        t1.toString;
        if (cacheLevel < 1)
          cacheLevel = 1;
        if (cacheLevel > 1000000)
          cacheLevel = 1000000;
        if (cacheLevel > t1.maxCache) {
          t1.maxCache = cacheLevel;
          t1.requester._subsciption.addSubscription$2(t1, cacheLevel);
        }
        if (t1.callbacks.containsKey$1(callback))
          if (J.$eq(t1.callbacks.$index(0, callback), t1.maxCache) && cacheLevel < t1.maxCache) {
            t1.callbacks.$indexSet(0, callback, cacheLevel);
            t1.updateCacheLevel$0();
          } else
            t1.callbacks.$indexSet(0, callback, cacheLevel);
        else {
          t1.callbacks.$indexSet(0, callback, cacheLevel);
          t1 = t1._lastUpdate;
          if (t1 != null)
            callback.call$1(t1);
        }
        return new L.ReqSubscribeListener(callback, this, path);
      }, function(path, callback) {
        return this.subscribe$3(path, callback, 1);
      }, "subscribe$2", "call$3", "call$2", "get$subscribe", 4, 2, 126, 111, 107, [], 38, [], 112, [], "subscribe"],
      unsubscribe$2: [function(path, callback) {
        var t1, cacheLevel, t2, t3, t4;
        t1 = this.nodeCache.getRemoteNode$1(path)._subscribeController;
        if (t1 != null)
          if (t1.callbacks.containsKey$1(callback)) {
            cacheLevel = t1.callbacks.remove$1(0, callback);
            t2 = t1.callbacks;
            if (t2.get$isEmpty(t2)) {
              t2 = t1.requester._subsciption;
              t2.toString;
              t3 = t1.node;
              path = t3.remotePath;
              t4 = t2.subsriptions;
              if (t4.containsKey$1(path)) {
                J.add$1$ax(t2.toRemove, t4.$index(0, path).get$sid());
                t4.remove$1(0, path);
                t2.subsriptionids.remove$1(0, t1.sid);
                t2.requester.addProcessor$1(t2.get$_sendSubscriptionReuests());
              } else if (t2.subsriptionids.containsKey$1(t1.sid))
                Q.logger().log$4(C.Level_SEVERE_1000, "unexpected remoteSubscription in the requester, sid: " + H.S(t1.sid), null, null);
              t1.callbacks.clear$0(0);
              t3._subscribeController = null;
            } else {
              t2 = t1.maxCache;
              if ((cacheLevel == null ? t2 == null : cacheLevel === t2) && t2 > 1)
                t1.updateCacheLevel$0();
            }
          }
      }, "call$2", "get$unsubscribe", 4, 0, 127, 107, [], 38, [], "unsubscribe"],
      list$1: [function(_, path) {
        var node, t1;
        node = this.nodeCache.getRemoteNode$1(path);
        t1 = node._listController;
        if (t1 == null) {
          t1 = new L.ListController(node, this, null, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), null, true, false);
          t1._requester$_controller = Q.BroadcastStreamController$(t1.get$onStartListen(), t1.get$_onAllCancel(), t1.get$_requester$_onListen(), L.RequesterListUpdate);
          node._listController = t1;
        }
        return t1._requester$_controller._stream;
      }, "call$1", "get$list", 2, 0, 128, 107, [], "list"],
      invoke$3: [function(path, params, maxPermission) {
        var node, t1, t2, reqMap;
        node = this.nodeCache.getRemoteNode$1(path);
        node.toString;
        t1 = new L.InvokeController(node, this, null, null, null, null);
        t2 = P.StreamController_StreamController(null, null, null, null, false, L.RequesterInvokeUpdate);
        t1._requester$_controller = t2;
        t2.get$done().then$1(t1.get$_onUnsubscribe());
        t2 = t1._requester$_controller;
        t1._requester$_stream = t2.get$stream(t2);
        reqMap = P.LinkedHashMap__makeLiteral(["method", "invoke", "path", node.remotePath, "params", params]);
        if (maxPermission !== 3)
          reqMap.$indexSet(0, "permit", C.List_504[maxPermission]);
        t1._cachedColumns = L.InvokeController_getNodeColumns(node);
        t1._request = this._sendRequest$2(reqMap, t1);
        return t1._requester$_stream;
      }, function(path, params) {
        return this.invoke$3(path, params, 3);
      }, "invoke$2", "call$3", "call$2", "get$invoke", 4, 2, 129, 178, 107, [], 179, [], 180, [], "invoke"],
      $set$3: [function(path, value, maxPermission) {
        var t1, t2, reqMap;
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [L.RequesterUpdate];
        t1 = new P._AsyncCompleter(t1);
        t1.$builtinTypeInfo = [L.RequesterUpdate];
        t2 = new L.SetController(t1, this, path, value, null);
        reqMap = P.LinkedHashMap__makeLiteral(["method", "set", "path", path, "value", value]);
        if (maxPermission !== 3)
          reqMap.$indexSet(0, "permit", C.List_504[maxPermission]);
        t2._request = this._sendRequest$2(reqMap, t2);
        return t1.future;
      }, function(path, value) {
        return this.$set$3(path, value, 3);
      }, "$set$2", "call$3", "call$2", "get$set", 4, 2, 130, 178, 107, [], 26, [], 180, [], "set"],
      remove$1: [function(_, path) {
        var t1, t2;
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [L.RequesterUpdate];
        t1 = new P._AsyncCompleter(t1);
        t1.$builtinTypeInfo = [L.RequesterUpdate];
        t2 = new L.RemoveController(t1, this, path, null);
        t2._request = this._sendRequest$2(P.LinkedHashMap__makeLiteral(["method", "remove", "path", path]), t2);
        return t1.future;
      }, "call$1", "get$remove", 2, 0, 131, 107, [], "remove"],
      closeRequest$1: [function(request) {
        var t1, t2;
        t1 = this._requests;
        t2 = request.rid;
        if (t1.containsKey$1(t2)) {
          if (request.streamStatus !== "closed")
            this.addToSendList$1(P.LinkedHashMap__makeLiteral(["method", "close", "rid", t2]));
          this._requests.remove$1(0, t2);
          request._requester$_close$0();
        }
      }, "call$1", "get$closeRequest", 2, 0, 132, 120, [], "closeRequest"],
      onDisconnected$0: [function() {
        if (!this._connected)
          return;
        this._connected = false;
        var newRequests = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.Request);
        newRequests.$indexSet(0, 0, this._subsciption);
        this._requests.forEach$1(0, new L.Requester_onDisconnected_closure(this, newRequests));
        this._requests = newRequests;
      }, "call$0", "get$onDisconnected", 0, 0, 6, "onDisconnected"],
      onReconnected$0: [function() {
        if (this._connected)
          return;
        this._connected = true;
        this.super$ConnectionHandler$onReconnected$0();
        this._requests.forEach$1(0, new L.Requester_onReconnected_closure());
      }, "call$0", "get$onReconnected", 0, 0, 6, "onReconnected"],
      static: {Requester$: [function(cache) {
          var t1, t2;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, L.Request);
          t2 = cache != null ? cache : new L.RemoteNodeCache(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.RemoteNode));
          t2 = new L.Requester(t1, t2, null, 1, 1, 0, false, null, null, null, [], [], false);
          t1 = L.SubscribeRequest$(t2, 0);
          t2._subsciption = t1;
          t2._requests.$indexSet(0, 0, t1);
          return t2;
        }, null, null, 0, 2, 245, 25, 182, [], "new Requester"]}
    },
    "+Requester": [349],
    Requester_onDisconnected_closure: {
      "^": "Closure:14;_requester$_captured_this_0,_captured_newRequests_1",
      call$2: [function(n, req) {
        if (req.get$rid() <= this._requester$_captured_this_0.lastSentId && !(req.get$updater() instanceof L.ListController))
          req._requester$_close$1($.get$DSError_DISCONNECTED());
        else {
          this._captured_newRequests_1.$indexSet(0, req.get$rid(), req);
          req.get$updater().onDisconnect$0(0);
        }
      }, null, null, 4, 0, 14, 160, [], 192, [], "call"]
    },
    Requester_onReconnected_closure: {
      "^": "Closure:14;",
      call$2: [function(n, req) {
        req.get$updater().onReconnect$0();
        req.resend$0();
      }, null, null, 4, 0, 14, 160, [], 192, [], "call"]
    }
  }], ["dslink.responder", "package:dslink/responder.dart",, T, {
    "^": "",
    ConfigSetting: {
      "^": "Object;name>-285,type>-285,defaultValue>-0",
      setConfig$3: [function(value, node, responder) {
        var t1, t2, t3;
        t1 = this.name;
        if (!J.$eq(node.configs.$index(0, t1), value)) {
          node.configs.$indexSet(0, t1, value);
          t2 = node.get$listChangeController();
          t3 = t2._utils$_controller;
          if (t3._state >= 4)
            H.throwExpression(t3._badEventState$0());
          t3._async$_add$1(t1);
          t2._stream.lastValue = t1;
        }
        return;
      }, "call$3", "get$setConfig", 6, 0, 133, 26, [], 158, [], 163, [], "setConfig"],
      removeConfig$2: [function(node, responder) {
        var t1, t2, t3;
        t1 = this.name;
        if (node.configs.containsKey$1(t1)) {
          node.configs.remove$1(0, t1);
          t2 = node.get$listChangeController();
          t3 = t2._utils$_controller;
          if (t3._state >= 4)
            H.throwExpression(t3._badEventState$0());
          t3._async$_add$1(t1);
          t2._stream.lastValue = t1;
        }
        return;
      }, "call$2", "get$removeConfig", 4, 0, 134, 158, [], 163, [], "removeConfig"],
      static: {ConfigSetting$: [function($name, type, defaultValue) {
          return new T.ConfigSetting($name, type, defaultValue);
        }, null, null, 4, 3, 246, 25, 124, [], 129, [], 141, [], "new ConfigSetting"], ConfigSetting$fromMap: [function($name, m) {
          var t1 = m.containsKey$1("type") ? m.$index(0, "type") : "string";
          return new T.ConfigSetting($name, t1, m.containsKey$1("default") ? m.$index(0, "default") : null);
        }, null, null, 4, 0, 96, 124, [], 113, [], "new ConfigSetting$fromMap"]}
    },
    "+ConfigSetting": [0],
    Configs: {
      "^": "Object;configs@-350",
      load$1: [function(_, inputs) {
        inputs.forEach$1(0, new T.Configs_load_closure(this));
      }, "call$1", "get$load", 2, 0, 72, 197, [], "load"],
      static: {"^": "Configs__globalConfigs<-289,Configs_global<-351,Configs_defaultConfig<-352", Configs$: [function() {
          return new T.Configs(P.LinkedHashMap__makeEmpty());
        }, null, null, 0, 0, 247, "new Configs"], Configs_getConfig: [function($name, profile) {
          var t1 = $.get$Configs_global();
          if (t1.configs.containsKey$1($name))
            return t1.configs.$index(0, $name);
          if (profile instanceof T.DefinitionNode && profile.configs.containsKey$1($name))
            return profile.configs.$index(0, $name);
          return $.get$Configs_defaultConfig();
        }, "call$2", "Configs_getConfig$closure", 4, 0, 248, 124, [], 193, [], "getConfig"]}
    },
    "+Configs": [0],
    Configs_load_closure: {
      "^": "Closure:14;_responder$_captured_this_0",
      call$2: [function($name, m) {
        if (!!J.getInterceptor(m).$isMap)
          this._responder$_captured_this_0.configs.$indexSet(0, $name, T.ConfigSetting$fromMap($name, m));
      }, null, null, 4, 0, 14, 124, [], 113, [], "call"]
    },
    DefinitionNode: {
      "^": "LocalNodeImpl;_invokeCallback@-353,parentNode-354,_loaded-288,_listChangeController-355,_listReqListener-310,path-285,callbacks-345,_lastValueUpdate-346,profile-312,attributes-313,configs-313,children-314",
      setInvokeCallback$1: [function(callback) {
        this._invokeCallback = callback;
      }, "call$1", "get$setInvokeCallback", 2, 0, 135, 38, [], "setInvokeCallback"],
      invoke$5: [function(params, responder, response, parentNode, maxPermission) {
        var permission;
        if (this._invokeCallback == null) {
          response.close$1(0, $.get$DSError_NOT_IMPLEMENTED());
          return response;
        }
        permission = responder.nodeProvider.get$permissions().getPermission$2(parentNode.path, responder);
        if (maxPermission < permission)
          permission = maxPermission;
        if (O.Permission_parse(this.getConfig$1("$invokable"), 4) <= permission) {
          this._invokeCallback$4(params, responder, response, parentNode);
          return response;
        } else {
          response.close$1(0, $.get$DSError_PERMISSION_DENIED());
          return response;
        }
      }, function(params, responder, response, parentNode) {
        return this.invoke$5(params, responder, response, parentNode, 3);
      }, "invoke$4", "call$5", "call$4", "get$invoke", 8, 2, 136, 178, 179, [], 163, [], 118, [], 198, [], 180, [], "invoke"],
      _invokeCallback$4: function(arg0, arg1, arg2, arg3) {
        return this._invokeCallback.call$4(arg0, arg1, arg2, arg3);
      },
      static: {DefinitionNode$: [function(path) {
          var t1, t2, t3, t4;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int);
          t2 = P.LinkedHashMap__makeEmpty();
          t3 = P.LinkedHashMap__makeLiteral(["$is", "node"]);
          t4 = P.LinkedHashMap__makeEmpty();
          t3.$indexSet(0, "$is", "static");
          return new T.DefinitionNode(null, null, false, null, null, path, t1, null, null, t2, t3, t4);
        }, null, null, 2, 0, 12, 107, [], "new DefinitionNode"]}
    },
    "+DefinitionNode": [356],
    RootNode: {
      "^": "LocalNodeImpl;_loaded:RootNode__loaded@-288,parentNode-354,_loaded-288,_listChangeController-355,_listReqListener-310,path-285,callbacks-345,_lastValueUpdate-346,profile-312,attributes-313,configs-313,children-314",
      load$2: [function(_, m, provider) {
        if (this.RootNode__loaded)
          throw H.wrapException("root node can not be initialized twice");
        m.forEach$1(0, new T.RootNode_load_closure(this, provider));
      }, "call$2", "get$load", 4, 0, 137, 113, [], 91, [], "load"],
      static: {RootNode$: [function(path) {
          return new T.RootNode(false, null, false, null, null, path, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 2, 0, 12, 107, [], "new RootNode"]}
    },
    "+RootNode": [356],
    RootNode_load_closure: {
      "^": "Closure:9;_responder$_captured_this_0,_captured_provider_1",
      call$2: [function(key, value) {
        var t1, node, t2;
        if (J.getInterceptor$s(key).startsWith$1(key, "$"))
          this._responder$_captured_this_0.configs.$indexSet(0, key, value);
        else if (C.JSString_methods.startsWith$1(key, "@"))
          this._responder$_captured_this_0.attributes.$indexSet(0, key, value);
        else if (!!J.getInterceptor(value).$isMap) {
          t1 = "/" + key;
          node = new T.LocalNodeImpl(null, false, null, null, t1, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
          t2 = this._captured_provider_1;
          node.load$2(0, value, t2);
          t2.get$nodes(t2).$indexSet(0, t1, node);
          this._responder$_captured_this_0.children.$indexSet(0, key, node);
        }
      }, null, null, 4, 0, 9, 65, [], 26, [], "call"]
    },
    NodeProviderImpl: {
      "^": "NodeProvider;",
      static: {NodeProviderImpl$: [function() {
          return new T.NodeProviderImpl();
        }, null, null, 0, 0, 249, "new NodeProviderImpl"]}
    },
    "+NodeProviderImpl": [283],
    LocalNodeImpl: {
      "^": "LocalNode;parentNode*-354,_loaded@-288,_listChangeController-355,_listReqListener-310,path-285,callbacks-345,_lastValueUpdate-346,profile-312,attributes-313,configs-313,children-314",
      serialize$1: [function(withChildren) {
        var rslt = P.LinkedHashMap__makeEmpty();
        this.configs.forEach$1(0, new T.LocalNodeImpl_serialize_closure(rslt));
        this.attributes.forEach$1(0, new T.LocalNodeImpl_serialize_closure0(rslt));
        this.children.forEach$1(0, new T.LocalNodeImpl_serialize_closure1(withChildren, rslt));
        return rslt;
      }, "call$1", "get$serialize", 2, 0, 138, 199, [], "serialize"],
      get$loaded: [function(_) {
        return this.get$_loaded();
      }, null, null, 1, 0, 26, "loaded"],
      load$2: [function(_, m, provider) {
        var t1, t2;
        t1 = {};
        if (this.get$_loaded()) {
          this.configs.clear$0(0);
          this.attributes.clear$0(0);
          this.children.clear$0(0);
        }
        t1._captured_childPathPre_0 = null;
        t2 = this.path;
        if (t2 === "/")
          t1._captured_childPathPre_0 = "/";
        else
          t1._captured_childPathPre_0 = H.S(t2) + "/";
        m.forEach$1(0, new T.LocalNodeImpl_load_closure(t1, this, provider));
        this.set$_loaded(true);
      }, "call$2", "get$load", 4, 0, 137, 113, [], 91, [], "load"],
      updateList$1: [function($name) {
        var t1, t2;
        t1 = this.get$listChangeController();
        t2 = t1._utils$_controller;
        if (t2._state >= 4)
          H.throwExpression(t2._badEventState$0());
        t2._async$_add$1($name);
        t1._stream.lastValue = $name;
      }, "call$1", "get$updateList", 2, 0, 37, 124, [], "updateList"],
      setAttribute$4: [function(_, $name, value, responder, response) {
        var t1, t2;
        if (!this.attributes.containsKey$1($name) || !J.$eq(this.attributes.$index(0, $name), value)) {
          this.attributes.$indexSet(0, $name, value);
          t1 = this.get$listChangeController();
          t2 = t1._utils$_controller;
          if (t2._state >= 4)
            H.throwExpression(t2._badEventState$0());
          t2._async$_add$1($name);
          t1._stream.lastValue = $name;
        }
        response.close$0(0);
        return response;
      }, "call$4", "get$setAttribute", 8, 0, 139, 124, [], 26, [], 163, [], 118, [], "setAttribute"],
      removeAttribute$3: [function($name, responder, response) {
        var t1, t2;
        if (this.attributes.containsKey$1($name)) {
          this.attributes.remove$1(0, $name);
          t1 = this.get$listChangeController();
          t2 = t1._utils$_controller;
          if (t2._state >= 4)
            H.throwExpression(t2._badEventState$0());
          t2._async$_add$1($name);
          t1._stream.lastValue = $name;
        }
        response.close$0(0);
        return response;
      }, "call$3", "get$removeAttribute", 6, 0, 140, 124, [], 163, [], 118, [], "removeAttribute"],
      setConfig$4: [function($name, value, responder, response) {
        var config, t1, t2, t3;
        config = T.Configs_getConfig($name, this.profile);
        t1 = this.configs;
        t2 = config.name;
        if (!J.$eq(t1.$index(0, t2), value)) {
          this.configs.$indexSet(0, t2, value);
          t1 = this.get$listChangeController();
          t3 = t1._utils$_controller;
          if (t3._state >= 4)
            H.throwExpression(t3._badEventState$0());
          t3._async$_add$1(t2);
          t1._stream.lastValue = t2;
        }
        response.close$1(0, null);
        return response;
      }, "call$4", "get$setConfig", 8, 0, 139, 124, [], 26, [], 163, [], 118, [], "setConfig"],
      removeConfig$3: [function($name, responder, response) {
        var config, t1, t2, t3;
        config = T.Configs_getConfig($name, this.profile);
        t1 = this.configs;
        t2 = config.name;
        if (t1.containsKey$1(t2)) {
          this.configs.remove$1(0, t2);
          t1 = this.get$listChangeController();
          t3 = t1._utils$_controller;
          if (t3._state >= 4)
            H.throwExpression(t3._badEventState$0());
          t3._async$_add$1(t2);
          t1._stream.lastValue = t2;
        }
        response.close$1(0, null);
        return response;
      }, "call$3", "get$removeConfig", 6, 0, 140, 124, [], 163, [], 118, [], "removeConfig"],
      setValue$4: [function(value, responder, response, maxPermission) {
        this.updateValue$1(value);
        response.close$0(0);
        return response;
      }, function(value, responder, response) {
        return this.setValue$4(value, responder, response, 3);
      }, "setValue$3", "call$4", "call$3", "get$setValue", 6, 2, 141, 178, 26, [], 163, [], 118, [], 180, [], "setValue"],
      static: {LocalNodeImpl$: [function(path) {
          return new T.LocalNodeImpl(null, false, null, null, path, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 2, 0, 12, 107, [], "new LocalNodeImpl"]}
    },
    "+LocalNodeImpl": [354],
    LocalNodeImpl_serialize_closure: {
      "^": "Closure:14;_responder$_captured_rslt_0",
      call$2: [function(key, val) {
        this._responder$_captured_rslt_0.$indexSet(0, key, val);
      }, null, null, 4, 0, 14, 65, [], 156, [], "call"]
    },
    LocalNodeImpl_serialize_closure0: {
      "^": "Closure:14;_captured_rslt_1",
      call$2: [function(key, val) {
        this._captured_rslt_1.$indexSet(0, key, val);
      }, null, null, 4, 0, 14, 65, [], 156, [], "call"]
    },
    LocalNodeImpl_serialize_closure1: {
      "^": "Closure:14;_captured_withChildren_2,_captured_rslt_3",
      call$2: [function(key, val) {
        if (this._captured_withChildren_2)
          this._captured_rslt_3.$indexSet(0, key, val.serialize$1(true));
      }, null, null, 4, 0, 14, 65, [], 156, [], "call"]
    },
    LocalNodeImpl_load_closure: {
      "^": "Closure:9;_responder$_box_0,_responder$_captured_this_1,_captured_provider_2",
      call$2: [function(key, value) {
        var t1, node, t2;
        if (J.getInterceptor$s(key).startsWith$1(key, "$"))
          this._responder$_captured_this_1.configs.$indexSet(0, key, value);
        else if (C.JSString_methods.startsWith$1(key, "@"))
          this._responder$_captured_this_1.attributes.$indexSet(0, key, value);
        else if (!!J.getInterceptor(value).$isMap) {
          t1 = this._captured_provider_2;
          node = t1.getNode$1(H.S(this._responder$_box_0._captured_childPathPre_0) + key);
          t2 = J.getInterceptor(node);
          if (!!t2.$isLocalNodeImpl)
            t2.load$2(node, value, t1);
          this._responder$_captured_this_1.children.$indexSet(0, key, node);
        }
      }, null, null, 4, 0, 9, 65, [], 26, [], "call"]
    },
    IPermissionManager: {
      "^": "Object;",
      static: {IPermissionManager$: [function() {
          return new T.IPermissionManager();
        }, null, null, 0, 0, 250, "new IPermissionManager"]}
    },
    "+IPermissionManager": [0],
    DummyPermissionManager: {
      "^": "Object;",
      getPermission$2: [function(path, resp) {
        return 3;
      }, "call$2", "get$getPermission", 4, 0, 142, 107, [], 200, [], "getPermission"],
      static: {DummyPermissionManager$: [function() {
          return new T.DummyPermissionManager();
        }, null, null, 0, 0, 251, "new DummyPermissionManager"]}
    },
    "+DummyPermissionManager": [0, 357],
    LocalNode: {
      "^": "Node0;_listChangeController@-355,_listReqListener@-310,path>-285,callbacks@-345,_lastValueUpdate@-346,profile-312,attributes-313,configs-313,children-314",
      get$listChangeController: [function() {
        var t1 = this._listChangeController;
        if (t1 == null) {
          t1 = Q.BroadcastStreamController$(this.get$onStartListListen(), this.get$onAllListCancel(), null, P.String);
          this._listChangeController = t1;
        }
        return t1;
      }, null, null, 1, 0, 143, "listChangeController"],
      get$listStream: [function() {
        return this.get$listChangeController()._stream;
      }, null, null, 1, 0, 144, "listStream"],
      onStartListListen$0: [function() {
      }, "call$0", "get$onStartListListen", 0, 0, 6, "onStartListListen"],
      onAllListCancel$0: [function() {
      }, "call$0", "get$onAllListCancel", 0, 0, 6, "onAllListCancel"],
      subscribe$2: ["super$LocalNode$subscribe$2", function(callback, cachelevel) {
        this.callbacks.$indexSet(0, callback, cachelevel);
        return new T.RespSubscribeListener(callback, this);
      }, function(callback) {
        return this.subscribe$2(callback, 1);
      }, "subscribe$1", "call$2", "call$1", "get$subscribe", 2, 2, 145, 111, 38, [], 201, [], "subscribe"],
      unsubscribe$1: [function(callback) {
        if (this.callbacks.containsKey$1(callback))
          this.callbacks.remove$1(0, callback);
      }, "call$1", "get$unsubscribe", 2, 0, 113, 38, [], "unsubscribe"],
      get$lastValueUpdate: [function() {
        var t1 = this._lastValueUpdate;
        if (t1 == null) {
          t1 = O.ValueUpdate$(null, 1, 0 / 0, null, 0 / 0, null, 0 / 0, null);
          this._lastValueUpdate = t1;
        }
        return t1;
      }, null, null, 1, 0, 146, "lastValueUpdate"],
      updateValue$2$force: [function(update, force) {
        var t1;
        if (update instanceof O.ValueUpdate) {
          this._lastValueUpdate = update;
          this.callbacks.forEach$1(0, new T.LocalNode_updateValue_closure(this));
        } else {
          t1 = this._lastValueUpdate;
          if (t1 == null || !J.$eq(t1.value, update) || force) {
            this._lastValueUpdate = O.ValueUpdate$(update, 1, 0 / 0, null, 0 / 0, null, 0 / 0, null);
            this.callbacks.forEach$1(0, new T.LocalNode_updateValue_closure0(this));
          }
        }
      }, function(update) {
        return this.updateValue$2$force(update, false);
      }, "updateValue$1", "call$2$force", "call$1", "get$updateValue", 2, 3, 147, 28, 116, [], 162, [], "updateValue"],
      get$exists: [function() {
        return true;
      }, null, null, 1, 0, 26, "exists"],
      get$listReady: [function() {
        return true;
      }, null, null, 1, 0, 26, "listReady"],
      get$disconnected: [function() {
        return;
      }, null, null, 1, 0, 3, "disconnected"],
      get$valueReady: [function() {
        return true;
      }, null, null, 1, 0, 26, "valueReady"],
      get$hasSubscriber: [function() {
        var t1 = this.callbacks;
        return t1.get$isNotEmpty(t1);
      }, null, null, 1, 0, 26, "hasSubscriber"],
      getInvokePermission$0: [function() {
        return O.Permission_parse(this.getConfig$1("$invokable"), 4);
      }, "call$0", "get$getInvokePermission", 0, 0, 2, "getInvokePermission"],
      getSetPermission$0: [function() {
        return O.Permission_parse(this.getConfig$1("$writable"), 4);
      }, "call$0", "get$getSetPermission", 0, 0, 2, "getSetPermission"],
      invoke$5: [function(params, responder, response, parentNode, maxPermission) {
        response.close$0(0);
        return response;
      }, function(params, responder, response, parentNode) {
        return this.invoke$5(params, responder, response, parentNode, 3);
      }, "invoke$4", "call$5", "call$4", "get$invoke", 8, 2, 148, 178, 179, [], 163, [], 118, [], 198, [], 180, [], "invoke"],
      setAttribute$4: [function(_, $name, value, responder, response) {
        response.close$0(0);
        return response;
      }, "call$4", "get$setAttribute", 8, 0, 139, 124, [], 26, [], 163, [], 118, [], "setAttribute"],
      removeAttribute$3: [function($name, responder, response) {
        response.close$0(0);
        return response;
      }, "call$3", "get$removeAttribute", 6, 0, 140, 124, [], 163, [], 118, [], "removeAttribute"],
      setConfig$4: [function($name, value, responder, response) {
        response.close$0(0);
        return response;
      }, "call$4", "get$setConfig", 8, 0, 139, 124, [], 26, [], 163, [], 118, [], "setConfig"],
      removeConfig$3: [function($name, responder, response) {
        response.close$0(0);
        return response;
      }, "call$3", "get$removeConfig", 6, 0, 140, 124, [], 163, [], 118, [], "removeConfig"],
      setValue$4: [function(value, responder, response, maxPermission) {
        response.close$0(0);
        return response;
      }, function(value, responder, response) {
        return this.setValue$4(value, responder, response, 3);
      }, "setValue$3", "call$4", "call$3", "get$setValue", 6, 2, 141, 178, 26, [], 163, [], 118, [], 180, [], "setValue"],
      $index: [function(_, $name) {
        return this.$get$1($name);
      }, null, "get$[]", 2, 0, 12, 124, [], "[]"],
      $indexSet: [function(_, $name, value) {
        if (J.getInterceptor$s($name).startsWith$1($name, "$"))
          this.configs.$indexSet(0, $name, value);
        else if (C.JSString_methods.startsWith$1($name, "@"))
          this.attributes.$indexSet(0, $name, value);
        else if (value instanceof O.Node0)
          this.addChild$2($name, value);
      }, null, "get$[]=", 4, 0, 97, 124, [], 26, [], "[]="],
      static: {LocalNode$: [function(path) {
          return new T.LocalNode(null, null, path, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 2, 0, 12, 107, [], "new LocalNode"]}
    },
    "+LocalNode": [312],
    LocalNode_updateValue_closure: {
      "^": "Closure:14;_responder$_captured_this_0",
      call$2: [function(callback, cachelevel) {
        callback.call$1(this._responder$_captured_this_0._lastValueUpdate);
      }, null, null, 4, 0, 14, 38, [], 201, [], "call"]
    },
    LocalNode_updateValue_closure0: {
      "^": "Closure:14;_responder$_captured_this_1",
      call$2: [function(callback, cachelevel) {
        callback.call$1(this._responder$_captured_this_1._lastValueUpdate);
      }, null, null, 4, 0, 14, 38, [], 201, [], "call"]
    },
    NodeProvider: {
      "^": "Object;",
      $index: [function(_, path) {
        return this.getNode$1(path);
      }, null, "get$[]", 2, 0, 50, 107, [], "[]"],
      $not: [function(_) {
        return this.getNode$1("/");
      }, null, "get$~", 0, 0, 53, "~"],
      static: {NodeProvider$: [function() {
          return new T.NodeProvider();
        }, null, null, 0, 0, 252, "new NodeProvider"]}
    },
    "+NodeProvider": [0],
    Responder: {
      "^": "ConnectionHandler;reqId@-285,groups@-287,_responses<-358,_responder$_subscription@-359,nodeProvider<-283,_conn-309,_connListener-310,_beforeSendListener-310,_toSendList-311,_processors-308,_pendingSend-288",
      addResponse$1: [function(response) {
        if (response._sentStreamStatus !== "closed")
          this._responses.$indexSet(0, response.rid, response);
        return response;
      }, "call$1", "get$addResponse", 2, 0, 149, 118, [], "addResponse"],
      onData$1: [function(list) {
        var t1, resp;
        for (t1 = J.get$iterator$ax(list); t1.moveNext$0();) {
          resp = t1.get$current();
          if (!!J.getInterceptor(resp).$isMap)
            this._onReceiveRequest$1(resp);
        }
      }, "call$1", "get$onData", 2, 0, 81, 142, [], "onData"],
      _onReceiveRequest$1: [function(m) {
        var t1, t2, rid;
        t1 = m.$index(0, "method");
        if (typeof t1 === "string") {
          t1 = m.$index(0, "rid");
          t1 = typeof t1 === "number" && Math.floor(t1) === t1;
        } else
          t1 = false;
        if (t1) {
          t1 = this._responses;
          if (t1.containsKey$1(m.$index(0, "rid"))) {
            if (J.$eq(m.$index(0, "method"), "close")) {
              t2 = m.$index(0, "rid");
              if (typeof t2 === "number" && Math.floor(t2) === t2) {
                rid = m.$index(0, "rid");
                if (t1.containsKey$1(rid)) {
                  t1.$index(0, rid)._responder$_close$0();
                  t1.remove$1(0, rid);
                }
              }
            }
            return;
          }
          switch (m.$index(0, "method")) {
            case "list":
              this.list$1(0, m);
              return;
            case "subscribe":
              this.subscribe$1(m);
              return;
            case "unsubscribe":
              this.unsubscribe$1(m);
              return;
            case "invoke":
              this.invoke$1(m);
              return;
            case "set":
              this.$set$1(m);
              return;
            case "remove":
              this.remove$1(0, m);
              return;
          }
        }
        t1 = m.$index(0, "rid");
        if (typeof t1 === "number" && Math.floor(t1) === t1 && !J.$eq(m.$index(0, "method"), "close"))
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_METHOD());
      }, "call$1", "get$_onReceiveRequest", 2, 0, 72, 113, [], "_onReceiveRequest"],
      _closeResponse$3$error$response: [function(rid, error, response) {
        var m, rslt, t1;
        if (response != null) {
          rid = response.rid;
          if (!J.$eq(this._responses.$index(0, rid), response))
            return;
          response._sentStreamStatus = "closed";
        }
        m = P.LinkedHashMap__makeLiteral(["rid", rid, "stream", "closed"]);
        if (error != null) {
          rslt = P.LinkedHashMap__makeEmpty();
          t1 = error.msg;
          if (t1 != null)
            rslt.$indexSet(0, "msg", t1);
          t1 = error.type;
          if (t1 != null)
            rslt.$indexSet(0, "type", t1);
          t1 = error.path;
          if (t1 != null)
            rslt.$indexSet(0, "path", t1);
          if (error.phase === "request")
            rslt.$indexSet(0, "phase", "request");
          t1 = error.detail;
          if (t1 != null)
            rslt.$indexSet(0, "detail", t1);
          m.$indexSet(0, "error", rslt);
        }
        this.addToSendList$1(m);
      }, function(rid) {
        return this._closeResponse$3$error$response(rid, null, null);
      }, "_closeResponse$1", function(rid, error) {
        return this._closeResponse$3$error$response(rid, error, null);
      }, "_closeResponse$2$error", "call$3$error$response", "call$1", "call$2$error", "get$_closeResponse", 2, 5, 150, 25, 25, 173, [], 118, [], 18, [], "_closeResponse"],
      updateResponse$4$columns$streamStatus: [function(response, updates, columns, streamStatus) {
        var t1, t2, m;
        t1 = this._responses;
        t2 = response.rid;
        if (J.$eq(t1.$index(0, t2), response)) {
          m = P.LinkedHashMap__makeLiteral(["rid", t2]);
          if (streamStatus != null && streamStatus !== response._sentStreamStatus) {
            response._sentStreamStatus = streamStatus;
            m.$indexSet(0, "stream", streamStatus);
          }
          if (columns != null)
            m.$indexSet(0, "columns", columns);
          if (updates != null)
            m.$indexSet(0, "updates", updates);
          this.addToSendList$1(m);
          if (response._sentStreamStatus === "closed")
            t1.remove$1(0, t2);
        }
      }, function(response, updates) {
        return this.updateResponse$4$columns$streamStatus(response, updates, null, null);
      }, "updateResponse$2", function(response, updates, streamStatus) {
        return this.updateResponse$4$columns$streamStatus(response, updates, null, streamStatus);
      }, "updateResponse$3$streamStatus", "call$4$columns$streamStatus", "call$2", "call$3$streamStatus", "get$updateResponse", 4, 5, 151, 25, 25, 118, [], 175, [], 177, [], 143, [], "updateResponse"],
      list$1: [function(_, m) {
        var path, t1, rid, node;
        path = O.Path_getValidNodePath(m.$index(0, "path"), null);
        if (path != null)
          t1 = path.name === "/" || J.startsWith$1$s(path.parentPath, "/");
        else
          t1 = false;
        if (t1) {
          rid = m.$index(0, "rid");
          node = this.nodeProvider.getNode$1(path.path);
          t1 = new T.ListResponse(node, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), true, false, this, rid, "initialize");
          t1.ListResponse$3(this, rid, node);
          this.addResponse$1(t1);
        } else
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_PATH());
      }, "call$1", "get$list", 2, 0, 72, 113, [], "list"],
      subscribe$1: [function(m) {
        var t1, t2, p, t3, t4, pathstr, sid, cacheLevel, path, t5, t6, controller, t7, t8;
        if (!!J.getInterceptor(m.$index(0, "paths")).$isList) {
          m.$index(0, "rid");
          for (t1 = J.get$iterator$ax(m.$index(0, "paths")), t2 = this.nodeProvider; t1.moveNext$0();) {
            p = t1.get$current();
            t3 = J.getInterceptor(p);
            if (!!t3.$isMap) {
              t4 = t3.$index(p, "path");
              if (typeof t4 === "string")
                pathstr = t3.$index(p, "path");
              else
                continue;
              t4 = t3.$index(p, "sid");
              if (typeof t4 === "number" && Math.floor(t4) === t4)
                sid = t3.$index(p, "sid");
              else
                continue;
              t4 = t3.$index(p, "cache");
              cacheLevel = typeof t4 === "number" && Math.floor(t4) === t4 ? t3.$index(p, "cache") : 1;
            } else {
              pathstr = null;
              cacheLevel = 1;
              sid = -1;
            }
            path = O.Path_getValidNodePath(pathstr, null);
            if (path != null)
              t3 = path.name === "/" || J.startsWith$1$s(path.parentPath, "/");
            else
              t3 = false;
            if (t3) {
              t3 = this._responder$_subscription;
              t4 = path.path;
              t5 = t2.getNode$1(t4);
              t6 = t3.subsriptions;
              if (t6.$index(0, t4) != null) {
                controller = t6.$index(0, t4);
                t4 = controller.sid;
                if (t4 == null ? sid != null : t4 !== sid) {
                  t3 = t3.subsriptionids;
                  t3.remove$1(0, t4);
                  controller.sid;
                  t3.$indexSet(0, sid, controller);
                }
                controller.toString;
                controller._cachedLevel = cacheLevel < 1 ? 1 : cacheLevel;
              } else {
                t7 = t3.responder;
                controller = new T.RespSubscribeController(t5, t3, null, sid, t7.nodeProvider.get$permissions().getPermission$2(t5.path, t7) > 0, P.ListQueue$(null, O.ValueUpdate), null);
                controller._cachedLevel = cacheLevel < 1 ? 1 : cacheLevel;
                controller._listener = t5.subscribe$2(controller.get$addValue(), controller._cachedLevel);
                t8 = t5._lastValueUpdate;
                if (t8 == null) {
                  t8 = O.ValueUpdate$(null, 1, 0 / 0, null, 0 / 0, null, 0 / 0, null);
                  t5._lastValueUpdate = t8;
                }
                t8 = t8 != null;
                if (t8) {
                  t8 = t5._lastValueUpdate;
                  if (t8 == null) {
                    t8 = O.ValueUpdate$(null, 1, 0 / 0, null, 0 / 0, null, 0 / 0, null);
                    t5._lastValueUpdate = t8;
                    t5 = t8;
                  } else
                    t5 = t8;
                  controller.lastValues._add$1(t5);
                  t5 = controller.lastValues;
                  if ((t5._tail - t5._head & t5._table.length - 1) >>> 0 > controller._cachedLevel)
                    controller.mergeValues$0();
                  if (controller._permitted) {
                    t3.changed.add$1(0, controller);
                    t7.addProcessor$1(t3.get$processor());
                  }
                }
                t6.$indexSet(0, t4, controller);
                t3.subsriptionids.$indexSet(0, sid, controller);
              }
            }
          }
          this._closeResponse$1(m.$index(0, "rid"));
        } else
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_PATHS());
      }, "call$1", "get$subscribe", 2, 0, 72, 113, [], "subscribe"],
      unsubscribe$1: [function(m) {
        var t1, sid, t2, t3, controller;
        if (!!J.getInterceptor(m.$index(0, "sids")).$isList) {
          m.$index(0, "rid");
          for (t1 = J.get$iterator$ax(m.$index(0, "sids")); t1.moveNext$0();) {
            sid = t1.get$current();
            if (typeof sid === "number" && Math.floor(sid) === sid) {
              t2 = this._responder$_subscription;
              t3 = t2.subsriptionids;
              if (t3.$index(0, sid) != null) {
                controller = t3.$index(0, sid);
                t3.$index(0, sid).destroy$0();
                t3.remove$1(0, sid);
                t2.subsriptions.remove$1(0, controller.node.path);
              }
            }
          }
          this._closeResponse$1(m.$index(0, "rid"));
        } else
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_PATHS());
      }, "call$1", "get$unsubscribe", 2, 0, 72, 113, [], "unsubscribe"],
      invoke$1: [function(m) {
        var path, t1, rid, parentNode, node, permission, maxPermit;
        path = O.Path_getValidNodePath(m.$index(0, "path"), null);
        if (path != null)
          t1 = path.name === "/" || J.startsWith$1$s(path.parentPath, "/");
        else
          t1 = false;
        if (t1) {
          rid = m.$index(0, "rid");
          t1 = this.nodeProvider;
          parentNode = t1.getNode$1(path.parentPath);
          node = parentNode.getChild$1(path.name);
          if (node == null) {
            this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_PERMISSION_DENIED());
            return;
          }
          permission = t1.permissions.getPermission$2(path.path, this);
          maxPermit = O.Permission_parse(m.$index(0, "permit"), 4);
          if (maxPermit < permission)
            permission = maxPermit;
          if (O.Permission_parse(node.getConfig$1("$invokable"), 4) <= permission)
            node.invoke$5(m.$index(0, "params"), this, this.addResponse$1(new T.InvokeResponse(node, 0, null, null, "initialize", null, null, this, rid, "initialize")), parentNode, permission);
          else
            this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_PERMISSION_DENIED());
        } else
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_PATH());
      }, "call$1", "get$invoke", 2, 0, 72, 113, [], "invoke"],
      $set$1: [function(m) {
        var path, t1, value, rid, node, permission, maxPermit;
        path = O.Path_getValidPath(m.$index(0, "path"), null);
        if (path != null)
          t1 = !(path.name === "/" || J.startsWith$1$s(path.parentPath, "/"));
        else
          t1 = true;
        if (t1) {
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_PATH());
          return;
        }
        if (!m.containsKey$1("value")) {
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_VALUE());
          return;
        }
        value = m.$index(0, "value");
        rid = m.$index(0, "rid");
        if (path.get$isNode()) {
          t1 = this.nodeProvider;
          node = t1.getNode$1(path.path);
          permission = t1.permissions.getPermission$2(node.path, this);
          maxPermit = O.Permission_parse(m.$index(0, "permit"), 4);
          if (maxPermit < permission)
            permission = maxPermit;
          if (O.Permission_parse(node.getConfig$1("$writable"), 4) <= permission)
            node.setValue$3(value, this, this.addResponse$1(new T.Response(this, rid, "initialize")));
          else
            this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_PERMISSION_DENIED());
        } else if (J.startsWith$1$s(path.name, "$")) {
          t1 = this.nodeProvider;
          node = t1.getNode$1(path.parentPath);
          if (t1.permissions.getPermission$2(node.path, this) < 3)
            this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_PERMISSION_DENIED());
          else
            node.setConfig$4(path.name, value, this, this.addResponse$1(new T.Response(this, rid, "initialize")));
        } else if (J.startsWith$1$s(path.name, "@")) {
          t1 = this.nodeProvider;
          node = t1.getNode$1(path.parentPath);
          if (t1.permissions.getPermission$2(node.path, this) < 2)
            this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_PERMISSION_DENIED());
          else
            node.setAttribute$4(0, path.name, value, this, this.addResponse$1(new T.Response(this, rid, "initialize")));
        } else
          throw H.wrapException("unexpected case");
      }, "call$1", "get$set", 2, 0, 72, 113, [], "set"],
      remove$1: [function(_, m) {
        var path, rid, t1, node;
        path = O.Path_getValidPath(m.$index(0, "path"), null);
        if (path == null || path.name === "/" || J.startsWith$1$s(path.parentPath, "/")) {
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_PATH());
          return;
        }
        rid = m.$index(0, "rid");
        if (path.get$isNode())
          this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_INVALID_METHOD());
        else if (J.startsWith$1$s(path.name, "$")) {
          t1 = this.nodeProvider;
          node = t1.getNode$1(path.parentPath);
          if (t1.permissions.getPermission$2(node.path, this) < 3)
            this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_PERMISSION_DENIED());
          else
            node.removeConfig$3(path.name, this, this.addResponse$1(new T.Response(this, rid, "initialize")));
        } else if (J.startsWith$1$s(path.name, "@")) {
          t1 = this.nodeProvider;
          node = t1.getNode$1(path.parentPath);
          if (t1.permissions.getPermission$2(node.path, this) < 2)
            this._closeResponse$2$error(m.$index(0, "rid"), $.get$DSError_PERMISSION_DENIED());
          else
            node.removeAttribute$3(path.name, this, this.addResponse$1(new T.Response(this, rid, "initialize")));
        } else
          throw H.wrapException("unexpected case");
      }, "call$1", "get$remove", 2, 0, 72, 113, [], "remove"],
      close$1: [function(_, m) {
        var t1, rid;
        t1 = m.$index(0, "rid");
        if (typeof t1 === "number" && Math.floor(t1) === t1) {
          rid = m.$index(0, "rid");
          t1 = this._responses;
          if (t1.containsKey$1(rid)) {
            t1.$index(0, rid)._responder$_close$0();
            t1.remove$1(0, rid);
          }
        }
      }, "call$1", "get$close", 2, 0, 72, 113, [], "close"],
      onDisconnected$0: [function() {
        var t1 = this._responses;
        t1.forEach$1(0, new T.Responder_onDisconnected_closure());
        t1.clear$0(0);
        t1.$indexSet(0, 0, this._responder$_subscription);
      }, "call$0", "get$onDisconnected", 0, 0, 6, "onDisconnected"],
      onReconnected$0: [function() {
        this.super$ConnectionHandler$onReconnected$0();
      }, "call$0", "get$onReconnected", 0, 0, 6, "onReconnected"],
      static: {Responder$: [function(nodeProvider, reqId) {
          var t1, t2, t3;
          t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.Response);
          t2 = new T.Responder(reqId, [], t1, null, nodeProvider, null, null, null, [], [], false);
          t3 = new T.SubscribeResponse(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.RespSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.RespSubscribeController), P.LinkedHashSet_LinkedHashSet(null, null, null, T.RespSubscribeController), t2, 0, "initialize");
          t2._responder$_subscription = t3;
          t1.$indexSet(0, 0, t3);
          return t2;
        }, null, null, 2, 2, 253, 25, 99, [], 194, [], "new Responder"]}
    },
    "+Responder": [349],
    Responder_onDisconnected_closure: {
      "^": "Closure:14;",
      call$2: [function(id, resp) {
        resp._responder$_close$0();
      }, null, null, 4, 0, 14, 202, [], 200, [], "call"]
    },
    Response: {
      "^": "Object;responder<-300,rid<-296,_sentStreamStatus@-285",
      close$1: [function(_, err) {
        this._sentStreamStatus = "closed";
        this.responder._closeResponse$3$error$response(this.rid, err, this);
      }, function($receiver) {
        return this.close$1($receiver, null);
      }, "close$0", "call$1", "call$0", "get$close", 0, 2, 107, 25, 117, [], "close"],
      _responder$_close$0: [function() {
      }, "call$0", "get$_responder$_close", 0, 0, 6, "_responder$_close"],
      static: {Response$: [function(responder, rid) {
          return new T.Response(responder, rid, "initialize");
        }, null, null, 4, 0, 254, 163, [], 173, [], "new Response"]}
    },
    "+Response": [0],
    InvokeResponse: {
      "^": "Response;node<-354,_pendingInitializeLength@-296,_columns@-311,_updates@-311,_sendingStreamStatus@-285,_err@-306,onClose@-360,responder-300,rid-296,_sentStreamStatus-285",
      updateStream$3$columns$streamStatus: [function(updates, columns, streamStatus) {
        var t1;
        if (columns != null)
          this._columns = columns;
        t1 = this._updates;
        if (t1 == null)
          this._updates = updates;
        else
          J.addAll$1$ax(t1, updates);
        if (this._sendingStreamStatus === "initialize")
          this._pendingInitializeLength = this._pendingInitializeLength + J.get$length$asx(updates);
        this._sendingStreamStatus = streamStatus;
        this.responder.addProcessor$1(this.get$processor());
      }, function(updates) {
        return this.updateStream$3$columns$streamStatus(updates, null, "open");
      }, "updateStream$1", function(updates, streamStatus) {
        return this.updateStream$3$columns$streamStatus(updates, null, streamStatus);
      }, "updateStream$2$streamStatus", "call$3$columns$streamStatus", "call$1", "call$2$streamStatus", "get$updateStream", 2, 5, 152, 25, 203, 175, [], 143, [], 177, [], "updateStream"],
      processor$0: [function() {
        var t1 = this._err;
        if (t1 != null) {
          this.responder._closeResponse$3$error$response(this.rid, t1, this);
          if (this._sentStreamStatus === "closed")
            if (this.onClose != null)
              this.onClose$1(this);
          return;
        }
        t1 = this._columns;
        if (t1 != null) {
          t1 = O.TableColumn_serializeColumns(t1);
          this._columns = t1;
        }
        this.responder.updateResponse$4$columns$streamStatus(this, this._updates, t1, this._sendingStreamStatus);
        this._columns = null;
        this._updates = null;
        if (this._sentStreamStatus === "closed")
          if (this.onClose != null)
            this.onClose$1(this);
      }, "call$0", "get$processor", 0, 0, 6, "processor"],
      close$1: [function(_, err) {
        if (err != null)
          this._err = err;
        this._sendingStreamStatus = "closed";
        this.responder.addProcessor$1(this.get$processor());
      }, function($receiver) {
        return this.close$1($receiver, null);
      }, "close$0", "call$1", "call$0", "get$close", 0, 2, 107, 25, 117, [], "close"],
      _responder$_close$0: [function() {
        if (this.onClose != null)
          this.onClose$1(this);
      }, "call$0", "get$_responder$_close", 0, 0, 6, "_responder$_close"],
      onClose$1: function(arg0) {
        return this.onClose.call$1(arg0);
      },
      static: {InvokeResponse$: [function(responder, rid, node) {
          return new T.InvokeResponse(node, 0, null, null, "initialize", null, null, responder, rid, "initialize");
        }, null, null, 6, 0, 255, 163, [], 173, [], 158, [], "new InvokeResponse"]}
    },
    "+InvokeResponse": [361],
    ListResponse: {
      "^": "Response;node<-354,_nodeChangeListener@-310,_permission@-296,changes@-338,initialResponse@-288,_disconnectSent@-288,responder-300,rid-296,_sentStreamStatus-285",
      changed$1: [function(key) {
        var t1, t2;
        t1 = this._permission;
        if (t1 === 0)
          return;
        if (t1 < 3 && J.startsWith$1$s(key, "$$"))
          return;
        t1 = this.changes;
        t1 = t1.get$isEmpty(t1);
        t2 = this.changes;
        if (t1) {
          t2.add$1(0, key);
          this.responder.addProcessor$1(this.get$processor());
        } else
          t2.add$1(0, key);
      }, "call$1", "get$changed", 2, 0, 37, 65, [], "changed"],
      processor$0: [function() {
        var t1, updateConfigs, updateAttributes, updateChildren, t2, t3, change, update, updates;
        t1 = {};
        t1._captured_updateIs_0 = null;
        t1._captured_updateBase_1 = null;
        updateConfigs = [];
        updateAttributes = [];
        updateChildren = [];
        t2 = this.node;
        t2.toString;
        if (this._disconnectSent && !this.changes.contains$1(0, "$disconnectedTs")) {
          this._disconnectSent = false;
          updateConfigs.push(P.LinkedHashMap__makeLiteral(["name", "$disconnectedTs", "change", "remove"]));
          if (t2.configs.containsKey$1("$disconnectedTs"))
            t2.configs.remove$1(0, "$disconnectedTs");
        }
        if (this.initialResponse || this.changes.contains$1(0, "$is")) {
          this.initialResponse = false;
          t2.configs.forEach$1(0, new T.ListResponse_processor_closure(t1, this, updateConfigs));
          t2.attributes.forEach$1(0, new T.ListResponse_processor_closure0(updateAttributes));
          t2.children.forEach$1(0, new T.ListResponse_processor_closure1(updateChildren));
          if (t1._captured_updateIs_0 == null)
            t1._captured_updateIs_0 = "node";
        } else
          for (t3 = this.changes, t3 = t3.get$iterator(t3); t3.moveNext$0();) {
            change = t3._collection$_current;
            if (J.getInterceptor$s(change).startsWith$1(change, "$")) {
              update = t2.configs.containsKey$1(change) ? [change, t2.configs.$index(0, change)] : P.LinkedHashMap__makeLiteral(["name", change, "change", "remove"]);
              if (this._permission === 3 || !C.JSString_methods.startsWith$1(change, "$$"))
                updateConfigs.push(update);
            } else if (C.JSString_methods.startsWith$1(change, "@"))
              updateAttributes.push(t2.attributes.containsKey$1(change) ? [change, t2.attributes.$index(0, change)] : P.LinkedHashMap__makeLiteral(["name", change, "change", "remove"]));
            else
              updateChildren.push(t2.children.containsKey$1(change) ? [change, t2.children.$index(0, change).getSimpleMap$0()] : P.LinkedHashMap__makeLiteral(["name", change, "change", "remove"]));
          }
        this.changes.clear$0(0);
        updates = [];
        t2 = t1._captured_updateBase_1;
        if (t2 != null)
          updates.push(t2);
        t1 = t1._captured_updateIs_0;
        if (t1 != null)
          updates.push(t1);
        C.JSArray_methods.addAll$1(updates, updateConfigs);
        C.JSArray_methods.addAll$1(updates, updateAttributes);
        C.JSArray_methods.addAll$1(updates, updateChildren);
        this.responder.updateResponse$3$streamStatus(this, updates, "open");
      }, "call$0", "get$processor", 0, 0, 6, "processor"],
      _responder$_close$0: [function() {
        this._nodeChangeListener.cancel$0();
      }, "call$0", "get$_responder$_close", 0, 0, 6, "_responder$_close"],
      ListResponse$3: function(responder, rid, node) {
        var t1 = this.node;
        this._permission = responder.nodeProvider.get$permissions().getPermission$2(t1.path, responder);
        this._nodeChangeListener = t1.get$listChangeController()._stream.listen$1(this.get$changed());
        responder.addProcessor$1(this.get$processor());
      },
      static: {ListResponse$: [function(responder, rid, node) {
          var t1 = new T.ListResponse(node, null, null, P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), true, false, responder, rid, "initialize");
          t1.ListResponse$3(responder, rid, node);
          return t1;
        }, null, null, 6, 0, 255, 163, [], 173, [], 158, [], "new ListResponse"]}
    },
    "+ListResponse": [361],
    ListResponse_processor_closure: {
      "^": "Closure:14;_responder$_box_0,_responder$_captured_this_1,_captured_updateConfigs_2",
      call$2: [function($name, value) {
        var update, t1;
        update = [$name, value];
        t1 = J.getInterceptor($name);
        if (t1.$eq($name, "$is"))
          this._responder$_box_0._captured_updateIs_0 = update;
        else if (t1.$eq($name, "$base"))
          this._responder$_box_0._captured_updateBase_1 = update;
        else if (this._responder$_captured_this_1._permission === 3 || !t1.startsWith$1($name, "$$"))
          this._captured_updateConfigs_2.push(update);
      }, null, null, 4, 0, 14, 124, [], 26, [], "call"]
    },
    ListResponse_processor_closure0: {
      "^": "Closure:14;_captured_updateAttributes_3",
      call$2: [function($name, value) {
        this._captured_updateAttributes_3.push([$name, value]);
      }, null, null, 4, 0, 14, 124, [], 26, [], "call"]
    },
    ListResponse_processor_closure1: {
      "^": "Closure:153;_captured_updateChildren_4",
      call$2: [function($name, value) {
        this._captured_updateChildren_4.push([$name, value.getSimpleMap$0()]);
      }, null, null, 4, 0, 153, 124, [], 26, [], "call"]
    },
    RespSubscribeListener: {
      "^": "Object;callback@-276,node@-354",
      cancel$0: [function() {
        var t1, t2;
        t1 = this.callback;
        if (t1 != null) {
          t2 = this.node;
          if (t2.callbacks.containsKey$1(t1))
            t2.callbacks.remove$1(0, t1);
          this.callback = null;
        }
      }, "call$0", "get$cancel", 0, 0, 6, "cancel"],
      callback$1: function(arg0) {
        return this.callback.call$1(arg0);
      },
      static: {RespSubscribeListener$: [function(node, callback) {
          return new T.RespSubscribeListener(callback, node);
        }, null, null, 4, 0, 256, 158, [], 38, [], "new RespSubscribeListener"]}
    },
    "+RespSubscribeListener": [0],
    SubscribeResponse: {
      "^": "Response;subsriptions<-362,subsriptionids<-363,changed<-364,responder-300,rid-296,_sentStreamStatus-285",
      add$4: [function(_, path, node, sid, cacheLevel) {
        var t1, controller, t2;
        t1 = this.subsriptions;
        if (t1.$index(0, path) != null) {
          controller = t1.$index(0, path);
          t1 = controller.sid;
          if (t1 == null ? sid != null : t1 !== sid) {
            t2 = this.subsriptionids;
            t2.remove$1(0, t1);
            controller.sid;
            t2.$indexSet(0, sid, controller);
          }
          controller.set$cacheLevel(cacheLevel);
        } else {
          t2 = this.responder;
          controller = new T.RespSubscribeController(node, this, null, sid, t2.nodeProvider.get$permissions().getPermission$2(node.path, t2) > 0, P.ListQueue$(null, O.ValueUpdate), null);
          controller.set$cacheLevel(cacheLevel);
          controller._listener = node.subscribe$2(controller.get$addValue(), controller._cachedLevel);
          if (node.get$lastValueUpdate() != null)
            controller.addValue$1(node.get$lastValueUpdate());
          t1.$indexSet(0, path, controller);
          this.subsriptionids.$indexSet(0, sid, controller);
        }
      }, "call$4", "get$add", 8, 0, 154, 107, [], 158, [], 195, [], 112, [], "add"],
      remove$1: [function(_, sid) {
        var t1, controller;
        t1 = this.subsriptionids;
        if (t1.$index(0, sid) != null) {
          controller = t1.$index(0, sid);
          t1.$index(0, sid).destroy$0();
          t1.remove$1(0, sid);
          this.subsriptions.remove$1(0, controller.node.path);
        }
      }, "call$1", "get$remove", 2, 0, 155, 195, [], "remove"],
      subscriptionChanged$1: [function(controller) {
        this.changed.add$1(0, controller);
        this.responder.addProcessor$1(this.get$processor());
      }, "call$1", "get$subscriptionChanged", 2, 0, 156, 190, [], "subscriptionChanged"],
      processor$0: [function() {
        var updates, t1, t2;
        updates = [];
        for (t1 = this.changed, t2 = t1.get$iterator(t1); t2.moveNext$0();)
          C.JSArray_methods.addAll$1(updates, t2._collection$_current.process$0());
        this.responder.updateResponse$2(this, updates);
        t1.clear$0(0);
      }, "call$0", "get$processor", 0, 0, 6, "processor"],
      _responder$_close$0: [function() {
        var t1 = this.subsriptions;
        t1.forEach$1(0, new T.SubscribeResponse__close_closure());
        t1.clear$0(0);
      }, "call$0", "get$_responder$_close", 0, 0, 6, "_responder$_close"],
      changed$1: function(arg0) {
        return this.changed.call$1(arg0);
      },
      static: {SubscribeResponse$: [function(responder, rid) {
          return new T.SubscribeResponse(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.RespSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.RespSubscribeController), P.LinkedHashSet_LinkedHashSet(null, null, null, T.RespSubscribeController), responder, rid, "initialize");
        }, null, null, 4, 0, 254, 163, [], 173, [], "new SubscribeResponse"]}
    },
    "+SubscribeResponse": [361],
    SubscribeResponse__close_closure: {
      "^": "Closure:14;",
      call$2: [function(path, controller) {
        controller.destroy$0();
      }, null, null, 4, 0, 14, 107, [], 190, [], "call"]
    },
    RespSubscribeController: {
      "^": "Object;node<-354,response<-359,_listener@-365,sid@-296,_permitted@-288,lastValues@-366,_cachedLevel@-296",
      set$permitted: [function(val) {
        var t1 = this._permitted;
        if (val == null ? t1 == null : val === t1)
          return;
        this._permitted = val;
        if (val) {
          t1 = this.lastValues;
          t1 = t1.get$length(t1) > 0;
        } else
          t1 = false;
        if (t1) {
          t1 = this.response;
          t1.changed.add$1(0, this);
          t1.responder.addProcessor$1(t1.get$processor());
        }
      }, null, null, 3, 0, 69, 156, [], "permitted"],
      get$cacheLevel: [function() {
        return this._cachedLevel;
      }, null, null, 1, 0, 2, "cacheLevel"],
      set$cacheLevel: [function(v) {
        this._cachedLevel = v < 1 ? 1 : v;
      }, null, null, 3, 0, 155, 54, [], "cacheLevel"],
      addValue$1: [function(val) {
        var t1;
        this.lastValues._add$1(val);
        t1 = this.lastValues;
        if (t1.get$length(t1) > this._cachedLevel)
          this.mergeValues$0();
        if (this._permitted) {
          t1 = this.response;
          t1.changed.add$1(0, this);
          t1.responder.addProcessor$1(t1.get$processor());
        }
      }, "call$1", "get$addValue", 2, 0, 124, 156, [], "addValue"],
      mergeValues$0: [function() {
        var t1, toRemove, rslt, i, rslt0, t2;
        t1 = this.lastValues;
        toRemove = t1.get$length(t1) - this._cachedLevel;
        rslt = this.lastValues.removeFirst$0();
        for (i = 0; i < toRemove; ++i, rslt = rslt0) {
          t1 = this.lastValues.removeFirst$0();
          rslt0 = new O.ValueUpdate(null, null, null, null, 0, null, null);
          rslt0.value = t1.value;
          rslt0.ts = t1.ts;
          rslt0.status = t1.status;
          rslt0.count = rslt.count + t1.count;
          if (!J.get$isNaN$n(rslt.sum)) {
            t2 = 0 + rslt.sum;
            rslt0.sum = t2;
          } else
            t2 = 0;
          if (!J.get$isNaN$n(t1.sum))
            rslt0.sum = t2 + t1.sum;
          t2 = rslt.min;
          rslt0.min = t2;
          if (J.get$isNaN$n(t2) || t1.min < t2)
            rslt0.min = t1.min;
          t2 = rslt.min;
          rslt0.max = t2;
          if (J.get$isNaN$n(t2) || t1.max > t2)
            rslt0.max = t1.max;
        }
        this.lastValues.addFirst$1(rslt);
      }, "call$0", "get$mergeValues", 0, 0, 6, "mergeValues"],
      process$0: [function() {
        var rslts, t1, t2, lastValue, t3, m;
        rslts = [];
        t1 = this.lastValues;
        t2 = new P._ListQueueIterator(t1, t1._tail, t1._modificationCount, t1._head, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        for (; t2.moveNext$0();) {
          lastValue = t2._collection$_current;
          t1 = lastValue.count > 1 || lastValue.status != null;
          t3 = this.sid;
          if (t1) {
            m = P.LinkedHashMap__makeLiteral(["ts", lastValue.ts, "value", lastValue.value, "sid", t3]);
            t1 = lastValue.count;
            if (t1 === 0)
              ;
            else if (t1 > 1) {
              m.$indexSet(0, "count", t1);
              if (J.get$isFinite$n(lastValue.sum))
                m.$indexSet(0, "sum", lastValue.sum);
              if (J.get$isFinite$n(lastValue.max))
                m.$indexSet(0, "max", lastValue.max);
              if (J.get$isFinite$n(lastValue.min))
                m.$indexSet(0, "min", lastValue.min);
            }
            rslts.push(m);
          } else
            rslts.push([t3, lastValue.value, lastValue.ts]);
        }
        this.lastValues.clear$0(0);
        return rslts;
      }, "call$0", "get$process", 0, 0, 74, "process"],
      destroy$0: [function() {
        this._listener.cancel$0();
      }, "call$0", "get$destroy", 0, 0, 6, "destroy"],
      static: {RespSubscribeController$: [function(response, node, sid, _permitted, cacheLevel) {
          var t1 = new T.RespSubscribeController(node, response, null, sid, _permitted, P.ListQueue$(null, O.ValueUpdate), null);
          t1.set$cacheLevel(cacheLevel);
          t1._listener = node.subscribe$2(t1.get$addValue(), t1._cachedLevel);
          if (node.get$lastValueUpdate() != null)
            t1.addValue$1(node.get$lastValueUpdate());
          return t1;
        }, null, null, 10, 0, 257, 118, [], 158, [], 195, [], 196, [], 112, [], "new RespSubscribeController"]}
    },
    "+RespSubscribeController": [0],
    SimpleTableResult: {
      "^": "Object;columns@-311,rows*-311",
      static: {SimpleTableResult$: [function(rows, columns) {
          return new T.SimpleTableResult(columns, rows);
        }, null, null, 0, 4, 258, 25, 25, 144, [], 143, [], "new SimpleTableResult"]}
    },
    "+SimpleTableResult": [0],
    AsyncTableResult: {
      "^": "Object;response@-367,columns@-311,rows*-311,status*-285,onClose@-360",
      update$2: [function(rows, stat) {
        var t1 = this.rows;
        if (t1 == null)
          this.rows = rows;
        else
          J.addAll$1$ax(t1, rows);
        if (stat != null)
          this.status = stat;
        this.write$0();
      }, function(rows) {
        return this.update$2(rows, null);
      }, "update$1", "call$2", "call$1", "get$update", 2, 2, 157, 25, 144, [], 204, [], "update"],
      write$1: [function(resp) {
        var t1, t2;
        if (resp != null)
          if (this.response == null)
            this.response = resp;
          else
            Q.logger().log$4(C.Level_WARNING_900, "can not use same AsyncTableResult twice", null, null);
        t1 = this.response;
        if (t1 != null)
          t2 = this.rows != null || this.status === "closed";
        else
          t2 = false;
        if (t2) {
          t1.updateStream$3$columns$streamStatus(this.rows, this.columns, this.status);
          this.rows = null;
          this.columns = null;
        }
      }, function() {
        return this.write$1(null);
      }, "write$0", "call$1", "call$0", "get$write", 0, 2, 158, 25, 200, [], "write"],
      close$0: [function(_) {
        var t1 = this.response;
        if (t1 != null)
          t1.close$0(0);
        else
          this.status = "closed";
      }, "call$0", "get$close", 0, 0, 6, "close"],
      static: {AsyncTableResult$: [function(columns) {
          return new T.AsyncTableResult(null, columns, null, "initialize", null);
        }, null, null, 0, 2, 259, 25, 143, [], "new AsyncTableResult"]}
    },
    "+AsyncTableResult": [0],
    SerializableNodeProvider: {
      "^": "Object;",
      static: {SerializableNodeProvider$: [function() {
          return new T.SerializableNodeProvider();
        }, null, null, 0, 0, 260, "new SerializableNodeProvider"]}
    },
    "+SerializableNodeProvider": [0],
    MutableNodeProvider: {
      "^": "Object;",
      static: {MutableNodeProvider$: [function() {
          return new T.MutableNodeProvider();
        }, null, null, 0, 0, 261, "new MutableNodeProvider"]}
    },
    "+MutableNodeProvider": [0],
    SimpleNodeProvider: {
      "^": "NodeProviderImpl;nodes>-368,_profileFactories@-369,permissions@-357",
      getNode$1: [function(path) {
        var t1, node;
        t1 = this.nodes;
        if (t1.containsKey$1(path))
          return t1.$index(0, path);
        node = new T.SimpleNode(false, null, false, null, null, path, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        t1.$indexSet(0, path, node);
        return node;
      }, "call$1", "get$getNode", 2, 0, 50, 107, [], "getNode", 165],
      get$root: [function() {
        return this.getNode$1("/");
      }, null, null, 1, 0, 159, "root"],
      init$2: [function(m, profiles) {
        if (profiles != null)
          this._registerProfiles$1(profiles);
        if (m != null)
          this.getNode$1("/").load$2(0, m, this);
      }, function(m) {
        return this.init$2(m, null);
      }, "init$1", function() {
        return this.init$2(null, null);
      }, "init$0", "call$2", "call$1", "call$0", "get$init", 0, 4, 160, 25, 25, 113, [], 90, [], "init", 165],
      save$0: [function() {
        return this.getNode$1("/").save$0();
      }, "call$0", "get$save", 0, 0, 66, "save", 165],
      updateValue$2: [function(path, value) {
        this.getNode$1(path).updateValue$1(value);
      }, "call$2", "get$updateValue", 4, 0, 84, 107, [], 26, [], "updateValue", 165],
      addNode$2: [function(path, m) {
        var p, pnode, profile, node, t1, t2, t3;
        if (path === "/" || !J.startsWith$1$s(path, "/"))
          return;
        p = new O.Path(path, null, null, true);
        p._parse$0();
        pnode = this.getNode$1(p.parentPath);
        pnode.toString;
        profile = m.$index(0, "$is");
        node = this._profileFactories.containsKey$1(profile) ? this._profileFactories.$index(0, profile).call$1(path) : this.getNode$1(path);
        this.nodes.$indexSet(0, path, node);
        node.load$2(0, m, this);
        node.onCreated$0();
        pnode.children.$indexSet(0, p.name, node);
        pnode.onChildAdded$2(p.name, node);
        t1 = p.name;
        t2 = pnode.get$listChangeController();
        t3 = t2._utils$_controller;
        if (t3._state >= 4)
          H.throwExpression(t3._badEventState$0());
        t3._async$_add$1(t1);
        t2._stream.lastValue = t1;
        return node;
      }, "call$2", "get$addNode", 4, 0, 51, 107, [], 113, [], "addNode", 165],
      removeNode$1: [function(path) {
        var node, p, pnode, t1, t2, t3;
        if (path === "/" || !J.startsWith$1$s(path, "/"))
          return;
        node = this.getNode$1(path);
        node.onRemoving$0();
        node.removed = true;
        p = new O.Path(path, null, null, true);
        p._parse$0();
        pnode = this.getNode$1(p.parentPath);
        pnode.children.remove$1(0, p.name);
        pnode.onChildRemoved$2(p.name, node);
        t1 = p.name;
        t2 = pnode.get$listChangeController();
        t3 = t2._utils$_controller;
        if (t3._state >= 4)
          H.throwExpression(t3._badEventState$0());
        t3._async$_add$1(t1);
        t2._stream.lastValue = t1;
      }, "call$1", "get$removeNode", 2, 0, 37, 107, [], "removeNode", 165],
      _registerProfiles$1: [function(m) {
        m.forEach$1(0, new T.SimpleNodeProvider__registerProfiles_closure(this));
      }, "call$1", "get$_registerProfiles", 2, 0, 72, 113, [], "_registerProfiles"],
      createResponder$1: [function(dsId) {
        var t1, t2, t3;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.Response);
        t2 = new T.Responder(dsId, [], t1, null, this, null, null, null, [], [], false);
        t3 = new T.SubscribeResponse(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.RespSubscribeController), P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, T.RespSubscribeController), P.LinkedHashSet_LinkedHashSet(null, null, null, T.RespSubscribeController), t2, 0, "initialize");
        t2._responder$_subscription = t3;
        t1.$indexSet(0, 0, t3);
        return t2;
      }, "call$1", "get$createResponder", 2, 0, 161, 170, [], "createResponder"],
      $isMutableNodeProvider: 1,
      $isSerializableNodeProvider: 1,
      static: {SimpleNodeProvider$: [function(m, profiles) {
          var t1 = new T.SimpleNodeProvider(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, T.LocalNode), P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, {func: 1, ret: T.SimpleNode, args: [P.String]}), new T.DummyPermissionManager());
          t1.init$2(m, profiles);
          return t1;
        }, null, null, 0, 4, 262, 25, 25, 113, [], 90, [], "new SimpleNodeProvider"]}
    },
    "+SimpleNodeProvider": [370, 371, 372],
    SimpleNodeProvider__registerProfiles_closure: {
      "^": "Closure:14;_responder$_captured_this_0",
      call$2: [function(key, val) {
        var t1;
        if (typeof key === "string") {
          t1 = H.buildFunctionType(H.buildInterfaceType(T.SimpleNode), [H.buildInterfaceType(P.String)])._isTest$1(val);
          t1 = t1;
        } else
          t1 = false;
        if (t1)
          this._responder$_captured_this_0._profileFactories.$indexSet(0, key, val);
      }, null, null, 4, 0, 14, 65, [], 156, [], "call"]
    },
    SimpleNode: {
      "^": "LocalNodeImpl;removed@-288,parentNode-354,_loaded-288,_listChangeController-355,_listReqListener-310,path-285,callbacks-345,_lastValueUpdate-346,profile-312,attributes-313,configs-313,children-314",
      load$2: [function(_, m, provider) {
        var t1, t2;
        t1 = {};
        if (this._loaded) {
          this.configs.clear$0(0);
          this.attributes.clear$0(0);
          this.children.clear$0(0);
        }
        t1._captured_childPathPre_0 = null;
        t2 = this.path;
        if (t2 === "/")
          t1._captured_childPathPre_0 = "/";
        else
          t1._captured_childPathPre_0 = H.S(t2) + "/";
        m.forEach$1(0, new T.SimpleNode_load_closure(t1, this, provider));
        this._loaded = true;
      }, function($receiver, m) {
        return this.load$2($receiver, m, null);
      }, "load$1", "call$2", "call$1", "get$load", 2, 2, 162, 25, 113, [], 91, [], "load"],
      save$0: [function() {
        var rslt, t1;
        rslt = P.LinkedHashMap__makeEmpty();
        this.configs.forEach$1(0, new T.SimpleNode_save_closure(rslt));
        this.attributes.forEach$1(0, new T.SimpleNode_save_closure0(rslt));
        t1 = this._lastValueUpdate;
        if (t1 != null && t1.value != null)
          rslt.$indexSet(0, "?value", t1.value);
        this.children.forEach$1(0, new T.SimpleNode_save_closure1(rslt));
        return rslt;
      }, "call$0", "get$save", 0, 0, 66, "save"],
      invoke$5: [function(params, responder, response, parentNode, maxPermission) {
        var t1, e, stack, error, rslt, t2, exception, rtype, t3;
        t1 = {};
        t1._captured_rslt_0 = null;
        try {
          rslt = this.onInvoke$1(params);
          t1._captured_rslt_0 = rslt;
          t2 = rslt;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          stack = H.getTraceFromException(exception);
          error = new O.DSError("invokeException", null, J.toString$0(e), null, "response");
          try {
            J.set$detail$x(error, J.toString$0(stack));
          } catch (exception) {
            H.unwrapException(exception);
          }
          J.close$1$x(response, error);
          return error;
        }
        rtype = this.configs.containsKey$1("$result") ? this.configs.$index(0, "$result") : "values";
        if (t2 == null) {
          t3 = J.getInterceptor(rtype);
          if (t3.$eq(rtype, "values")) {
            rslt = P.LinkedHashMap__makeEmpty();
            t1._captured_rslt_0 = rslt;
            t1 = rslt;
          } else {
            if (t3.$eq(rtype, "table"))
              ;
            else if (t3.$eq(rtype, "stream"))
              ;
            t1 = t2;
          }
        } else
          t1 = t2;
        if (!!J.getInterceptor(t1).$isMap)
          response.updateStream$2$streamStatus([t1], "closed");
        else
          J.close$0$x(response);
        return response;
      }, function(params, responder, response, parentNode) {
        return this.invoke$5(params, responder, response, parentNode, 3);
      }, "invoke$4", "call$5", "call$4", "get$invoke", 8, 2, 136, 178, 179, [], 163, [], 118, [], 198, [], 180, [], "invoke"],
      onInvoke$1: [function(params) {
        return;
      }, "call$1", "get$onInvoke", 2, 0, 163, 179, [], "onInvoke"],
      onSubscribe$0: [function() {
      }, "call$0", "get$onSubscribe", 0, 0, 6, "onSubscribe"],
      onCreated$0: [function() {
      }, "call$0", "get$onCreated", 0, 0, 6, "onCreated"],
      onRemoving$0: [function() {
      }, "call$0", "get$onRemoving", 0, 0, 6, "onRemoving"],
      onChildRemoved$2: [function($name, node) {
      }, "call$2", "get$onChildRemoved", 4, 0, 75, 124, [], 158, [], "onChildRemoved"],
      onChildAdded$2: [function($name, node) {
      }, "call$2", "get$onChildAdded", 4, 0, 75, 124, [], 158, [], "onChildAdded"],
      subscribe$2: [function(callback, cacheLevel) {
        this.onSubscribe$0();
        return this.super$LocalNode$subscribe$2(callback, cacheLevel);
      }, function(callback) {
        return this.subscribe$2(callback, 1);
      }, "subscribe$1", "call$2", "call$1", "get$subscribe", 2, 2, 145, 111, 38, [], 112, [], "subscribe", 165],
      onLoadChild$3: [function($name, data, provider) {
        return;
      }, "call$3", "get$onLoadChild", 6, 0, 164, 124, [], 43, [], 91, [], "onLoadChild"],
      createChild$2: [function($name, m) {
        var child, t1, t2;
        child = new T.SimpleNode(false, null, false, null, null, H.S(this.path) + "/" + H.S($name), P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        if (m != null)
          child.load$2(0, m, null);
        this.super$Node$addChild$2($name, child);
        t1 = this.get$listChangeController();
        t2 = t1._utils$_controller;
        if (t2._state >= 4)
          H.throwExpression(t2._badEventState$0());
        t2._async$_add$1($name);
        t1._stream.lastValue = $name;
        return child;
      }, function($name) {
        return this.createChild$2($name, null);
      }, "createChild$1", "call$2", "call$1", "get$createChild", 2, 2, 165, 25, 124, [], 113, [], "createChild"],
      addChild$2: [function($name, node) {
        var t1, t2;
        this.super$Node$addChild$2($name, node);
        t1 = this.get$listChangeController();
        t2 = t1._utils$_controller;
        if (t2._state >= 4)
          H.throwExpression(t2._badEventState$0());
        t2._async$_add$1($name);
        t1._stream.lastValue = $name;
      }, "call$2", "get$addChild", 4, 0, 75, 124, [], 158, [], "addChild"],
      removeChild$1: [function(input) {
        var $name, t1, t2;
        $name = this.super$Node$removeChild$1(input);
        if ($name != null) {
          t1 = this.get$listChangeController();
          t2 = t1._utils$_controller;
          if (t2._state >= 4)
            H.throwExpression(t2._badEventState$0());
          t2._async$_add$1($name);
          t1._stream.lastValue = $name;
        }
        return $name;
      }, "call$1", "get$removeChild", 2, 0, 76, 32, [], "removeChild"],
      $indexSet: [function(_, $name, value) {
        var t1, t2, child;
        if (J.getInterceptor$s($name).startsWith$1($name, "$") || C.JSString_methods.startsWith$1($name, "@"))
          if (C.JSString_methods.startsWith$1($name, "$"))
            this.configs.$indexSet(0, $name, value);
          else
            this.attributes.$indexSet(0, $name, value);
        else if (value == null) {
          $name = this.super$Node$removeChild$1($name);
          if ($name != null) {
            t1 = this.get$listChangeController();
            t2 = t1._utils$_controller;
            if (t2._state >= 4)
              H.throwExpression(t2._badEventState$0());
            t2._async$_add$1($name);
            t1._stream.lastValue = $name;
          }
          return $name;
        } else if (!!J.getInterceptor(value).$isMap) {
          child = new T.SimpleNode(false, null, false, null, null, H.S(this.path) + "/" + $name, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
          child.load$2(0, value, null);
          this.super$Node$addChild$2($name, child);
          t1 = this.get$listChangeController();
          t2 = t1._utils$_controller;
          if (t2._state >= 4)
            H.throwExpression(t2._badEventState$0());
          t2._async$_add$1($name);
          t1._stream.lastValue = $name;
          return child;
        } else {
          this.super$Node$addChild$2($name, value);
          t1 = this.get$listChangeController();
          t2 = t1._utils$_controller;
          if (t2._state >= 4)
            H.throwExpression(t2._badEventState$0());
          t2._async$_add$1($name);
          t1._stream.lastValue = $name;
          return value;
        }
      }, null, "get$[]=", 4, 0, 9, 124, [], 26, [], "[]="],
      static: {SimpleNode$: [function(path) {
          return new T.SimpleNode(false, null, false, null, null, path, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 2, 0, 12, 107, [], "new SimpleNode"]}
    },
    "+SimpleNode": [356],
    SimpleNode_load_closure: {
      "^": "Closure:9;_responder$_box_0,_responder$_captured_this_1,_captured_provider_2",
      call$2: [function(key, value) {
        var childPath;
        if (J.getInterceptor$s(key).startsWith$1(key, "?")) {
          if (key === "?value")
            this._responder$_captured_this_1.updateValue$1(value);
        } else if (C.JSString_methods.startsWith$1(key, "$"))
          this._responder$_captured_this_1.configs.$indexSet(0, key, value);
        else if (C.JSString_methods.startsWith$1(key, "@"))
          this._responder$_captured_this_1.attributes.$indexSet(0, key, value);
        else if (!!J.getInterceptor(value).$isMap) {
          childPath = H.S(this._responder$_box_0._captured_childPathPre_0) + key;
          H.interceptedTypeCast(this._captured_provider_2, "$isSimpleNodeProvider").addNode$2(childPath, value);
        }
      }, null, null, 4, 0, 9, 65, [], 26, [], "call"]
    },
    SimpleNode_save_closure: {
      "^": "Closure:14;_responder$_captured_rslt_0",
      call$2: [function(str, val) {
        this._responder$_captured_rslt_0.$indexSet(0, str, val);
      }, null, null, 4, 0, 14, 159, [], 156, [], "call"]
    },
    SimpleNode_save_closure0: {
      "^": "Closure:14;_captured_rslt_1",
      call$2: [function(str, val) {
        this._captured_rslt_1.$indexSet(0, str, val);
      }, null, null, 4, 0, 14, 159, [], 156, [], "call"]
    },
    SimpleNode_save_closure1: {
      "^": "Closure:166;_captured_rslt_2",
      call$2: [function(str, node) {
        if (node instanceof T.SimpleNode)
          this._captured_rslt_2.$indexSet(0, str, node.save$0());
      }, null, null, 4, 0, 166, 159, [], 158, [], "call"]
    },
    InvokeCallback: {
      "^": "Object;",
      $typedefType: 379,
      $$isTypedef: true
    },
    "+InvokeCallback": "",
    OnInvokeClosed: {
      "^": "Object;",
      $typedefType: 85,
      $$isTypedef: true
    },
    "+OnInvokeClosed": "",
    _NodeFactory: {
      "^": "Object;",
      $typedefType: 380,
      $$isTypedef: true
    },
    "+_NodeFactory": ""
  }], ["dslink.stub", "../tool/node_stub.dart",, L, {
    "^": "",
    main: [function(args) {
    }, "call$1", "main$closure", 2, 0, 263],
    NodeStub: {
      "^": "SimpleNode;removed-288,parentNode-354,_loaded-288,_listChangeController-355,_listReqListener-310,path-285,callbacks-345,_lastValueUpdate-346,profile-312,attributes-313,configs-313,children-314",
      onInvoke$1: [function(params) {
        return params;
      }, "call$1", "get$onInvoke", 2, 0, 163, 179, [], "onInvoke"],
      onSubscribe$0: [function() {
        P.print(this.path);
      }, "call$0", "get$onSubscribe", 0, 0, 6, "onSubscribe"],
      onCreated$0: [function() {
        P.print(P.LinkedHashMap__makeLiteral(["path", this.path]));
      }, "call$0", "get$onCreated", 0, 0, 6, "onCreated"],
      onRemoving$0: [function() {
        P.print(C.C_Unspecified);
      }, "call$0", "get$onRemoving", 0, 0, 6, "onRemoving"],
      onChildRemoved$2: [function($name, node) {
        P.print($name);
      }, "call$2", "get$onChildRemoved", 4, 0, 75, 124, [], 158, [], "onChildRemoved"],
      onChildAdded$2: [function($name, node) {
        P.print($name);
      }, "call$2", "get$onChildAdded", 4, 0, 75, 124, [], 158, [], "onChildAdded"],
      static: {NodeStub$: [function(path) {
          return new L.NodeStub(false, null, false, null, null, path, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, P.$int), null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeLiteral(["$is", "node"]), P.LinkedHashMap__makeEmpty());
        }, null, null, 2, 0, 12, 107, [], "new NodeStub"]}
    },
    "+NodeStub": [373]
  }, 1], ["dslink.utils", "package:dslink/utils.dart",, Q, {
    "^": "",
    DsJson_encode: function(val, pretty) {
      var t1, t2;
      t1 = $.get$DsJson_instance();
      t1.toString;
      if (pretty) {
        t2 = t1._prettyEncoder;
        if (t2 == null) {
          t2 = new P.JsonEncoder("  ", Q.DsJsonCodecImpl__safeEncoder$closure());
          t1.encoder = t2;
          t1._prettyEncoder = t2;
        } else
          t1.encoder = t2;
      }
      t1 = t1.encoder;
      return P._JsonStringStringifier_stringify(val, t1._toEncodable, t1.indent);
    },
    ByteDataUtil_mergeBytes: function(bytesList) {
      var t1, totalLen, _i, t2, output, pos, bytes, t3, t4, t5;
      t1 = bytesList.length;
      if (t1 === 1)
        return bytesList[0];
      for (totalLen = 0, _i = 0; t2 = bytesList.length, _i < t2; t2 === t1 || (0, H.throwConcurrentModificationError)(bytesList), ++_i)
        totalLen += bytesList[_i].byteLength;
      output = new DataView(new ArrayBuffer(totalLen));
      for (t1 = bytesList.length, pos = 0, _i = 0; _i < bytesList.length; bytesList.length === t1 || (0, H.throwConcurrentModificationError)(bytesList), ++_i) {
        bytes = bytesList[_i];
        t2 = output.buffer;
        t2.toString;
        H._checkViewArguments(t2, pos, null);
        t2 = new Uint8Array(t2, pos);
        t3 = bytes.buffer;
        t4 = bytes.byteOffset;
        t5 = bytes.byteLength;
        t3.toString;
        H._checkViewArguments(t3, t4, t5);
        C.NativeUint8List_methods.setAll$2(t2, 0, t5 == null ? new Uint8Array(t3, t4) : new Uint8Array(t3, t4, t5));
        pos += bytes.byteLength;
      }
      return output;
    },
    DsTimer__startTimer: [function() {
      P.Timer_Timer(C.Duration_0, Q.DsTimer__dsLoop$closure());
      $.DsTimer__pending = true;
    }, "call$0", "DsTimer__startTimer$closure", 0, 0, 6],
    DsTimer_callLaterOnce: function(callback) {
      if (!C.JSArray_methods.contains$1($.get$DsTimer__callbacks(), callback)) {
        if (!$.DsTimer__pending) {
          P.Timer_Timer(C.Duration_0, Q.DsTimer__dsLoop$closure());
          $.DsTimer__pending = true;
        }
        $.get$DsTimer__callbacks().push(callback);
      }
    },
    DsTimer__getTimerFunctions: function(time50) {
      var t1, tf, it, t2;
      if ($.get$DsTimer__pendingTimerMap().containsKey$1(time50))
        return $.get$DsTimer__pendingTimerMap().$index(0, time50);
      t1 = [];
      t1.$builtinTypeInfo = [P.Function];
      tf = new Q.TimerFunctions(time50, t1, null, null, null);
      $.get$DsTimer__pendingTimerMap().$indexSet(0, time50, tf);
      t1 = $.get$DsTimer__pendingTimer();
      if (!t1.get$isEmpty(t1)) {
        t1 = $.get$DsTimer__pendingTimer();
        it = t1.get$first(t1);
      } else
        it = null;
      for (; t1 = it == null, !t1;)
        if (it.ts50 > time50) {
          it._list._insertAfter$2(it._collection$_previous, tf);
          break;
        } else {
          t1 = it.get$next();
          t2 = $.get$DsTimer__pendingTimer();
          it = (t1 == null ? t2 != null : t1 !== t2) ? it.get$next() : null;
        }
      if (t1) {
        t1 = $.get$DsTimer__pendingTimer();
        t1._insertAfter$2(t1._collection$_previous, tf);
      }
      if (!$.DsTimer__pending) {
        P.Timer_Timer(C.Duration_0, Q.DsTimer__dsLoop$closure());
        $.DsTimer__pending = true;
      }
      return tf;
    },
    DsTimer__removeTimerFunctions: function(time50) {
      var t1, t2, t3, _i, fun;
      t1 = $.get$DsTimer__pendingTimer();
      if (!t1.get$isEmpty(t1)) {
        t1 = $.get$DsTimer__pendingTimer();
        t2 = t1._collection$_next;
        if (t2 == null ? t1 == null : t2 === t1)
          H.throwExpression(new P.StateError("No such element"));
        t1 = t2.get$ts50() <= time50;
      } else
        t1 = false;
      if (t1) {
        t1 = $.get$DsTimer__pendingTimer();
        t2 = t1._collection$_next;
        if (t2 == null ? t1 == null : t2 === t1)
          H.throwExpression(new P.StateError("No such element"));
        $.get$DsTimer__pendingTimerMap().remove$1(0, t2.ts50);
        t2._list._unlink$1(t2);
        for (t1 = t2._utils$_functions, t3 = t1.length, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          fun = t1[_i];
          $.get$DsTimer__functionsMap().remove$1(0, fun);
          fun.call$0();
        }
        return t2;
      }
      return;
    },
    DsTimer_timerOnceBefore: function(callback, ms) {
      var desiredTime50, existTf, tf;
      desiredTime50 = C.JSDouble_methods.toInt$0(Math.ceil((Date.now() + ms) / 50));
      if ($.get$DsTimer__functionsMap().containsKey$1(callback)) {
        existTf = $.get$DsTimer__functionsMap().$index(0, callback);
        if (existTf.ts50 <= desiredTime50)
          return;
        else
          C.JSArray_methods.remove$1(existTf._utils$_functions, callback);
      }
      if (desiredTime50 <= $.DsTimer__lastTimeRun) {
        Q.DsTimer_callLaterOnce(callback);
        return;
      }
      tf = Q.DsTimer__getTimerFunctions(desiredTime50);
      tf.add$1(0, callback);
      $.get$DsTimer__functionsMap().$indexSet(0, callback, tf);
    },
    DsTimer_timerOnceAfter: function(callback, ms) {
      var desiredTime50, existTf, tf;
      desiredTime50 = C.JSDouble_methods.toInt$0(Math.ceil((Date.now() + ms) / 50));
      if ($.get$DsTimer__functionsMap().containsKey$1(callback)) {
        existTf = $.get$DsTimer__functionsMap().$index(0, callback);
        if (existTf.ts50 >= desiredTime50)
          return;
        else
          C.JSArray_methods.remove$1(existTf._utils$_functions, callback);
      }
      if (desiredTime50 <= $.DsTimer__lastTimeRun) {
        Q.DsTimer_callLaterOnce(callback);
        return;
      }
      tf = Q.DsTimer__getTimerFunctions(desiredTime50);
      tf.add$1(0, callback);
      $.get$DsTimer__functionsMap().$indexSet(0, callback, tf);
    },
    DsTimer__dsLoop: [function() {
      var runnings, t1, t2, t3;
      $.DsTimer__pending = false;
      $.DsTimer__looping = true;
      runnings = $.get$DsTimer__callbacks();
      $.DsTimer__callbacks = [];
      C.JSArray_methods.forEach$1(runnings, new Q.DsTimer__dsLoop_closure());
      t1 = Date.now();
      $.DsTimer__lastTimeRun = C.JSDouble_methods.toInt$0(Math.floor(t1 / 50));
      for (; Q.DsTimer__removeTimerFunctions($.DsTimer__lastTimeRun) != null;)
        ;
      $.DsTimer__looping = false;
      if ($.DsTimer__mergeCycle) {
        $.DsTimer__mergeCycle = false;
        Q.DsTimer__dsLoop();
      }
      t2 = $.get$DsTimer__pendingTimer();
      if (!t2.get$isEmpty(t2)) {
        if (!$.DsTimer__pending) {
          t2 = $.DsTimer_timerTs50;
          t3 = $.get$DsTimer__pendingTimer();
          if (t2 !== t3.get$first(t3).get$ts50()) {
            t2 = $.get$DsTimer__pendingTimer();
            $.DsTimer_timerTs50 = t2.get$first(t2).get$ts50();
            t2 = $.DsTimer_timerTimer;
            if (t2 != null && t2.get$isActive())
              $.DsTimer_timerTimer.cancel$0();
            $.DsTimer_timerTimer = P.Timer_Timer(P.Duration$(0, 0, 0, $.DsTimer_timerTs50 * 50 + 1 - t1, 0, 0), Q.DsTimer__startTimer$closure());
          }
        }
      } else {
        t1 = $.DsTimer_timerTimer;
        if (t1 != null) {
          if (t1.get$isActive())
            $.DsTimer_timerTimer.cancel$0();
          $.DsTimer_timerTimer = null;
        }
      }
    }, "call$0", "DsTimer__dsLoop$closure", 0, 0, 6],
    DEBUG_MODE: function() {
      var t1, exception;
      t1 = $._DEBUG_MODE;
      if (t1 != null)
        return t1;
      try {
        $._DEBUG_MODE = false;
        t1 = false;
      } catch (exception) {
        H.unwrapException(exception);
        $._DEBUG_MODE = true;
        t1 = true;
      }
      return t1;
    },
    logger: function() {
      var t1 = $._logger;
      if (t1 != null)
        return t1;
      $.hierarchicalLoggingEnabled = true;
      t1 = N.Logger_Logger("DSA");
      $._logger = t1;
      t1._getStream$0().listen$1(new Q.logger_closure());
      return $._logger;
    },
    updateLogLevel: [function($name) {
      var t1, levels, _i, l;
      t1 = J.trim$0$s($name);
      levels = P.LinkedHashMap__makeEmpty();
      for (_i = 0; _i < 10; ++_i) {
        l = C.List_O1R[_i];
        levels.$indexSet(0, l.name, l);
      }
      l = levels.$index(0, t1.toUpperCase());
      if (l != null) {
        t1 = Q.logger();
        t1.toString;
        if ($.hierarchicalLoggingEnabled && t1.parent != null)
          t1._level = l;
        else {
          if (t1.parent != null)
            H.throwExpression(new P.UnsupportedError("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
          $._rootLevel = l;
        }
      }
    }, "call$1", "updateLogLevel$closure", 2, 0, 37, 124, [], "updateLogLevel"],
    buildEnumType: [function(values) {
      return "enum[" + J.join$1$ax(values, ",") + "]";
    }, "call$1", "buildEnumType$closure", 2, 0, 274, 67, [], "buildEnumType"],
    buildActionIO: [function(types) {
      return J.map$1$ax(types.get$keys(), new Q.buildActionIO_closure(types)).toList$0(0);
    }, "call$1", "buildActionIO$closure", 2, 0, 275, 212, [], "buildActionIO"],
    DSLinkJSON: {
      "^": "Object;_json@-289,name*-285,version*-285,description@-285,main@-285,engines@-374,configs@-375,getDependencies@-287",
      verify$0: [function() {
        if (this.name == null)
          throw H.wrapException(P.Exception_Exception("DSLink Name is required."));
        if (this.main == null)
          throw H.wrapException(P.Exception_Exception("DSLink Main Script is required."));
      }, "call$0", "get$verify", 0, 0, 6, "verify"],
      save$0: [function() {
        var t1, map, t2, _i, key;
        if (this.name == null)
          H.throwExpression(P.Exception_Exception("DSLink Name is required."));
        if (this.main == null)
          H.throwExpression(P.Exception_Exception("DSLink Main Script is required."));
        t1 = this._json;
        t1 = t1 != null ? t1 : P.LinkedHashMap__makeEmpty();
        map = P.LinkedHashMap_LinkedHashMap$from(t1, P.String, null);
        map.$indexSet(0, "name", this.name);
        map.$indexSet(0, "version", this.version);
        map.$indexSet(0, "description", this.description);
        map.$indexSet(0, "main", this.main);
        map.$indexSet(0, "engines", this.engines);
        map.$indexSet(0, "configs", this.configs);
        map.$indexSet(0, "getDependencies", this.getDependencies);
        t1 = new H.LinkedHashMapKeyIterable(map);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(map, 0)];
        t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        t2 = t1.length;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          if (map.$index(0, key) == null)
            map.remove$1(0, key);
        }
        return map;
      }, "call$0", "get$save", 0, 0, 66, "save"],
      static: {DSLinkJSON$: [function() {
          return new Q.DSLinkJSON(null, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), []);
        }, null, null, 0, 0, 5, "new DSLinkJSON"], DSLinkJSON_DSLinkJSON$from: [function(map) {
          var j = new Q.DSLinkJSON(null, null, null, null, null, P.LinkedHashMap__makeEmpty(), P.LinkedHashMap__makeEmpty(), []);
          j._json = map;
          j.name = map.$index(0, "name");
          j.version = map.$index(0, "version");
          j.description = map.$index(0, "description");
          j.main = map.$index(0, "main");
          j.engines = map.$index(0, "engines");
          j.configs = map.$index(0, "configs");
          j.getDependencies = map.$index(0, "getDependencies");
          return j;
        }, null, null, 2, 0, 264, 205, [], "new DSLinkJSON$from"]}
    },
    "+DSLinkJSON": [0],
    BinaryData: {
      "^": "Object;mergingList,bytes"
    },
    BinaryInCache: {
      "^": "Object;caches",
      fetchData$1: function(id) {
        var t1, data;
        t1 = this.caches;
        data = t1.$index(0, id);
        if (data != null && data.bytes != null) {
          t1.remove$1(0, id);
          return data.bytes;
        }
        return;
      },
      receiveData$1: function(inputList) {
        var input, t1, bytedata, headerSize, end, t2, i, start, end0, t3, t4, t5, bytes, id, finished, data;
        input = !!J.getInterceptor(inputList).$isUint8List ? inputList : new Uint8Array(H._ensureNativeList(inputList));
        t1 = J.get$buffer$x(input);
        bytedata = (t1 && C.NativeByteBuffer_methods).asByteData$2(t1, input.byteOffset, input.byteLength);
        headerSize = bytedata.getUint32(0, false);
        for (t1 = this.caches, end = input.length, t2 = headerSize - 9, i = 0; i < headerSize; i += 9) {
          start = bytedata.getUint32(i, false);
          end0 = i < t2 ? bytedata.getUint32(i + 9, false) : end;
          t3 = input.buffer;
          t4 = start + input.byteOffset;
          t5 = end0 - start;
          t3.toString;
          H._checkViewArguments(t3, t4, t5);
          bytes = new DataView(t3, t4, t5);
          id = C.JSInt_methods.toString$0(bytedata.getUint32(i + 4, false));
          finished = bytedata.getUint8(i + 8) === 0;
          data = t1.$index(0, id);
          if (data == null) {
            data = new Q.BinaryData(null, null);
            data.bytes = null;
            if (finished)
              data.bytes = bytes;
            else
              data.mergingList = [bytes];
            t1.$indexSet(0, id, data);
          } else {
            t3 = data.mergingList;
            if (t3 != null)
              t3.push(bytes);
            else
              data.mergingList = [bytes];
            if (finished) {
              data.bytes = Q.ByteDataUtil_mergeBytes(data.mergingList);
              data.mergingList = null;
            }
          }
        }
      }
    },
    BinaryOutCache: {
      "^": "Object;id,caches",
      export$0: function() {
        var t1, t2, datapos, output, t3, idToRemove, _i;
        t1 = {};
        t1._captured_count_0 = 0;
        t1._captured_totalLength_1 = 0;
        t2 = this.caches;
        t2.forEach$1(0, new Q.BinaryOutCache_export_closure(t1));
        t1._captured_headpos_2 = 0;
        datapos = t1._captured_count_0 * 9;
        t1._captured_datapos_3 = datapos;
        output = new Uint8Array(H._checkLength(t1._captured_totalLength_1 + datapos));
        t3 = output.buffer;
        idToRemove = [];
        t2.forEach$1(0, new Q.BinaryOutCache_export_closure0(t1, output, (t3 && C.NativeByteBuffer_methods).asByteData$2(t3, 0, null), idToRemove));
        for (t1 = idToRemove.length, _i = 0; _i < idToRemove.length; idToRemove.length === t1 || (0, H.throwConcurrentModificationError)(idToRemove), ++_i)
          t2.remove$1(0, idToRemove[_i]);
        return output;
      }
    },
    BinaryOutCache_export_closure: {
      "^": "Closure:167;_utils$_box_0",
      call$2: function(id, data) {
        var t1 = this._utils$_box_0;
        ++t1._captured_count_0;
        t1._captured_totalLength_1 = t1._captured_totalLength_1 + J.get$lengthInBytes$x(data.bytes);
      }
    },
    BinaryOutCache_export_closure0: {
      "^": "Closure:167;_utils$_box_0,_captured_output_1,_captured_bytedata_2,_captured_idToRemove_3",
      call$2: function(id, data) {
        var t1, t2, t3, t4, t5;
        t1 = this._captured_bytedata_2;
        t2 = this._utils$_box_0;
        t1.setUint32(t2._captured_headpos_2, t2._captured_datapos_3, false);
        t1.setUint32(t2._captured_headpos_2 + 4, id, false);
        this._captured_idToRemove_3.push(id);
        t1 = t2._captured_headpos_2;
        t3 = data.bytes;
        t4 = J.get$buffer$x(t3);
        t5 = t3.byteOffset;
        t3 = t3.byteLength;
        t4.toString;
        C.NativeUint8List_methods.setAll$2(this._captured_output_1, t1 + 9, H.NativeUint8List_NativeUint8List$view(t4, t5, t3));
        t2._captured_headpos_2 += 9;
        t2._captured_datapos_3 = t2._captured_datapos_3 + J.get$lengthInBytes$x(data.bytes);
      }
    },
    DsJsonCodecImpl: {
      "^": "Object;encoder,decoder,_prettyEncoder",
      decodeJsonFrame$2: function(str, cache) {
        return P._parseJson(str, new Q.DsJsonCodecImpl_decodeJsonFrame__reviver(cache));
      },
      encodeJsonFrame$3$pretty: function(val, cache, pretty) {
        var t1, encoder;
        t1 = new Q.DsJsonCodecImpl_encodeJsonFrame__encoder(cache);
        encoder = pretty ? new P.JsonEncoder("  ", t1) : new P.JsonEncoder(null, t1);
        return P._JsonStringStringifier_stringify(val, encoder._toEncodable, encoder.indent);
      },
      static: {DsJsonCodecImpl__safeEncoder: [function(value) {
          return;
        }, "call$1", "DsJsonCodecImpl__safeEncoder$closure", 2, 0, 7, 26, []]}
    },
    DsJsonCodecImpl_decodeJsonFrame__reviver: {
      "^": "Closure:14;_captured_cache_0",
      call$2: function(key, value) {
        if (typeof value === "string" && C.JSString_methods.startsWith$1(value, "\u001bbytes,"))
          return this._captured_cache_0.fetchData$1(J.substring$1$s(value, 7));
        return value;
      }
    },
    DsJsonCodecImpl_encodeJsonFrame__encoder: {
      "^": "Closure:7;_captured_cache_0",
      call$1: [function(value) {
        var t1, t2, t3;
        if (!!J.getInterceptor(value).$isByteData) {
          t1 = this._captured_cache_0;
          t2 = ++t1.id;
          t3 = new Q.BinaryData(null, null);
          t3.bytes = value;
          t1.caches.$indexSet(0, t2, t3);
          return "\u001bbytes," + t2;
        }
        return;
      }, null, null, 2, 0, null, 26, [], "call"]
    },
    BroadcastStreamController: {
      "^": "Object;_utils$_controller,_stream,_onStartListen,_utils$_onAllCancel,_listening,_listenState",
      get$stream: function(_) {
        return this._stream;
      },
      _utils$_onListen$1: [function(subscription) {
        if (!this._listenState) {
          if (this._onStartListen != null)
            this._onStartListen$0();
          this._listenState = true;
        }
        this._listening = true;
      }, "call$1", "get$_utils$_onListen", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [[P.StreamSubscription, T]]};
        }, this.$receiver, "BroadcastStreamController");
      }, 213, []],
      _utils$_onCancel$1: [function(subscription) {
        this._listening = false;
        if (this._utils$_onAllCancel != null)
          Q.DsTimer_callLaterOnce(this.get$delayedCheckCancel());
        else
          this._listenState = false;
      }, "call$1", "get$_utils$_onCancel", 2, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, void: true, args: [[P.StreamSubscription, T]]};
        }, this.$receiver, "BroadcastStreamController");
      }, 213, []],
      delayedCheckCancel$0: [function() {
        if (!this._listening && this._listenState) {
          this._utils$_onAllCancel$0();
          this._listenState = false;
        }
      }, "call$0", "get$delayedCheckCancel", 0, 0, 6],
      add$1: function(_, t) {
        var t1 = this._utils$_controller;
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(t);
        this._stream.lastValue = t;
      },
      close$0: function(_) {
        return this._utils$_controller.close$0(0);
      },
      get$isClosed: function() {
        return (this._utils$_controller._state & 4) !== 0;
      },
      get$isPaused: function() {
        var t1, t2;
        t1 = this._utils$_controller;
        t2 = t1._state;
        return (t2 & 1) !== 0 ? (t1.get$_subscription()._state & 4) !== 0 : (t2 & 2) === 0;
      },
      BroadcastStreamController$3: function(onStartListen, onAllCancel, onListen, $T) {
        var t1, t2, t3, t4;
        t1 = new P._ControllerStream(this._utils$_controller);
        t1.$builtinTypeInfo = [null];
        t2 = this.get$_utils$_onListen();
        t3 = this.get$_utils$_onCancel();
        t4 = H.getRuntimeTypeArgument(t1, "Stream", 0);
        t3 = new P._AsBroadcastStream(t1, $.Zone__current.registerUnaryCallback$1(t2), $.Zone__current.registerUnaryCallback$1(t3), $.Zone__current, null, null);
        t3.$builtinTypeInfo = [t4];
        t1 = new P._AsBroadcastStreamController(null, t3.get$_onListen(), t3.get$_onCancel(), 0, null, null, null, null);
        t1.$builtinTypeInfo = [t4];
        t1._async$_previous = t1;
        t1._async$_next = t1;
        t3._async$_controller = t1;
        t1 = new Q.CachedStreamWrapper(null, t3, onListen);
        t1.$builtinTypeInfo = [null];
        this._stream = t1;
        this._onStartListen = onStartListen;
        this._utils$_onAllCancel = onAllCancel;
      },
      _onStartListen$0: function() {
        return this._onStartListen.call$0();
      },
      _utils$_onAllCancel$0: function() {
        return this._utils$_onAllCancel.call$0();
      },
      static: {BroadcastStreamController$: function(onStartListen, onAllCancel, onListen, $T) {
          var t1 = new Q.BroadcastStreamController(P.StreamController_StreamController(null, null, null, null, false, $T), null, null, null, false, false);
          t1.$builtinTypeInfo = [$T];
          t1.BroadcastStreamController$3(onStartListen, onAllCancel, onListen, $T);
          return t1;
        }}
    },
    CachedStreamWrapper: {
      "^": "Object;lastValue,_stream,_utils$_onListen",
      contains$1: function(_, needle) {
        return this._stream.contains$1(0, needle);
      },
      get$first: function(_) {
        var t1 = this._stream;
        return t1.get$first(t1);
      },
      fold$2: function(_, initialValue, combine) {
        return this._stream.fold$2(0, initialValue, combine);
      },
      forEach$1: function(_, action) {
        return this._stream.forEach$1(0, action);
      },
      get$isEmpty: function(_) {
        var t1 = this._stream;
        return t1.get$isEmpty(t1);
      },
      get$last: function(_) {
        var t1 = this._stream;
        return t1.get$last(t1);
      },
      get$length: function(_) {
        var t1 = this._stream;
        return t1.get$length(t1);
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        if (this._utils$_onListen != null)
          this._utils$_onListen$1(onData);
        return this._stream.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      timeout$2$onTimeout: function(timeLimit, onTimeout) {
        return this._stream.timeout$2$onTimeout(timeLimit, onTimeout);
      },
      _utils$_onListen$1: function(arg0) {
        return this._utils$_onListen.call$1(arg0);
      }
    },
    TimerFunctions: {
      "^": "LinkedListEntry;ts50<,_utils$_functions,_list,_collection$_next,_collection$_previous",
      add$1: function(_, foo) {
        var t1 = this._utils$_functions;
        if (!C.JSArray_methods.contains$1(t1, foo))
          t1.push(foo);
      },
      remove$1: function(_, foo) {
        C.JSArray_methods.remove$1(this._utils$_functions, foo);
      },
      $asLinkedListEntry: functionThatReturnsNull
    },
    DsTimer__dsLoop_closure: {
      "^": "Closure:168;",
      call$1: function(f) {
        f.call$0();
      }
    },
    logger_closure: {
      "^": "Closure:7;",
      call$1: [function(record) {
        var t1 = J.getInterceptor$x(record);
        P.print("[DSA][" + record.get$level().name + "] " + H.S(t1.get$message(record)));
        if (t1.get$error(record) != null)
          P.print(t1.get$error(record));
        if (record.get$stackTrace() != null)
          P.print(record.get$stackTrace());
      }, null, null, 2, 0, null, 214, [], "call"]
    },
    Interval: {
      "^": "Object;duration>-376",
      get$inMilliseconds: [function() {
        return C.JSInt_methods._tdivFast$1(this.duration._duration, 1000);
      }, null, null, 1, 0, 2, "inMilliseconds"],
      static: {"^": "Interval_ONE_MILLISECOND<-377,Interval_TWO_MILLISECONDS<-377,Interval_FOUR_MILLISECONDS<-377,Interval_EIGHT_MILLISECONDS<-377,Interval_SIXTEEN_MILLISECONDS<-377,Interval_THIRTY_MILLISECONDS<-377,Interval_FIFTY_MILLISECONDS<-377,Interval_ONE_HUNDRED_MILLISECONDS<-377,Interval_TWO_HUNDRED_MILLISECONDS<-377,Interval_THREE_HUNDRED_MILLISECONDS<-377,Interval_QUARTER_SECOND<-377,Interval_HALF_SECOND<-377,Interval_ONE_SECOND<-377,Interval_TWO_SECONDS<-377,Interval_THREE_SECONDS<-377,Interval_FOUR_SECONDS<-377,Interval_FIVE_SECONDS<-377,Interval_ONE_MINUTE<-377", Interval$: [function(duration) {
          return new Q.Interval(duration);
        }, null, null, 2, 0, 265, 27, [], "new Interval"], Interval$forMilliseconds: [function(ms) {
          return new Q.Interval(P.Duration$(0, 0, 0, ms, 0, 0));
        }, null, null, 2, 0, 19, 206, [], "new Interval$forMilliseconds"], Interval$forSeconds: [function(seconds) {
          return new Q.Interval(P.Duration$(0, 0, 0, 0, 0, seconds));
        }, null, null, 2, 0, 19, 207, [], "new Interval$forSeconds"], Interval$forMinutes: [function(minutes) {
          return new Q.Interval(P.Duration$(0, 0, 0, 0, minutes, 0));
        }, null, null, 2, 0, 19, 208, [], "new Interval$forMinutes"], Interval$forHours: [function(hours) {
          return new Q.Interval(P.Duration$(0, hours, 0, 0, 0, 0));
        }, null, null, 2, 0, 19, 209, [], "new Interval$forHours"]}
    },
    "+Interval": [0],
    Scheduler: {
      "^": "Object;",
      static: {Scheduler$: [function() {
          return new Q.Scheduler();
        }, null, null, 0, 0, 266, "new Scheduler"], Scheduler_currentTimer: [function() {
          return $.Zone__current.$index(0, "dslink.scheduler.timer");
        }, null, null, 1, 0, 267, "currentTimer"], Scheduler_cancelCurrentTimer: [function() {
          $.Zone__current.$index(0, "dslink.scheduler.timer").cancel$0();
        }, "call$0", "Scheduler_cancelCurrentTimer$closure", 0, 0, 6, "cancelCurrentTimer"], Scheduler_every: [function(interval, action) {
          var t1, duration;
          t1 = J.getInterceptor(interval);
          if (!!t1.$isDuration)
            duration = interval;
          else if (typeof interval === "number" && Math.floor(interval) === interval)
            duration = P.Duration$(0, 0, 0, interval, 0, 0);
          else if (!!t1.$isInterval)
            duration = interval.duration;
          else
            throw H.wrapException(P.Exception_Exception("Invalid Interval: " + H.S(interval)));
          return P.Timer_Timer$periodic(duration, new Q.Scheduler_every_closure(action));
        }, "call$2", "Scheduler_every$closure", 4, 0, 268, 210, [], 50, [], "every"], Scheduler_repeat: [function(times, action) {
          var $goto = 0, completer = new P.Completer_Completer(), handler = 1, currentError, i;
          function Scheduler_repeat(errorCode, result) {
            if (errorCode === 1) {
              currentError = result;
              $goto = handler;
            }
            while (true)
              switch ($goto) {
                case 0:
                  // Function start
                  i = 1;
                case 2:
                  // for condition
                  if (!(i <= times)) {
                    // goto after for
                    $goto = 4;
                    break;
                  }
                  $goto = 5;
                  return H.asyncHelper(action.call$0(), Scheduler_repeat, completer);
                case 5:
                  // returning from await.
                case 3:
                  // for update
                  ++i;
                  // goto for condition
                  $goto = 2;
                  break;
                case 4:
                  // after for
                  // implicit return
                  return H.asyncHelper(null, 0, completer, null);
                case 1:
                  // rethrow
                  return H.asyncHelper(currentError, 1, completer);
              }
          }
          return H.asyncHelper(null, Scheduler_repeat, completer, null);
        }, "call$2", "Scheduler_repeat$closure", 4, 0, 269, 211, [], 50, [], "repeat"], Scheduler_tick: [function(times, interval, action) {
          var $goto = 0, completer = new P.Completer_Completer(), handler = 1, currentError, i;
          function Scheduler_tick(errorCode, result) {
            if (errorCode === 1) {
              currentError = result;
              $goto = handler;
            }
            while (true)
              switch ($goto) {
                case 0:
                  // Function start
                  i = 1;
                case 2:
                  // for condition
                  if (!(i <= times)) {
                    // goto after for
                    $goto = 4;
                    break;
                  }
                  $goto = 5;
                  return H.asyncHelper(P.Future_Future$delayed(new P.Duration(1000 * C.JSInt_methods._tdivFast$1(interval.duration._duration, 1000)), null, null), Scheduler_tick, completer);
                case 5:
                  // returning from await.
                  $goto = 6;
                  return H.asyncHelper(action.call$0(), Scheduler_tick, completer);
                case 6:
                  // returning from await.
                case 3:
                  // for update
                  ++i;
                  // goto for condition
                  $goto = 2;
                  break;
                case 4:
                  // after for
                  // implicit return
                  return H.asyncHelper(null, 0, completer, null);
                case 1:
                  // rethrow
                  return H.asyncHelper(currentError, 1, completer);
              }
          }
          return H.asyncHelper(null, Scheduler_tick, completer, null);
        }, "call$3", "Scheduler_tick$closure", 6, 0, 270, 211, [], 210, [], 50, [], "tick"], Scheduler_runLater: [function(action) {
          P.Timer_Timer(C.Duration_0, action);
        }, "call$1", "Scheduler_runLater$closure", 2, 0, 271, 50, [], "runLater"], Scheduler_later: [function(action) {
          return P.Future_Future(action, null);
        }, "call$1", "Scheduler_later$closure", 2, 0, 177, 50, [], "later"], Scheduler_after: [function(duration, action) {
          return P.Future_Future$delayed(duration, action, null);
        }, "call$2", "Scheduler_after$closure", 4, 0, 272, 27, [], 50, [], "after"], Scheduler_runAfter: [function(duration, action) {
          return P.Timer_Timer(duration, action);
        }, "call$2", "Scheduler_runAfter$closure", 4, 0, 273, 27, [], 50, [], "runAfter"]}
    },
    "+Scheduler": [0],
    Scheduler_every_closure: {
      "^": "Closure:169;_captured_action_0",
      call$1: [function(timer) {
        var $goto = 0, completer = new P.Completer_Completer(), handler = 1, currentError, $self = this;
        function call$1(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                $goto = 2;
                return H.asyncHelper(P.runZoned($self._captured_action_0, null, null, P.LinkedHashMap__makeLiteral(["dslink.scheduler.timer", timer])), call$1, completer);
              case 2:
                // returning from await.
                // implicit return
                return H.asyncHelper(null, 0, completer, null);
              case 1:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, call$1, completer, null);
      }, null, null, 2, 0, 169, 215, [], "call"]
    },
    buildActionIO_closure: {
      "^": "Closure:7;_captured_types_0",
      call$1: [function(it) {
        return P.LinkedHashMap__makeLiteral(["name", it, "type", this._captured_types_0.$index(0, it)]);
      }, null, null, 2, 0, 7, 115, [], "call"]
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
      var copies = [];
      return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
    },
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null) {
        t1 = $.Device__isOpera;
        if (t1 == null) {
          t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
          $.Device__isOpera = t1;
        }
        t1 = !t1 && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
        $.Device__isWebKit = t1;
      }
      return t1;
    },
    convertNativeToDart_AcceptStructuredClone_findSlot: {
      "^": "Closure:170;_captured_values_0,_captured_copies_1",
      call$1: function(value) {
        var t1, $length, i, t2;
        t1 = this._captured_values_0;
        $length = t1.length;
        for (i = 0; i < $length; ++i) {
          t2 = t1[i];
          if (t2 == null ? value == null : t2 === value)
            return i;
        }
        t1.push(value);
        this._captured_copies_1.push(null);
        return $length;
      }
    },
    convertNativeToDart_AcceptStructuredClone_readSlot: {
      "^": "Closure:19;_captured_copies_2",
      call$1: function(i) {
        return this._captured_copies_2[i];
      }
    },
    convertNativeToDart_AcceptStructuredClone_writeSlot: {
      "^": "Closure:171;_captured_copies_3",
      call$2: function(i, x) {
        this._captured_copies_3[i] = x;
      }
    },
    convertNativeToDart_AcceptStructuredClone_walk: {
      "^": "Closure:7;_captured_mustCopy_4,_captured_findSlot_5,_captured_readSlot_6,_captured_writeSlot_7",
      call$1: function(e) {
        var proto, slot, copy, t1, t2, _i, key, $length, i;
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
        if (e instanceof RegExp)
          throw H.wrapException(new P.UnimplementedError("structured clone of RegExp"));
        proto = Object.getPrototypeOf(e);
        if (proto === Object.prototype || proto === null) {
          slot = this._captured_findSlot_5.call$1(e);
          copy = this._captured_readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = P.LinkedHashMap__makeEmpty();
          this._captured_writeSlot_7.call$2(slot, copy);
          for (t1 = Object.keys(e), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            key = t1[_i];
            copy.$indexSet(0, key, this.call$1(e[key]));
          }
          return copy;
        }
        if (e instanceof Array) {
          slot = this._captured_findSlot_5.call$1(e);
          copy = this._captured_readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          t1 = J.getInterceptor$asx(e);
          $length = t1.get$length(e);
          copy = this._captured_mustCopy_4 ? new Array($length) : e;
          this._captured_writeSlot_7.call$2(slot, copy);
          for (t2 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
            t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
          return copy;
        }
        return e;
      }
    },
    FilteredElementList: {
      "^": "ListBase;_node,_childNodes",
      get$_filtered: function() {
        var t1 = this._childNodes;
        return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, H.getTypeArgumentByIndex(this, 0));
      },
      forEach$1: function(_, f) {
        C.JSArray_methods.forEach$1(this.get$_filtered(), f);
      },
      $indexSet: function(_, index, value) {
        J.replaceWith$1$x(this.get$_filtered()[index], value);
      },
      set$length: function(_, newLength) {
        var len = this.get$_filtered().length;
        if (newLength >= len)
          return;
        else if (newLength < 0)
          throw H.wrapException(P.ArgumentError$("Invalid list length"));
        this.removeRange$2(0, newLength, len);
      },
      add$1: function(_, value) {
        this._childNodes._this.appendChild(value);
      },
      addAll$1: function(_, iterable) {
        var t1, t2;
        for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
      },
      contains$1: function(_, needle) {
        return false;
      },
      setRange$4: function(_, start, end, iterable, skipCount) {
        throw H.wrapException(new P.UnsupportedError("Cannot setRange on filtered list"));
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      removeRange$2: function(_, start, end) {
        C.JSArray_methods.forEach$1(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
      },
      clear$0: function(_) {
        J._clearChildren$0$x(this._childNodes._this);
      },
      remove$1: function(_, element) {
        var i;
        for (i = 0; i < this.get$_filtered().length; ++i)
          this.get$_filtered();
        return false;
      },
      get$length: function(_) {
        return this.get$_filtered().length;
      },
      $index: function(_, index) {
        return this.get$_filtered()[index];
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this.get$_filtered();
        t2 = new J.ArrayIterator(t1, t1.length, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        return t2;
      }
    },
    FilteredElementList__filtered_closure: {
      "^": "Closure:7;",
      call$1: function(n) {
        return !!J.getInterceptor(n).$isElement;
      }
    },
    FilteredElementList_removeRange_closure: {
      "^": "Closure:7;",
      call$1: function(el) {
        return J.remove$0$ax(el);
      }
    }
  }], ["logging", "package:logging/logging.dart",, N, {
    "^": "",
    Logger: {
      "^": "Object;name>,parent>,_level,_children,children>,_controller",
      get$fullName: function() {
        var t1, t2, t3;
        t1 = this.parent;
        t2 = t1 == null || t1.name === "";
        t3 = this.name;
        return t2 ? t3 : t1.get$fullName() + "." + t3;
      },
      get$level: function() {
        if ($.hierarchicalLoggingEnabled) {
          var t1 = this._level;
          if (t1 != null)
            return t1;
          t1 = this.parent;
          if (t1 != null)
            return t1.get$level();
        }
        return $._rootLevel;
      },
      log$5: function(logLevel, message, error, stackTrace, zone) {
        var t, t1, exception, t2, t3, record, target;
        t1 = this.get$level();
        if (logLevel.value >= t1.value) {
          if (!!J.getInterceptor(message).$isFunction)
            message = message.call$0();
          t1 = message;
          if (typeof t1 !== "string")
            message = J.toString$0(message);
          if (stackTrace == null) {
            t1 = $.recordStackTraceAtLevel;
            t1 = J.get$value$x(logLevel) >= t1.value;
          } else
            t1 = false;
          if (t1)
            try {
              t1 = "autogenerated stack trace for " + H.S(logLevel) + " " + H.S(message);
              throw H.wrapException(t1);
            } catch (exception) {
              H.unwrapException(exception);
              t = H.getTraceFromException(exception);
              stackTrace = t;
            }
          zone = $.Zone__current;
          t1 = this.get$fullName();
          t2 = Date.now();
          t3 = $.LogRecord__nextNumber;
          $.LogRecord__nextNumber = t3 + 1;
          record = new N.LogRecord(logLevel, message, t1, new P.DateTime(t2, false), t3, error, stackTrace, zone);
          if ($.hierarchicalLoggingEnabled)
            for (target = this; target != null;) {
              t1 = target._controller;
              if (t1 != null) {
                if (!t1.get$_mayAddEvent())
                  H.throwExpression(t1._addEventError$0());
                t1._sendData$1(record);
              }
              target = target.parent;
            }
          else {
            t1 = N.Logger_Logger("")._controller;
            if (t1 != null) {
              if (!t1.get$_mayAddEvent())
                H.throwExpression(t1._addEventError$0());
              t1._sendData$1(record);
            }
          }
        }
      },
      log$4: function(logLevel, message, error, stackTrace) {
        return this.log$5(logLevel, message, error, stackTrace, null);
      },
      _getStream$0: function() {
        var t1, t2;
        if ($.hierarchicalLoggingEnabled || this.parent == null) {
          t1 = this._controller;
          if (t1 == null) {
            t1 = P.StreamController_StreamController$broadcast(null, null, true, N.LogRecord);
            this._controller = t1;
          }
          t1.toString;
          t2 = new P._BroadcastStream(t1);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
          return t2;
        } else
          return N.Logger_Logger("")._getStream$0();
      },
      static: {Logger_Logger: function($name) {
          return $.get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
        }}
    },
    Logger_Logger_closure: {
      "^": "Closure:5;_captured_name_0",
      call$0: function() {
        var thisName, dot, $parent, t1, t2;
        thisName = this._captured_name_0;
        if (C.JSString_methods.startsWith$1(thisName, "."))
          H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
        dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
        if (dot === -1)
          $parent = thisName !== "" ? N.Logger_Logger("") : null;
        else {
          $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
          thisName = C.JSString_methods.substring$1(thisName, dot + 1);
        }
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, N.Logger);
        t2 = new P.UnmodifiableMapView(t1);
        t2.$builtinTypeInfo = [null, null];
        t1 = new N.Logger(thisName, $parent, null, t1, t2, null);
        if ($parent != null)
          $parent._children.$indexSet(0, thisName, t1);
        return t1;
      }
    },
    Level: {
      "^": "Object;name>,value>",
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof N.Level && this.value === other.value;
      },
      $lt: function(_, other) {
        return C.JSInt_methods.$lt(this.value, other.get$value(other));
      },
      $gt: function(_, other) {
        return C.JSInt_methods.$gt(this.value, C.JSNull_methods.get$value(other));
      },
      compareTo$1: function(_, other) {
        return this.value - other.value;
      },
      get$hashCode: function(_) {
        return this.value;
      },
      toString$0: function(_) {
        return this.name;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [N.Level];
      }
    },
    LogRecord: {
      "^": "Object;level<,message>,loggerName,time,sequenceNumber,error>,stackTrace<,zone",
      toString$0: function(_) {
        return "[" + this.level.name + "] " + this.loggerName + ": " + H.S(this.message);
      }
    }
  }], ["metadata", "dart:_metadata",, H, {
    "^": "",
    SupportedBrowser: {
      "^": "Object;browserName,minimumVersion"
    },
    Experimental: {
      "^": "Object;"
    },
    DomName: {
      "^": "Object;name>"
    },
    DocsEditable: {
      "^": "Object;"
    },
    Unstable: {
      "^": "Object;"
    }
  }], ["node_io.common", "package:node_io/common.dart",, Z, {
    "^": "",
    Platform_environment: function() {
      var obj, map, t1, t2, key;
      obj = $.get$_process().$index(0, "env");
      map = P.LinkedHashMap__makeEmpty();
      for (t1 = J.get$iterator$ax(J.$index$asx($.get$context().$index(0, "global"), "Object").callMethod$2("keys", [obj])), t2 = J.getInterceptor$asx(obj); t1.moveNext$0();) {
        key = t1.get$current();
        map.$indexSet(0, key, t2.$index(obj, key));
      }
      return map;
    },
    Process_runSync: function(executable, $arguments, environment, includeParentEnvironment, runInShell, stderrEncoding, stdoutEncoding, workingDirectory) {
      var env, spawnArgs, t1, obj, t2, t3, stdout, stderr;
      if ($._spawnSync == null && H.Primitives_parseInt(J.split$1$s((H.S($.get$_process().$index(0, "version")) + " node.js").split(" ")[0], ".")[1], null, null) < 12)
        $._spawnSync = $.get$context().callMethod$2("require", ["spawn-sync"]);
      env = P.LinkedHashMap__makeEmpty();
      if (includeParentEnvironment)
        env.addAll$1(0, Z.Platform_environment());
      if (runInShell) {
        C.JSArray_methods.checkGrowable$1($arguments, "insert");
        $arguments.splice(0, 0, executable);
        spawnArgs = ["/bin/sh", P.JsObject_JsObject$jsify(P.LinkedHashMap__makeLiteral(["cwd", workingDirectory, "env", env, "input", C.JSArray_methods.join$1($arguments, " ")]))];
      } else
        spawnArgs = [executable, $arguments, P.JsObject_JsObject$jsify(P.LinkedHashMap__makeLiteral(["cwd", workingDirectory, "env", env]))];
      t1 = $._spawnSync;
      if (t1 == null)
        obj = $.get$_child().callMethod$2("spawnSync", spawnArgs);
      else {
        t1 = t1._js$_jsObject;
        t2 = P._convertToJS(null);
        t3 = new H.MappedListIterable(spawnArgs, P._convertToJS$closure());
        t3.$builtinTypeInfo = [null, null];
        t3 = P.List_List$from(t3, true, null);
        obj = P._convertToDart(t1.apply(t2, t3));
      }
      t1 = J.getInterceptor$asx(obj);
      stdout = stdoutEncoding.decode$1(K.bufToList(t1.$index(obj, "stdout")));
      stderr = stderrEncoding.decode$1(K.bufToList(t1.$index(obj, "stderr")));
      return new Z.ProcessResult(t1.$index(obj, "status"), t1.$index(obj, "pid"), stdout, stderr);
    },
    ProcessResult: {
      "^": "Object;exitCode,pid,stdout,stderr"
    }
  }], ["node_io.file", "package:node_io/file.dart",, G, {
    "^": "",
    FileSystemEntityType: {
      "^": "Object;_file$_type",
      toString$0: function(_) {
        return this._file$_type;
      },
      get$hashCode: function(_) {
        return C.JSString_methods.get$hashCode(this._file$_type);
      }
    },
    FileSystemEntity: {
      "^": "Object;",
      get$absolute: function(_) {
        return;
      },
      get$parent: function(_) {
        return;
      },
      get$path: function(_) {
        return;
      },
      exists$0: [function() {
        return;
      }, "call$0", "get$exists", 0, 0, 58]
    },
    File: {
      "^": "FileSystemEntity;_file$_path<",
      length$0: [function(_) {
        return;
      }, "call$0", "get$length", 0, 0, 172],
      readAsBytesSync$0: function() {
        return K.bufToList($.get$_fs().callMethod$2("readFileSync", [this._file$_path]));
      },
      writeAsBytes$3$flush$mode: function(bytes, flush, mode) {
        var t1, completer;
        t1 = new P._Future(0, $.Zone__current, null);
        t1.$builtinTypeInfo = [G.FileStat];
        completer = new P._AsyncCompleter(t1);
        completer.$builtinTypeInfo = [G.FileStat];
        $.get$_fs().callMethod$2("writeFile", [this._file$_path, K.listToBuf(bytes), new G.File_writeAsBytes_closure(this, completer)]);
        return t1;
      },
      writeAsBytes$1: function(bytes) {
        return this.writeAsBytes$3$flush$mode(bytes, false, C.FileSystemEntityType_WRITE);
      }
    },
    File_writeAsBytes_closure: {
      "^": "Closure:7;_file$_captured_this_0,_captured_completer_1",
      call$1: [function(error) {
        this._captured_completer_1.complete$1(0, this._file$_captured_this_0);
      }, null, null, 2, 0, null, 18, [], "call"]
    },
    FileStat: {
      "^": "Object;"
    }
  }], ["node_io.http", "package:node_io/http.dart",, Z, {
    "^": "",
    HttpDate_format: function(date) {
      var d, t1;
      d = date.toUtc$0();
      t1 = C.List_ECn[C.JSInt_methods.$mod((d.isUtc ? H.Primitives_lazyAsJsDate(d).getUTCDay() + 0 : H.Primitives_lazyAsJsDate(d).getDay() + 0) + 6, 7) + 1 - 1] + ", ";
      t1 = t1 + (H.Primitives_getDay(d) <= 9 ? "0" : "") + C.JSInt_methods.toString$0(H.Primitives_getDay(d)) + " " + C.List_h8w[H.Primitives_getMonth(d) - 1] + " " + C.JSInt_methods.toString$0(H.Primitives_getYear(d));
      t1 = t1 + (H.Primitives_getHours(d) <= 9 ? " 0" : " ") + C.JSInt_methods.toString$0(H.Primitives_getHours(d));
      t1 = t1 + (H.Primitives_getMinutes(d) <= 9 ? ":0" : ":") + C.JSInt_methods.toString$0(H.Primitives_getMinutes(d));
      t1 = t1 + (H.Primitives_getSeconds(d) <= 9 ? ":0" : ":") + C.JSInt_methods.toString$0(H.Primitives_getSeconds(d)) + " GMT";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    HttpException: {
      "^": "Object;message>,uri"
    },
    _HttpClient: {
      "^": "Object;",
      close$1$force: function(_, force) {
      },
      close$0: function($receiver) {
        return this.close$1$force($receiver, false);
      },
      openUrl$2: function(method, url) {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, t1, t2;
        function openUrl$2(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                t1 = Z._HttpHeaders$("1.1", 80, null);
                t2 = new P._Future(0, $.Zone__current, null);
                t2.$builtinTypeInfo = [Z.HttpClientResponse];
                t2 = new P._SyncCompleter(t2);
                t2.$builtinTypeInfo = [Z.HttpClientResponse];
                $returnValue = new Z._HttpClientRequest(t2, t1, url, method, [], C.Utf8Codec_false, null, null, null, -1, null);
                // goto return
                $goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, openUrl$2, completer, null);
      },
      postUrl$1: function(url) {
        var $goto = 0, completer = new P.Completer_Completer(), $returnValue, handler = 2, currentError, $self = this;
        function postUrl$1(errorCode, result) {
          if (errorCode === 1) {
            currentError = result;
            $goto = handler;
          }
          while (true)
            switch ($goto) {
              case 0:
                // Function start
                $returnValue = $self.openUrl$2("POST", url);
                // goto return
                $goto = 1;
                break;
              case 1:
                // return
                return H.asyncHelper($returnValue, 0, completer, null);
              case 2:
                // rethrow
                return H.asyncHelper(currentError, 1, completer);
            }
        }
        return H.asyncHelper(null, postUrl$1, completer, null);
      }
    },
    _HttpHeaders: {
      "^": "Object;_headers,protocolVersion,_mutable,_noFoldingHeaders,_contentLength,_persistentConnection,_chunkedTransferEncoding,_http$_host,_http$_port,_defaultPortForScheme",
      $index: function(_, $name) {
        return this._headers.$index(0, J.toLowerCase$0$s($name));
      },
      value$1: [function(_, $name) {
        var values, t1;
        $name = J.toLowerCase$0$s($name);
        values = this._headers.$index(0, $name);
        if (values == null)
          return;
        t1 = J.getInterceptor$asx(values);
        if (t1.get$length(values) > 1)
          throw H.wrapException(new Z.HttpException("More than one value for header " + $name, null));
        return t1.$index(values, 0);
      }, "call$1", "get$value", 2, 0, 87],
      _addAll$2: function($name, value) {
        var t1 = J.getInterceptor(value);
        if (!!t1.$isIterable)
          for (t1 = t1.get$iterator(value); t1.moveNext$0();)
            this._http$_add$2($name, Z._HttpHeaders__validateValue(t1.get$current()));
        else
          this._http$_add$2($name, Z._HttpHeaders__validateValue(value));
      },
      forEach$1: function(_, f) {
        this._headers.forEach$1(0, f);
      },
      set$contentLength: function(contentLength) {
        var t1, t2, t3;
        t1 = !this._mutable;
        if (t1)
          H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
        t2 = this.protocolVersion;
        if (t2 === "1.0" && this._persistentConnection && contentLength === -1)
          throw H.wrapException(new Z.HttpException("Trying to clear ContentLength on HTTP 1.0 headers with 'Connection: Keep-Alive' set", null));
        t3 = this._contentLength;
        if (t3 == null ? contentLength == null : t3 === contentLength)
          return;
        this._contentLength = contentLength;
        if (contentLength >= 0) {
          if (this._chunkedTransferEncoding)
            this.set$chunkedTransferEncoding(false);
          this._http$_set$2("content-length", C.JSInt_methods.toString$0(contentLength));
        } else {
          if (t1)
            H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
          this._headers.remove$1(0, C.JSString_methods.toLowerCase$0("content-length"));
          if (t2 === "1.1")
            this.set$chunkedTransferEncoding(true);
        }
      },
      set$chunkedTransferEncoding: function(chunkedTransferEncoding) {
        var t1, values, $name, value, t2, index;
        t1 = !this._mutable;
        if (t1)
          H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
        if (chunkedTransferEncoding && this.protocolVersion === "1.0")
          throw H.wrapException(new Z.HttpException("Trying to set 'Transfer-Encoding: Chunked' on HTTP 1.0 headers", null));
        if (chunkedTransferEncoding === this._chunkedTransferEncoding)
          return;
        if (chunkedTransferEncoding) {
          values = this._headers.$index(0, "transfer-encoding");
          if (values == null || !J.$eq(J.get$last$ax(values), "chunked"))
            this._addValue$2("transfer-encoding", "chunked");
          this.set$contentLength(-1);
        } else {
          if (t1)
            H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
          $name = C.JSString_methods.toLowerCase$0("transfer-encoding");
          value = Z._HttpHeaders__validateValue("chunked");
          t1 = this._headers;
          values = t1.$index(0, $name);
          if (values != null) {
            t2 = J.getInterceptor$asx(values);
            index = t2.indexOf$1(values, value);
            if (index !== -1)
              t2.removeRange$2(values, index, index + 1);
            if (t2.get$length(values) === 0)
              t1.remove$1(0, $name);
          }
          if ($name === "transfer-encoding" && J.$eq(value, "chunked"))
            this._chunkedTransferEncoding = false;
        }
        this._chunkedTransferEncoding = chunkedTransferEncoding;
      },
      _http$_add$2: function($name, value) {
        var lowerCaseValue;
        switch ($name.length) {
          case 4:
            if ("date" === $name) {
              if (value instanceof P.DateTime) {
                if (!this._mutable)
                  H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
                this._http$_set$2("date", Z.HttpDate_format(value.toUtc$0()));
              } else if (typeof value === "string")
                this._http$_set$2("date", value);
              else
                H.throwExpression(new Z.HttpException("Unexpected type for header named " + $name, null));
              return;
            }
            if ("host" === $name) {
              this._addHost$2($name, value);
              return;
            }
            break;
          case 7:
            if ("expires" === $name) {
              if (value instanceof P.DateTime) {
                if (!this._mutable)
                  H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
                this._http$_set$2("expires", Z.HttpDate_format(value.toUtc$0()));
              } else if (typeof value === "string")
                this._http$_set$2("expires", value);
              else
                H.throwExpression(new Z.HttpException("Unexpected type for header named " + $name, null));
              return;
            }
            break;
          case 10:
            if ("connection" === $name) {
              lowerCaseValue = J.toLowerCase$0$s(value);
              if (lowerCaseValue === "close")
                this._persistentConnection = false;
              else if (lowerCaseValue === "keep-alive")
                this._persistentConnection = true;
              this._addValue$2($name, value);
              return;
            }
            break;
          case 12:
            if ("content-type" === $name) {
              this._http$_set$2("content-type", value);
              return;
            }
            break;
          case 14:
            if ("content-length" === $name) {
              if (typeof value === "number" && Math.floor(value) === value)
                this.set$contentLength(value);
              else if (typeof value === "string")
                this.set$contentLength(H.Primitives_parseInt(value, null, null));
              else
                H.throwExpression(new Z.HttpException("Unexpected type for header named " + $name, null));
              return;
            }
            break;
          case 17:
            if ("transfer-encoding" === $name) {
              if (J.$eq(value, "chunked"))
                this.set$chunkedTransferEncoding(true);
              else
                this._addValue$2("transfer-encoding", value);
              return;
            }
            if ("if-modified-since" === $name) {
              if (value instanceof P.DateTime) {
                if (!this._mutable)
                  H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
                this._http$_set$2("if-modified-since", Z.HttpDate_format(value.toUtc$0()));
              } else if (typeof value === "string")
                this._http$_set$2("if-modified-since", value);
              else
                H.throwExpression(new Z.HttpException("Unexpected type for header named " + $name, null));
              return;
            }
            break;
        }
        this._addValue$2($name, value);
      },
      _addHost$2: function($name, value) {
        var pos, t1, exception;
        t1 = value;
        if (typeof t1 === "string") {
          pos = J.indexOf$1$asx(value, ":");
          if (J.$eq(pos, -1)) {
            this._http$_host = value;
            this._http$_port = 80;
          } else {
            if (J.$gt$n(pos, 0))
              this._http$_host = J.substring$2$s(value, 0, pos);
            else
              this._http$_host = null;
            if (J.$add$ns(pos, 1) === J.get$length$asx(value))
              this._http$_port = 80;
            else
              try {
                this._http$_port = H.Primitives_parseInt(J.substring$1$s(value, J.$add$ns(pos, 1)), null, null);
              } catch (exception) {
                if (H.unwrapException(exception) instanceof P.FormatException)
                  this._http$_port = null;
                else
                  throw exception;
              }
          }
          this._http$_set$2("host", value);
        } else
          throw H.wrapException(new Z.HttpException("Unexpected type for header named " + $name, null));
      },
      _addValue$2: function($name, value) {
        var t1, values, t2;
        t1 = this._headers;
        values = t1.$index(0, $name);
        if (values == null) {
          values = [];
          values.$builtinTypeInfo = [P.String];
          t1.$indexSet(0, $name, values);
        }
        t1 = J.getInterceptor(value);
        if (!!t1.$isDateTime)
          J.add$1$ax(values, Z.HttpDate_format(value));
        else {
          t2 = J.getInterceptor$ax(values);
          if (typeof value === "string")
            t2.add$1(values, value);
          else
            t2.add$1(values, Z._HttpHeaders__validateValue(t1.toString$0(value)));
        }
      },
      _http$_set$2: function($name, value) {
        var values = [];
        values.$builtinTypeInfo = [P.String];
        this._headers.$indexSet(0, $name, values);
        values.push(value);
      },
      _foldHeader$1: function($name) {
        var t1;
        if ($name !== "set-cookie")
          t1 = false;
        else
          t1 = true;
        if (t1)
          return false;
        return true;
      },
      toString$0: function(_) {
        var sb, t1;
        sb = new P.StringBuffer("");
        this._headers.forEach$1(0, new Z._HttpHeaders_toString_closure(this, sb));
        t1 = sb._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _HttpHeaders$3$defaultPortForScheme$initialHeaders: function(protocolVersion, defaultPortForScheme, initialHeaders) {
        if (this.protocolVersion === "1.0") {
          this._persistentConnection = false;
          this._chunkedTransferEncoding = false;
        }
      },
      static: {_HttpHeaders$: function(protocolVersion, defaultPortForScheme, initialHeaders) {
          var t1 = new Z._HttpHeaders(P.HashMap_HashMap(null, null, null, P.String, [P.List, P.String]), protocolVersion, true, null, -1, true, false, null, null, defaultPortForScheme);
          t1._HttpHeaders$3$defaultPortForScheme$initialHeaders(protocolVersion, defaultPortForScheme, initialHeaders);
          return t1;
        }, _HttpHeaders__validateValue: function(value) {
          if (typeof value !== "string")
            return value;
          return value;
        }}
    },
    _HttpHeaders_toString_closure: {
      "^": "Closure:173;_http$_captured_this_0,_http$_captured_sb_1",
      call$2: function($name, values) {
        var t1, t2, fold, i, t3;
        t1 = this._http$_captured_sb_1;
        t2 = t1._contents += H.S($name);
        t1._contents = t2 + ": ";
        fold = this._http$_captured_this_0._foldHeader$1($name);
        for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
          if (i > 0) {
            t3 = t1._contents;
            if (fold)
              t1._contents = t3 + ", ";
            else {
              t1._contents = t3 + "\n";
              t3 = t1._contents += H.S($name);
              t1._contents = t3 + ": ";
            }
          }
          t1._contents += H.S(t2.$index(values, i));
        }
        t1._contents += "\n";
      }
    },
    _HttpClientRequest: {
      "^": "Object;_http$_done,headers,uri,method,_http$_buffer,encoding,bufferOutput,followRedirects,persistentConnection,contentLength,maxRedirects",
      close$0: function(_) {
        var t1, t2, _headers, path, t3, req, _i;
        t1 = this.headers;
        t2 = this.contentLength;
        if (!t1._mutable)
          H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
        t1._addAll$2(C.JSString_methods.toLowerCase$0("content-length"), t2);
        _headers = P.LinkedHashMap__makeEmpty();
        t1._headers.forEach$1(0, new Z._HttpClientRequest_close_closure(this, _headers));
        t1 = this.uri;
        path = t1._path;
        t2 = t1._query;
        t3 = t2 == null;
        if ((t3 ? "" : t2).length > 0)
          path += "?" + H.S(t3 ? "" : t2);
        t2 = t1.scheme === "https" ? $.get$_https() : $.get$_http();
        req = t2.callMethod$2("request", [P.JsObject_JsObject$jsify(P.LinkedHashMap__makeLiteral(["hostname", t1.get$host(t1), "port", t1.get$port(t1), "path", path, "method", this.method, "headers", _headers])), new Z._HttpClientRequest_close_closure0(this)]);
        for (t1 = this._http$_buffer, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          req.callMethod$2("write", [t1[_i]]);
        req.callMethod$1("end");
        return this._http$_done.future;
      },
      add$1: function(_, data) {
        var t1;
        this._http$_buffer.push(K.listToBuf(data));
        t1 = this.contentLength;
        if (t1 < 0) {
          this.contentLength = 0;
          t1 = 0;
        }
        this.contentLength = t1 + J.get$length$asx(data);
      },
      write$1: function(obj) {
        var t1, t2;
        t1 = this.encoding.get$encoder().convert$1(obj);
        this._http$_buffer.push(K.listToBuf(t1));
        t2 = this.contentLength;
        if (t2 < 0) {
          this.contentLength = 0;
          t2 = 0;
        }
        this.contentLength = t2 + t1.length;
      }
    },
    _HttpClientRequest_close_closure: {
      "^": "Closure:14;_http$_captured_this_0,_captured__headers_1",
      call$2: function($name, values) {
        var t1 = this._http$_captured_this_0.headers.value$1(0, $name);
        this._captured__headers_1.$indexSet(0, $name, t1);
        return t1;
      }
    },
    _HttpClientRequest_close_closure0: {
      "^": "Closure:7;_http$_captured_this_2",
      call$1: [function(res) {
        var t1 = this._http$_captured_this_2;
        t1._http$_done.complete$1(0, Z._HttpClientResponse$(res, t1.method));
      }, null, null, 2, 0, null, 216, [], "call"]
    },
    HttpClientRequest: {
      "^": "Object;"
    },
    RedirectInfo: {
      "^": "Object;"
    },
    HttpClientResponse: {
      "^": "Object;",
      $isStream: 1,
      $asStream: function() {
        return [[P.List, P.$int]];
      }
    },
    _HttpClientResponse: {
      "^": "Stream;_http$_controller,_res,_reqMethod,redirects,headers",
      get$first: function(_) {
        var t1 = new P._ControllerStream(this._http$_controller);
        t1.$builtinTypeInfo = [null];
        return t1.get$first(t1);
      },
      get$last: function(_) {
        var t1 = new P._ControllerStream(this._http$_controller);
        t1.$builtinTypeInfo = [null];
        return t1.get$last(t1);
      },
      get$statusCode: function(_) {
        return this._res.$index(0, "statusCode");
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = new P._ControllerStream(this._http$_controller);
        t1.$builtinTypeInfo = [null];
        return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, false, null, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, false, onDone, onError);
      },
      _HttpClientResponse$2: function(res, _reqMethod) {
        var t1, obj, t2, t3, key, t4;
        t1 = this._res;
        obj = t1.$index(0, "headers");
        for (t2 = J.get$iterator$ax(J.$index$asx($.get$context().$index(0, "global"), "Object").callMethod$2("keys", [obj])), t3 = this.headers; t2.moveNext$0();) {
          key = t2.get$current();
          t4 = obj.$index(0, key);
          if (!t3._mutable)
            H.throwExpression(new Z.HttpException("HTTP headers are not mutable", null));
          t3._addAll$2(J.toLowerCase$0$s(key), t4);
        }
        t2 = new Z._HttpClientResponse_onData(this);
        t1.callMethod$2("on", ["data", t2]);
        t1.callMethod$2("on", ["end", new Z._HttpClientResponse_onEnd(this, t2)]);
      },
      $asStream: function() {
        return [[P.List, P.$int]];
      },
      $isHttpClientResponse: 1,
      static: {_HttpClientResponse$: function(res, _reqMethod) {
          var t1, t2;
          t1 = P.StreamController_StreamController(null, null, null, null, true, P.List);
          t2 = [];
          t2.$builtinTypeInfo = [Z.RedirectInfo];
          t1 = new Z._HttpClientResponse(t1, res, _reqMethod, t2, Z._HttpHeaders$(res.$index(0, "httpVersion"), 80, null));
          t1._HttpClientResponse$2(res, _reqMethod);
          return t1;
        }}
    },
    _HttpClientResponse_onData: {
      "^": "Closure:7;_http$_captured_this_0",
      call$1: [function(buf) {
        var t1, t2;
        t1 = this._http$_captured_this_0._http$_controller;
        t2 = K.bufToList(buf);
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(t2);
      }, null, null, 2, 0, null, 217, [], "call"]
    },
    _HttpClientResponse_onEnd: {
      "^": "Closure:5;_http$_captured_this_1,_captured_onData_2",
      call$0: [function() {
        var t1 = this._http$_captured_this_1;
        t1._http$_controller.close$0(0);
        t1 = t1._res;
        t1.callMethod$2("removeListener", ["data", this._captured_onData_2]);
        t1.callMethod$2("removeListener", ["end", this]);
      }, null, null, 0, 0, null, "call"]
    }
  }], ["node_io.util", "package:node_io/util.dart",, K, {
    "^": "",
    require0: function(input) {
      return $.get$context().callMethod$2("require", [input]);
    },
    bufToList: function(buf) {
      var bytes, $length, offset;
      bytes = [];
      bytes.$builtinTypeInfo = [P.$int];
      $length = buf.$index(0, "length");
      for (offset = 0; offset < $length; ++offset)
        bytes.push(buf.callMethod$2("readUInt8", [offset]));
      return bytes;
    },
    listToBuf: function(bytes) {
      var t1, $length, buf, offset, $byte;
      t1 = J.getInterceptor$asx(bytes);
      $length = t1.get$length(bytes);
      buf = P.JsObject_JsObject($.get$context().$index(0, "Buffer"), [$length]);
      for (t1 = t1.get$iterator(bytes), offset = 0; t1.moveNext$0();) {
        $byte = t1.get$current();
        if (offset >= $length)
          break;
        buf.callMethod$2("writeUInt8", [$byte, offset]);
        ++offset;
      }
      return buf;
    }
  }], ["node_io.websocket", "package:node_io/websocket.dart",, B, {
    "^": "",
    _WebSocket: {
      "^": "Stream;_websocket0$_controller,_websocket0$_socket,_done,_closeCode,_closeReason,pingInterval",
      get$readyState: function(_) {
        return this._websocket0$_socket.$index(0, "readyState");
      },
      add$1: function(_, data) {
        if (typeof data !== "string")
          data = K.listToBuf(data);
        this._websocket0$_socket.callMethod$2("send", [data]);
      },
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = new P._ControllerStream(this._websocket0$_controller);
        t1.$builtinTypeInfo = [null];
        return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      },
      listen$2$onDone: function(onData, onDone) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
      },
      listen$3$onDone$onError: function(onData, onDone, onError) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
      },
      close$2: function(_, code, reason) {
        this._websocket0$_socket.callMethod$2("close", [code, reason]);
        this._closeReason = reason;
        this._closeCode = code;
        this._done.complete$0(0);
        return;
      },
      close$0: function($receiver) {
        return this.close$2($receiver, 1000, null);
      },
      close$1: function($receiver, code) {
        return this.close$2($receiver, code, null);
      },
      _WebSocket$1: function(_socket) {
        var t1, t2, t3;
        t1 = this._done.future;
        t1.then$1(new B._WebSocket_closure(this));
        t2 = this._websocket0$_socket;
        t2.callMethod$2("on", ["message", new B._WebSocket_onData(this)]);
        t3 = new B._WebSocket_onError(this);
        t2.callMethod$2("on", ["error", t3]);
        t1.then$1(new B._WebSocket_closure0(this, t3));
      },
      $asStream: functionThatReturnsNull,
      static: {_WebSocket$: function(_socket) {
          var t1, t2;
          t1 = P.StreamController_StreamController(null, null, null, null, true, P.List);
          t2 = new P._Future(0, $.Zone__current, null);
          t2.$builtinTypeInfo = [null];
          t2 = new P._AsyncCompleter(t2);
          t2.$builtinTypeInfo = [null];
          t1 = new B._WebSocket(t1, _socket, t2, null, null, null);
          t1._WebSocket$1(_socket);
          return t1;
        }, _WebSocket_connect: function(url, protocols, headers) {
          var t1, completer, socket;
          t1 = new P._Future(0, $.Zone__current, null);
          t1.$builtinTypeInfo = [null];
          completer = new P._SyncCompleter(t1);
          completer.$builtinTypeInfo = [null];
          socket = P.JsObject_JsObject($.get$_ws(), [url, P.JsObject_JsObject$jsify(P.LinkedHashMap__makeLiteral(["headers", headers]))]);
          socket.callMethod$2("on", ["open", new B._WebSocket_connect_closure(completer, socket)]);
          return t1;
        }}
    },
    _WebSocket_closure: {
      "^": "Closure:7;_websocket0$_captured_this_0",
      call$1: [function(_) {
        return this._websocket0$_captured_this_0._websocket0$_controller.close$0(0);
      }, null, null, 2, 0, null, 42, [], "call"]
    },
    _WebSocket_onData: {
      "^": "Closure:14;_websocket0$_captured_this_1",
      call$2: [function(data, flags) {
        var t1;
        if (typeof data !== "string")
          data = K.bufToList(data);
        t1 = this._websocket0$_captured_this_1._websocket0$_controller;
        if (t1._state >= 4)
          H.throwExpression(t1._badEventState$0());
        t1._async$_add$1(data);
      }, null, null, 4, 0, null, 43, [], 218, [], "call"]
    },
    _WebSocket_onError: {
      "^": "Closure:7;_websocket0$_captured_this_2",
      call$1: [function(error) {
        this._websocket0$_captured_this_2._websocket0$_controller.addError$1(error);
      }, null, null, 2, 0, null, 18, [], "call"]
    },
    _WebSocket_closure0: {
      "^": "Closure:7;_captured_this_3,_captured_onError_4",
      call$1: [function(_) {
        this._captured_this_3._websocket0$_socket.callMethod$2("removeListener", ["error", this._captured_onError_4]);
      }, null, null, 2, 0, null, 42, [], "call"]
    },
    _WebSocket_connect_closure: {
      "^": "Closure:5;_captured_completer_0,_captured_socket_1",
      call$0: [function() {
        this._captured_completer_0.complete$1(0, B._WebSocket$(this._captured_socket_1));
      }, null, null, 0, 0, null, "call"]
    }
  }]];
  setupProgram(dart, 0);
  // getInterceptor methods
  J.getInterceptor = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object")
      return receiver;
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.$add$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ns(receiver).$add(receiver, a0);
  };
  J.$and$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return (receiver & a0) >>> 0;
    return J.getInterceptor$n(receiver).$and(receiver, a0);
  };
  J.$eq = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor(receiver).$eq(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
      if (a0 >>> 0 === a0 && a0 < receiver.length)
        return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$indexSet$ax = function(receiver, a0, a1) {
    if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0] = a1;
    return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.$shl$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).$shl(receiver, a0);
  };
  J.$sub$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver - a0;
    return J.getInterceptor$n(receiver).$sub(receiver, a0);
  };
  J._clearChildren$0$x = function(receiver) {
    return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
  };
  J._replaceChild$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
  };
  J.add$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).add$1(receiver, a0);
  };
  J.addAll$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.asByteData$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).asByteData$2(receiver, a0, a1);
  };
  J.clear$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).clear$0(receiver);
  };
  J.close$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).close$0(receiver);
  };
  J.close$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).close$1(receiver, a0);
  };
  J.codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
  };
  J.compareTo$1$ns = function(receiver, a0) {
    return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
  };
  J.contains$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.endsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
  };
  J.fold$2$ax = function(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).fold$2(receiver, a0, a1);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.get$buffer$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$buffer(receiver);
  };
  J.get$defaultValue$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$defaultValue(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor(receiver).get$hashCode(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$isFinite$n = function(receiver) {
    return J.getInterceptor$n(receiver).get$isFinite(receiver);
  };
  J.get$isNaN$n = function(receiver) {
    return J.getInterceptor$n(receiver).get$isNaN(receiver);
  };
  J.get$isNotEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$last$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$last(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$lengthInBytes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$lengthInBytes(receiver);
  };
  J.get$list$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$list(receiver);
  };
  J.get$name$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$name(receiver);
  };
  J.get$parent$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$parent(receiver);
  };
  J.get$value$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$value(receiver);
  };
  J.indexOf$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
  };
  J.indexOf$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
  };
  J.join$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).join$1(receiver, a0);
  };
  J.lastIndexOf$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).lastIndexOf$1(receiver, a0);
  };
  J.map$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).map$1(receiver, a0);
  };
  J.matchAsPrefix$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
  };
  J.noSuchMethod$1 = function(receiver, a0) {
    return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
  };
  J.remove$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).remove$0(receiver);
  };
  J.remove$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
  };
  J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
  };
  J.removeRange$2$ax = function(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).removeRange$2(receiver, a0, a1);
  };
  J.replaceAll$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
  };
  J.replaceWith$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
  };
  J.send$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).send$1(receiver, a0);
  };
  J.send$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).send$3(receiver, a0, a1, a2);
  };
  J.set$detail$x = function(receiver, value) {
    return J.getInterceptor$x(receiver).set$detail(receiver, value);
  };
  J.set$length$asx = function(receiver, value) {
    return J.getInterceptor$asx(receiver).set$length(receiver, value);
  };
  J.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
    return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.startsWith$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
  };
  J.substring$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).substring$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.toList$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).toList$0(receiver);
  };
  J.toLowerCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
  };
  J.toString$0 = function(receiver) {
    return J.getInterceptor(receiver).toString$0(receiver);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.where$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).where$1(receiver, a0);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSDouble_methods = J.JSDouble.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNull_methods = J.JSNull.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.NativeByteBuffer_methods = H.NativeByteBuffer.prototype;
  C.NativeUint8List_methods = H.NativeUint8List.prototype;
  C.NodeList_methods = W.NodeList.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C_Unspecified = new O.Unspecified();
  C.C__DelayedDone = new P._DelayedDone();
  C.C__Override = new P._Override();
  C.C__RootZone = new P._RootZone();
  C.DummyECDH_Zqn = new K.DummyECDH("");
  C.Duration_0 = new P.Duration(0);
  C.Duration_5000000 = new P.Duration(5000000);
  C.Endianness_false = new P.Endianness(false);
  C.Endianness_true = new P.Endianness(true);
  C.FileSystemEntityType_WRITE = new G.FileSystemEntityType("WRITE");
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JsonCodec_null_null = new P.JsonCodec(null, null);
  C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
  C.Level_FINEST_300 = new N.Level("FINEST", 300);
  C.Level_FINE_500 = new N.Level("FINE", 500);
  C.Level_INFO_800 = new N.Level("INFO", 800);
  C.Level_OFF_2000 = new N.Level("OFF", 2000);
  C.Level_SEVERE_1000 = new N.Level("SEVERE", 1000);
  C.Level_WARNING_900 = new N.Level("WARNING", 900);
  C.List_$is_$permission_$settings = Isolate.makeConstantList(["$is", "$permission", "$settings"]);
  C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.$int]);
  C.List_2Vk = Isolate.makeConstantList([0, 0, 32776, 33792, 1, 10240, 0, 0]);
  C.List_504 = Isolate.makeConstantList(["none", "read", "write", "config", "never"]);
  C.List_CVk = Isolate.makeConstantList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]);
  C.List_ECn = Isolate.makeConstantList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]);
  C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
  C.Level_ALL_0 = new N.Level("ALL", 0);
  C.Level_FINER_400 = new N.Level("FINER", 400);
  C.Level_CONFIG_700 = new N.Level("CONFIG", 700);
  C.Level_SHOUT_1200 = new N.Level("SHOUT", 1200);
  C.List_O1R = Isolate.makeConstantList([C.Level_ALL_0, C.Level_FINEST_300, C.Level_FINER_400, C.Level_FINE_500, C.Level_CONFIG_700, C.Level_INFO_800, C.Level_WARNING_900, C.Level_SEVERE_1000, C.Level_SHOUT_1200, C.Level_OFF_2000]);
  C.List_empty = Isolate.makeConstantList([]);
  C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.$int]);
  C.List_empty1 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeMirror]);
  C.List_empty2 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeVariableMirror]);
  C.List_empty3 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.String]);
  C.List_gRj = Isolate.makeConstantList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]);
  C.List_h8w = Isolate.makeConstantList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
  C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
  C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
  C.List_qg4 = Isolate.makeConstantList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]);
  C.List_qg40 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
  C.Map_50eJC = new H.ConstantStringMap(5, {none: 0, read: 1, write: 2, config: 3, never: 4}, C.List_504);
  C.List_QoX = Isolate.makeConstantList(["$is", "$interface", "$permissions", "$name", "$type", "$invokable", "$writable", "$settings", "$params", "$columns", "$streamMeta"]);
  C.List_type = Isolate.makeConstantList(["type"]);
  C.Map_P3wDc = new H.ConstantStringMap(1, {type: "profile"}, C.List_type);
  C.Map_P3KlV = new H.ConstantStringMap(1, {type: "interface"}, C.List_type);
  C.List_type_require_writable = Isolate.makeConstantList(["type", "require", "writable"]);
  C.Map_yuSoH = new H.ConstantStringMap(3, {type: "list", require: 3, writable: 3}, C.List_type_require_writable);
  C.Map_P3Gh9 = new H.ConstantStringMap(1, {type: "string"}, C.List_type);
  C.Map_P3R1M = new H.ConstantStringMap(1, {type: "type"}, C.List_type);
  C.List_type_default = Isolate.makeConstantList(["type", "default"]);
  C.Map_c0Q8F = new H.ConstantStringMap(2, {type: "permission", default: "read"}, C.List_type_default);
  C.Map_c02Xj = new H.ConstantStringMap(2, {type: "permission", default: "never"}, C.List_type_default);
  C.Map_P37BY = new H.ConstantStringMap(1, {type: "map"}, C.List_type);
  C.Map_P3P1M = new H.ConstantStringMap(1, {type: "list"}, C.List_type);
  C.Map_QoUOt = new H.ConstantStringMap(11, {$is: C.Map_P3wDc, $interface: C.Map_P3KlV, $permissions: C.Map_yuSoH, $name: C.Map_P3Gh9, $type: C.Map_P3R1M, $invokable: C.Map_c0Q8F, $writable: C.Map_c02Xj, $settings: C.Map_P37BY, $params: C.Map_P3P1M, $columns: C.Map_P3P1M, $streamMeta: C.Map_P3P1M}, C.List_QoX);
  C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty);
  C.List_salt_saltS_saltL = Isolate.makeConstantList(["salt", "saltS", "saltL"]);
  C.Map_gVGBQ = new H.ConstantStringMap(3, {salt: 0, saltS: 1, saltL: 2}, C.List_salt_saltS_saltL);
  C.OptionType_F9d = new E.OptionType("OptionType.SINGLE");
  C.OptionType_Icb = new E.OptionType("OptionType.MULTIPLE");
  C.OptionType_woc = new E.OptionType("OptionType.FLAG");
  C.Symbol_call = new H.Symbol("call");
  C.Symbol_dynamic = new H.Symbol("dynamic");
  C.Symbol_void = new H.Symbol("void");
  C.Type_wEo = H.createRuntimeType('LinkedHashMap');
  C.TypeVariable_ELE = new H.TypeVariable(C.Type_wEo, "V", 0);
  C.Type_aJW = H.createRuntimeType('Future');
  C.TypeVariable_IF2 = new H.TypeVariable(C.Type_aJW, "T", 0);
  C.TypeVariable_N6d = new H.TypeVariable(C.Type_wEo, "K", 0);
  C.Type_81T = H.createRuntimeType('Completer');
  C.TypeVariable_oyn = new H.TypeVariable(C.Type_81T, "T", 0);
  C.Type_6L0 = H.createRuntimeType('Uint8List');
  C.Type_AGr = H.createRuntimeType('JsTypeVariableMirror');
  C.Type_Art = H.createRuntimeType('Float32List');
  C.Type_CAk = H.createRuntimeType('Uint16List');
  C.Type_EjN = H.createRuntimeType('Function');
  C.Type_Ejg = H.createRuntimeType('String');
  C.Type_EsU = H.createRuntimeType('bool');
  C.Type_QuW = H.createRuntimeType('Uint8ClampedList');
  C.Type_SnA = H.createRuntimeType('$int');
  C.Type_UoK = H.createRuntimeType('Int16List');
  C.Type_XXD = H.createRuntimeType('JSObject');
  C.Type_ckn = H.createRuntimeType('Float64List');
  C.Type_dTZ = H.createRuntimeType('Int32List');
  C.Type_dynamic = H.createRuntimeType('dynamic');
  C.Type_eZO = H.createRuntimeType('Null');
  C.Type_irB = H.createRuntimeType('Uint32List');
  C.Type_mp3 = H.createRuntimeType('Int8List');
  C.Type_oGP = H.createRuntimeType('ByteData');
  C.Type_qq1 = H.createRuntimeType('$double');
  C.Type_wAg = H.createRuntimeType('ByteBuffer');
  C.Type_xM7 = H.createRuntimeType('num');
  C.Utf8Codec_false = new P.Utf8Codec(false);
  C._ZoneFunction_3bB = new P._ZoneFunction(C.C__RootZone, P._rootCreatePeriodicTimer$closure());
  C._ZoneFunction_7G2 = new P._ZoneFunction(C.C__RootZone, P._rootRegisterBinaryCallback$closure());
  C._ZoneFunction_Eeh = new P._ZoneFunction(C.C__RootZone, P._rootRegisterUnaryCallback$closure());
  C._ZoneFunction_NMc = new P._ZoneFunction(C.C__RootZone, P._rootHandleUncaughtError$closure());
  C._ZoneFunction__RootZone__rootCreateTimer = new P._ZoneFunction(C.C__RootZone, P._rootCreateTimer$closure());
  C._ZoneFunction__RootZone__rootErrorCallback = new P._ZoneFunction(C.C__RootZone, P._rootErrorCallback$closure());
  C._ZoneFunction__RootZone__rootFork = new P._ZoneFunction(C.C__RootZone, P._rootFork$closure());
  C._ZoneFunction__RootZone__rootPrint = new P._ZoneFunction(C.C__RootZone, P._rootPrint$closure());
  C._ZoneFunction__RootZone__rootRegisterCallback = new P._ZoneFunction(C.C__RootZone, P._rootRegisterCallback$closure());
  C._ZoneFunction__RootZone__rootRun = new P._ZoneFunction(C.C__RootZone, P._rootRun$closure());
  C._ZoneFunction__RootZone__rootRunBinary = new P._ZoneFunction(C.C__RootZone, P._rootRunBinary$closure());
  C._ZoneFunction__RootZone__rootRunUnary = new P._ZoneFunction(C.C__RootZone, P._rootRunUnary$closure());
  C._ZoneFunction__RootZone__rootScheduleMicrotask = new P._ZoneFunction(C.C__RootZone, P._rootScheduleMicrotask$closure());
  C._ZoneSpecification_ALf = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  $.Primitives_mirrorFunctionCacheName = "$cachedFunction";
  $.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $.deferredLoadHook = null;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $.printToZone = null;
  $.JsMirrorSystem__librariesByName = null;
  $.JsMirrorSystem__hasInstalledDeferredLoadHook = false;
  $.classMirrors = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $._RootZone__rootDelegate = null;
  $.Expando__keyCount = 0;
  $._isCryptoProviderLocked = false;
  $.DsTimer__lastTimeRun = -1;
  $.DsTimer__pending = false;
  $.DsTimer__looping = false;
  $.DsTimer__mergeCycle = false;
  $.DsTimer_timerTs50 = -1;
  $.DsTimer_timerTimer = null;
  $._logger = null;
  $._DEBUG_MODE = null;
  $.Device__isOpera = null;
  $.Device__isWebKit = null;
  $.hierarchicalLoggingEnabled = false;
  $.recordStackTraceAtLevel = C.Level_OFF_2000;
  $._rootLevel = C.Level_INFO_800;
  $.LogRecord__nextNumber = 0;
  $._spawnSync = null;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers$[hunkHash](globalsHolder, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryUris = {};
  init.deferredLibraryHashes = {};
  // Empty type-to-interceptor map.
  (function(lazies) {
    var descriptorLength = 4;
    for (var i = 0; i < lazies.length; i += descriptorLength) {
      var fieldName = lazies[i];
      var getterName = lazies[i + 1];
      var lazyValue = lazies[i + 2];
      var staticName = lazies[i + 3];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
    return H.IsolateNatives_computeThisScript();
  }, "thisScript", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
    var t1 = new P.Expando(null);
    t1.$builtinTypeInfo = [P.$int];
    return t1;
  }, "workerIds", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
        return "$receiver$";
      }}));
  }, "noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
        return "$receiver$";
      }}));
  }, "notClosurePattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "undefinedLiteralPropertyPattern", "Option__invalidChars", "get$Option__invalidChars", function() {
    return P.RegExp_RegExp("[ \\t\\r\\n\"'\\\\/]", true, false);
  }, "_invalidChars", "_SOLO_OPT", "get$_SOLO_OPT", function() {
    return P.RegExp_RegExp("^-([a-zA-Z0-9])$", true, false);
  }, "_SOLO_OPT", "_ABBR_OPT", "get$_ABBR_OPT", function() {
    return P.RegExp_RegExp("^-([a-zA-Z0-9]+)(.*)$", true, false);
  }, "_ABBR_OPT", "_LONG_OPT", "get$_LONG_OPT", function() {
    return P.RegExp_RegExp("^--([a-zA-Z\\-_0-9]+)(=(.*))?$", true, false);
  }, "_LONG_OPT", "JsMirrorSystem__dynamicType", "get$JsMirrorSystem__dynamicType", function() {
    return H.JsTypeMirror$(C.Symbol_dynamic);
  }, "_dynamicType", "JsMirrorSystem__voidType", "get$JsMirrorSystem__voidType", function() {
    return H.JsTypeMirror$(C.Symbol_void);
  }, "_voidType", "currentJsMirrorSystem", "get$currentJsMirrorSystem", function() {
    return new H.JsMirrorSystem(null, new H.JsIsolateMirror(H._globalState().currentContext));
  }, "currentJsMirrorSystem", "mangledNames", "get$mangledNames", function() {
    return new H._LazyMangledInstanceNamesMap(init.mangledNames);
  }, "mangledNames", "reflectiveNames", "get$reflectiveNames", function() {
    return new H._LazyReflectiveNamesMap(init.mangledNames, true, 0, null);
  }, "reflectiveNames", "mangledGlobalNames", "get$mangledGlobalNames", function() {
    return new H._LazyMangledNamesMap(init.mangledGlobalNames);
  }, "mangledGlobalNames", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "scheduleImmediateClosure", "Future__nullFuture", "get$Future__nullFuture", function() {
    return P.Future_Future$value(null, null);
  }, "_nullFuture", "_RootZone__rootMap", "get$_RootZone__rootMap", function() {
    return P.HashMap_HashMap(null, null, null, null, null);
  }, "_rootMap", "_toStringVisiting", "get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "context", "get$context", function() {
    return P._wrapToDart(self);
  }, "context", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartObject");
  }, "_DART_OBJECT_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "_DART_CLOSURE_PROPERTY_NAME", "_dartProxyCtor", "get$_dartProxyCtor", function() {
    return function DartObject(o) {
      this.o = o;
    };
  }, "_dartProxyCtor", "HttpClientConnection__fixedLongPollData", "get$HttpClientConnection__fixedLongPollData", function() {
    return C.Utf8Codec_false.encode$1(Q.DsJson_encode(P.LinkedHashMap__makeEmpty(), false));
  }, "_fixedLongPollData", "fixedBlankData", "get$fixedBlankData", function() {
    return C.Utf8Codec_false.encode$1(Q.DsJson_encode(P.LinkedHashMap__makeEmpty(), false));
  }, "fixedBlankData", "DSError_PERMISSION_DENIED", "get$DSError_PERMISSION_DENIED", function() {
    return new O.DSError("permissionDenied", null, null, null, "response");
  }, "PERMISSION_DENIED", "DSError_INVALID_METHOD", "get$DSError_INVALID_METHOD", function() {
    return new O.DSError("invalidMethod", null, null, null, "response");
  }, "INVALID_METHOD", "DSError_NOT_IMPLEMENTED", "get$DSError_NOT_IMPLEMENTED", function() {
    return new O.DSError("notImplemented", null, null, null, "response");
  }, "NOT_IMPLEMENTED", "DSError_INVALID_PATH", "get$DSError_INVALID_PATH", function() {
    return new O.DSError("invalidPath", null, null, null, "response");
  }, "INVALID_PATH", "DSError_INVALID_PATHS", "get$DSError_INVALID_PATHS", function() {
    return new O.DSError("invalidPaths", null, null, null, "response");
  }, "INVALID_PATHS", "DSError_INVALID_VALUE", "get$DSError_INVALID_VALUE", function() {
    return new O.DSError("invalidValue", null, null, null, "response");
  }, "INVALID_VALUE", "DSError_INVALID_PARAMETER", "get$DSError_INVALID_PARAMETER", function() {
    return new O.DSError("invalidParameter", null, null, null, "response");
  }, "INVALID_PARAMETER", "DSError_DISCONNECTED", "get$DSError_DISCONNECTED", function() {
    return new O.DSError("disconnected", null, null, null, "request");
  }, "DISCONNECTED", "Path_invalidChar", "get$Path_invalidChar", function() {
    return P.RegExp_RegExp("[\\.\\\\\\?\\*:|\"<>]", true, false);
  }, "invalidChar", "Path_invalidNameChar", "get$Path_invalidNameChar", function() {
    return P.RegExp_RegExp("[\\/\\.\\\\\\?\\*:|\"<>]", true, false);
  }, "invalidNameChar", "ValueUpdate_TIME_ZONE", "get$ValueUpdate_TIME_ZONE", function() {
    return new O.closure().call$0();
  }, "TIME_ZONE", "_CRYPTO_PROVIDER", "get$_CRYPTO_PROVIDER", function() {
    return $.get$NodeCryptoProvider_INSTANCE();
  }, "_CRYPTO_PROVIDER", "_crypto", "get$_crypto", function() {
    return M.require("crypto");
  }, "_crypto", "_curve", "get$_curve", function() {
    return M.require("dhcurve");
  }, "_curve", "NodeCryptoProvider_INSTANCE", "get$NodeCryptoProvider_INSTANCE", function() {
    return new M.NodeCryptoProvider(new M.DSRandomImpl(), null, -1);
  }, "INSTANCE", "DefaultDefNodes__defaultDefs", "get$DefaultDefNodes__defaultDefs", function() {
    return P.LinkedHashMap__makeLiteral(["node", P.LinkedHashMap__makeEmpty(), "static", P.LinkedHashMap__makeEmpty(), "getHistory", P.LinkedHashMap__makeLiteral(["$invokable", "read", "$result", "table", "$params", [P.LinkedHashMap__makeLiteral(["name", "Timerange", "type", "string", "editor", "daterange"]), P.LinkedHashMap__makeLiteral(["name", "Interval", "type", Q.buildEnumType(["default", "none", "1Y", "3N", "1N", "1W", "1D", "12H", "6H", "4H", "3H", "2H", "1H", "30M", "15M", "10M", "5M", "1M", "30S", "15S", "10S", "5S", "1S"])]), P.LinkedHashMap__makeLiteral(["name", "Rollup", "type", Q.buildEnumType(["avg", "min", "max", "sum", "first", "last", "count"])])], "$columns", [P.LinkedHashMap__makeLiteral(["name", "ts", "type", "time"]), P.LinkedHashMap__makeLiteral(["name", "value", "type", "dynamic"])]])]);
  }, "_defaultDefs", "DefaultDefNodes_nameMap", "get$DefaultDefNodes_nameMap", function() {
    return new L.closure0().call$0();
  }, "nameMap", "DefaultDefNodes_pathMap", "get$DefaultDefNodes_pathMap", function() {
    return new L.closure1().call$0();
  }, "pathMap", "Configs_global", "get$Configs_global", function() {
    var t1 = new T.Configs(P.LinkedHashMap__makeEmpty());
    t1.load$1(0, C.Map_QoUOt);
    return t1;
  }, "global", "Configs_defaultConfig", "get$Configs_defaultConfig", function() {
    return T.ConfigSetting$fromMap("", C.Map_empty);
  }, "defaultConfig", "DsJson_instance", "get$DsJson_instance", function() {
    return new Q.DsJsonCodecImpl(P.JsonEncoder$(Q.DsJsonCodecImpl__safeEncoder$closure()), P.JsonDecoder$(null), null);
  }, "instance", "DsTimer__callbacks", "get$DsTimer__callbacks", function() {
    return [];
  }, "_callbacks", "DsTimer__pendingTimer", "get$DsTimer__pendingTimer", function() {
    var t1, t2;
    t1 = Q.TimerFunctions;
    t2 = new P.LinkedList(0, 0, null, null);
    t2.$builtinTypeInfo = [t1];
    t2.LinkedList$0(t1);
    return t2;
  }, "_pendingTimer", "DsTimer__pendingTimerMap", "get$DsTimer__pendingTimerMap", function() {
    return P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, Q.TimerFunctions);
  }, "_pendingTimerMap", "DsTimer__functionsMap", "get$DsTimer__functionsMap", function() {
    return P.LinkedHashMap_LinkedHashMap(null, null, null, P.Function, Q.TimerFunctions);
  }, "_functionsMap", "Interval_ONE_MILLISECOND", "get$Interval_ONE_MILLISECOND", function() {
    return Q.Interval$forMilliseconds(1);
  }, "ONE_MILLISECOND", "Interval_TWO_MILLISECONDS", "get$Interval_TWO_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(2);
  }, "TWO_MILLISECONDS", "Interval_FOUR_MILLISECONDS", "get$Interval_FOUR_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(4);
  }, "FOUR_MILLISECONDS", "Interval_EIGHT_MILLISECONDS", "get$Interval_EIGHT_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(8);
  }, "EIGHT_MILLISECONDS", "Interval_SIXTEEN_MILLISECONDS", "get$Interval_SIXTEEN_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(16);
  }, "SIXTEEN_MILLISECONDS", "Interval_THIRTY_MILLISECONDS", "get$Interval_THIRTY_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(30);
  }, "THIRTY_MILLISECONDS", "Interval_FIFTY_MILLISECONDS", "get$Interval_FIFTY_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(50);
  }, "FIFTY_MILLISECONDS", "Interval_ONE_HUNDRED_MILLISECONDS", "get$Interval_ONE_HUNDRED_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(100);
  }, "ONE_HUNDRED_MILLISECONDS", "Interval_TWO_HUNDRED_MILLISECONDS", "get$Interval_TWO_HUNDRED_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(200);
  }, "TWO_HUNDRED_MILLISECONDS", "Interval_THREE_HUNDRED_MILLISECONDS", "get$Interval_THREE_HUNDRED_MILLISECONDS", function() {
    return Q.Interval$forMilliseconds(300);
  }, "THREE_HUNDRED_MILLISECONDS", "Interval_QUARTER_SECOND", "get$Interval_QUARTER_SECOND", function() {
    return Q.Interval$forMilliseconds(250);
  }, "QUARTER_SECOND", "Interval_HALF_SECOND", "get$Interval_HALF_SECOND", function() {
    return Q.Interval$forMilliseconds(500);
  }, "HALF_SECOND", "Interval_ONE_SECOND", "get$Interval_ONE_SECOND", function() {
    return Q.Interval$forSeconds(1);
  }, "ONE_SECOND", "Interval_TWO_SECONDS", "get$Interval_TWO_SECONDS", function() {
    return Q.Interval$forSeconds(2);
  }, "TWO_SECONDS", "Interval_THREE_SECONDS", "get$Interval_THREE_SECONDS", function() {
    return Q.Interval$forSeconds(3);
  }, "THREE_SECONDS", "Interval_FOUR_SECONDS", "get$Interval_FOUR_SECONDS", function() {
    return Q.Interval$forSeconds(4);
  }, "FOUR_SECONDS", "Interval_FIVE_SECONDS", "get$Interval_FIVE_SECONDS", function() {
    return Q.Interval$forSeconds(5);
  }, "FIVE_SECONDS", "Interval_ONE_MINUTE", "get$Interval_ONE_MINUTE", function() {
    return new Q.Interval(P.Duration$(0, 0, 0, 0, 1, 0));
  }, "ONE_MINUTE", "Logger__loggers", "get$Logger__loggers", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
  }, "_loggers", "_process", "get$_process", function() {
    return $.get$context().$index(0, "process");
  }, "_process", "_child", "get$_child", function() {
    return K.require0("child_process");
  }, "_child", "_fs", "get$_fs", function() {
    return K.require0("fs");
  }, "_fs", "_http", "get$_http", function() {
    return K.require0("http");
  }, "_http", "_https", "get$_https", function() {
    return K.require0("https");
  }, "_https", "_ws", "get$_ws", function() {
    return K.require0("ws");
  }, "_ws"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = [C.TypeVariable_N6d, C.TypeVariable_ELE, C.TypeVariable_oyn, C.TypeVariable_IF2, "other", "invocation", "object", "sender", "e", "x", "index", "closure", "isolate", "numberOfArguments", "arg1", "arg2", "arg3", "arg4", "error", "stackTrace", "result", "each", "reflectee", "i", "computation", null, "value", "duration", false, "futures", "eagerError", "cleanUp", "input", "f", "self", "parent", "zone", "arg", "callback", "line", "specification", "zoneValues", "_", "data", "theError", "theStackTrace", "keepGoing", "Placeholder for type_variable(_Completer#T)", "onError", "test", "action", "timeLimit", "onTimeout", "ignored", "v", "s", "element", "st", "event", "keyValuePairs", "a", "equals", "hashCode", "isValidKey", "iterable", "key", "keys", "values", "k", 0, "encodedComponent", "byteString", "captureThis", "arguments", "o", "length", "buffer", "offsetInBytes", C.Endianness_false, "byteOffset", "endian", "link", true, "INFO", "args", "prefix", "isRequester", "command", "isResponder", "defaultNodes", "profiles", "provider", "enableHttp", "encodePrettyJson", "autoInitialize", "strictOptions", "exitOnFailure", "loadNodesJson", "defaultLogLevel", "nodeProvider", "url", "clientLink", "saltL", "saltS", "_conn", "dsIdPrefix", "privateKey", "path", "argp", "optionsHandler", "brokers", 1, "cacheLevel", "m", C.C_Unspecified, "it", "update", "err", "response", "merged", "request", "salt", "saltId", "reconnect", "name", "idx", "channel", "connection", "b", "type", "msg", "detail", "phase", "conn", "connected", "basePath", 4, "obj", "defaultVal", "adapter", "enableTimeout", "defaultValue", "list", "columns", "rows", 0 / 0, "ts", "meta", "status", "count", "sum", "min", "max", "oldUpdate", "newUpdate", "getData", "val", "processor", "node", "str", "n", "base", "force", "responder", "t", C.C__Override, "publicKeyRemote", "old", "bytes", "hash", "dsId", "remotePath", "requester", "rid", "updater", "updates", "rawColumns", "streamStatus", 3, "params", "maxPermission", "changes", "cache", "defName", "listUpdate", "futureValue", "handleData", "handleDone", "handleError", "resumeSignal", "controller", "level", "req", "profile", "reqId", "sid", "_permitted", "inputs", "parentNode", "withChildren", "resp", "cachelevel", "id", "open", "stat", "map", "ms", "seconds", "minutes", "hours", "interval", "times", "types", "subscription", "record", "timer", "res", "buf", "flags"];
  init.types = [P.Object, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.$int}, {func: 1, ret: P.String}, {func: 1, args: [P.Invocation]}, {func: 1}, {func: 1, void: true}, {func: 1, args: [,]}, {func: 1, ret: P.$int, args: [P.$int]}, {func: 1, args: [P.String,,]}, {func: 1, args: [, P.StackTrace]}, {func: 1, args: [, P.String]}, {func: 1, args: [P.String]}, {func: 1, ret: [P.List, P.String], args: [[P.List, P.$int]]}, {func: 1, args: [,,]}, {func: 1, args: [P.Symbol0, P.Mirror]}, {func: 1, args: [P.Symbol0,,]}, {func: 1, ret: P.TypeMirror, args: [P.$int]}, {func: 1, ret: P.String, args: [P.$int]}, {func: 1, args: [P.$int]}, {func: 1, args: [{func: 1, void: true}]}, {func: 1, void: true, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.Future}, {func: 1, void: true, args: [,,]}, {func: 1, args: [P.Object]}, {func: 1, args: [P.bool]}, {func: 1, ret: P.bool}, {func: 1, void: true, opt: [,]}, {func: 1, ret: P.Future, args: [P.Function], named: {test: {func: 1, ret: P.bool, args: [,]}}}, {func: 1, void: true, args: [,], opt: [P.StackTrace]}, {func: 1, ret: P.Future, args: [P.Duration], named: {onTimeout: {func: 1}}}, {func: 1, args: [,], opt: [,]}, {func: 1, void: true, args: [, P.StackTrace]}, {func: 1, ret: P.$int, args: [, P.$int]}, {func: 1, void: true, args: [P.$int, P.$int]}, {func: 1, ret: P.Type}, {func: 1, ret: P.$int, args: [,,]}, {func: 1, void: true, args: [P.String]}, {func: 1, void: true, args: [P.String], opt: [,]}, {func: 1, ret: P.$int, args: [P.$int, P.$int]}, {func: 1, ret: P.num, args: [P.$int], opt: [P.Endianness]}, {func: 1, ret: P.$int, args: [P.$int], opt: [P.Endianness]}, {func: 1, void: true, args: [P.$int, P.num], opt: [P.Endianness]}, {func: 1, void: true, args: [P.$int, P.$int], opt: [P.Endianness]}, {func: 1, ret: P.bool, named: {argp: S.ArgParser, optionsHandler: {func: 1, void: true, args: [G.ArgResults], typedef: X.OptionResultsHandler}}}, {func: 1, ret: [P.Future, P.String], args: [[P.Stream, P.String]]}, {func: 1, ret: [P.Stream, O.ValueUpdate], args: [P.String], named: {cacheLevel: P.$int}}, {func: 1, ret: P.Object, args: [P.String]}, {func: 1, ret: L.Requester}, {func: 1, ret: [P.Future, L.Requester]}, {func: 1, ret: T.LocalNode, args: [P.String]}, {func: 1, ret: T.LocalNode, args: [P.String, P.Map]}, {func: 1, void: true, args: [P.String,,]}, {func: 1, ret: T.LocalNode}, {func: 1, args: [P.String], opt: [,]}, {func: 1, args: [O.ValueUpdate]}, {func: 1, ret: O.ConnectionChannel}, {func: 1, ret: [P.Future, O.ConnectionChannel]}, {func: 1, ret: [P.Future, P.bool]}, {func: 1, void: true, args: [P.Object]}, {func: 1, void: true, args: [Z.HttpClientResponse]}, {func: 1, args: [[P.List, P.$int]]}, {func: 1, args: [Z.HttpClientRequest]}, {func: 1, ret: K.ECDH}, {func: 1, args: [P.String], opt: [P.$int]}, {func: 1, opt: [P.bool]}, {func: 1, ret: P.Map}, {func: 1, ret: [P.Stream, P.List]}, {func: 1, void: true, args: [{func: 1, ret: P.List}]}, {func: 1, void: true, args: [P.bool]}, {func: 1, args: [O.ConnectionChannel]}, {func: 1, void: true, args: [O.ConnectionChannel]}, {func: 1, void: true, args: [P.Map]}, {func: 1, void: true, args: [{func: 1, void: true}]}, {func: 1, ret: P.List}, {func: 1, void: true, args: [P.String, O.Node0]}, {func: 1, ret: P.String, args: [,]}, {func: 1, ret: O.Node0, args: [P.String]}, {func: 1, void: true, args: [{func: 1, void: true, args: [,,]}]}, {func: 1, args: [P.String, O.Node0]}, {func: 1, void: true, args: [P.String], opt: [P.bool]}, {func: 1, void: true, args: [P.List]}, {func: 1, ret: P.$int, args: [T.Responder]}, {func: 1, void: true, args: [P.Timer]}, {func: 1, void: true, args: [P.String, P.Object]}, {func: 1, void: true, args: [,]}, {func: 1, ret: P.bool, args: [P.String, P.String]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: [P.Future, K.ECDH], args: [M.PublicKeyImpl, K.ECDH]}, {func: 1, ret: [P.Future, K.ECDH], args: [M.PublicKeyImpl]}, {func: 1, ret: [P.Future, K.PrivateKey]}, {func: 1, ret: K.PrivateKey}, {func: 1, ret: K.PrivateKey, args: [P.String]}, {func: 1, ret: K.PublicKey, args: [P.Uint8List]}, {func: 1, ret: [P.Future, K.ECDH], args: [P.String]}, {func: 1, args: [P.String, P.Map]}, {func: 1, args: [P.String, P.Object]}, {func: 1, ret: L.RemoteNode, args: [P.String]}, {func: 1, ret: O.Node0, args: [P.String, P.String]}, {func: 1, ret: L.RemoteNode, args: [L.RemoteNode, P.String, P.Map]}, {func: 1, ret: [P.Stream, L.RequesterListUpdate], args: [L.Requester]}, {func: 1, ret: L.ListController, args: [L.Requester]}, {func: 1, void: true, args: [L.Requester, {func: 1, args: [,]}, P.$int]}, {func: 1, void: true, args: [L.Requester, {func: 1, args: [,]}]}, {func: 1, ret: [P.Stream, L.RequesterInvokeUpdate], args: [P.Map, L.Requester], opt: [P.$int]}, {func: 1, void: true, args: [P.Map, L.RemoteNodeCache]}, {func: 1, void: true, opt: [O.DSError]}, {func: 1, ret: [P.List, P.List]}, {func: 1, void: true, args: [L.RequesterListUpdate]}, {func: 1, void: true, args: [P.String, P.List, P.List], opt: [O.DSError]}, {func: 1, args: [L.RequesterListUpdate]}, {func: 1, ret: [P.Stream, L.RequesterListUpdate]}, {func: 1, void: true, args: [{func: 1, args: [,]}]}, {func: 1, ret: [P.Future, L.RequesterUpdate]}, {func: 1, ret: P.Future, opt: [,]}, {func: 1, void: true, args: [{func: 1, void: true, args: [,]}]}, {func: 1, void: true, args: [P.Function]}, {func: 1, void: true, opt: [P.Future]}, {func: 1, void: true, args: [P.String, P.List, P.List, O.DSError]}, {func: 1, void: true, args: [L.ReqSubscribeController, P.$int]}, {func: 1, void: true, args: [L.ReqSubscribeController]}, {func: 1, args: [P.String, L.ReqSubscribeController]}, {func: 1, void: true, args: [{func: 1, args: [,]}, P.$int]}, {func: 1, void: true, args: [O.ValueUpdate]}, {func: 1, ret: L.Request, args: [P.Map, L.RequestUpdater]}, {func: 1, ret: L.ReqSubscribeListener, args: [P.String, {func: 1, args: [,]}], opt: [P.$int]}, {func: 1, void: true, args: [P.String, {func: 1, args: [,]}]}, {func: 1, ret: [P.Stream, L.RequesterListUpdate], args: [P.String]}, {func: 1, ret: [P.Stream, L.RequesterInvokeUpdate], args: [P.String, P.Map], opt: [P.$int]}, {func: 1, ret: [P.Future, L.RequesterUpdate], args: [P.String, P.Object], opt: [P.$int]}, {func: 1, ret: [P.Future, L.RequesterUpdate], args: [P.String]}, {func: 1, void: true, args: [L.Request]}, {func: 1, ret: O.DSError, args: [P.Object, T.LocalNodeImpl, T.Responder]}, {func: 1, ret: O.DSError, args: [T.LocalNodeImpl, T.Responder]}, {func: 1, void: true, args: [{func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, T.LocalNode], typedef: T.InvokeCallback}]}, {func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, T.LocalNode], opt: [P.$int]}, {func: 1, void: true, args: [P.Map, T.NodeProviderImpl]}, {func: 1, ret: P.Map, args: [P.bool]}, {func: 1, ret: T.Response, args: [P.String, P.Object, T.Responder, T.Response]}, {func: 1, ret: T.Response, args: [P.String, T.Responder, T.Response]}, {func: 1, ret: T.Response, args: [P.Object, T.Responder, T.Response], opt: [P.$int]}, {func: 1, ret: P.$int, args: [P.String, T.Responder]}, {func: 1, ret: [Q.BroadcastStreamController, P.String]}, {func: 1, ret: [P.Stream, P.String]}, {func: 1, ret: T.RespSubscribeListener, args: [{func: 1, args: [,]}], opt: [P.$int]}, {func: 1, ret: O.ValueUpdate}, {func: 1, void: true, args: [P.Object], named: {force: P.bool}}, {func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, O.Node0], opt: [P.$int]}, {func: 1, ret: T.Response, args: [T.Response]}, {func: 1, void: true, args: [P.$int], named: {error: O.DSError, response: T.Response}}, {func: 1, void: true, args: [T.Response, P.List], named: {columns: [P.List, O.TableColumn], streamStatus: P.String}}, {func: 1, void: true, args: [P.List], named: {columns: P.List, streamStatus: P.String}}, {func: 1, args: [, T.LocalNode]}, {func: 1, void: true, args: [P.String, T.LocalNode, P.$int, P.$int]}, {func: 1, void: true, args: [P.$int]}, {func: 1, void: true, args: [T.RespSubscribeController]}, {func: 1, void: true, args: [P.List], opt: [P.String]}, {func: 1, void: true, opt: [T.InvokeResponse]}, {func: 1, ret: T.SimpleNode}, {func: 1, void: true, opt: [P.Map, P.Map]}, {func: 1, ret: T.Responder, args: [P.String]}, {func: 1, void: true, args: [P.Map], opt: [T.NodeProviderImpl]}, {func: 1, args: [P.Map]}, {func: 1, ret: T.SimpleNode, args: [P.String, P.Map, T.SimpleNodeProvider]}, {func: 1, ret: T.SimpleNode, args: [P.String], opt: [P.Map]}, {func: 1, args: [, O.Node0]}, {func: 1, args: [P.$int, Q.BinaryData]}, {func: 1, args: [P.Function]}, {func: 1, ret: P.Future, args: [,]}, {func: 1, ret: P.$int, args: [,]}, {func: 1, args: [P.$int,,]}, {func: 1, ret: [P.Future, P.$int]}, {func: 1, args: [P.String, [P.List, P.String]]}, {func: 1, ret: P.InstanceMirror, args: [P.Object]}, {func: 1, ret: [P.Future, P.List], args: [[P.Iterable, P.Future]], named: {cleanUp: {func: 1, void: true, args: [,]}, eagerError: P.bool}}, {func: 1, ret: P.Future, args: [P.Iterable, {func: 1, args: [,]}]}, {func: 1, ret: P.Future, args: [{func: 1}]}, {func: 1, void: true, args: [P.Zone, P.ZoneDelegate, P.Zone,, P.StackTrace]}, {func: 1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1}]}, {func: 1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, args: [,]},,]}, {func: 1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, args: [,,]},,,]}, {func: 1, ret: {func: 1}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1}]}, {func: 1, ret: {func: 1, args: [,]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, args: [,]}]}, {func: 1, ret: {func: 1, args: [,,]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, args: [,,]}]}, {func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}, {func: 1, void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1}]}, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, void: true}]}, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, void: true, args: [P.Timer]}]}, {func: 1, void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}, {func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, P.Map]}, {func: 1, ret: P.bool, args: [,,]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: P.$int, args: [P.Comparable, P.Comparable]}, {func: 1, ret: P.bool, args: [P.Object, P.Object]}, {func: 1, ret: P.$int, args: [P.Object]}, {func: 1, ret: P.ByteData, args: [P.$int]}, {func: 1, ret: P.ByteData, args: [P.ByteBuffer], opt: [P.$int, P.$int]}, {func: 1, args: [[P.List, P.String], P.String], named: {autoInitialize: P.bool, command: P.String, defaultLogLevel: P.String, defaultNodes: P.Map, enableHttp: P.bool, encodePrettyJson: P.bool, exitOnFailure: P.bool, isRequester: P.bool, isResponder: P.bool, loadNodesJson: P.bool, nodeProvider: T.NodeProvider, profiles: P.Map, provider: T.NodeProvider, strictOptions: P.bool}}, {func: 1, args: [P.String, O.ClientLink, P.String, P.String]}, {func: 1, args: [P.String, P.String, K.PrivateKey], named: {enableHttp: P.bool, isRequester: P.bool, isResponder: P.bool, nodeProvider: T.NodeProvider}}, {func: 1, ret: [P.Future, K.PrivateKey], args: [P.String]}, {func: 1, ret: P.List, args: [P.List, P.List]}, {func: 1, ret: O.Connection}, {func: 1, ret: O.ServerConnection}, {func: 1, ret: O.ClientConnection}, {func: 1, ret: O.Link}, {func: 1, ret: O.ServerLink}, {func: 1, ret: O.ClientLink}, {func: 1, ret: O.ServerLinkManager}, {func: 1, ret: O.StreamStatus}, {func: 1, ret: O.ErrorPhase}, {func: 1, args: [P.String], named: {detail: P.String, msg: P.String, path: P.String, phase: P.String}}, {func: 1, args: [O.Connection], opt: [P.bool]}, {func: 1, ret: O.ConnectionHandler}, {func: 1, ret: O.Path, args: [P.Object], opt: [P.String]}, {func: 1, ret: O.Permission}, {func: 1, ret: P.$int, args: [P.Object], opt: [P.$int]}, {func: 1, ret: O.PermissionList}, {func: 1, ret: O.StreamConnectionAdapter}, {func: 1, args: [O.StreamConnectionAdapter], named: {clientLink: O.ClientLink, enableTimeout: P.bool}}, {func: 1, args: [P.String, P.String], opt: [P.Object]}, {func: 1, ret: P.List, args: [P.List]}, {func: 1, ret: [P.List, O.TableColumn], args: [P.List]}, {func: 1, args: [[P.List, O.TableColumn], [P.List, P.List]]}, {func: 1, args: [,], named: {count: P.$int, max: P.num, meta: P.Map, min: P.num, status: P.String, sum: P.num, ts: P.String}}, {func: 1, args: [O.ValueUpdate, O.ValueUpdate]}, {func: 1, args: [K.CryptoProvider]}, {func: 1, ret: K.CryptoProvider}, {func: 1, ret: [P.Future, K.ECDH], args: [K.PublicKey, K.ECDH]}, {func: 1, ret: K.DSRandom}, {func: 1, ret: M.NodeCryptoProvider}, {func: 1, ret: L.DefaultDefNodes}, {func: 1, args: [L.Requester, P.$int, L.RequestUpdater, P.Map]}, {func: 1, args: [P.List, P.List, [P.List, O.TableColumn], P.String], opt: [O.DSError]}, {func: 1, ret: [P.List, O.TableColumn], args: [L.RemoteNode]}, {func: 1, args: [L.RemoteNode, L.Requester, P.Map], opt: [P.$int]}, {func: 1, args: [L.RemoteNode, [P.List, P.String], P.String]}, {func: 1, args: [L.RemoteNode, L.Requester, {func: 1, void: true, args: [,]}]}, {func: 1, args: [L.RemoteNode, L.Requester]}, {func: 1, args: [L.Requester, P.String]}, {func: 1, args: [L.Requester, P.String, P.Object], opt: [P.$int]}, {func: 1, args: [L.Requester, P.String, P.Function]}, {func: 1, args: [L.Requester, P.$int]}, {func: 1, ret: L.RequestUpdater}, {func: 1, opt: [L.RemoteNodeCache]}, {func: 1, args: [P.String, P.String], named: {defaultValue: P.Object}}, {func: 1, ret: T.Configs}, {func: 1, ret: T.ConfigSetting, args: [P.String, O.Node0]}, {func: 1, ret: T.NodeProviderImpl}, {func: 1, ret: T.IPermissionManager}, {func: 1, ret: T.DummyPermissionManager}, {func: 1, ret: T.NodeProvider}, {func: 1, args: [T.NodeProvider], opt: [P.String]}, {func: 1, args: [T.Responder, P.$int]}, {func: 1, args: [T.Responder, P.$int, T.LocalNode]}, {func: 1, args: [T.LocalNode, P.Function]}, {func: 1, args: [T.SubscribeResponse, T.LocalNode, P.$int, P.bool, P.$int]}, {func: 1, opt: [P.List, P.List]}, {func: 1, opt: [P.List]}, {func: 1, ret: T.SerializableNodeProvider}, {func: 1, ret: T.MutableNodeProvider}, {func: 1, opt: [P.Map, P.Map]}, {func: 1, args: [[P.List, P.String]]}, {func: 1, ret: Q.DSLinkJSON, args: [[P.Map, P.String,,]]}, {func: 1, args: [P.Duration]}, {func: 1, ret: Q.Scheduler}, {func: 1, ret: P.Timer}, {func: 1, ret: P.Timer, args: [, {func: 1}]}, {func: 1, ret: P.Future, args: [P.$int, {func: 1}]}, {func: 1, ret: P.Future, args: [P.$int, Q.Interval, {func: 1}]}, {func: 1, void: true, args: [{func: 1}]}, {func: 1, ret: P.Future, args: [P.Duration, {func: 1}]}, {func: 1, ret: P.Timer, args: [P.Duration, {func: 1}]}, {func: 1, ret: P.String, args: [[P.Iterable, P.String]]}, {func: 1, ret: [P.List, [P.Map, P.String,,]], args: [[P.Map, P.String, P.String]]}, P.Function, H.TearOffClosure, P._Future, [P._Future, 47], [P.HashMap, 0, 1], P.TypedData, X.HttpClientLink, T.NodeProvider, K.PrivateKey, P.String, G.File, [P.List, P.String], P.bool, P.Map, P.Completer, O.PassiveChannel, [P.Completer, O.ConnectionChannel], [P.Completer, P.bool], O.ClientLink, [P.List, P.$int], P.$int, O.ClientConnection, [P.Completer, L.Requester], L.Requester, T.Responder, K.ECDH, T.WebSocketConnection, [P.Map, P.String, P.$int], O.Connection, O.Link, O.DSError, [P.StreamController, P.List], [P.List, P.Function], O.ConnectionChannel, P.StreamSubscription, P.List, O.Node0, [P.Map, P.String, P.Object], [P.Map, P.String, O.Node0], P.RegExp, O.StreamConnectionAdapter, P.Timer, O.ServerConnection, [P.List, O.TableColumn], [P.List, P.List], null, P.num, O.Unspecified, K.CryptoProvider, K.DSRandom, M.NodeCryptoProvider, K.PublicKey, [P.Map, P.String, L.RemoteNode], L.ListController, L.ReqSubscribeController, L.RemoteNode, L.RequestUpdater, L.RequesterUpdate, [P.StreamController, L.RequesterInvokeUpdate], [P.Stream, L.RequesterInvokeUpdate], L.Request, [Q.BroadcastStreamController, L.RequesterListUpdate], [P.LinkedHashSet, P.String], L.ListDefListener, [P.Completer, L.RequesterUpdate], L.SubscribeRequest, [P.Map, P.String, L.ReqSubscribeController], [P.Map, P.$int, L.ReqSubscribeController], [P.HashSet, P.String], [P.Map, P.Function, P.$int], O.ValueUpdate, [P.Map, P.$int, L.Request], L.RemoteNodeCache, O.ConnectionHandler, [P.Map, P.String, T.ConfigSetting], T.Configs, T.ConfigSetting, {func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, T.LocalNode], typedef: T.InvokeCallback}, T.LocalNode, [Q.BroadcastStreamController, P.String], T.LocalNodeImpl, T.IPermissionManager, [P.Map, P.$int, T.Response], T.SubscribeResponse, {func: 1, void: true, args: [,], typedef: T.OnInvokeClosed}, T.Response, [P.Map, P.String, T.RespSubscribeController], [P.Map, P.$int, T.RespSubscribeController], [P.LinkedHashSet, T.RespSubscribeController], T.RespSubscribeListener, [P.ListQueue, O.ValueUpdate], T.InvokeResponse, [P.Map, P.String, T.LocalNode], [P.Map, P.String, {func: 1, ret: T.SimpleNode, args: [P.String], typedef: T._NodeFactory}], T.NodeProviderImpl, T.MutableNodeProvider, T.SerializableNodeProvider, T.SimpleNode, [P.Map, P.String,,], [P.Map, P.String, [P.Map, P.String,,]], P.Duration, Q.Interval, {func: 1, void: true, args: [G.ArgResults]}, {func: 1, ret: T.InvokeResponse, args: [P.Map, T.Responder, T.InvokeResponse, T.LocalNode]}, {func: 1, ret: T.SimpleNode, args: [P.String]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = Object.create(null);
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = Object.create(null);
    init.leafTags = Object.create(null);
    init.finishedClasses = Object.create(null);
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          } else
            if (result === sentinelInProgress)
              H.throwCyclicInit(staticName || fieldName);
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      return Isolate;
    };
  }
  !function() {
    function intern(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    }
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (document.currentScript) {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(function(a) {
        H.startRootIsolate(L.main$closure(), a);
      }, []);
    else
      (function(a) {
        H.startRootIsolate(L.main$closure(), a);
      })([]);
  });
var $Promise = typeof(Promise) !== 'undefined' ? Promise : require('es6-promises');    var EventEmitter = require('events').EventEmitter;

    // aiming for a node-like Stream API, but without the weight
    // isn't really for data, but for just values elapsed over time
    function Stream(dartStream) {
      dartStream._createSubscription$4({
        // onData
        call$1: function(data) {
          this.emit('data', dynamicFrom(data));
        }.bind(this)
      },
      {
        // onError
        call$1: function(error) {
          this.emit('error', error);
        }.bind(this)
      }, {
        // onDone
        call$0: function() {
          this.emit('done');
        }.bind(this)
      // cancel on error
      }, true);
    }

    Stream.prototype = new EventEmitter();

    module.exports.Stream = Stream;
      function objEach(obj, cb, thisArg) {
    if(typeof thisArg !== 'undefined') {
      cb = cb.bind(thisArg);
    }

    var count = 0;
    var keys = Object.keys(obj);
    var length = keys.length;

    for(; count < length; count++) {
      var key = keys[count];
      cb(obj[key], key, obj);
    }
  }
  var sSym = typeof(Symbol) === 'function';

  var mdex = module.exports;
  var obdp = Object.defineProperty;
  var obfr = Object.freeze;

  var clIw = sSym ? Symbol.for("calzone.isWrapped") : "__isWrapped__";
  var clOb = sSym ? Symbol.for("calzone.obj") : "__obj__";
  var clCl = sSym ? Symbol.for("calzone.constructor") : "_";

  function overrideFunc(cl, name, mangledName) {
    cl[clOb][mangledName] = function() {
      var args = Array.prototype.slice.call(arguments);
      var length = args.length;
      var index = 0;

      for(; index < length; index++) {
        args[index] = dynamicFrom(args[index]);
      }

      return dynamicTo((this[name]).apply(this, args));
    }.bind(cl);
  }
function dynamicTo(obj) {if(typeof(obj) === 'undefined' || obj === null) { return obj; }if(obj[clIw]) { return obj[clOb]; }      if(Array.isArray(obj)) {
        return obj.map(function(e) {
          return dynamicTo(e);
        });
      }
      if(obj.constructor.name === 'Object') {
        var keys = Object.keys(obj);
        var values = [];

        keys.forEach(function(key) {
          values.push(dynamicTo(obj[key]));
        });

        var map = new P.LinkedHashMap_LinkedHashMap$fromIterables(keys, values);
        map.$builtinTypeInfo = [P.String, null];
        return map;
      }
          if((typeof(obj) === 'object' || typeof(obj) === 'function') && typeof(obj.then) === 'function' && typeof(obj.catch) === 'function') {
        var completer = new P.Completer_Completer$sync();
        obj.then(function(then) {
          completer.complete$1(null, dynamicTo(then));
        }).catch(function(err) {
          completer._completeError$2(err);
        });
        return completer.future;
      }
          if(typeof obj === 'function') {
        var argCount = (new RegExp(/function[^]*(([^]*))/)).exec(obj.toString())[1].split(',').length;
        var returned = {};
        returned['call$' + argCount] = function() {
          var args = new Array(arguments.length);
          for(var i = 0; i < args.length; ++i) {
            args[i] = dynamicFrom(arguments[i]);
          }
          return dynamicTo(obj.apply(this, args));
        };
        return returned;
      }
          if(obj instanceof Buffer) {
        function toArrayBuffer(buffer) {
          var ab = new ArrayBuffer(buffer.length);
          var view = new Uint8Array(ab);
          for (var i = 0; i < buffer.length; ++i) {
            view[i] = buffer[i];
          }
          return ab;
        }

        return new DataView(toArrayBuffer(obj));
      }
    return obj;}function dynamicFrom(obj) {if(typeof(obj) === 'undefined' || obj === null) { return obj; }      if(typeof(module.exports[obj.constructor.name]) !== 'undefined' && module.exports[obj.constructor.name][clCl]) {
        return module.exports[obj.constructor.name][clCl](obj);
      }
          if(Array.isArray(obj)) {
        return obj.map(function(e) {
          return dynamicFrom(e);
        });
      }

      if(obj.get$keys && obj.get$values) {
        var keys = obj.get$keys();
        var values = obj.get$values();

        var index = 0;
        var a = {};

        keys.forEach$1(null, {
          call$1: function(key) {
            a[dynamicFrom(key)] = dynamicFrom(values.elementAt$1(null, index));
            index++;
          }
        });

        return a;
      }
          if(obj.set$_isChained && obj.then$2$onError && obj.catchError$2$test && obj.whenComplete$1 && obj.asStream$0 && obj._markPendingCompletion$0 && obj._setValue$1 && obj._setErrorObject$1 && obj._setError$2 && obj._addListener$1 && obj._removeListeners$0 && obj._complete$1 && obj._completeWithValue$1 && obj._completeError$2 && obj._asyncComplete$1 && obj._asyncCompleteError$2 && obj.timeout$2$onTimeout) {
        var promise = new $Promise(function(then, error) {
          obj.then$2$onError({
            call$1:function(val) {
              then(dynamicFrom(val));
            }
          }, {
            call$1: function(err) {
              error(err);
            }
          });
        });
        return promise;
      }
          if(obj instanceof DataView) {
        function toBuffer(ab) {
          var buffer = new Buffer(ab.byteLength);
          var view = new Uint8Array(ab);
          for (var i = 0; i < buffer.length; ++i) {
            buffer[i] = view[i];
          }
          return buffer;
        }
        return toBuffer(obj.buffer);
      }
    if(obj._createSubscription$4) { return new module.exports.Stream(obj); }return obj;}mdex.PermissionList = function PermissionList() {var __obj__ = (function(){return (O.PermissionList$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.PermissionList.prototype = {get idMatchs() { var returned = this[clOb].idMatchs;returned = dynamicFrom(returned);return returned;},set idMatchs(v) {v = dynamicTo(v);this[clOb].idMatchs = v;},get groupMatchs() { var returned = this[clOb].groupMatchs;returned = dynamicFrom(returned);return returned;},set groupMatchs(v) {v = dynamicTo(v);this[clOb].groupMatchs = v;},get defaultPermission() { var returned = this[clOb].defaultPermission;return returned;},set defaultPermission(v) {this[clOb].defaultPermission = v;},updatePermissions: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].updatePermissions$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getPermission: function($nn){$nn = dynamicTo($nn);return (this[clOb].getPermission$1).call(this[clOb],$nn);}};mdex.PermissionList.prototype[clIw] = true;    mdex.PermissionList.class = obfr(function() {
        function PermissionList() {
          mdex.PermissionList.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('updatePermissions') > -1) { overrideFunc(this, 'updatePermissions', 'updatePermissions$1'); }if(proto.indexOf('getPermission') > -1) { overrideFunc(this, 'getPermission', 'getPermission$1'); }        }

        PermissionList.prototype = Object.create(mdex.PermissionList.prototype);

        return PermissionList;
    }());
    mdex.PermissionList[clCl] = function(__obj__) {var returned = Object.create(mdex.PermissionList.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Permission = function Permission() {var __obj__ = (function(){return (O.Permission$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Permission.prototype[clIw] = true;    mdex.Permission.class = obfr(function() {
        function Permission() {
          mdex.Permission.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        Permission.prototype = Object.create(mdex.Permission.prototype);

        return Permission;
    }());
    mdex.Permission.parse = function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}return (init.allClasses.Permission_parse).call(null,$nn,$nnn);};mdex.Permission[clCl] = function(__obj__) {var returned = Object.create(mdex.Permission.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.StreamConnection = function StreamConnection() {var __obj__ = (function($nn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);var clientLink = typeof(_optObj_.clientLink) === 'undefined' ? null : _optObj_.clientLink;if(clientLink !== null) {clientLink = dynamicTo(clientLink);}var enableTimeout = typeof(_optObj_.enableTimeout) === 'undefined' ? false : _optObj_.enableTimeout;if(enableTimeout !== null) {}return (O.StreamConnection$).call(null,$nn,clientLink,enableTimeout);}).apply(this, arguments);this[clOb] = __obj__;};mdex.StreamConnection.prototype = {get adapter() { var returned = this[clOb].adapter;returned = dynamicFrom(returned);return returned;},set adapter(v) {v = dynamicTo(v);this[clOb].adapter = v;},get clientLink() { var returned = this[clOb].clientLink;returned = dynamicFrom(returned);return returned;},set clientLink(v) {v = dynamicTo(v);this[clOb].clientLink = v;},get onRequestReadyCompleter() { var returned = this[clOb].onRequestReadyCompleter;returned = dynamicFrom(returned);return returned;},set onRequestReadyCompleter(v) {v = dynamicTo(v);this[clOb].onRequestReadyCompleter = v;},get pingTimer() { var returned = this[clOb].pingTimer;returned = dynamicFrom(returned);return returned;},set pingTimer(v) {v = dynamicTo(v);this[clOb].pingTimer = v;},get pingCount() { var returned = this[clOb].pingCount;return returned;},set pingCount(v) {this[clOb].pingCount = v;},onPingTimer: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].onPingTimer$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},requireSend: function(){var returned = (this[clOb].requireSend$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},addServerCommand: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addServerCommand$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},onData: function(dynamic){dynamic = dynamicTo(dynamic);var returned = (this[clOb].onData$1).call(this[clOb],dynamic);returned = dynamicFrom(returned);return returned;},addData: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addData$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},close: function(){var returned = (this[clOb].close$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get responderChannel() {var returned = (function(){return (this[clOb].get$responderChannel).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set responderChannel(v) {v = dynamicTo(v);this[clOb].get$responderChannel = function() { return v; };},get requesterChannel() {var returned = (function(){return (this[clOb].get$requesterChannel).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set requesterChannel(v) {v = dynamicTo(v);this[clOb].get$requesterChannel = function() { return v; };},get onRequesterReady() {var returned = (function(){return (this[clOb].get$onRequesterReady).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onRequesterReady(v) {v = dynamicTo(v);this[clOb].get$onRequesterReady = function() { return v; };},get onDisconnected() {var returned = (function(){return (this[clOb].get$onDisconnected).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onDisconnected(v) {v = dynamicTo(v);this[clOb].get$onDisconnected = function() { return v; };}};mdex.StreamConnection.prototype[clIw] = true;    mdex.StreamConnection.class = obfr(function() {
        function StreamConnection() {
          mdex.StreamConnection.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onPingTimer') > -1) { overrideFunc(this, 'onPingTimer', 'onPingTimer$1'); }if(proto.indexOf('requireSend') > -1) { overrideFunc(this, 'requireSend', 'requireSend$0'); }if(proto.indexOf('addServerCommand') > -1) { overrideFunc(this, 'addServerCommand', 'addServerCommand$2'); }if(proto.indexOf('onData') > -1) { overrideFunc(this, 'onData', 'onData$1'); }if(proto.indexOf('addData') > -1) { overrideFunc(this, 'addData', 'addData$1'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$0'); }        }

        StreamConnection.prototype = Object.create(mdex.StreamConnection.prototype);

        return StreamConnection;
    }());
    mdex.StreamConnection[clCl] = function(__obj__) {var returned = Object.create(mdex.StreamConnection.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.StreamConnectionAdapter = function StreamConnectionAdapter() {var __obj__ = (function(){return (O.StreamConnectionAdapter$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.StreamConnectionAdapter.prototype[clIw] = true;    mdex.StreamConnectionAdapter.class = obfr(function() {
        function StreamConnectionAdapter() {
          mdex.StreamConnectionAdapter.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        StreamConnectionAdapter.prototype = Object.create(mdex.StreamConnectionAdapter.prototype);

        return StreamConnectionAdapter;
    }());
    mdex.StreamConnectionAdapter[clCl] = function(__obj__) {var returned = Object.create(mdex.StreamConnectionAdapter.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ConnectionHandler = function ConnectionHandler() {var __obj__ = (function(){return (O.ConnectionHandler$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ConnectionHandler.prototype = {onReconnected: function(){var returned = (this[clOb].onReconnected$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},addToSendList: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addToSendList$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},addProcessor: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addProcessor$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},doSend: function(){var returned = (this[clOb].doSend$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get connection() {var returned = (function(){return (this[clOb].get$connection).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set connection(v) {v = dynamicTo(v);this[clOb].get$connection = function() { return v; };}};mdex.ConnectionHandler.prototype[clIw] = true;    mdex.ConnectionHandler.class = obfr(function() {
        function ConnectionHandler() {
          mdex.ConnectionHandler.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onReconnected') > -1) { overrideFunc(this, 'onReconnected', 'onReconnected$0'); }if(proto.indexOf('addToSendList') > -1) { overrideFunc(this, 'addToSendList', 'addToSendList$1'); }if(proto.indexOf('addProcessor') > -1) { overrideFunc(this, 'addProcessor', 'addProcessor$1'); }if(proto.indexOf('doSend') > -1) { overrideFunc(this, 'doSend', 'doSend$0'); }        }

        ConnectionHandler.prototype = Object.create(mdex.ConnectionHandler.prototype);

        return ConnectionHandler;
    }());
    mdex.ConnectionHandler[clCl] = function(__obj__) {var returned = Object.create(mdex.ConnectionHandler.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.PassiveChannel = function PassiveChannel() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}return (O.PassiveChannel$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.PassiveChannel.prototype = {get onReceiveController() { var returned = this[clOb].onReceiveController;returned = dynamicFrom(returned);return returned;},set onReceiveController(v) {v = dynamicTo(v);this[clOb].onReceiveController = v;},get conn() { var returned = this[clOb].conn;returned = dynamicFrom(returned);return returned;},set conn(v) {v = dynamicTo(v);this[clOb].conn = v;},get getData() { var returned = this[clOb].getData;returned = dynamicFrom(returned);return returned;},set getData(v) {v = dynamicTo(v);this[clOb].getData = v;},sendWhenReady: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].sendWhenReady$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get connected() { var returned = this[clOb].connected;return returned;},set connected(v) {this[clOb].connected = v;},get onDisconnectController() { var returned = this[clOb].onDisconnectController;returned = dynamicFrom(returned);return returned;},set onDisconnectController(v) {v = dynamicTo(v);this[clOb].onDisconnectController = v;},get onConnectController() { var returned = this[clOb].onConnectController;returned = dynamicFrom(returned);return returned;},set onConnectController(v) {v = dynamicTo(v);this[clOb].onConnectController = v;},updateConnect: function(){var returned = (this[clOb].updateConnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get onReceive() {var returned = (function(){return (this[clOb].get$onReceive).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onReceive(v) {v = dynamicTo(v);this[clOb].get$onReceive = function() { return v; };},get isReady() {var returned = (function(){return (this[clOb].get$isReady).call(this[clOb]);}).apply(this, arguments);return returned;},set isReady(v) {this[clOb].get$isReady = function() { return v; };},get onDisconnected() {var returned = (function(){return (this[clOb].get$onDisconnected).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onDisconnected(v) {v = dynamicTo(v);this[clOb].get$onDisconnected = function() { return v; };},get onConnected() {var returned = (function(){return (this[clOb].get$onConnected).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onConnected(v) {v = dynamicTo(v);this[clOb].get$onConnected = function() { return v; };}};mdex.PassiveChannel.prototype[clIw] = true;    mdex.PassiveChannel.class = obfr(function() {
        function PassiveChannel() {
          mdex.PassiveChannel.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('sendWhenReady') > -1) { overrideFunc(this, 'sendWhenReady', 'sendWhenReady$1'); }if(proto.indexOf('updateConnect') > -1) { overrideFunc(this, 'updateConnect', 'updateConnect$0'); }        }

        PassiveChannel.prototype = Object.create(mdex.PassiveChannel.prototype);

        return PassiveChannel;
    }());
    mdex.PassiveChannel[clCl] = function(__obj__) {var returned = Object.create(mdex.PassiveChannel.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ValueUpdate = function ValueUpdate() {var __obj__ = (function(dynamic,_optObj_){_optObj_ = _optObj_ || {};dynamic = dynamicTo(dynamic);var count = typeof(_optObj_.count) === 'undefined' ? 1 : _optObj_.count;if(count !== null) {}var max = typeof(_optObj_.max) === 'undefined' ? null : _optObj_.max;if(max !== null) {}var meta = typeof(_optObj_.meta) === 'undefined' ? null : _optObj_.meta;if(meta !== null) {meta = dynamicTo(meta);}var min = typeof(_optObj_.min) === 'undefined' ? null : _optObj_.min;if(min !== null) {}var status = typeof(_optObj_.status) === 'undefined' ? null : _optObj_.status;if(status !== null) {}var sum = typeof(_optObj_.sum) === 'undefined' ? null : _optObj_.sum;if(sum !== null) {}var ts = typeof(_optObj_.ts) === 'undefined' ? null : _optObj_.ts;if(ts !== null) {}return (O.ValueUpdate$).call(null,dynamic,count,max,meta,min,status,sum,ts);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ValueUpdate.prototype = {get value() { var returned = this[clOb].value;returned = dynamicFrom(returned);return returned;},set value(v) {v = dynamicTo(v);this[clOb].value = v;},get ts() { var returned = this[clOb].ts;return returned;},set ts(v) {this[clOb].ts = v;},get status() { var returned = this[clOb].status;return returned;},set status(v) {this[clOb].status = v;},get count() { var returned = this[clOb].count;return returned;},set count(v) {this[clOb].count = v;},get sum() { var returned = this[clOb].sum;return returned;},set sum(v) {this[clOb].sum = v;},get min() { var returned = this[clOb].min;return returned;},set min(v) {this[clOb].min = v;},get max() { var returned = this[clOb].max;return returned;},set max(v) {this[clOb].max = v;}};mdex.ValueUpdate.prototype[clIw] = true;    mdex.ValueUpdate.class = obfr(function() {
        function ValueUpdate() {
          mdex.ValueUpdate.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        ValueUpdate.prototype = Object.create(mdex.ValueUpdate.prototype);

        return ValueUpdate;
    }());
    mdex.ValueUpdate.getTs = function(){return (init.allClasses.ValueUpdate_getTs).call(null);};mdex.ValueUpdate.merge = function() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);return (O.ValueUpdate$merge).call(null,$nn,$nnn);}).apply(this, arguments);return mdex.ValueUpdate._(__obj__);};mdex.ValueUpdate[clCl] = function(__obj__) {var returned = Object.create(mdex.ValueUpdate.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Table = function Table() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);return (O.Table$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Table.prototype = {get columns() { var returned = this[clOb].columns;returned = dynamicFrom(returned);return returned;},set columns(v) {v = dynamicTo(v);this[clOb].columns = v;},get rows() { var returned = this[clOb].rows;returned = dynamicFrom(returned);return returned;},set rows(v) {v = dynamicTo(v);this[clOb].rows = v;}};mdex.Table.prototype[clIw] = true;    mdex.Table.class = obfr(function() {
        function Table() {
          mdex.Table.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        Table.prototype = Object.create(mdex.Table.prototype);

        return Table;
    }());
    mdex.Table[clCl] = function(__obj__) {var returned = Object.create(mdex.Table.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.TableColumn = function TableColumn() {var __obj__ = (function($nn,$nnn,$nnnn){$nnnn = typeof($nnnn) === 'undefined' ? null : $nnnn;if($nnnn !== null) {$nnnn = dynamicTo($nnnn);}return (O.TableColumn$).call(null,$nn,$nnn,$nnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.TableColumn.prototype = {get type() { var returned = this[clOb].type;return returned;},set type(v) {this[clOb].type = v;},get name() { var returned = this[clOb].name;return returned;},set name(v) {this[clOb].name = v;},get defaultValue() { var returned = this[clOb].defaultValue;returned = dynamicFrom(returned);return returned;},set defaultValue(v) {v = dynamicTo(v);this[clOb].defaultValue = v;},getData: function(){var returned = (this[clOb].getData$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.TableColumn.prototype[clIw] = true;    mdex.TableColumn.class = obfr(function() {
        function TableColumn() {
          mdex.TableColumn.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('getData') > -1) { overrideFunc(this, 'getData', 'getData$0'); }        }

        TableColumn.prototype = Object.create(mdex.TableColumn.prototype);

        return TableColumn;
    }());
    mdex.TableColumn.serializeColumns = function($nn){$nn = dynamicTo($nn);var returned = (init.allClasses.TableColumn_serializeColumns).call(null,$nn);returned = dynamicFrom(returned);return returned;};mdex.TableColumn.parseColumns = function($nn){$nn = dynamicTo($nn);var returned = (init.allClasses.TableColumn_parseColumns).call(null,$nn);returned = dynamicFrom(returned);return returned;};mdex.TableColumn[clCl] = function(__obj__) {var returned = Object.create(mdex.TableColumn.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Path = function Path() {var __obj__ = (function($nn){return (O.Path$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Path.prototype = {get path() { var returned = this[clOb].path;return returned;},set path(v) {this[clOb].path = v;},get parentPath() { var returned = this[clOb].parentPath;return returned;},set parentPath(v) {this[clOb].parentPath = v;},get name() { var returned = this[clOb].name;return returned;},set name(v) {this[clOb].name = v;},get valid() { var returned = this[clOb].valid;return returned;},set valid(v) {this[clOb].valid = v;},mergeBasePath: function($nn,$nnn){$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (this[clOb].mergeBasePath$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},get absolute() {var returned = (function(){return (this[clOb].get$absolute).call(this[clOb]);}).apply(this, arguments);return returned;},set absolute(v) {this[clOb].get$absolute = function() { return v; };},get isRoot() {var returned = (function(){return (this[clOb].get$isRoot).call(this[clOb]);}).apply(this, arguments);return returned;},set isRoot(v) {this[clOb].get$isRoot = function() { return v; };},get isConfig() {var returned = (function(){return (this[clOb].get$isConfig).call(this[clOb]);}).apply(this, arguments);return returned;},set isConfig(v) {this[clOb].get$isConfig = function() { return v; };},get isAttribute() {var returned = (function(){return (this[clOb].get$isAttribute).call(this[clOb]);}).apply(this, arguments);return returned;},set isAttribute(v) {this[clOb].get$isAttribute = function() { return v; };},get isNode() {var returned = (function(){return (this[clOb].get$isNode).call(this[clOb]);}).apply(this, arguments);return returned;},set isNode(v) {this[clOb].get$isNode = function() { return v; };}};mdex.Path.prototype[clIw] = true;    mdex.Path.class = obfr(function() {
        function Path() {
          mdex.Path.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('mergeBasePath') > -1) { overrideFunc(this, 'mergeBasePath', 'mergeBasePath$2'); }        }

        Path.prototype = Object.create(mdex.Path.prototype);

        return Path;
    }());
    mdex.Path.getValidPath = function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (init.allClasses.Path_getValidPath).call(null,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.Path.getValidNodePath = function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (init.allClasses.Path_getValidNodePath).call(null,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.Path.getValidAttributePath = function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (init.allClasses.Path_getValidAttributePath).call(null,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.Path.getValidConfigPath = function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (init.allClasses.Path_getValidConfigPath).call(null,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.Path[clCl] = function(__obj__) {var returned = Object.create(mdex.Path.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Node = function Node() {var __obj__ = (function(){return (O.Node$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Node.prototype = {get profile() { var returned = this[clOb].profile;returned = dynamicFrom(returned);return returned;},set profile(v) {v = dynamicTo(v);this[clOb].profile = v;},get attributes() { var returned = this[clOb].attributes;returned = dynamicFrom(returned);return returned;},set attributes(v) {v = dynamicTo(v);this[clOb].attributes = v;},getAttribute: function($nn){var returned = (this[clOb].getAttribute$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get configs() { var returned = this[clOb].configs;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].configs = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get children() { var returned = this[clOb].children;returned = dynamicFrom(returned);return returned;},set children(v) {v = dynamicTo(v);this[clOb].children = v;},addChild: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeChild: function(dynamic){dynamic = dynamicTo(dynamic);return (this[clOb].removeChild$1).call(this[clOb],dynamic);},getChild: function($nn){var returned = (this[clOb].getChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get: function($nn){var returned = (this[clOb].$get$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},forEachChild: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].forEachChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getSimpleMap: function(){var returned = (this[clOb].getSimpleMap$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.Node.prototype[clIw] = true;    mdex.Node.class = obfr(function() {
        function Node() {
          mdex.Node.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('getAttribute') > -1) { overrideFunc(this, 'getAttribute', 'getAttribute$1'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('addChild') > -1) { overrideFunc(this, 'addChild', 'addChild$2'); }if(proto.indexOf('removeChild') > -1) { overrideFunc(this, 'removeChild', 'removeChild$1'); }if(proto.indexOf('getChild') > -1) { overrideFunc(this, 'getChild', 'getChild$1'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$get$1'); }if(proto.indexOf('forEachChild') > -1) { overrideFunc(this, 'forEachChild', 'forEachChild$1'); }if(proto.indexOf('getSimpleMap') > -1) { overrideFunc(this, 'getSimpleMap', 'getSimpleMap$0'); }        }

        Node.prototype = Object.create(mdex.Node.prototype);

        return Node;
    }());
    mdex.Node[clCl] = function(__obj__) {var returned = Object.create(mdex.Node.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Unspecified = function Unspecified() {var __obj__ = (function(){return (O.Unspecified$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Unspecified.prototype[clIw] = true;    mdex.Unspecified.class = obfr(function() {
        function Unspecified() {
          mdex.Unspecified.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        Unspecified.prototype = Object.create(mdex.Unspecified.prototype);

        return Unspecified;
    }());
    mdex.Unspecified[clCl] = function(__obj__) {var returned = Object.create(mdex.Unspecified.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.DSError = function DSError() {var __obj__ = (function($nn,_optObj_){_optObj_ = _optObj_ || {};var detail = typeof(_optObj_.detail) === 'undefined' ? null : _optObj_.detail;if(detail !== null) {}var msg = typeof(_optObj_.msg) === 'undefined' ? null : _optObj_.msg;if(msg !== null) {}var path = typeof(_optObj_.path) === 'undefined' ? null : _optObj_.path;if(path !== null) {}var phase = typeof(_optObj_.phase) === 'undefined' ? null : _optObj_.phase;if(phase !== null) {}return (O.DSError$).call(null,$nn,detail,msg,path,phase);}).apply(this, arguments);this[clOb] = __obj__;};mdex.DSError.prototype = {get type() { var returned = this[clOb].type;return returned;},set type(v) {this[clOb].type = v;},get detail() { var returned = this[clOb].detail;return returned;},set detail(v) {this[clOb].detail = v;},get msg() { var returned = this[clOb].msg;return returned;},set msg(v) {this[clOb].msg = v;},get path() { var returned = this[clOb].path;return returned;},set path(v) {this[clOb].path = v;},get phase() { var returned = this[clOb].phase;return returned;},set phase(v) {this[clOb].phase = v;},getMessage: function(){return (this[clOb].getMessage$0).call(this[clOb]);},serialize: function(){var returned = (this[clOb].serialize$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.DSError.prototype[clIw] = true;    mdex.DSError.class = obfr(function() {
        function DSError() {
          mdex.DSError.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('getMessage') > -1) { overrideFunc(this, 'getMessage', 'getMessage$0'); }if(proto.indexOf('serialize') > -1) { overrideFunc(this, 'serialize', 'serialize$0'); }        }

        DSError.prototype = Object.create(mdex.DSError.prototype);

        return DSError;
    }());
    mdex.DSError.fromMap = function() {var __obj__ = (function($nn){$nn = dynamicTo($nn);return (O.DSError$fromMap).call(null,$nn);}).apply(this, arguments);return mdex.DSError._(__obj__);};mdex.DSError[clCl] = function(__obj__) {var returned = Object.create(mdex.DSError.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ErrorPhase = function ErrorPhase() {var __obj__ = (function(){return (O.ErrorPhase$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ErrorPhase.prototype[clIw] = true;    mdex.ErrorPhase.class = obfr(function() {
        function ErrorPhase() {
          mdex.ErrorPhase.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        ErrorPhase.prototype = Object.create(mdex.ErrorPhase.prototype);

        return ErrorPhase;
    }());
    mdex.ErrorPhase[clCl] = function(__obj__) {var returned = Object.create(mdex.ErrorPhase.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.StreamStatus = function StreamStatus() {var __obj__ = (function(){return (O.StreamStatus$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.StreamStatus.prototype[clIw] = true;    mdex.StreamStatus.class = obfr(function() {
        function StreamStatus() {
          mdex.StreamStatus.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        StreamStatus.prototype = Object.create(mdex.StreamStatus.prototype);

        return StreamStatus;
    }());
    mdex.StreamStatus[clCl] = function(__obj__) {var returned = Object.create(mdex.StreamStatus.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ServerLinkManager = function ServerLinkManager() {var __obj__ = (function(){return (O.ServerLinkManager$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ServerLinkManager.prototype[clIw] = true;    mdex.ServerLinkManager.class = obfr(function() {
        function ServerLinkManager() {
          mdex.ServerLinkManager.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        ServerLinkManager.prototype = Object.create(mdex.ServerLinkManager.prototype);

        return ServerLinkManager;
    }());
    mdex.ServerLinkManager[clCl] = function(__obj__) {var returned = Object.create(mdex.ServerLinkManager.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ClientLink = function ClientLink() {var __obj__ = (function(){return (O.ClientLink$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ClientLink.prototype[clIw] = true;    mdex.ClientLink.class = obfr(function() {
        function ClientLink() {
          mdex.ClientLink.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        ClientLink.prototype = Object.create(mdex.ClientLink.prototype);

        return ClientLink;
    }());
    mdex.ClientLink[clCl] = function(__obj__) {var returned = Object.create(mdex.ClientLink.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ServerLink = function ServerLink() {var __obj__ = (function(){return (O.ServerLink$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ServerLink.prototype[clIw] = true;    mdex.ServerLink.class = obfr(function() {
        function ServerLink() {
          mdex.ServerLink.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        ServerLink.prototype = Object.create(mdex.ServerLink.prototype);

        return ServerLink;
    }());
    mdex.ServerLink[clCl] = function(__obj__) {var returned = Object.create(mdex.ServerLink.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Link = function Link() {var __obj__ = (function(){return (O.Link$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Link.prototype[clIw] = true;    mdex.Link.class = obfr(function() {
        function Link() {
          mdex.Link.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        Link.prototype = Object.create(mdex.Link.prototype);

        return Link;
    }());
    mdex.Link[clCl] = function(__obj__) {var returned = Object.create(mdex.Link.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ConnectionChannel = function ConnectionChannel() {var __obj__ = (function(){return (O.ConnectionChannel$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ConnectionChannel.prototype = {get connected() {var returned = (function(){return (this[clOb].connected$0).call(this[clOb]);}).apply(this, arguments);return returned;},set connected(v) {this[clOb].connected$0 = function() { return v; };},get onDisconnected() {var returned = (function(){return (this[clOb].onDisconnected$0).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onDisconnected(v) {v = dynamicTo(v);this[clOb].onDisconnected$0 = function() { return v; };}};mdex.ConnectionChannel.prototype[clIw] = true;    mdex.ConnectionChannel.class = obfr(function() {
        function ConnectionChannel() {
          mdex.ConnectionChannel.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        ConnectionChannel.prototype = Object.create(mdex.ConnectionChannel.prototype);

        return ConnectionChannel;
    }());
    mdex.ConnectionChannel[clCl] = function(__obj__) {var returned = Object.create(mdex.ConnectionChannel.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ClientConnection = function ClientConnection() {var __obj__ = (function(){return (O.ClientConnection$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ClientConnection.prototype = {get onDisconnected() {var returned = (function(){return (this[clOb].onDisconnected$0).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onDisconnected(v) {v = dynamicTo(v);this[clOb].onDisconnected$0 = function() { return v; };}};mdex.ClientConnection.prototype[clIw] = true;    mdex.ClientConnection.class = obfr(function() {
        function ClientConnection() {
          mdex.ClientConnection.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        ClientConnection.prototype = Object.create(mdex.ClientConnection.prototype);

        return ClientConnection;
    }());
    mdex.ClientConnection[clCl] = function(__obj__) {var returned = Object.create(mdex.ClientConnection.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ServerConnection = function ServerConnection() {var __obj__ = (function(){return (O.ServerConnection$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ServerConnection.prototype = {get onDisconnected() {var returned = (function(){return (this[clOb].onDisconnected$0).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onDisconnected(v) {v = dynamicTo(v);this[clOb].onDisconnected$0 = function() { return v; };}};mdex.ServerConnection.prototype[clIw] = true;    mdex.ServerConnection.class = obfr(function() {
        function ServerConnection() {
          mdex.ServerConnection.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        ServerConnection.prototype = Object.create(mdex.ServerConnection.prototype);

        return ServerConnection;
    }());
    mdex.ServerConnection[clCl] = function(__obj__) {var returned = Object.create(mdex.ServerConnection.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Connection = function Connection() {var __obj__ = (function(){return (O.Connection$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Connection.prototype = {get onDisconnected() {var returned = (function(){return (this[clOb].onDisconnected$0).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onDisconnected(v) {v = dynamicTo(v);this[clOb].onDisconnected$0 = function() { return v; };}};mdex.Connection.prototype[clIw] = true;    mdex.Connection.class = obfr(function() {
        function Connection() {
          mdex.Connection.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        Connection.prototype = Object.create(mdex.Connection.prototype);

        return Connection;
    }());
    mdex.Connection[clCl] = function(__obj__) {var returned = Object.create(mdex.Connection.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.foldList = function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (init.globalFunctions.foldList().call$2).call(init.globalFunctions,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.DefaultDefNodes = function DefaultDefNodes() {var __obj__ = (function(){return (L.DefaultDefNodes$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.DefaultDefNodes.prototype[clIw] = true;    mdex.DefaultDefNodes.class = obfr(function() {
        function DefaultDefNodes() {
          mdex.DefaultDefNodes.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        DefaultDefNodes.prototype = Object.create(mdex.DefaultDefNodes.prototype);

        return DefaultDefNodes;
    }());
    mdex.DefaultDefNodes[clCl] = function(__obj__) {var returned = Object.create(mdex.DefaultDefNodes.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RemoveController = function RemoveController() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);return (L.RemoveController$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RemoveController.prototype = {get completer() { var returned = this[clOb].completer;returned = dynamicFrom(returned);return returned;},set completer(v) {v = dynamicTo(v);this[clOb].completer = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},get path() { var returned = this[clOb].path;return returned;},set path(v) {this[clOb].path = v;},onUpdate: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {$nnnnn = dynamicTo($nnnnn);}var returned = (this[clOb].onUpdate$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},onDisconnect: function(){var returned = (this[clOb].onDisconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onReconnect: function(){var returned = (this[clOb].onReconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get future() {var returned = (function(){return (this[clOb].get$future).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set future(v) {v = dynamicTo(v);this[clOb].get$future = function() { return v; };}};mdex.RemoveController.prototype[clIw] = true;    mdex.RemoveController.class = obfr(function() {
        function RemoveController() {
          mdex.RemoveController.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onUpdate') > -1) { overrideFunc(this, 'onUpdate', 'onUpdate$4'); }if(proto.indexOf('onDisconnect') > -1) { overrideFunc(this, 'onDisconnect', 'onDisconnect$0'); }if(proto.indexOf('onReconnect') > -1) { overrideFunc(this, 'onReconnect', 'onReconnect$0'); }        }

        RemoveController.prototype = Object.create(mdex.RemoveController.prototype);

        return RemoveController;
    }());
    mdex.RemoveController[clCl] = function(__obj__) {var returned = Object.create(mdex.RemoveController.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.SetController = function SetController() {var __obj__ = (function($nn,$nnn,$nnnn,$nnnnn){$nn = dynamicTo($nn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {}return (L.SetController$).call(null,$nn,$nnn,$nnnn,$nnnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.SetController.prototype = {get completer() { var returned = this[clOb].completer;returned = dynamicFrom(returned);return returned;},set completer(v) {v = dynamicTo(v);this[clOb].completer = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},get path() { var returned = this[clOb].path;return returned;},set path(v) {this[clOb].path = v;},get value() { var returned = this[clOb].value;returned = dynamicFrom(returned);return returned;},set value(v) {v = dynamicTo(v);this[clOb].value = v;},onUpdate: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {$nnnnn = dynamicTo($nnnnn);}var returned = (this[clOb].onUpdate$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},onDisconnect: function(){var returned = (this[clOb].onDisconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onReconnect: function(){var returned = (this[clOb].onReconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get future() {var returned = (function(){return (this[clOb].get$future).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set future(v) {v = dynamicTo(v);this[clOb].get$future = function() { return v; };}};mdex.SetController.prototype[clIw] = true;    mdex.SetController.class = obfr(function() {
        function SetController() {
          mdex.SetController.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onUpdate') > -1) { overrideFunc(this, 'onUpdate', 'onUpdate$4'); }if(proto.indexOf('onDisconnect') > -1) { overrideFunc(this, 'onDisconnect', 'onDisconnect$0'); }if(proto.indexOf('onReconnect') > -1) { overrideFunc(this, 'onReconnect', 'onReconnect$0'); }        }

        SetController.prototype = Object.create(mdex.SetController.prototype);

        return SetController;
    }());
    mdex.SetController[clCl] = function(__obj__) {var returned = Object.create(mdex.SetController.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.InvokeController = function InvokeController() {var __obj__ = (function($nn,$nnn,$nnnn,$nnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {}return (L.InvokeController$).call(null,$nn,$nnn,$nnnn,$nnnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.InvokeController.prototype = {get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},onUpdate: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {$nnnnn = dynamicTo($nnnnn);}var returned = (this[clOb].onUpdate$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},onDisconnect: function(){var returned = (this[clOb].onDisconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onReconnect: function(){var returned = (this[clOb].onReconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.InvokeController.prototype[clIw] = true;    mdex.InvokeController.class = obfr(function() {
        function InvokeController() {
          mdex.InvokeController.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onUpdate') > -1) { overrideFunc(this, 'onUpdate', 'onUpdate$4'); }if(proto.indexOf('onDisconnect') > -1) { overrideFunc(this, 'onDisconnect', 'onDisconnect$0'); }if(proto.indexOf('onReconnect') > -1) { overrideFunc(this, 'onReconnect', 'onReconnect$0'); }        }

        InvokeController.prototype = Object.create(mdex.InvokeController.prototype);

        return InvokeController;
    }());
    mdex.InvokeController.getNodeColumns = function($nn){$nn = dynamicTo($nn);var returned = (init.allClasses.InvokeController_getNodeColumns).call(null,$nn);returned = dynamicFrom(returned);return returned;};mdex.InvokeController[clCl] = function(__obj__) {var returned = Object.create(mdex.InvokeController.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RequesterInvokeUpdate = function RequesterInvokeUpdate() {var __obj__ = (function($nn,$nnn,$nnnn,$nnnnn,$nnnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnnn = typeof($nnnnnn) === 'undefined' ? null : $nnnnnn;if($nnnnnn !== null) {$nnnnnn = dynamicTo($nnnnnn);}return (L.RequesterInvokeUpdate$).call(null,$nn,$nnn,$nnnn,$nnnnn,$nnnnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RequesterInvokeUpdate.prototype = {get rawColumns() { var returned = this[clOb].rawColumns;returned = dynamicFrom(returned);return returned;},set rawColumns(v) {v = dynamicTo(v);this[clOb].rawColumns = v;},get columns() { var returned = this[clOb].columns;returned = dynamicFrom(returned);return returned;},set columns(v) {v = dynamicTo(v);this[clOb].columns = v;},get updates() { var returned = this[clOb].updates;returned = dynamicFrom(returned);return returned;},set updates(v) {v = dynamicTo(v);this[clOb].updates = v;},get error() { var returned = this[clOb].error;returned = dynamicFrom(returned);return returned;},set error(v) {v = dynamicTo(v);this[clOb].error = v;},get rows() {var returned = (function(){return (this[clOb].get$rows).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set rows(v) {v = dynamicTo(v);this[clOb].get$rows = function() { return v; };},get streamStatus() { var returned = this[clOb].streamStatus;return returned;},set streamStatus(v) {this[clOb].streamStatus = v;}};mdex.RequesterInvokeUpdate.prototype[clIw] = true;    mdex.RequesterInvokeUpdate.class = obfr(function() {
        function RequesterInvokeUpdate() {
          mdex.RequesterInvokeUpdate.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        RequesterInvokeUpdate.prototype = Object.create(mdex.RequesterInvokeUpdate.prototype);

        return RequesterInvokeUpdate;
    }());
    mdex.RequesterInvokeUpdate[clCl] = function(__obj__) {var returned = Object.create(mdex.RequesterInvokeUpdate.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ReqSubscribeController = function ReqSubscribeController() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);return (L.ReqSubscribeController$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ReqSubscribeController.prototype = {get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},get callbacks() { var returned = this[clOb].callbacks;returned = dynamicFrom(returned);return returned;},set callbacks(v) {v = dynamicTo(v);this[clOb].callbacks = v;},get maxCache() { var returned = this[clOb].maxCache;return returned;},set maxCache(v) {this[clOb].maxCache = v;},get sid() { var returned = this[clOb].sid;return returned;},set sid(v) {this[clOb].sid = v;},listen: function($nn,$nnn){$nn = dynamicTo($nn);var returned = (this[clOb].listen$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},unlisten: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].unlisten$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateCacheLevel: function(){var returned = (this[clOb].updateCacheLevel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},addValue: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addValue$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;}};mdex.ReqSubscribeController.prototype[clIw] = true;    mdex.ReqSubscribeController.class = obfr(function() {
        function ReqSubscribeController() {
          mdex.ReqSubscribeController.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('listen') > -1) { overrideFunc(this, 'listen', 'listen$2'); }if(proto.indexOf('unlisten') > -1) { overrideFunc(this, 'unlisten', 'unlisten$1'); }if(proto.indexOf('updateCacheLevel') > -1) { overrideFunc(this, 'updateCacheLevel', 'updateCacheLevel$0'); }if(proto.indexOf('addValue') > -1) { overrideFunc(this, 'addValue', 'addValue$1'); }        }

        ReqSubscribeController.prototype = Object.create(mdex.ReqSubscribeController.prototype);

        return ReqSubscribeController;
    }());
    mdex.ReqSubscribeController[clCl] = function(__obj__) {var returned = Object.create(mdex.ReqSubscribeController.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.SubscribeRequest = function SubscribeRequest() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);return (L.SubscribeRequest$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.SubscribeRequest.prototype = {get subsriptions() { var returned = this[clOb].subsriptions;returned = dynamicFrom(returned);return returned;},set subsriptions(v) {v = dynamicTo(v);this[clOb].subsriptions = v;},get subsriptionids() { var returned = this[clOb].subsriptionids;returned = dynamicFrom(returned);return returned;},set subsriptionids(v) {v = dynamicTo(v);this[clOb].subsriptionids = v;},resend: function(){var returned = (this[clOb].resend$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},addSubscription: function($nn,$nnn){$nn = dynamicTo($nn);var returned = (this[clOb].addSubscription$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeSubscription: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].removeSubscription$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get toRemove() { var returned = this[clOb].toRemove;returned = dynamicFrom(returned);return returned;},set toRemove(v) {v = dynamicTo(v);this[clOb].toRemove = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},get rid() { var returned = this[clOb].rid;return returned;},set rid(v) {this[clOb].rid = v;},get data() { var returned = this[clOb].data;returned = dynamicFrom(returned);return returned;},set data(v) {v = dynamicTo(v);this[clOb].data = v;},get updater() { var returned = this[clOb].updater;returned = dynamicFrom(returned);return returned;},set updater(v) {v = dynamicTo(v);this[clOb].updater = v;},get streamStatus() { var returned = this[clOb].streamStatus;return returned;},set streamStatus(v) {this[clOb].streamStatus = v;},close: function(){var returned = (this[clOb].close$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get isClosed() {var returned = (function(){return (this[clOb].get$isClosed).call(this[clOb]);}).apply(this, arguments);return returned;},set isClosed(v) {this[clOb].get$isClosed = function() { return v; };}};mdex.SubscribeRequest.prototype[clIw] = true;    mdex.SubscribeRequest.class = obfr(function() {
        function SubscribeRequest() {
          mdex.SubscribeRequest.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('resend') > -1) { overrideFunc(this, 'resend', 'resend$0'); }if(proto.indexOf('addSubscription') > -1) { overrideFunc(this, 'addSubscription', 'addSubscription$2'); }if(proto.indexOf('removeSubscription') > -1) { overrideFunc(this, 'removeSubscription', 'removeSubscription$1'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$0'); }        }

        SubscribeRequest.prototype = Object.create(mdex.SubscribeRequest.prototype);

        return SubscribeRequest;
    }());
    mdex.SubscribeRequest[clCl] = function(__obj__) {var returned = Object.create(mdex.SubscribeRequest.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.SubscribeController = function SubscribeController() {var __obj__ = (function(){return (L.SubscribeController$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.SubscribeController.prototype = {get request() { var returned = this[clOb].request;returned = dynamicFrom(returned);return returned;},set request(v) {v = dynamicTo(v);this[clOb].request = v;},onDisconnect: function(){var returned = (this[clOb].onDisconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onReconnect: function(){var returned = (this[clOb].onReconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onUpdate: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].onUpdate$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;}};mdex.SubscribeController.prototype[clIw] = true;    mdex.SubscribeController.class = obfr(function() {
        function SubscribeController() {
          mdex.SubscribeController.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onDisconnect') > -1) { overrideFunc(this, 'onDisconnect', 'onDisconnect$0'); }if(proto.indexOf('onReconnect') > -1) { overrideFunc(this, 'onReconnect', 'onReconnect$0'); }if(proto.indexOf('onUpdate') > -1) { overrideFunc(this, 'onUpdate', 'onUpdate$4'); }        }

        SubscribeController.prototype = Object.create(mdex.SubscribeController.prototype);

        return SubscribeController;
    }());
    mdex.SubscribeController[clCl] = function(__obj__) {var returned = Object.create(mdex.SubscribeController.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ReqSubscribeListener = function ReqSubscribeListener() {var __obj__ = (function($nn,$nnn,$nnnn){$nn = dynamicTo($nn);$nnnn = dynamicTo($nnnn);return (L.ReqSubscribeListener$).call(null,$nn,$nnn,$nnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ReqSubscribeListener.prototype = {get callback() { var returned = this[clOb].callback;returned = dynamicFrom(returned);return returned;},set callback(v) {v = dynamicTo(v);this[clOb].callback = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},get path() { var returned = this[clOb].path;return returned;},set path(v) {this[clOb].path = v;},cancel: function(){var returned = (this[clOb].cancel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},asFuture: function(dynamic){dynamic = typeof(dynamic) === 'undefined' ? null : dynamic;if(dynamic !== null) {dynamic = dynamicTo(dynamic);}var returned = (this[clOb].asFuture$1).call(this[clOb],dynamic);returned = dynamicFrom(returned);return returned;},onData: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].onData$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},onDone: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].onDone$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},onError: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].onError$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},pause: function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}var returned = (this[clOb].pause$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},resume: function(){var returned = (this[clOb].resume$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get isPaused() {var returned = (function(){return (this[clOb].get$isPaused).call(this[clOb]);}).apply(this, arguments);return returned;},set isPaused(v) {this[clOb].get$isPaused = function() { return v; };}};mdex.ReqSubscribeListener.prototype[clIw] = true;    mdex.ReqSubscribeListener.class = obfr(function() {
        function ReqSubscribeListener() {
          mdex.ReqSubscribeListener.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('cancel') > -1) { overrideFunc(this, 'cancel', 'cancel$0'); }if(proto.indexOf('asFuture') > -1) { overrideFunc(this, 'asFuture', 'asFuture$1'); }if(proto.indexOf('onData') > -1) { overrideFunc(this, 'onData', 'onData$1'); }if(proto.indexOf('onDone') > -1) { overrideFunc(this, 'onDone', 'onDone$1'); }if(proto.indexOf('onError') > -1) { overrideFunc(this, 'onError', 'onError$1'); }if(proto.indexOf('pause') > -1) { overrideFunc(this, 'pause', 'pause$1'); }if(proto.indexOf('resume') > -1) { overrideFunc(this, 'resume', 'resume$0'); }        }

        ReqSubscribeListener.prototype = Object.create(mdex.ReqSubscribeListener.prototype);

        return ReqSubscribeListener;
    }());
    mdex.ReqSubscribeListener[clCl] = function(__obj__) {var returned = Object.create(mdex.ReqSubscribeListener.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ListController = function ListController() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);return (L.ListController$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ListController.prototype = {get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},get request() { var returned = this[clOb].request;returned = dynamicFrom(returned);return returned;},set request(v) {v = dynamicTo(v);this[clOb].request = v;},get disconnectTs() { var returned = this[clOb].disconnectTs;return returned;},set disconnectTs(v) {this[clOb].disconnectTs = v;},onDisconnect: function(){var returned = (this[clOb].onDisconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onReconnect: function(){var returned = (this[clOb].onReconnect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get changes() { var returned = this[clOb].changes;returned = dynamicFrom(returned);return returned;},set changes(v) {v = dynamicTo(v);this[clOb].changes = v;},onUpdate: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {$nnnnn = dynamicTo($nnnnn);}var returned = (this[clOb].onUpdate$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},loadProfile: function($nn){var returned = (this[clOb].loadProfile$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},onProfileUpdated: function(){var returned = (this[clOb].onProfileUpdated$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onStartListen: function(){var returned = (this[clOb].onStartListen$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get stream() {var returned = (function(){return (this[clOb].get$stream).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set stream(v) {v = dynamicTo(v);this[clOb].get$stream = function() { return v; };},get initialized() {var returned = (function(){return (this[clOb].get$initialized).call(this[clOb]);}).apply(this, arguments);return returned;},set initialized(v) {this[clOb].get$initialized = function() { return v; };}};mdex.ListController.prototype[clIw] = true;    mdex.ListController.class = obfr(function() {
        function ListController() {
          mdex.ListController.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onDisconnect') > -1) { overrideFunc(this, 'onDisconnect', 'onDisconnect$0'); }if(proto.indexOf('onReconnect') > -1) { overrideFunc(this, 'onReconnect', 'onReconnect$0'); }if(proto.indexOf('onUpdate') > -1) { overrideFunc(this, 'onUpdate', 'onUpdate$4'); }if(proto.indexOf('loadProfile') > -1) { overrideFunc(this, 'loadProfile', 'loadProfile$1'); }if(proto.indexOf('onProfileUpdated') > -1) { overrideFunc(this, 'onProfileUpdated', 'onProfileUpdated$0'); }if(proto.indexOf('onStartListen') > -1) { overrideFunc(this, 'onStartListen', 'onStartListen$0'); }        }

        ListController.prototype = Object.create(mdex.ListController.prototype);

        return ListController;
    }());
    mdex.ListController[clCl] = function(__obj__) {var returned = Object.create(mdex.ListController.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ListDefListener = function ListDefListener() {var __obj__ = (function($nn,$nnn,$nnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);return (L.ListDefListener$).call(null,$nn,$nnn,$nnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ListDefListener.prototype = {get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},get listener() { var returned = this[clOb].listener;returned = dynamicFrom(returned);return returned;},set listener(v) {v = dynamicTo(v);this[clOb].listener = v;},get ready() { var returned = this[clOb].ready;return returned;},set ready(v) {this[clOb].ready = v;},cancel: function(){var returned = (this[clOb].cancel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.ListDefListener.prototype[clIw] = true;    mdex.ListDefListener.class = obfr(function() {
        function ListDefListener() {
          mdex.ListDefListener.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('cancel') > -1) { overrideFunc(this, 'cancel', 'cancel$0'); }        }

        ListDefListener.prototype = Object.create(mdex.ListDefListener.prototype);

        return ListDefListener;
    }());
    mdex.ListDefListener[clCl] = function(__obj__) {var returned = Object.create(mdex.ListDefListener.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RequesterListUpdate = function RequesterListUpdate() {var __obj__ = (function($nn,$nnn,$nnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);return (L.RequesterListUpdate$).call(null,$nn,$nnn,$nnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RequesterListUpdate.prototype = {get changes() { var returned = this[clOb].changes;returned = dynamicFrom(returned);return returned;},set changes(v) {v = dynamicTo(v);this[clOb].changes = v;},get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},get streamStatus() { var returned = this[clOb].null;return returned;},set streamStatus(v) {this[clOb].null = v;}};mdex.RequesterListUpdate.prototype[clIw] = true;    mdex.RequesterListUpdate.class = obfr(function() {
        function RequesterListUpdate() {
          mdex.RequesterListUpdate.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        RequesterListUpdate.prototype = Object.create(mdex.RequesterListUpdate.prototype);

        return RequesterListUpdate;
    }());
    mdex.RequesterListUpdate[clCl] = function(__obj__) {var returned = Object.create(mdex.RequesterListUpdate.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RemoteDefNode = function RemoteDefNode() {var __obj__ = (function($nn){return (L.RemoteDefNode$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RemoteDefNode.prototype = {get remotePath() { var returned = this[clOb].remotePath;return returned;},set remotePath(v) {this[clOb].remotePath = v;},get listed() { var returned = this[clOb].listed;return returned;},set listed(v) {this[clOb].listed = v;},get name() { var returned = this[clOb].name;return returned;},set name(v) {this[clOb].name = v;},isUpdated: function(){return (this[clOb].isUpdated$0).call(this[clOb]);},isSelfUpdated: function(){return (this[clOb].isSelfUpdated$0).call(this[clOb]);},createListController: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].createListController$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateRemoteChildData: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (this[clOb].updateRemoteChildData$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},resetNodeCache: function(){var returned = (this[clOb].resetNodeCache$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get profile() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set profile(v) {v = dynamicTo(v);this[clOb].null = v;},get attributes() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set attributes(v) {v = dynamicTo(v);this[clOb].null = v;},getAttribute: function($nn){var returned = (this[clOb].getAttribute$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get configs() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].null = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get children() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set children(v) {v = dynamicTo(v);this[clOb].null = v;},addChild: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeChild: function(dynamic){dynamic = dynamicTo(dynamic);return (this[clOb].removeChild$1).call(this[clOb],dynamic);},getChild: function($nn){var returned = (this[clOb].getChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get: function($nn){var returned = (this[clOb].$get$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},forEachChild: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].forEachChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getSimpleMap: function(){var returned = (this[clOb].getSimpleMap$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.RemoteDefNode.prototype[clIw] = true;    mdex.RemoteDefNode.class = obfr(function() {
        function RemoteDefNode() {
          mdex.RemoteDefNode.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('isUpdated') > -1) { overrideFunc(this, 'isUpdated', 'isUpdated$0'); }if(proto.indexOf('isSelfUpdated') > -1) { overrideFunc(this, 'isSelfUpdated', 'isSelfUpdated$0'); }if(proto.indexOf('createListController') > -1) { overrideFunc(this, 'createListController', 'createListController$1'); }if(proto.indexOf('updateRemoteChildData') > -1) { overrideFunc(this, 'updateRemoteChildData', 'updateRemoteChildData$2'); }if(proto.indexOf('resetNodeCache') > -1) { overrideFunc(this, 'resetNodeCache', 'resetNodeCache$0'); }if(proto.indexOf('getAttribute') > -1) { overrideFunc(this, 'getAttribute', 'getAttribute$1'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('addChild') > -1) { overrideFunc(this, 'addChild', 'addChild$2'); }if(proto.indexOf('removeChild') > -1) { overrideFunc(this, 'removeChild', 'removeChild$1'); }if(proto.indexOf('getChild') > -1) { overrideFunc(this, 'getChild', 'getChild$1'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$get$1'); }if(proto.indexOf('forEachChild') > -1) { overrideFunc(this, 'forEachChild', 'forEachChild$1'); }if(proto.indexOf('getSimpleMap') > -1) { overrideFunc(this, 'getSimpleMap', 'getSimpleMap$0'); }        }

        RemoteDefNode.prototype = Object.create(mdex.RemoteDefNode.prototype);

        return RemoteDefNode;
    }());
    mdex.RemoteDefNode[clCl] = function(__obj__) {var returned = Object.create(mdex.RemoteDefNode.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RemoteNode = function RemoteNode() {var __obj__ = (function($nn){return (L.RemoteNode$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RemoteNode.prototype = {get remotePath() { var returned = this[clOb].profile;return returned;},set remotePath(v) {this[clOb].profile = v;},get listed() { var returned = this[clOb].attributes;return returned;},set listed(v) {this[clOb].attributes = v;},get name() { var returned = this[clOb].configs;return returned;},set name(v) {this[clOb].configs = v;},isUpdated: function(){return (this[clOb].isUpdated$0).call(this[clOb]);},isSelfUpdated: function(){return (this[clOb].isSelfUpdated$0).call(this[clOb]);},createListController: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].createListController$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateRemoteChildData: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (this[clOb].updateRemoteChildData$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},resetNodeCache: function(){var returned = (this[clOb].resetNodeCache$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get profile() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set profile(v) {v = dynamicTo(v);this[clOb].null = v;},get attributes() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set attributes(v) {v = dynamicTo(v);this[clOb].null = v;},getAttribute: function($nn){var returned = (this[clOb].getAttribute$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get configs() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].null = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get children() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set children(v) {v = dynamicTo(v);this[clOb].null = v;},addChild: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeChild: function(dynamic){dynamic = dynamicTo(dynamic);return (this[clOb].removeChild$1).call(this[clOb],dynamic);},getChild: function($nn){var returned = (this[clOb].getChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get: function($nn){var returned = (this[clOb].$get$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},forEachChild: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].forEachChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getSimpleMap: function(){var returned = (this[clOb].getSimpleMap$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.RemoteNode.prototype[clIw] = true;    mdex.RemoteNode.class = obfr(function() {
        function RemoteNode() {
          mdex.RemoteNode.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('isUpdated') > -1) { overrideFunc(this, 'isUpdated', 'isUpdated$0'); }if(proto.indexOf('isSelfUpdated') > -1) { overrideFunc(this, 'isSelfUpdated', 'isSelfUpdated$0'); }if(proto.indexOf('createListController') > -1) { overrideFunc(this, 'createListController', 'createListController$1'); }if(proto.indexOf('updateRemoteChildData') > -1) { overrideFunc(this, 'updateRemoteChildData', 'updateRemoteChildData$2'); }if(proto.indexOf('resetNodeCache') > -1) { overrideFunc(this, 'resetNodeCache', 'resetNodeCache$0'); }if(proto.indexOf('getAttribute') > -1) { overrideFunc(this, 'getAttribute', 'getAttribute$1'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('addChild') > -1) { overrideFunc(this, 'addChild', 'addChild$2'); }if(proto.indexOf('removeChild') > -1) { overrideFunc(this, 'removeChild', 'removeChild$1'); }if(proto.indexOf('getChild') > -1) { overrideFunc(this, 'getChild', 'getChild$1'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$get$1'); }if(proto.indexOf('forEachChild') > -1) { overrideFunc(this, 'forEachChild', 'forEachChild$1'); }if(proto.indexOf('getSimpleMap') > -1) { overrideFunc(this, 'getSimpleMap', 'getSimpleMap$0'); }        }

        RemoteNode.prototype = Object.create(mdex.RemoteNode.prototype);

        return RemoteNode;
    }());
    mdex.RemoteNode[clCl] = function(__obj__) {var returned = Object.create(mdex.RemoteNode.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RemoteNodeCache = function RemoteNodeCache() {var __obj__ = (function(){return (L.RemoteNodeCache$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RemoteNodeCache.prototype = {getRemoteNode: function($nn){var returned = (this[clOb].getRemoteNode$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getDefNode: function($nn,$nnn){var returned = (this[clOb].getDefNode$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},updateRemoteChildNode: function($nn,$nnn,$nnnn){$nn = dynamicTo($nn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].updateRemoteChildNode$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;}};mdex.RemoteNodeCache.prototype[clIw] = true;    mdex.RemoteNodeCache.class = obfr(function() {
        function RemoteNodeCache() {
          mdex.RemoteNodeCache.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('getRemoteNode') > -1) { overrideFunc(this, 'getRemoteNode', 'getRemoteNode$1'); }if(proto.indexOf('getDefNode') > -1) { overrideFunc(this, 'getDefNode', 'getDefNode$2'); }if(proto.indexOf('updateRemoteChildNode') > -1) { overrideFunc(this, 'updateRemoteChildNode', 'updateRemoteChildNode$3'); }        }

        RemoteNodeCache.prototype = Object.create(mdex.RemoteNodeCache.prototype);

        return RemoteNodeCache;
    }());
    mdex.RemoteNodeCache[clCl] = function(__obj__) {var returned = Object.create(mdex.RemoteNodeCache.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Request = function Request() {var __obj__ = (function($nn,$nnn,$nnnn,$nnnnn){$nn = dynamicTo($nn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);return (L.Request$).call(null,$nn,$nnn,$nnnn,$nnnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Request.prototype = {get requester() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].null = v;},get rid() { var returned = this[clOb].null;return returned;},set rid(v) {this[clOb].null = v;},get data() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set data(v) {v = dynamicTo(v);this[clOb].null = v;},get updater() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set updater(v) {v = dynamicTo(v);this[clOb].null = v;},get streamStatus() { var returned = this[clOb].null;return returned;},set streamStatus(v) {this[clOb].null = v;},resend: function(){var returned = (this[clOb].resend$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},close: function(){var returned = (this[clOb].close$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get isClosed() {var returned = (function(){return (this[clOb].get$isClosed).call(this[clOb]);}).apply(this, arguments);return returned;},set isClosed(v) {this[clOb].get$isClosed = function() { return v; };}};mdex.Request.prototype[clIw] = true;    mdex.Request.class = obfr(function() {
        function Request() {
          mdex.Request.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('resend') > -1) { overrideFunc(this, 'resend', 'resend$0'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$0'); }        }

        Request.prototype = Object.create(mdex.Request.prototype);

        return Request;
    }());
    mdex.Request[clCl] = function(__obj__) {var returned = Object.create(mdex.Request.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Requester = function Requester() {var __obj__ = (function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}return (L.Requester$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Requester.prototype = {get nodeCache() { var returned = this[clOb].nodeCache;returned = dynamicFrom(returned);return returned;},set nodeCache(v) {v = dynamicTo(v);this[clOb].nodeCache = v;},onData: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].onData$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get nextRid() { var returned = this[clOb].nextRid;return returned;},set nextRid(v) {this[clOb].nextRid = v;},get nextSid() { var returned = this[clOb].nextSid;return returned;},set nextSid(v) {this[clOb].nextSid = v;},get lastSentId() { var returned = this[clOb].lastSentId;return returned;},set lastSentId(v) {this[clOb].lastSentId = v;},doSend: function(){var returned = (this[clOb].doSend$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},subscribe: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = typeof($nnnn) === 'undefined' ? null : $nnnn;if($nnnn !== null) {}var returned = (this[clOb].subscribe$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},unsubscribe: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].unsubscribe$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},list: function($nn){var returned = (this[clOb].list$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},invoke: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = typeof($nnnn) === 'undefined' ? null : $nnnn;if($nnnn !== null) {}var returned = (this[clOb].invoke$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},set: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = typeof($nnnn) === 'undefined' ? null : $nnnn;if($nnnn !== null) {}var returned = (this[clOb].$set$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},remove: function($nn){var returned = (this[clOb].remove$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},closeRequest: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].closeRequest$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},onDisconnected: function(){var returned = (this[clOb].onDisconnected$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onReconnected: function(){var returned = (this[clOb].onReconnected$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},addToSendList: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addToSendList$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},addProcessor: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addProcessor$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get connection() {var returned = (function(){return (this[clOb].get$connection).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set connection(v) {v = dynamicTo(v);this[clOb].get$connection = function() { return v; };}};mdex.Requester.prototype[clIw] = true;    mdex.Requester.class = obfr(function() {
        function Requester() {
          mdex.Requester.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onData') > -1) { overrideFunc(this, 'onData', 'onData$1'); }if(proto.indexOf('doSend') > -1) { overrideFunc(this, 'doSend', 'doSend$0'); }if(proto.indexOf('subscribe') > -1) { overrideFunc(this, 'subscribe', 'subscribe$3'); }if(proto.indexOf('unsubscribe') > -1) { overrideFunc(this, 'unsubscribe', 'unsubscribe$2'); }if(proto.indexOf('list') > -1) { overrideFunc(this, 'list', 'list$1'); }if(proto.indexOf('invoke') > -1) { overrideFunc(this, 'invoke', 'invoke$3'); }if(proto.indexOf('set') > -1) { overrideFunc(this, 'set', '$set$3'); }if(proto.indexOf('remove') > -1) { overrideFunc(this, 'remove', 'remove$1'); }if(proto.indexOf('closeRequest') > -1) { overrideFunc(this, 'closeRequest', 'closeRequest$1'); }if(proto.indexOf('onDisconnected') > -1) { overrideFunc(this, 'onDisconnected', 'onDisconnected$0'); }if(proto.indexOf('onReconnected') > -1) { overrideFunc(this, 'onReconnected', 'onReconnected$0'); }if(proto.indexOf('addToSendList') > -1) { overrideFunc(this, 'addToSendList', 'addToSendList$1'); }if(proto.indexOf('addProcessor') > -1) { overrideFunc(this, 'addProcessor', 'addProcessor$1'); }        }

        Requester.prototype = Object.create(mdex.Requester.prototype);

        return Requester;
    }());
    mdex.Requester[clCl] = function(__obj__) {var returned = Object.create(mdex.Requester.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RequesterUpdate = function RequesterUpdate() {var __obj__ = (function($nn){return (L.RequesterUpdate$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RequesterUpdate.prototype = {get streamStatus() { var returned = this[clOb].null;return returned;},set streamStatus(v) {this[clOb].null = v;}};mdex.RequesterUpdate.prototype[clIw] = true;    mdex.RequesterUpdate.class = obfr(function() {
        function RequesterUpdate() {
          mdex.RequesterUpdate.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        RequesterUpdate.prototype = Object.create(mdex.RequesterUpdate.prototype);

        return RequesterUpdate;
    }());
    mdex.RequesterUpdate[clCl] = function(__obj__) {var returned = Object.create(mdex.RequesterUpdate.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RequestUpdater = function RequestUpdater() {var __obj__ = (function(){return (L.RequestUpdater$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RequestUpdater.prototype[clIw] = true;    mdex.RequestUpdater.class = obfr(function() {
        function RequestUpdater() {
          mdex.RequestUpdater.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        RequestUpdater.prototype = Object.create(mdex.RequestUpdater.prototype);

        return RequestUpdater;
    }());
    mdex.RequestUpdater[clCl] = function(__obj__) {var returned = Object.create(mdex.RequestUpdater.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.DSLinkJSON = function DSLinkJSON() {var __obj__ = (function(){return (Q.DSLinkJSON$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.DSLinkJSON.prototype = {get name() { var returned = this[clOb].name;return returned;},set name(v) {this[clOb].name = v;},get version() { var returned = this[clOb].version;return returned;},set version(v) {this[clOb].version = v;},get description() { var returned = this[clOb].description;return returned;},set description(v) {this[clOb].description = v;},get main() { var returned = this[clOb].main;return returned;},set main(v) {this[clOb].main = v;},get engines() { var returned = this[clOb].engines;returned = dynamicFrom(returned);return returned;},set engines(v) {v = dynamicTo(v);this[clOb].engines = v;},get configs() { var returned = this[clOb].configs;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].configs = v;},get getDependencies() { var returned = this[clOb].getDependencies;returned = dynamicFrom(returned);return returned;},set getDependencies(v) {v = dynamicTo(v);this[clOb].getDependencies = v;},verify: function(){var returned = (this[clOb].verify$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},save: function(){var returned = (this[clOb].save$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.DSLinkJSON.prototype[clIw] = true;    mdex.DSLinkJSON.class = obfr(function() {
        function DSLinkJSON() {
          mdex.DSLinkJSON.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('verify') > -1) { overrideFunc(this, 'verify', 'verify$0'); }if(proto.indexOf('save') > -1) { overrideFunc(this, 'save', 'save$0'); }        }

        DSLinkJSON.prototype = Object.create(mdex.DSLinkJSON.prototype);

        return DSLinkJSON;
    }());
    mdex.DSLinkJSON.from = function() {var __obj__ = (function($nn){$nn = dynamicTo($nn);return (Q.DSLinkJSON_DSLinkJSON$from).call(null,$nn);}).apply(this, arguments);return mdex.DSLinkJSON._(__obj__);};mdex.DSLinkJSON[clCl] = function(__obj__) {var returned = Object.create(mdex.DSLinkJSON.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.buildActionIO = function($nn){$nn = dynamicTo($nn);var returned = (init.globalFunctions.buildActionIO().call$1).call(init.globalFunctions,$nn);returned = dynamicFrom(returned);return returned;};mdex.buildEnumType = function($nn){$nn = dynamicTo($nn);return (init.globalFunctions.buildEnumType().call$1).call(init.globalFunctions,$nn);};mdex.Scheduler = function Scheduler() {var __obj__ = (function(){return (Q.Scheduler$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Scheduler.prototype = {get currentTimer() {var returned = (function(){return (this[clOb].Scheduler_currentTimer).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set currentTimer(v) {v = dynamicTo(v);this[clOb].Scheduler_currentTimer = function() { return v; };}};mdex.Scheduler.prototype[clIw] = true;    mdex.Scheduler.class = obfr(function() {
        function Scheduler() {
          mdex.Scheduler.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        Scheduler.prototype = Object.create(mdex.Scheduler.prototype);

        return Scheduler;
    }());
    mdex.Scheduler.cancelCurrentTimer = function(){var returned = (init.allClasses.Scheduler_cancelCurrentTimer).call(null);returned = dynamicFrom(returned);return returned;};mdex.Scheduler.every = function(dynamic,$nn){dynamic = dynamicTo(dynamic);$nn = dynamicTo($nn);var returned = (init.allClasses.Scheduler_every).call(null,dynamic,$nn);returned = dynamicFrom(returned);return returned;};mdex.Scheduler.repeat = function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (init.allClasses.Scheduler_repeat).call(null,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.Scheduler.tick = function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (init.allClasses.Scheduler_tick).call(null,$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;};mdex.Scheduler.runLater = function($nn){$nn = dynamicTo($nn);var returned = (init.allClasses.Scheduler_runLater).call(null,$nn);returned = dynamicFrom(returned);return returned;};mdex.Scheduler.later = function($nn){$nn = dynamicTo($nn);var returned = (init.allClasses.Scheduler_later).call(null,$nn);returned = dynamicFrom(returned);return returned;};mdex.Scheduler.after = function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (init.allClasses.Scheduler_after).call(null,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.Scheduler.runAfter = function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (init.allClasses.Scheduler_runAfter).call(null,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.Scheduler[clCl] = function(__obj__) {var returned = Object.create(mdex.Scheduler.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Interval = function Interval() {var __obj__ = (function($nn){$nn = dynamicTo($nn);return (Q.Interval$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Interval.prototype = {get duration() { var returned = this[clOb].duration;returned = dynamicFrom(returned);return returned;},set duration(v) {v = dynamicTo(v);this[clOb].duration = v;},get inMilliseconds() {var returned = (function(){return (this[clOb].get$inMilliseconds).call(this[clOb]);}).apply(this, arguments);return returned;},set inMilliseconds(v) {this[clOb].get$inMilliseconds = function() { return v; };}};mdex.Interval.prototype[clIw] = true;    mdex.Interval.class = obfr(function() {
        function Interval() {
          mdex.Interval.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        Interval.prototype = Object.create(mdex.Interval.prototype);

        return Interval;
    }());
    mdex.Interval.forMilliseconds = function() {var __obj__ = (function($nn){return (Q.Interval$forMilliseconds).call(null,$nn);}).apply(this, arguments);return mdex.Interval._(__obj__);};mdex.Interval.forSeconds = function() {var __obj__ = (function($nn){return (Q.Interval$forSeconds).call(null,$nn);}).apply(this, arguments);return mdex.Interval._(__obj__);};mdex.Interval.forMinutes = function() {var __obj__ = (function($nn){return (Q.Interval$forMinutes).call(null,$nn);}).apply(this, arguments);return mdex.Interval._(__obj__);};mdex.Interval.forHours = function() {var __obj__ = (function($nn){return (Q.Interval$forHours).call(null,$nn);}).apply(this, arguments);return mdex.Interval._(__obj__);};mdex.Interval[clCl] = function(__obj__) {var returned = Object.create(mdex.Interval.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.updateLogLevel = function($nn){var returned = (init.globalFunctions.updateLogLevel().call$1).call(init.globalFunctions,$nn);returned = dynamicFrom(returned);return returned;};mdex.DummyPermissionManager = function DummyPermissionManager() {var __obj__ = (function(){return (T.DummyPermissionManager$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.DummyPermissionManager.prototype = {getPermission: function($nn,$nnn){$nnn = dynamicTo($nnn);return (this[clOb].getPermission$2).call(this[clOb],$nn,$nnn);}};mdex.DummyPermissionManager.prototype[clIw] = true;    mdex.DummyPermissionManager.class = obfr(function() {
        function DummyPermissionManager() {
          mdex.DummyPermissionManager.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('getPermission') > -1) { overrideFunc(this, 'getPermission', 'getPermission$2'); }        }

        DummyPermissionManager.prototype = Object.create(mdex.DummyPermissionManager.prototype);

        return DummyPermissionManager;
    }());
    mdex.DummyPermissionManager[clCl] = function(__obj__) {var returned = Object.create(mdex.DummyPermissionManager.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.IPermissionManager = function IPermissionManager() {var __obj__ = (function(){return (T.IPermissionManager$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.IPermissionManager.prototype[clIw] = true;    mdex.IPermissionManager.class = obfr(function() {
        function IPermissionManager() {
          mdex.IPermissionManager.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        IPermissionManager.prototype = Object.create(mdex.IPermissionManager.prototype);

        return IPermissionManager;
    }());
    mdex.IPermissionManager[clCl] = function(__obj__) {var returned = Object.create(mdex.IPermissionManager.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.SimpleNode = function SimpleNode() {var __obj__ = (function($nn){return (T.SimpleNode$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.SimpleNode.prototype = {get removed() { var returned = this[clOb].removed;return returned;},set removed(v) {this[clOb].removed = v;},load: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {$nnn = dynamicTo($nnn);}var returned = (this[clOb].load$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},save: function(){var returned = (this[clOb].save$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},invoke: function($nn,$nnn,$nnnn,$nnnnn,$nnnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);$nnnnnn = typeof($nnnnnn) === 'undefined' ? null : $nnnnnn;if($nnnnnn !== null) {}var returned = (this[clOb].invoke$5).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn,$nnnnnn);returned = dynamicFrom(returned);return returned;},onInvoke: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].onInvoke$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},onSubscribe: function(){var returned = (this[clOb].onSubscribe$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onCreated: function(){var returned = (this[clOb].onCreated$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onRemoving: function(){var returned = (this[clOb].onRemoving$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onChildRemoved: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].onChildRemoved$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},onChildAdded: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].onChildAdded$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},subscribe: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (this[clOb].subscribe$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},onLoadChild: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].onLoadChild$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},createChild: function($nn,$nnn){$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {$nnn = dynamicTo($nnn);}var returned = (this[clOb].createChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},addChild: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeChild: function(dynamic){dynamic = dynamicTo(dynamic);return (this[clOb].removeChild$1).call(this[clOb],dynamic);},set: function($nn,dynamic){dynamic = dynamicTo(dynamic);var returned = (this[clOb].$indexSet).call(this[clOb],$nn,dynamic);returned = dynamicFrom(returned);return returned;},get parentNode() { var returned = this[clOb].parentNode;returned = dynamicFrom(returned);return returned;},set parentNode(v) {v = dynamicTo(v);this[clOb].parentNode = v;},serialize: function($nn){var returned = (this[clOb].serialize$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateList: function($nn){var returned = (this[clOb].updateList$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},setAttribute: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setAttribute$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeAttribute: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeAttribute$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setConfig: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setConfig$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeConfig: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeConfig$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setValue: function($nn,$nnn,$nnnn,$nnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {}var returned = (this[clOb].setValue$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},get loaded() {var returned = (function(){return (this[clOb].get$loaded).call(this[clOb]);}).apply(this, arguments);return returned;},set loaded(v) {this[clOb].get$loaded = function() { return v; };},onStartListListen: function(){var returned = (this[clOb].onStartListListen$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onAllListCancel: function(){var returned = (this[clOb].onAllListCancel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get path() { var returned = this[clOb].path;return returned;},set path(v) {this[clOb].path = v;},get callbacks() { var returned = this[clOb].callbacks;returned = dynamicFrom(returned);return returned;},set callbacks(v) {v = dynamicTo(v);this[clOb].callbacks = v;},unsubscribe: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].unsubscribe$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateValue: function($nn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);var force = typeof(_optObj_.force) === 'undefined' ? false : _optObj_.force;if(force !== null) {}var returned = (this[clOb].updateValue$2$force).call(this[clOb],$nn,force);returned = dynamicFrom(returned);return returned;},getInvokePermission: function(){return (this[clOb].getInvokePermission$0).call(this[clOb]);},getSetPermission: function(){return (this[clOb].getSetPermission$0).call(this[clOb]);},get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get listChangeController() {var returned = (function(){return (this[clOb].get$listChangeController).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listChangeController(v) {v = dynamicTo(v);this[clOb].get$listChangeController = function() { return v; };},get listStream() {var returned = (function(){return (this[clOb].get$listStream).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listStream(v) {v = dynamicTo(v);this[clOb].get$listStream = function() { return v; };},get lastValueUpdate() {var returned = (function(){return (this[clOb].get$lastValueUpdate).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set lastValueUpdate(v) {v = dynamicTo(v);this[clOb].get$lastValueUpdate = function() { return v; };},get exists() {var returned = (function(){return (this[clOb].get$exists).call(this[clOb]);}).apply(this, arguments);return returned;},set exists(v) {this[clOb].get$exists = function() { return v; };},get listReady() {var returned = (function(){return (this[clOb].get$listReady).call(this[clOb]);}).apply(this, arguments);return returned;},set listReady(v) {this[clOb].get$listReady = function() { return v; };},get disconnected() {var returned = (function(){return (this[clOb].get$disconnected).call(this[clOb]);}).apply(this, arguments);return returned;},set disconnected(v) {this[clOb].get$disconnected = function() { return v; };},get valueReady() {var returned = (function(){return (this[clOb].get$valueReady).call(this[clOb]);}).apply(this, arguments);return returned;},set valueReady(v) {this[clOb].get$valueReady = function() { return v; };},get hasSubscriber() {var returned = (function(){return (this[clOb].get$hasSubscriber).call(this[clOb]);}).apply(this, arguments);return returned;},set hasSubscriber(v) {this[clOb].get$hasSubscriber = function() { return v; };},get profile() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set profile(v) {v = dynamicTo(v);this[clOb].null = v;},get attributes() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set attributes(v) {v = dynamicTo(v);this[clOb].null = v;},getAttribute: function($nn){var returned = (this[clOb].getAttribute$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get configs() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].null = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get children() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set children(v) {v = dynamicTo(v);this[clOb].null = v;},getChild: function($nn){var returned = (this[clOb].getChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get: function($nn){var returned = (this[clOb].$get$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},forEachChild: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].forEachChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getSimpleMap: function(){var returned = (this[clOb].getSimpleMap$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.SimpleNode.prototype[clIw] = true;    mdex.SimpleNode.class = obfr(function() {
        function SimpleNode() {
          mdex.SimpleNode.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('load') > -1) { overrideFunc(this, 'load', 'load$2'); }if(proto.indexOf('save') > -1) { overrideFunc(this, 'save', 'save$0'); }if(proto.indexOf('invoke') > -1) { overrideFunc(this, 'invoke', 'invoke$5'); }if(proto.indexOf('onInvoke') > -1) { overrideFunc(this, 'onInvoke', 'onInvoke$1'); }if(proto.indexOf('onSubscribe') > -1) { overrideFunc(this, 'onSubscribe', 'onSubscribe$0'); }if(proto.indexOf('onCreated') > -1) { overrideFunc(this, 'onCreated', 'onCreated$0'); }if(proto.indexOf('onRemoving') > -1) { overrideFunc(this, 'onRemoving', 'onRemoving$0'); }if(proto.indexOf('onChildRemoved') > -1) { overrideFunc(this, 'onChildRemoved', 'onChildRemoved$2'); }if(proto.indexOf('onChildAdded') > -1) { overrideFunc(this, 'onChildAdded', 'onChildAdded$2'); }if(proto.indexOf('subscribe') > -1) { overrideFunc(this, 'subscribe', 'subscribe$2'); }if(proto.indexOf('onLoadChild') > -1) { overrideFunc(this, 'onLoadChild', 'onLoadChild$3'); }if(proto.indexOf('createChild') > -1) { overrideFunc(this, 'createChild', 'createChild$2'); }if(proto.indexOf('addChild') > -1) { overrideFunc(this, 'addChild', 'addChild$2'); }if(proto.indexOf('removeChild') > -1) { overrideFunc(this, 'removeChild', 'removeChild$1'); }if(proto.indexOf('set') > -1) { overrideFunc(this, 'set', '$indexSet'); }if(proto.indexOf('serialize') > -1) { overrideFunc(this, 'serialize', 'serialize$1'); }if(proto.indexOf('updateList') > -1) { overrideFunc(this, 'updateList', 'updateList$1'); }if(proto.indexOf('setAttribute') > -1) { overrideFunc(this, 'setAttribute', 'setAttribute$4'); }if(proto.indexOf('removeAttribute') > -1) { overrideFunc(this, 'removeAttribute', 'removeAttribute$3'); }if(proto.indexOf('setConfig') > -1) { overrideFunc(this, 'setConfig', 'setConfig$4'); }if(proto.indexOf('removeConfig') > -1) { overrideFunc(this, 'removeConfig', 'removeConfig$3'); }if(proto.indexOf('setValue') > -1) { overrideFunc(this, 'setValue', 'setValue$4'); }if(proto.indexOf('onStartListListen') > -1) { overrideFunc(this, 'onStartListListen', 'onStartListListen$0'); }if(proto.indexOf('onAllListCancel') > -1) { overrideFunc(this, 'onAllListCancel', 'onAllListCancel$0'); }if(proto.indexOf('unsubscribe') > -1) { overrideFunc(this, 'unsubscribe', 'unsubscribe$1'); }if(proto.indexOf('updateValue') > -1) { overrideFunc(this, 'updateValue', 'updateValue$2$force'); }if(proto.indexOf('getInvokePermission') > -1) { overrideFunc(this, 'getInvokePermission', 'getInvokePermission$0'); }if(proto.indexOf('getSetPermission') > -1) { overrideFunc(this, 'getSetPermission', 'getSetPermission$0'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('getAttribute') > -1) { overrideFunc(this, 'getAttribute', 'getAttribute$1'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('getChild') > -1) { overrideFunc(this, 'getChild', 'getChild$1'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$get$1'); }if(proto.indexOf('forEachChild') > -1) { overrideFunc(this, 'forEachChild', 'forEachChild$1'); }if(proto.indexOf('getSimpleMap') > -1) { overrideFunc(this, 'getSimpleMap', 'getSimpleMap$0'); }        }

        SimpleNode.prototype = Object.create(mdex.SimpleNode.prototype);

        return SimpleNode;
    }());
    mdex.SimpleNode[clCl] = function(__obj__) {var returned = Object.create(mdex.SimpleNode.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.SimpleNodeProvider = function SimpleNodeProvider() {var __obj__ = (function($nn,$nnn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {$nnn = dynamicTo($nnn);}return (T.SimpleNodeProvider$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.SimpleNodeProvider.prototype = {get nodes() { var returned = this[clOb].nodes;returned = dynamicFrom(returned);return returned;},set nodes(v) {v = dynamicTo(v);this[clOb].nodes = v;},getNode: function($nn){var returned = (this[clOb].getNode$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},init: function($nn,$nnn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {$nnn = dynamicTo($nnn);}var returned = (this[clOb].init$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},save: function(){var returned = (this[clOb].save$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},updateValue: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].updateValue$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},addNode: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addNode$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeNode: function($nn){var returned = (this[clOb].removeNode$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get permissions() { var returned = this[clOb].permissions;returned = dynamicFrom(returned);return returned;},set permissions(v) {v = dynamicTo(v);this[clOb].permissions = v;},createResponder: function($nn){var returned = (this[clOb].createResponder$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get root() {var returned = (function(){return (this[clOb].get$root).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set root(v) {v = dynamicTo(v);this[clOb].get$root = function() { return v; };},get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},bitwiseNegate: function(){var returned = (this[clOb].$not).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.SimpleNodeProvider.prototype[clIw] = true;    mdex.SimpleNodeProvider.class = obfr(function() {
        function SimpleNodeProvider() {
          mdex.SimpleNodeProvider.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('getNode') > -1) { overrideFunc(this, 'getNode', 'getNode$1'); }if(proto.indexOf('init') > -1) { overrideFunc(this, 'init', 'init$2'); }if(proto.indexOf('save') > -1) { overrideFunc(this, 'save', 'save$0'); }if(proto.indexOf('updateValue') > -1) { overrideFunc(this, 'updateValue', 'updateValue$2'); }if(proto.indexOf('addNode') > -1) { overrideFunc(this, 'addNode', 'addNode$2'); }if(proto.indexOf('removeNode') > -1) { overrideFunc(this, 'removeNode', 'removeNode$1'); }if(proto.indexOf('createResponder') > -1) { overrideFunc(this, 'createResponder', 'createResponder$1'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('bitwiseNegate') > -1) { overrideFunc(this, 'bitwiseNegate', '$not'); }        }

        SimpleNodeProvider.prototype = Object.create(mdex.SimpleNodeProvider.prototype);

        return SimpleNodeProvider;
    }());
    mdex.SimpleNodeProvider[clCl] = function(__obj__) {var returned = Object.create(mdex.SimpleNodeProvider.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.MutableNodeProvider = function MutableNodeProvider() {var __obj__ = (function(){return (T.MutableNodeProvider$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.MutableNodeProvider.prototype[clIw] = true;    mdex.MutableNodeProvider.class = obfr(function() {
        function MutableNodeProvider() {
          mdex.MutableNodeProvider.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        MutableNodeProvider.prototype = Object.create(mdex.MutableNodeProvider.prototype);

        return MutableNodeProvider;
    }());
    mdex.MutableNodeProvider[clCl] = function(__obj__) {var returned = Object.create(mdex.MutableNodeProvider.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.SerializableNodeProvider = function SerializableNodeProvider() {var __obj__ = (function(){return (T.SerializableNodeProvider$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.SerializableNodeProvider.prototype[clIw] = true;    mdex.SerializableNodeProvider.class = obfr(function() {
        function SerializableNodeProvider() {
          mdex.SerializableNodeProvider.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        SerializableNodeProvider.prototype = Object.create(mdex.SerializableNodeProvider.prototype);

        return SerializableNodeProvider;
    }());
    mdex.SerializableNodeProvider[clCl] = function(__obj__) {var returned = Object.create(mdex.SerializableNodeProvider.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.AsyncTableResult = function AsyncTableResult() {var __obj__ = (function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}return (T.AsyncTableResult$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.AsyncTableResult.prototype = {get response() { var returned = this[clOb].response;returned = dynamicFrom(returned);return returned;},set response(v) {v = dynamicTo(v);this[clOb].response = v;},get columns() { var returned = this[clOb].columns;returned = dynamicFrom(returned);return returned;},set columns(v) {v = dynamicTo(v);this[clOb].columns = v;},get rows() { var returned = this[clOb].rows;returned = dynamicFrom(returned);return returned;},set rows(v) {v = dynamicTo(v);this[clOb].rows = v;},get status() { var returned = this[clOb].status;return returned;},set status(v) {this[clOb].status = v;},get onClose() { var returned = this[clOb].onClose;returned = dynamicFrom(returned);return returned;},set onClose(v) {v = dynamicTo(v);this[clOb].onClose = v;},update: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (this[clOb].update$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},write: function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}var returned = (this[clOb].write$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},close: function(){var returned = (this[clOb].close$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.AsyncTableResult.prototype[clIw] = true;    mdex.AsyncTableResult.class = obfr(function() {
        function AsyncTableResult() {
          mdex.AsyncTableResult.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('update') > -1) { overrideFunc(this, 'update', 'update$2'); }if(proto.indexOf('write') > -1) { overrideFunc(this, 'write', 'write$1'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$0'); }        }

        AsyncTableResult.prototype = Object.create(mdex.AsyncTableResult.prototype);

        return AsyncTableResult;
    }());
    mdex.AsyncTableResult[clCl] = function(__obj__) {var returned = Object.create(mdex.AsyncTableResult.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.SimpleTableResult = function SimpleTableResult() {var __obj__ = (function($nn,$nnn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {$nnn = dynamicTo($nnn);}return (T.SimpleTableResult$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.SimpleTableResult.prototype = {get columns() { var returned = this[clOb].columns;returned = dynamicFrom(returned);return returned;},set columns(v) {v = dynamicTo(v);this[clOb].columns = v;},get rows() { var returned = this[clOb].rows;returned = dynamicFrom(returned);return returned;},set rows(v) {v = dynamicTo(v);this[clOb].rows = v;}};mdex.SimpleTableResult.prototype[clIw] = true;    mdex.SimpleTableResult.class = obfr(function() {
        function SimpleTableResult() {
          mdex.SimpleTableResult.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        SimpleTableResult.prototype = Object.create(mdex.SimpleTableResult.prototype);

        return SimpleTableResult;
    }());
    mdex.SimpleTableResult[clCl] = function(__obj__) {var returned = Object.create(mdex.SimpleTableResult.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RootNode = function RootNode() {var __obj__ = (function($nn){return (T.RootNode$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RootNode.prototype = {load: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (this[clOb].load$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},get parentNode() { var returned = this[clOb]._listChangeController;returned = dynamicFrom(returned);return returned;},set parentNode(v) {v = dynamicTo(v);this[clOb]._listChangeController = v;},serialize: function($nn){var returned = (this[clOb].serialize$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateList: function($nn){var returned = (this[clOb].updateList$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},setAttribute: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setAttribute$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeAttribute: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeAttribute$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setConfig: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setConfig$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeConfig: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeConfig$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setValue: function($nn,$nnn,$nnnn,$nnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {}var returned = (this[clOb].setValue$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},get loaded() {var returned = (function(){return (this[clOb].get$loaded).call(this[clOb]);}).apply(this, arguments);return returned;},set loaded(v) {this[clOb].get$loaded = function() { return v; };},onStartListListen: function(){var returned = (this[clOb].onStartListListen$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onAllListCancel: function(){var returned = (this[clOb].onAllListCancel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get path() { var returned = this[clOb].configs;return returned;},set path(v) {this[clOb].configs = v;},get callbacks() { var returned = this[clOb].children;returned = dynamicFrom(returned);return returned;},set callbacks(v) {v = dynamicTo(v);this[clOb].children = v;},subscribe: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (this[clOb].subscribe$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},unsubscribe: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].unsubscribe$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateValue: function($nn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);var force = typeof(_optObj_.force) === 'undefined' ? false : _optObj_.force;if(force !== null) {}var returned = (this[clOb].updateValue$2$force).call(this[clOb],$nn,force);returned = dynamicFrom(returned);return returned;},getInvokePermission: function(){return (this[clOb].getInvokePermission$0).call(this[clOb]);},getSetPermission: function(){return (this[clOb].getSetPermission$0).call(this[clOb]);},invoke: function($nn,$nnn,$nnnn,$nnnnn,$nnnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);$nnnnnn = typeof($nnnnnn) === 'undefined' ? null : $nnnnnn;if($nnnnnn !== null) {}var returned = (this[clOb].invoke$5).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn,$nnnnnn);returned = dynamicFrom(returned);return returned;},get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},set: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].$indexSet).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},get listChangeController() {var returned = (function(){return (this[clOb].get$listChangeController).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listChangeController(v) {v = dynamicTo(v);this[clOb].get$listChangeController = function() { return v; };},get listStream() {var returned = (function(){return (this[clOb].get$listStream).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listStream(v) {v = dynamicTo(v);this[clOb].get$listStream = function() { return v; };},get lastValueUpdate() {var returned = (function(){return (this[clOb].get$lastValueUpdate).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set lastValueUpdate(v) {v = dynamicTo(v);this[clOb].get$lastValueUpdate = function() { return v; };},get exists() {var returned = (function(){return (this[clOb].get$exists).call(this[clOb]);}).apply(this, arguments);return returned;},set exists(v) {this[clOb].get$exists = function() { return v; };},get listReady() {var returned = (function(){return (this[clOb].get$listReady).call(this[clOb]);}).apply(this, arguments);return returned;},set listReady(v) {this[clOb].get$listReady = function() { return v; };},get disconnected() {var returned = (function(){return (this[clOb].get$disconnected).call(this[clOb]);}).apply(this, arguments);return returned;},set disconnected(v) {this[clOb].get$disconnected = function() { return v; };},get valueReady() {var returned = (function(){return (this[clOb].get$valueReady).call(this[clOb]);}).apply(this, arguments);return returned;},set valueReady(v) {this[clOb].get$valueReady = function() { return v; };},get hasSubscriber() {var returned = (function(){return (this[clOb].get$hasSubscriber).call(this[clOb]);}).apply(this, arguments);return returned;},set hasSubscriber(v) {this[clOb].get$hasSubscriber = function() { return v; };},get profile() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set profile(v) {v = dynamicTo(v);this[clOb].null = v;},get attributes() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set attributes(v) {v = dynamicTo(v);this[clOb].null = v;},getAttribute: function($nn){var returned = (this[clOb].getAttribute$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get configs() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].null = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get children() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set children(v) {v = dynamicTo(v);this[clOb].null = v;},addChild: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeChild: function(dynamic){dynamic = dynamicTo(dynamic);return (this[clOb].removeChild$1).call(this[clOb],dynamic);},getChild: function($nn){var returned = (this[clOb].getChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},forEachChild: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].forEachChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getSimpleMap: function(){var returned = (this[clOb].getSimpleMap$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.RootNode.prototype[clIw] = true;    mdex.RootNode.class = obfr(function() {
        function RootNode() {
          mdex.RootNode.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('load') > -1) { overrideFunc(this, 'load', 'load$2'); }if(proto.indexOf('serialize') > -1) { overrideFunc(this, 'serialize', 'serialize$1'); }if(proto.indexOf('updateList') > -1) { overrideFunc(this, 'updateList', 'updateList$1'); }if(proto.indexOf('setAttribute') > -1) { overrideFunc(this, 'setAttribute', 'setAttribute$4'); }if(proto.indexOf('removeAttribute') > -1) { overrideFunc(this, 'removeAttribute', 'removeAttribute$3'); }if(proto.indexOf('setConfig') > -1) { overrideFunc(this, 'setConfig', 'setConfig$4'); }if(proto.indexOf('removeConfig') > -1) { overrideFunc(this, 'removeConfig', 'removeConfig$3'); }if(proto.indexOf('setValue') > -1) { overrideFunc(this, 'setValue', 'setValue$4'); }if(proto.indexOf('onStartListListen') > -1) { overrideFunc(this, 'onStartListListen', 'onStartListListen$0'); }if(proto.indexOf('onAllListCancel') > -1) { overrideFunc(this, 'onAllListCancel', 'onAllListCancel$0'); }if(proto.indexOf('subscribe') > -1) { overrideFunc(this, 'subscribe', 'subscribe$2'); }if(proto.indexOf('unsubscribe') > -1) { overrideFunc(this, 'unsubscribe', 'unsubscribe$1'); }if(proto.indexOf('updateValue') > -1) { overrideFunc(this, 'updateValue', 'updateValue$2$force'); }if(proto.indexOf('getInvokePermission') > -1) { overrideFunc(this, 'getInvokePermission', 'getInvokePermission$0'); }if(proto.indexOf('getSetPermission') > -1) { overrideFunc(this, 'getSetPermission', 'getSetPermission$0'); }if(proto.indexOf('invoke') > -1) { overrideFunc(this, 'invoke', 'invoke$5'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('set') > -1) { overrideFunc(this, 'set', '$indexSet'); }if(proto.indexOf('getAttribute') > -1) { overrideFunc(this, 'getAttribute', 'getAttribute$1'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('addChild') > -1) { overrideFunc(this, 'addChild', 'addChild$2'); }if(proto.indexOf('removeChild') > -1) { overrideFunc(this, 'removeChild', 'removeChild$1'); }if(proto.indexOf('getChild') > -1) { overrideFunc(this, 'getChild', 'getChild$1'); }if(proto.indexOf('forEachChild') > -1) { overrideFunc(this, 'forEachChild', 'forEachChild$1'); }if(proto.indexOf('getSimpleMap') > -1) { overrideFunc(this, 'getSimpleMap', 'getSimpleMap$0'); }        }

        RootNode.prototype = Object.create(mdex.RootNode.prototype);

        return RootNode;
    }());
    mdex.RootNode[clCl] = function(__obj__) {var returned = Object.create(mdex.RootNode.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.DefinitionNode = function DefinitionNode() {var __obj__ = (function($nn){return (T.DefinitionNode$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.DefinitionNode.prototype = {setInvokeCallback: function(InvokeCallback){InvokeCallback = dynamicTo(InvokeCallback);var returned = (this[clOb].setInvokeCallback$1).call(this[clOb],InvokeCallback);returned = dynamicFrom(returned);return returned;},invoke: function($nn,$nnn,$nnnn,$nnnnn,$nnnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);$nnnnnn = typeof($nnnnnn) === 'undefined' ? null : $nnnnnn;if($nnnnnn !== null) {}var returned = (this[clOb].invoke$5).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn,$nnnnnn);returned = dynamicFrom(returned);return returned;},get parentNode() { var returned = this[clOb]._listReqListener;returned = dynamicFrom(returned);return returned;},set parentNode(v) {v = dynamicTo(v);this[clOb]._listReqListener = v;},serialize: function($nn){var returned = (this[clOb].serialize$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},load: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (this[clOb].load$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},updateList: function($nn){var returned = (this[clOb].updateList$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},setAttribute: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setAttribute$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeAttribute: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeAttribute$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setConfig: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setConfig$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeConfig: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeConfig$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setValue: function($nn,$nnn,$nnnn,$nnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {}var returned = (this[clOb].setValue$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},get loaded() {var returned = (function(){return (this[clOb].get$loaded).call(this[clOb]);}).apply(this, arguments);return returned;},set loaded(v) {this[clOb].get$loaded = function() { return v; };},onStartListListen: function(){var returned = (this[clOb].onStartListListen$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onAllListCancel: function(){var returned = (this[clOb].onAllListCancel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get path() { var returned = this[clOb].null;return returned;},set path(v) {this[clOb].null = v;},get callbacks() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set callbacks(v) {v = dynamicTo(v);this[clOb].null = v;},subscribe: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (this[clOb].subscribe$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},unsubscribe: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].unsubscribe$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateValue: function($nn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);var force = typeof(_optObj_.force) === 'undefined' ? false : _optObj_.force;if(force !== null) {}var returned = (this[clOb].updateValue$2$force).call(this[clOb],$nn,force);returned = dynamicFrom(returned);return returned;},getInvokePermission: function(){return (this[clOb].getInvokePermission$0).call(this[clOb]);},getSetPermission: function(){return (this[clOb].getSetPermission$0).call(this[clOb]);},get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},set: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].$indexSet).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},get listChangeController() {var returned = (function(){return (this[clOb].get$listChangeController).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listChangeController(v) {v = dynamicTo(v);this[clOb].get$listChangeController = function() { return v; };},get listStream() {var returned = (function(){return (this[clOb].get$listStream).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listStream(v) {v = dynamicTo(v);this[clOb].get$listStream = function() { return v; };},get lastValueUpdate() {var returned = (function(){return (this[clOb].get$lastValueUpdate).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set lastValueUpdate(v) {v = dynamicTo(v);this[clOb].get$lastValueUpdate = function() { return v; };},get exists() {var returned = (function(){return (this[clOb].get$exists).call(this[clOb]);}).apply(this, arguments);return returned;},set exists(v) {this[clOb].get$exists = function() { return v; };},get listReady() {var returned = (function(){return (this[clOb].get$listReady).call(this[clOb]);}).apply(this, arguments);return returned;},set listReady(v) {this[clOb].get$listReady = function() { return v; };},get disconnected() {var returned = (function(){return (this[clOb].get$disconnected).call(this[clOb]);}).apply(this, arguments);return returned;},set disconnected(v) {this[clOb].get$disconnected = function() { return v; };},get valueReady() {var returned = (function(){return (this[clOb].get$valueReady).call(this[clOb]);}).apply(this, arguments);return returned;},set valueReady(v) {this[clOb].get$valueReady = function() { return v; };},get hasSubscriber() {var returned = (function(){return (this[clOb].get$hasSubscriber).call(this[clOb]);}).apply(this, arguments);return returned;},set hasSubscriber(v) {this[clOb].get$hasSubscriber = function() { return v; };},get profile() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set profile(v) {v = dynamicTo(v);this[clOb].null = v;},get attributes() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set attributes(v) {v = dynamicTo(v);this[clOb].null = v;},getAttribute: function($nn){var returned = (this[clOb].getAttribute$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get configs() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].null = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get children() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set children(v) {v = dynamicTo(v);this[clOb].null = v;},addChild: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeChild: function(dynamic){dynamic = dynamicTo(dynamic);return (this[clOb].removeChild$1).call(this[clOb],dynamic);},getChild: function($nn){var returned = (this[clOb].getChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},forEachChild: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].forEachChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getSimpleMap: function(){var returned = (this[clOb].getSimpleMap$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.DefinitionNode.prototype[clIw] = true;    mdex.DefinitionNode.class = obfr(function() {
        function DefinitionNode() {
          mdex.DefinitionNode.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('setInvokeCallback') > -1) { overrideFunc(this, 'setInvokeCallback', 'setInvokeCallback$1'); }if(proto.indexOf('invoke') > -1) { overrideFunc(this, 'invoke', 'invoke$5'); }if(proto.indexOf('serialize') > -1) { overrideFunc(this, 'serialize', 'serialize$1'); }if(proto.indexOf('load') > -1) { overrideFunc(this, 'load', 'load$2'); }if(proto.indexOf('updateList') > -1) { overrideFunc(this, 'updateList', 'updateList$1'); }if(proto.indexOf('setAttribute') > -1) { overrideFunc(this, 'setAttribute', 'setAttribute$4'); }if(proto.indexOf('removeAttribute') > -1) { overrideFunc(this, 'removeAttribute', 'removeAttribute$3'); }if(proto.indexOf('setConfig') > -1) { overrideFunc(this, 'setConfig', 'setConfig$4'); }if(proto.indexOf('removeConfig') > -1) { overrideFunc(this, 'removeConfig', 'removeConfig$3'); }if(proto.indexOf('setValue') > -1) { overrideFunc(this, 'setValue', 'setValue$4'); }if(proto.indexOf('onStartListListen') > -1) { overrideFunc(this, 'onStartListListen', 'onStartListListen$0'); }if(proto.indexOf('onAllListCancel') > -1) { overrideFunc(this, 'onAllListCancel', 'onAllListCancel$0'); }if(proto.indexOf('subscribe') > -1) { overrideFunc(this, 'subscribe', 'subscribe$2'); }if(proto.indexOf('unsubscribe') > -1) { overrideFunc(this, 'unsubscribe', 'unsubscribe$1'); }if(proto.indexOf('updateValue') > -1) { overrideFunc(this, 'updateValue', 'updateValue$2$force'); }if(proto.indexOf('getInvokePermission') > -1) { overrideFunc(this, 'getInvokePermission', 'getInvokePermission$0'); }if(proto.indexOf('getSetPermission') > -1) { overrideFunc(this, 'getSetPermission', 'getSetPermission$0'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('set') > -1) { overrideFunc(this, 'set', '$indexSet'); }if(proto.indexOf('getAttribute') > -1) { overrideFunc(this, 'getAttribute', 'getAttribute$1'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('addChild') > -1) { overrideFunc(this, 'addChild', 'addChild$2'); }if(proto.indexOf('removeChild') > -1) { overrideFunc(this, 'removeChild', 'removeChild$1'); }if(proto.indexOf('getChild') > -1) { overrideFunc(this, 'getChild', 'getChild$1'); }if(proto.indexOf('forEachChild') > -1) { overrideFunc(this, 'forEachChild', 'forEachChild$1'); }if(proto.indexOf('getSimpleMap') > -1) { overrideFunc(this, 'getSimpleMap', 'getSimpleMap$0'); }        }

        DefinitionNode.prototype = Object.create(mdex.DefinitionNode.prototype);

        return DefinitionNode;
    }());
    mdex.DefinitionNode[clCl] = function(__obj__) {var returned = Object.create(mdex.DefinitionNode.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Configs = function Configs() {var __obj__ = (function(){return (T.Configs$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Configs.prototype = {get configs() { var returned = this[clOb].configs;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].configs = v;},load: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].load$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;}};mdex.Configs.prototype[clIw] = true;    mdex.Configs.class = obfr(function() {
        function Configs() {
          mdex.Configs.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('load') > -1) { overrideFunc(this, 'load', 'load$1'); }        }

        Configs.prototype = Object.create(mdex.Configs.prototype);

        return Configs;
    }());
    mdex.Configs.getConfig = function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (init.allClasses.Configs_getConfig).call(null,$nn,$nnn);returned = dynamicFrom(returned);return returned;};mdex.Configs[clCl] = function(__obj__) {var returned = Object.create(mdex.Configs.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ConfigSetting = function ConfigSetting() {var __obj__ = (function($nn,$nnn,_optObj_){_optObj_ = _optObj_ || {};var defaultValue = typeof(_optObj_.defaultValue) === 'undefined' ? null : _optObj_.defaultValue;if(defaultValue !== null) {defaultValue = dynamicTo(defaultValue);}return (T.ConfigSetting$).call(null,$nn,$nnn,defaultValue);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ConfigSetting.prototype = {get name() { var returned = this[clOb].name;return returned;},set name(v) {this[clOb].name = v;},get type() { var returned = this[clOb].type;return returned;},set type(v) {this[clOb].type = v;},get defaultValue() { var returned = this[clOb].defaultValue;returned = dynamicFrom(returned);return returned;},set defaultValue(v) {v = dynamicTo(v);this[clOb].defaultValue = v;},setConfig: function($nn,$nnn,$nnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].setConfig$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},removeConfig: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (this[clOb].removeConfig$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;}};mdex.ConfigSetting.prototype[clIw] = true;    mdex.ConfigSetting.class = obfr(function() {
        function ConfigSetting() {
          mdex.ConfigSetting.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('setConfig') > -1) { overrideFunc(this, 'setConfig', 'setConfig$3'); }if(proto.indexOf('removeConfig') > -1) { overrideFunc(this, 'removeConfig', 'removeConfig$2'); }        }

        ConfigSetting.prototype = Object.create(mdex.ConfigSetting.prototype);

        return ConfigSetting;
    }());
    mdex.ConfigSetting.fromMap = function() {var __obj__ = (function($nn,$nnn){$nnn = dynamicTo($nnn);return (T.ConfigSetting$fromMap).call(null,$nn,$nnn);}).apply(this, arguments);return mdex.ConfigSetting._(__obj__);};mdex.ConfigSetting[clCl] = function(__obj__) {var returned = Object.create(mdex.ConfigSetting.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.LocalNodeImpl = function LocalNodeImpl() {var __obj__ = (function($nn){return (T.LocalNodeImpl$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.LocalNodeImpl.prototype = {get parentNode() { var returned = this[clOb].callbacks;returned = dynamicFrom(returned);return returned;},set parentNode(v) {v = dynamicTo(v);this[clOb].callbacks = v;},serialize: function($nn){var returned = (this[clOb].serialize$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},load: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var returned = (this[clOb].load$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},updateList: function($nn){var returned = (this[clOb].updateList$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},setAttribute: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setAttribute$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeAttribute: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeAttribute$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setConfig: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setConfig$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeConfig: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeConfig$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setValue: function($nn,$nnn,$nnnn,$nnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {}var returned = (this[clOb].setValue$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},get loaded() {var returned = (function(){return (this[clOb].get$loaded).call(this[clOb]);}).apply(this, arguments);return returned;},set loaded(v) {this[clOb].get$loaded = function() { return v; };},onStartListListen: function(){var returned = (this[clOb].onStartListListen$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onAllListCancel: function(){var returned = (this[clOb].onAllListCancel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get path() { var returned = this[clOb].null;return returned;},set path(v) {this[clOb].null = v;},get callbacks() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set callbacks(v) {v = dynamicTo(v);this[clOb].null = v;},subscribe: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (this[clOb].subscribe$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},unsubscribe: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].unsubscribe$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateValue: function($nn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);var force = typeof(_optObj_.force) === 'undefined' ? false : _optObj_.force;if(force !== null) {}var returned = (this[clOb].updateValue$2$force).call(this[clOb],$nn,force);returned = dynamicFrom(returned);return returned;},getInvokePermission: function(){return (this[clOb].getInvokePermission$0).call(this[clOb]);},getSetPermission: function(){return (this[clOb].getSetPermission$0).call(this[clOb]);},invoke: function($nn,$nnn,$nnnn,$nnnnn,$nnnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);$nnnnnn = typeof($nnnnnn) === 'undefined' ? null : $nnnnnn;if($nnnnnn !== null) {}var returned = (this[clOb].invoke$5).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn,$nnnnnn);returned = dynamicFrom(returned);return returned;},get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},set: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].$indexSet).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},get listChangeController() {var returned = (function(){return (this[clOb].get$listChangeController).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listChangeController(v) {v = dynamicTo(v);this[clOb].get$listChangeController = function() { return v; };},get listStream() {var returned = (function(){return (this[clOb].get$listStream).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listStream(v) {v = dynamicTo(v);this[clOb].get$listStream = function() { return v; };},get lastValueUpdate() {var returned = (function(){return (this[clOb].get$lastValueUpdate).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set lastValueUpdate(v) {v = dynamicTo(v);this[clOb].get$lastValueUpdate = function() { return v; };},get exists() {var returned = (function(){return (this[clOb].get$exists).call(this[clOb]);}).apply(this, arguments);return returned;},set exists(v) {this[clOb].get$exists = function() { return v; };},get listReady() {var returned = (function(){return (this[clOb].get$listReady).call(this[clOb]);}).apply(this, arguments);return returned;},set listReady(v) {this[clOb].get$listReady = function() { return v; };},get disconnected() {var returned = (function(){return (this[clOb].get$disconnected).call(this[clOb]);}).apply(this, arguments);return returned;},set disconnected(v) {this[clOb].get$disconnected = function() { return v; };},get valueReady() {var returned = (function(){return (this[clOb].get$valueReady).call(this[clOb]);}).apply(this, arguments);return returned;},set valueReady(v) {this[clOb].get$valueReady = function() { return v; };},get hasSubscriber() {var returned = (function(){return (this[clOb].get$hasSubscriber).call(this[clOb]);}).apply(this, arguments);return returned;},set hasSubscriber(v) {this[clOb].get$hasSubscriber = function() { return v; };},get profile() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set profile(v) {v = dynamicTo(v);this[clOb].null = v;},get attributes() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set attributes(v) {v = dynamicTo(v);this[clOb].null = v;},getAttribute: function($nn){var returned = (this[clOb].getAttribute$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get configs() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].null = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get children() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set children(v) {v = dynamicTo(v);this[clOb].null = v;},addChild: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeChild: function(dynamic){dynamic = dynamicTo(dynamic);return (this[clOb].removeChild$1).call(this[clOb],dynamic);},getChild: function($nn){var returned = (this[clOb].getChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},forEachChild: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].forEachChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getSimpleMap: function(){var returned = (this[clOb].getSimpleMap$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.LocalNodeImpl.prototype[clIw] = true;    mdex.LocalNodeImpl.class = obfr(function() {
        function LocalNodeImpl() {
          mdex.LocalNodeImpl.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('serialize') > -1) { overrideFunc(this, 'serialize', 'serialize$1'); }if(proto.indexOf('load') > -1) { overrideFunc(this, 'load', 'load$2'); }if(proto.indexOf('updateList') > -1) { overrideFunc(this, 'updateList', 'updateList$1'); }if(proto.indexOf('setAttribute') > -1) { overrideFunc(this, 'setAttribute', 'setAttribute$4'); }if(proto.indexOf('removeAttribute') > -1) { overrideFunc(this, 'removeAttribute', 'removeAttribute$3'); }if(proto.indexOf('setConfig') > -1) { overrideFunc(this, 'setConfig', 'setConfig$4'); }if(proto.indexOf('removeConfig') > -1) { overrideFunc(this, 'removeConfig', 'removeConfig$3'); }if(proto.indexOf('setValue') > -1) { overrideFunc(this, 'setValue', 'setValue$4'); }if(proto.indexOf('onStartListListen') > -1) { overrideFunc(this, 'onStartListListen', 'onStartListListen$0'); }if(proto.indexOf('onAllListCancel') > -1) { overrideFunc(this, 'onAllListCancel', 'onAllListCancel$0'); }if(proto.indexOf('subscribe') > -1) { overrideFunc(this, 'subscribe', 'subscribe$2'); }if(proto.indexOf('unsubscribe') > -1) { overrideFunc(this, 'unsubscribe', 'unsubscribe$1'); }if(proto.indexOf('updateValue') > -1) { overrideFunc(this, 'updateValue', 'updateValue$2$force'); }if(proto.indexOf('getInvokePermission') > -1) { overrideFunc(this, 'getInvokePermission', 'getInvokePermission$0'); }if(proto.indexOf('getSetPermission') > -1) { overrideFunc(this, 'getSetPermission', 'getSetPermission$0'); }if(proto.indexOf('invoke') > -1) { overrideFunc(this, 'invoke', 'invoke$5'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('set') > -1) { overrideFunc(this, 'set', '$indexSet'); }if(proto.indexOf('getAttribute') > -1) { overrideFunc(this, 'getAttribute', 'getAttribute$1'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('addChild') > -1) { overrideFunc(this, 'addChild', 'addChild$2'); }if(proto.indexOf('removeChild') > -1) { overrideFunc(this, 'removeChild', 'removeChild$1'); }if(proto.indexOf('getChild') > -1) { overrideFunc(this, 'getChild', 'getChild$1'); }if(proto.indexOf('forEachChild') > -1) { overrideFunc(this, 'forEachChild', 'forEachChild$1'); }if(proto.indexOf('getSimpleMap') > -1) { overrideFunc(this, 'getSimpleMap', 'getSimpleMap$0'); }        }

        LocalNodeImpl.prototype = Object.create(mdex.LocalNodeImpl.prototype);

        return LocalNodeImpl;
    }());
    mdex.LocalNodeImpl[clCl] = function(__obj__) {var returned = Object.create(mdex.LocalNodeImpl.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.NodeProviderImpl = function NodeProviderImpl() {var __obj__ = (function(){return (T.NodeProviderImpl$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.NodeProviderImpl.prototype = {get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},bitwiseNegate: function(){var returned = (this[clOb].$not).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.NodeProviderImpl.prototype[clIw] = true;    mdex.NodeProviderImpl.class = obfr(function() {
        function NodeProviderImpl() {
          mdex.NodeProviderImpl.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('bitwiseNegate') > -1) { overrideFunc(this, 'bitwiseNegate', '$not'); }        }

        NodeProviderImpl.prototype = Object.create(mdex.NodeProviderImpl.prototype);

        return NodeProviderImpl;
    }());
    mdex.NodeProviderImpl[clCl] = function(__obj__) {var returned = Object.create(mdex.NodeProviderImpl.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.InvokeResponse = function InvokeResponse() {var __obj__ = (function($nn,$nnn,$nnnn){$nn = dynamicTo($nn);$nnnn = dynamicTo($nnnn);return (T.InvokeResponse$).call(null,$nn,$nnn,$nnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.InvokeResponse.prototype = {get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},updateStream: function($nn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);var columns = typeof(_optObj_.columns) === 'undefined' ? null : _optObj_.columns;if(columns !== null) {columns = dynamicTo(columns);}var streamStatus = typeof(_optObj_.streamStatus) === 'undefined' ? null : _optObj_.streamStatus;if(streamStatus !== null) {}var returned = (this[clOb].updateStream$3$columns$streamStatus).call(this[clOb],$nn,columns,streamStatus);returned = dynamicFrom(returned);return returned;},processor: function(){var returned = (this[clOb].processor$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},close: function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}var returned = (this[clOb].close$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get onClose() { var returned = this[clOb].onClose;returned = dynamicFrom(returned);return returned;},set onClose(v) {v = dynamicTo(v);this[clOb].onClose = v;},get responder() { var returned = this[clOb].responder;returned = dynamicFrom(returned);return returned;},set responder(v) {v = dynamicTo(v);this[clOb].responder = v;},get rid() { var returned = this[clOb].rid;return returned;},set rid(v) {this[clOb].rid = v;}};mdex.InvokeResponse.prototype[clIw] = true;    mdex.InvokeResponse.class = obfr(function() {
        function InvokeResponse() {
          mdex.InvokeResponse.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('updateStream') > -1) { overrideFunc(this, 'updateStream', 'updateStream$3$columns$streamStatus'); }if(proto.indexOf('processor') > -1) { overrideFunc(this, 'processor', 'processor$0'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$1'); }        }

        InvokeResponse.prototype = Object.create(mdex.InvokeResponse.prototype);

        return InvokeResponse;
    }());
    mdex.InvokeResponse[clCl] = function(__obj__) {var returned = Object.create(mdex.InvokeResponse.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.ListResponse = function ListResponse() {var __obj__ = (function($nn,$nnn,$nnnn){$nn = dynamicTo($nn);$nnnn = dynamicTo($nnnn);return (T.ListResponse$).call(null,$nn,$nnn,$nnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.ListResponse.prototype = {get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},get changes() { var returned = this[clOb].changes;returned = dynamicFrom(returned);return returned;},set changes(v) {v = dynamicTo(v);this[clOb].changes = v;},get initialResponse() { var returned = this[clOb].initialResponse;return returned;},set initialResponse(v) {this[clOb].initialResponse = v;},changed: function($nn){var returned = (this[clOb].changed$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},processor: function(){var returned = (this[clOb].processor$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get responder() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set responder(v) {v = dynamicTo(v);this[clOb].null = v;},get rid() { var returned = this[clOb].null;return returned;},set rid(v) {this[clOb].null = v;},close: function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}var returned = (this[clOb].close$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;}};mdex.ListResponse.prototype[clIw] = true;    mdex.ListResponse.class = obfr(function() {
        function ListResponse() {
          mdex.ListResponse.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('changed') > -1) { overrideFunc(this, 'changed', 'changed$1'); }if(proto.indexOf('processor') > -1) { overrideFunc(this, 'processor', 'processor$0'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$1'); }        }

        ListResponse.prototype = Object.create(mdex.ListResponse.prototype);

        return ListResponse;
    }());
    mdex.ListResponse[clCl] = function(__obj__) {var returned = Object.create(mdex.ListResponse.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RespSubscribeController = function RespSubscribeController() {var __obj__ = (function($nn,$nnn,$nnnn,$nnnnn,$nnnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);return (T.RespSubscribeController$).call(null,$nn,$nnn,$nnnn,$nnnnn,$nnnnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RespSubscribeController.prototype = {get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},get response() { var returned = this[clOb].response;returned = dynamicFrom(returned);return returned;},set response(v) {v = dynamicTo(v);this[clOb].response = v;},get sid() { var returned = this[clOb].sid;return returned;},set sid(v) {this[clOb].sid = v;},get lastValues() { var returned = this[clOb].lastValues;returned = dynamicFrom(returned);return returned;},set lastValues(v) {v = dynamicTo(v);this[clOb].lastValues = v;},addValue: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addValue$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},mergeValues: function(){var returned = (this[clOb].mergeValues$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},process: function(){var returned = (this[clOb].process$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},destroy: function(){var returned = (this[clOb].destroy$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},set permitted(v) {(function($nn){var returned = (this[clOb].set$permitted).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;}).call(this, v);},get cacheLevel() {var returned = (function(){return (this[clOb].get$cacheLevel).call(this[clOb]);}).apply(this, arguments);return returned;},set cacheLevel(v) {this[clOb].get$cacheLevel = function() { return v; };}};mdex.RespSubscribeController.prototype[clIw] = true;    mdex.RespSubscribeController.class = obfr(function() {
        function RespSubscribeController() {
          mdex.RespSubscribeController.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('addValue') > -1) { overrideFunc(this, 'addValue', 'addValue$1'); }if(proto.indexOf('mergeValues') > -1) { overrideFunc(this, 'mergeValues', 'mergeValues$0'); }if(proto.indexOf('process') > -1) { overrideFunc(this, 'process', 'process$0'); }if(proto.indexOf('destroy') > -1) { overrideFunc(this, 'destroy', 'destroy$0'); }        }

        RespSubscribeController.prototype = Object.create(mdex.RespSubscribeController.prototype);

        return RespSubscribeController;
    }());
    mdex.RespSubscribeController[clCl] = function(__obj__) {var returned = Object.create(mdex.RespSubscribeController.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.SubscribeResponse = function SubscribeResponse() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);return (T.SubscribeResponse$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.SubscribeResponse.prototype = {get subsriptions() { var returned = this[clOb].subsriptions;returned = dynamicFrom(returned);return returned;},set subsriptions(v) {v = dynamicTo(v);this[clOb].subsriptions = v;},get subsriptionids() { var returned = this[clOb].subsriptionids;returned = dynamicFrom(returned);return returned;},set subsriptionids(v) {v = dynamicTo(v);this[clOb].subsriptionids = v;},get changed() { var returned = this[clOb].changed;returned = dynamicFrom(returned);return returned;},set changed(v) {v = dynamicTo(v);this[clOb].changed = v;},add: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].add$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},remove: function($nn){var returned = (this[clOb].remove$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},subscriptionChanged: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].subscriptionChanged$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},processor: function(){var returned = (this[clOb].processor$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get responder() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set responder(v) {v = dynamicTo(v);this[clOb].null = v;},get rid() { var returned = this[clOb].null;return returned;},set rid(v) {this[clOb].null = v;},close: function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}var returned = (this[clOb].close$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;}};mdex.SubscribeResponse.prototype[clIw] = true;    mdex.SubscribeResponse.class = obfr(function() {
        function SubscribeResponse() {
          mdex.SubscribeResponse.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('add') > -1) { overrideFunc(this, 'add', 'add$4'); }if(proto.indexOf('remove') > -1) { overrideFunc(this, 'remove', 'remove$1'); }if(proto.indexOf('subscriptionChanged') > -1) { overrideFunc(this, 'subscriptionChanged', 'subscriptionChanged$1'); }if(proto.indexOf('processor') > -1) { overrideFunc(this, 'processor', 'processor$0'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$1'); }        }

        SubscribeResponse.prototype = Object.create(mdex.SubscribeResponse.prototype);

        return SubscribeResponse;
    }());
    mdex.SubscribeResponse[clCl] = function(__obj__) {var returned = Object.create(mdex.SubscribeResponse.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.RespSubscribeListener = function RespSubscribeListener() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);return (T.RespSubscribeListener$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.RespSubscribeListener.prototype = {get callback() { var returned = this[clOb].callback;returned = dynamicFrom(returned);return returned;},set callback(v) {v = dynamicTo(v);this[clOb].callback = v;},get node() { var returned = this[clOb].node;returned = dynamicFrom(returned);return returned;},set node(v) {v = dynamicTo(v);this[clOb].node = v;},cancel: function(){var returned = (this[clOb].cancel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.RespSubscribeListener.prototype[clIw] = true;    mdex.RespSubscribeListener.class = obfr(function() {
        function RespSubscribeListener() {
          mdex.RespSubscribeListener.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('cancel') > -1) { overrideFunc(this, 'cancel', 'cancel$0'); }        }

        RespSubscribeListener.prototype = Object.create(mdex.RespSubscribeListener.prototype);

        return RespSubscribeListener;
    }());
    mdex.RespSubscribeListener[clCl] = function(__obj__) {var returned = Object.create(mdex.RespSubscribeListener.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.NodeProvider = function NodeProvider() {var __obj__ = (function(){return (T.NodeProvider$).call(null);}).apply(this, arguments);this[clOb] = __obj__;};mdex.NodeProvider.prototype = {get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},bitwiseNegate: function(){var returned = (this[clOb].$not).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.NodeProvider.prototype[clIw] = true;    mdex.NodeProvider.class = obfr(function() {
        function NodeProvider() {
          mdex.NodeProvider.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('bitwiseNegate') > -1) { overrideFunc(this, 'bitwiseNegate', '$not'); }        }

        NodeProvider.prototype = Object.create(mdex.NodeProvider.prototype);

        return NodeProvider;
    }());
    mdex.NodeProvider[clCl] = function(__obj__) {var returned = Object.create(mdex.NodeProvider.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.LocalNode = function LocalNode() {var __obj__ = (function($nn){return (T.LocalNode$).call(null,$nn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.LocalNode.prototype = {onStartListListen: function(){var returned = (this[clOb].onStartListListen$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onAllListCancel: function(){var returned = (this[clOb].onAllListCancel$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get path() { var returned = this[clOb].null;return returned;},set path(v) {this[clOb].null = v;},get callbacks() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set callbacks(v) {v = dynamicTo(v);this[clOb].null = v;},subscribe: function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (this[clOb].subscribe$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},unsubscribe: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].unsubscribe$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateValue: function($nn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);var force = typeof(_optObj_.force) === 'undefined' ? false : _optObj_.force;if(force !== null) {}var returned = (this[clOb].updateValue$2$force).call(this[clOb],$nn,force);returned = dynamicFrom(returned);return returned;},getInvokePermission: function(){return (this[clOb].getInvokePermission$0).call(this[clOb]);},getSetPermission: function(){return (this[clOb].getSetPermission$0).call(this[clOb]);},invoke: function($nn,$nnn,$nnnn,$nnnnn,$nnnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);$nnnnnn = typeof($nnnnnn) === 'undefined' ? null : $nnnnnn;if($nnnnnn !== null) {}var returned = (this[clOb].invoke$5).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn,$nnnnnn);returned = dynamicFrom(returned);return returned;},setAttribute: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setAttribute$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeAttribute: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeAttribute$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setConfig: function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = dynamicTo($nnnnn);var returned = (this[clOb].setConfig$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},removeConfig: function($nn,$nnn,$nnnn){$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);var returned = (this[clOb].removeConfig$3).call(this[clOb],$nn,$nnn,$nnnn);returned = dynamicFrom(returned);return returned;},setValue: function($nn,$nnn,$nnnn,$nnnnn){$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);$nnnn = dynamicTo($nnnn);$nnnnn = typeof($nnnnn) === 'undefined' ? null : $nnnnn;if($nnnnn !== null) {}var returned = (this[clOb].setValue$4).call(this[clOb],$nn,$nnn,$nnnn,$nnnnn);returned = dynamicFrom(returned);return returned;},get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},set: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].$indexSet).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},get listChangeController() {var returned = (function(){return (this[clOb].get$listChangeController).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listChangeController(v) {v = dynamicTo(v);this[clOb].get$listChangeController = function() { return v; };},get listStream() {var returned = (function(){return (this[clOb].get$listStream).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set listStream(v) {v = dynamicTo(v);this[clOb].get$listStream = function() { return v; };},get lastValueUpdate() {var returned = (function(){return (this[clOb].get$lastValueUpdate).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set lastValueUpdate(v) {v = dynamicTo(v);this[clOb].get$lastValueUpdate = function() { return v; };},get exists() {var returned = (function(){return (this[clOb].get$exists).call(this[clOb]);}).apply(this, arguments);return returned;},set exists(v) {this[clOb].get$exists = function() { return v; };},get listReady() {var returned = (function(){return (this[clOb].get$listReady).call(this[clOb]);}).apply(this, arguments);return returned;},set listReady(v) {this[clOb].get$listReady = function() { return v; };},get disconnected() {var returned = (function(){return (this[clOb].get$disconnected).call(this[clOb]);}).apply(this, arguments);return returned;},set disconnected(v) {this[clOb].get$disconnected = function() { return v; };},get valueReady() {var returned = (function(){return (this[clOb].get$valueReady).call(this[clOb]);}).apply(this, arguments);return returned;},set valueReady(v) {this[clOb].get$valueReady = function() { return v; };},get hasSubscriber() {var returned = (function(){return (this[clOb].get$hasSubscriber).call(this[clOb]);}).apply(this, arguments);return returned;},set hasSubscriber(v) {this[clOb].get$hasSubscriber = function() { return v; };},get profile() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set profile(v) {v = dynamicTo(v);this[clOb].null = v;},get attributes() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set attributes(v) {v = dynamicTo(v);this[clOb].null = v;},getAttribute: function($nn){var returned = (this[clOb].getAttribute$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get configs() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set configs(v) {v = dynamicTo(v);this[clOb].null = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},get children() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set children(v) {v = dynamicTo(v);this[clOb].null = v;},addChild: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addChild$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeChild: function(dynamic){dynamic = dynamicTo(dynamic);return (this[clOb].removeChild$1).call(this[clOb],dynamic);},getChild: function($nn){var returned = (this[clOb].getChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},forEachChild: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].forEachChild$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},getSimpleMap: function(){var returned = (this[clOb].getSimpleMap$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;}};mdex.LocalNode.prototype[clIw] = true;    mdex.LocalNode.class = obfr(function() {
        function LocalNode() {
          mdex.LocalNode.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('onStartListListen') > -1) { overrideFunc(this, 'onStartListListen', 'onStartListListen$0'); }if(proto.indexOf('onAllListCancel') > -1) { overrideFunc(this, 'onAllListCancel', 'onAllListCancel$0'); }if(proto.indexOf('subscribe') > -1) { overrideFunc(this, 'subscribe', 'subscribe$2'); }if(proto.indexOf('unsubscribe') > -1) { overrideFunc(this, 'unsubscribe', 'unsubscribe$1'); }if(proto.indexOf('updateValue') > -1) { overrideFunc(this, 'updateValue', 'updateValue$2$force'); }if(proto.indexOf('getInvokePermission') > -1) { overrideFunc(this, 'getInvokePermission', 'getInvokePermission$0'); }if(proto.indexOf('getSetPermission') > -1) { overrideFunc(this, 'getSetPermission', 'getSetPermission$0'); }if(proto.indexOf('invoke') > -1) { overrideFunc(this, 'invoke', 'invoke$5'); }if(proto.indexOf('setAttribute') > -1) { overrideFunc(this, 'setAttribute', 'setAttribute$4'); }if(proto.indexOf('removeAttribute') > -1) { overrideFunc(this, 'removeAttribute', 'removeAttribute$3'); }if(proto.indexOf('setConfig') > -1) { overrideFunc(this, 'setConfig', 'setConfig$4'); }if(proto.indexOf('removeConfig') > -1) { overrideFunc(this, 'removeConfig', 'removeConfig$3'); }if(proto.indexOf('setValue') > -1) { overrideFunc(this, 'setValue', 'setValue$4'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('set') > -1) { overrideFunc(this, 'set', '$indexSet'); }if(proto.indexOf('getAttribute') > -1) { overrideFunc(this, 'getAttribute', 'getAttribute$1'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('addChild') > -1) { overrideFunc(this, 'addChild', 'addChild$2'); }if(proto.indexOf('removeChild') > -1) { overrideFunc(this, 'removeChild', 'removeChild$1'); }if(proto.indexOf('getChild') > -1) { overrideFunc(this, 'getChild', 'getChild$1'); }if(proto.indexOf('forEachChild') > -1) { overrideFunc(this, 'forEachChild', 'forEachChild$1'); }if(proto.indexOf('getSimpleMap') > -1) { overrideFunc(this, 'getSimpleMap', 'getSimpleMap$0'); }        }

        LocalNode.prototype = Object.create(mdex.LocalNode.prototype);

        return LocalNode;
    }());
    mdex.LocalNode[clCl] = function(__obj__) {var returned = Object.create(mdex.LocalNode.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Response = function Response() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);return (T.Response$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Response.prototype = {get responder() { var returned = this[clOb].null;returned = dynamicFrom(returned);return returned;},set responder(v) {v = dynamicTo(v);this[clOb].null = v;},get rid() { var returned = this[clOb].null;return returned;},set rid(v) {this[clOb].null = v;},close: function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {$nn = dynamicTo($nn);}var returned = (this[clOb].close$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;}};mdex.Response.prototype[clIw] = true;    mdex.Response.class = obfr(function() {
        function Response() {
          mdex.Response.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$1'); }        }

        Response.prototype = Object.create(mdex.Response.prototype);

        return Response;
    }());
    mdex.Response[clCl] = function(__obj__) {var returned = Object.create(mdex.Response.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.Responder = function Responder() {var __obj__ = (function($nn,$nnn){$nn = dynamicTo($nn);$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}return (T.Responder$).call(null,$nn,$nnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.Responder.prototype = {get reqId() { var returned = this[clOb].reqId;return returned;},set reqId(v) {this[clOb].reqId = v;},get groups() { var returned = this[clOb].groups;returned = dynamicFrom(returned);return returned;},set groups(v) {v = dynamicTo(v);this[clOb].groups = v;},get nodeProvider() { var returned = this[clOb].nodeProvider;returned = dynamicFrom(returned);return returned;},set nodeProvider(v) {v = dynamicTo(v);this[clOb].nodeProvider = v;},addResponse: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addResponse$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},onData: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].onData$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateResponse: function($nn,$nnn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);$nnn = dynamicTo($nnn);var columns = typeof(_optObj_.columns) === 'undefined' ? null : _optObj_.columns;if(columns !== null) {columns = dynamicTo(columns);}var streamStatus = typeof(_optObj_.streamStatus) === 'undefined' ? null : _optObj_.streamStatus;if(streamStatus !== null) {}var returned = (this[clOb].updateResponse$4$columns$streamStatus).call(this[clOb],$nn,$nnn,columns,streamStatus);returned = dynamicFrom(returned);return returned;},list: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].list$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},subscribe: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].subscribe$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},unsubscribe: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].unsubscribe$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},invoke: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].invoke$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},set: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].$set$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},remove: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].remove$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},close: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].close$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},onDisconnected: function(){var returned = (this[clOb].onDisconnected$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},onReconnected: function(){var returned = (this[clOb].onReconnected$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},addToSendList: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addToSendList$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},addProcessor: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].addProcessor$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},doSend: function(){var returned = (this[clOb].doSend$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get connection() {var returned = (function(){return (this[clOb].get$connection).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set connection(v) {v = dynamicTo(v);this[clOb].get$connection = function() { return v; };}};mdex.Responder.prototype[clIw] = true;    mdex.Responder.class = obfr(function() {
        function Responder() {
          mdex.Responder.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('addResponse') > -1) { overrideFunc(this, 'addResponse', 'addResponse$1'); }if(proto.indexOf('onData') > -1) { overrideFunc(this, 'onData', 'onData$1'); }if(proto.indexOf('updateResponse') > -1) { overrideFunc(this, 'updateResponse', 'updateResponse$4$columns$streamStatus'); }if(proto.indexOf('list') > -1) { overrideFunc(this, 'list', 'list$1'); }if(proto.indexOf('subscribe') > -1) { overrideFunc(this, 'subscribe', 'subscribe$1'); }if(proto.indexOf('unsubscribe') > -1) { overrideFunc(this, 'unsubscribe', 'unsubscribe$1'); }if(proto.indexOf('invoke') > -1) { overrideFunc(this, 'invoke', 'invoke$1'); }if(proto.indexOf('set') > -1) { overrideFunc(this, 'set', '$set$1'); }if(proto.indexOf('remove') > -1) { overrideFunc(this, 'remove', 'remove$1'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$1'); }if(proto.indexOf('onDisconnected') > -1) { overrideFunc(this, 'onDisconnected', 'onDisconnected$0'); }if(proto.indexOf('onReconnected') > -1) { overrideFunc(this, 'onReconnected', 'onReconnected$0'); }if(proto.indexOf('addToSendList') > -1) { overrideFunc(this, 'addToSendList', 'addToSendList$1'); }if(proto.indexOf('addProcessor') > -1) { overrideFunc(this, 'addProcessor', 'addProcessor$1'); }if(proto.indexOf('doSend') > -1) { overrideFunc(this, 'doSend', 'doSend$0'); }        }

        Responder.prototype = Object.create(mdex.Responder.prototype);

        return Responder;
    }());
    mdex.Responder[clCl] = function(__obj__) {var returned = Object.create(mdex.Responder.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.PrivateKey = function PrivateKey() {this[clOb] = __obj__;};mdex.PrivateKey.prototype[clIw] = true;    mdex.PrivateKey.class = obfr(function() {
        function PrivateKey() {
          mdex.PrivateKey.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
            }

        PrivateKey.prototype = Object.create(mdex.PrivateKey.prototype);

        return PrivateKey;
    }());
    mdex.PrivateKey.generate = function(){var returned = (init.allClasses.PrivateKey_generate).call(null);returned = dynamicFrom(returned);return returned;};mdex.PrivateKey.generateSync = function() {var __obj__ = (function(){return (K.PrivateKey_PrivateKey$generateSync).call(null);}).apply(this, arguments);return mdex.PrivateKey._(__obj__);};mdex.PrivateKey.loadFromString = function() {var __obj__ = (function($nn){return (K.PrivateKey_PrivateKey$loadFromString).call(null,$nn);}).apply(this, arguments);return mdex.PrivateKey._(__obj__);};mdex.PrivateKey[clCl] = function(__obj__) {var returned = Object.create(mdex.PrivateKey.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.HttpClientConnection = function HttpClientConnection() {var __obj__ = (function($nn,$nnn,$nnnn,$nnnnn){$nnn = dynamicTo($nnn);return (X.HttpClientConnection$).call(null,$nn,$nnn,$nnnn,$nnnnn);}).apply(this, arguments);this[clOb] = __obj__;};mdex.HttpClientConnection.prototype = {connected: function(){var returned = (this[clOb].connected$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get url() { var returned = this[clOb].url;return returned;},set url(v) {this[clOb].url = v;},get clientLink() { var returned = this[clOb].clientLink;returned = dynamicFrom(returned);return returned;},set clientLink(v) {v = dynamicTo(v);this[clOb].clientLink = v;},get saltL() { var returned = this[clOb].saltL;return returned;},set saltL(v) {this[clOb].saltL = v;},get saltS() { var returned = this[clOb].saltS;return returned;},set saltS(v) {this[clOb].saltS = v;},requireSend: function(){var returned = (this[clOb].requireSend$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},close: function(){var returned = (this[clOb].close$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},retryL: function(){var returned = (this[clOb].retryL$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},retryS: function(){var returned = (this[clOb].retryS$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},retry: function(){var returned = (this[clOb].retry$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get retryDelay() { var returned = this[clOb].retryDelay;return returned;},set retryDelay(v) {this[clOb].retryDelay = v;},get responderChannel() {var returned = (function(){return (this[clOb].get$responderChannel).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set responderChannel(v) {v = dynamicTo(v);this[clOb].get$responderChannel = function() { return v; };},get requesterChannel() {var returned = (function(){return (this[clOb].get$requesterChannel).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set requesterChannel(v) {v = dynamicTo(v);this[clOb].get$requesterChannel = function() { return v; };},get onRequesterReady() {var returned = (function(){return (this[clOb].get$onRequesterReady).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onRequesterReady(v) {v = dynamicTo(v);this[clOb].get$onRequesterReady = function() { return v; };},get onDisconnected() {var returned = (function(){return (this[clOb].get$onDisconnected).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onDisconnected(v) {v = dynamicTo(v);this[clOb].get$onDisconnected = function() { return v; };}};mdex.HttpClientConnection.prototype[clIw] = true;    mdex.HttpClientConnection.class = obfr(function() {
        function HttpClientConnection() {
          mdex.HttpClientConnection.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('connected') > -1) { overrideFunc(this, 'connected', 'connected$0'); }if(proto.indexOf('requireSend') > -1) { overrideFunc(this, 'requireSend', 'requireSend$0'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$0'); }if(proto.indexOf('retryL') > -1) { overrideFunc(this, 'retryL', 'retryL$0'); }if(proto.indexOf('retryS') > -1) { overrideFunc(this, 'retryS', 'retryS$0'); }if(proto.indexOf('retry') > -1) { overrideFunc(this, 'retry', 'retry$0'); }        }

        HttpClientConnection.prototype = Object.create(mdex.HttpClientConnection.prototype);

        return HttpClientConnection;
    }());
    mdex.HttpClientConnection[clCl] = function(__obj__) {var returned = Object.create(mdex.HttpClientConnection.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.getKeyFromFile = function($nn){var returned = (init.globalFunctions.getKeyFromFile().call$1).call(init.globalFunctions,$nn);returned = dynamicFrom(returned);return returned;};mdex.HttpClientLink = function HttpClientLink() {var __obj__ = (function($nn,$nnn,$nnnn,_optObj_){_optObj_ = _optObj_ || {};$nnnn = dynamicTo($nnnn);var enableHttp = typeof(_optObj_.enableHttp) === 'undefined' ? false : _optObj_.enableHttp;if(enableHttp !== null) {}var isRequester = typeof(_optObj_.isRequester) === 'undefined' ? true : _optObj_.isRequester;if(isRequester !== null) {}var isResponder = typeof(_optObj_.isResponder) === 'undefined' ? true : _optObj_.isResponder;if(isResponder !== null) {}var nodeProvider = typeof(_optObj_.nodeProvider) === 'undefined' ? null : _optObj_.nodeProvider;if(nodeProvider !== null) {nodeProvider = dynamicTo(nodeProvider);}return (X.HttpClientLink$).call(null,$nn,$nnn,$nnnn,enableHttp,isRequester,isResponder,nodeProvider);}).apply(this, arguments);this[clOb] = __obj__;};mdex.HttpClientLink.prototype = {get dsId() { var returned = this[clOb].dsId;return returned;},set dsId(v) {this[clOb].dsId = v;},get requester() { var returned = this[clOb].requester;returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].requester = v;},get responder() { var returned = this[clOb].responder;returned = dynamicFrom(returned);return returned;},set responder(v) {v = dynamicTo(v);this[clOb].responder = v;},get privateKey() { var returned = this[clOb].privateKey;returned = dynamicFrom(returned);return returned;},set privateKey(v) {v = dynamicTo(v);this[clOb].privateKey = v;},get salts() { var returned = this[clOb].salts;returned = dynamicFrom(returned);return returned;},set salts(v) {v = dynamicTo(v);this[clOb].salts = v;},updateSalt: function($nn,$nnn){$nnn = typeof($nnn) === 'undefined' ? null : $nnn;if($nnn !== null) {}var returned = (this[clOb].updateSalt$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},get enableHttp() { var returned = this[clOb].enableHttp;return returned;},set enableHttp(v) {this[clOb].enableHttp = v;},connect: function(){var returned = (this[clOb].connect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},initWebsocket: function($nn){$nn = typeof($nn) === 'undefined' ? null : $nn;if($nn !== null) {}var returned = (this[clOb].initWebsocket$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},close: function(){var returned = (this[clOb].close$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get onRequesterReady() {var returned = (function(){return (this[clOb].get$onRequesterReady).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onRequesterReady(v) {v = dynamicTo(v);this[clOb].get$onRequesterReady = function() { return v; };},get onConnected() {var returned = (function(){return (this[clOb].get$onConnected).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onConnected(v) {v = dynamicTo(v);this[clOb].get$onConnected = function() { return v; };},get nonce() {var returned = (function(){return (this[clOb].get$nonce).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set nonce(v) {v = dynamicTo(v);this[clOb].get$nonce = function() { return v; };}};mdex.HttpClientLink.prototype[clIw] = true;    mdex.HttpClientLink.class = obfr(function() {
        function HttpClientLink() {
          mdex.HttpClientLink.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('updateSalt') > -1) { overrideFunc(this, 'updateSalt', 'updateSalt$2'); }if(proto.indexOf('connect') > -1) { overrideFunc(this, 'connect', 'connect$0'); }if(proto.indexOf('initWebsocket') > -1) { overrideFunc(this, 'initWebsocket', 'initWebsocket$1'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$0'); }        }

        HttpClientLink.prototype = Object.create(mdex.HttpClientLink.prototype);

        return HttpClientLink;
    }());
    mdex.HttpClientLink[clCl] = function(__obj__) {var returned = Object.create(mdex.HttpClientLink.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};mdex.LinkProvider = function LinkProvider() {var __obj__ = (function($nn,$nnn,_optObj_){_optObj_ = _optObj_ || {};$nn = dynamicTo($nn);var autoInitialize = typeof(_optObj_.autoInitialize) === 'undefined' ? true : _optObj_.autoInitialize;if(autoInitialize !== null) {}var command = typeof(_optObj_.command) === 'undefined' ? 'link' : _optObj_.command;if(command !== null) {}var defaultLogLevel = typeof(_optObj_.defaultLogLevel) === 'undefined' ? "INFO" : _optObj_.defaultLogLevel;if(defaultLogLevel !== null) {}var defaultNodes = typeof(_optObj_.defaultNodes) === 'undefined' ? null : _optObj_.defaultNodes;if(defaultNodes !== null) {defaultNodes = dynamicTo(defaultNodes);}var enableHttp = typeof(_optObj_.enableHttp) === 'undefined' ? true : _optObj_.enableHttp;if(enableHttp !== null) {}var encodePrettyJson = typeof(_optObj_.encodePrettyJson) === 'undefined' ? false : _optObj_.encodePrettyJson;if(encodePrettyJson !== null) {}var exitOnFailure = typeof(_optObj_.exitOnFailure) === 'undefined' ? true : _optObj_.exitOnFailure;if(exitOnFailure !== null) {}var isRequester = typeof(_optObj_.isRequester) === 'undefined' ? false : _optObj_.isRequester;if(isRequester !== null) {}var isResponder = typeof(_optObj_.isResponder) === 'undefined' ? true : _optObj_.isResponder;if(isResponder !== null) {}var loadNodesJson = typeof(_optObj_.loadNodesJson) === 'undefined' ? true : _optObj_.loadNodesJson;if(loadNodesJson !== null) {}var nodeProvider = typeof(_optObj_.nodeProvider) === 'undefined' ? null : _optObj_.nodeProvider;if(nodeProvider !== null) {nodeProvider = dynamicTo(nodeProvider);}var profiles = typeof(_optObj_.profiles) === 'undefined' ? null : _optObj_.profiles;if(profiles !== null) {profiles = dynamicTo(profiles);}var provider = typeof(_optObj_.provider) === 'undefined' ? null : _optObj_.provider;if(provider !== null) {provider = dynamicTo(provider);}var strictOptions = typeof(_optObj_.strictOptions) === 'undefined' ? false : _optObj_.strictOptions;if(strictOptions !== null) {}return (X.LinkProvider$).call(null,$nn,$nnn,autoInitialize,command,defaultLogLevel,defaultNodes,enableHttp,encodePrettyJson,exitOnFailure,isRequester,isResponder,loadNodesJson,nodeProvider,profiles,provider,strictOptions);}).apply(this, arguments);this[clOb] = __obj__;};mdex.LinkProvider.prototype = {get link() { var returned = this[clOb].link;returned = dynamicFrom(returned);return returned;},set link(v) {v = dynamicTo(v);this[clOb].link = v;},get provider() { var returned = this[clOb].provider;returned = dynamicFrom(returned);return returned;},set provider(v) {v = dynamicTo(v);this[clOb].provider = v;},get privateKey() { var returned = this[clOb].privateKey;returned = dynamicFrom(returned);return returned;},set privateKey(v) {v = dynamicTo(v);this[clOb].privateKey = v;},get brokerUrl() { var returned = this[clOb].brokerUrl;return returned;},set brokerUrl(v) {this[clOb].brokerUrl = v;},get prefix() { var returned = this[clOb].prefix;return returned;},set prefix(v) {this[clOb].prefix = v;},get args() { var returned = this[clOb].args;returned = dynamicFrom(returned);return returned;},set args(v) {v = dynamicTo(v);this[clOb].args = v;},get isRequester() { var returned = this[clOb].isRequester;return returned;},set isRequester(v) {this[clOb].isRequester = v;},get command() { var returned = this[clOb].command;return returned;},set command(v) {this[clOb].command = v;},get isResponder() { var returned = this[clOb].isResponder;return returned;},set isResponder(v) {this[clOb].isResponder = v;},get defaultNodes() { var returned = this[clOb].defaultNodes;returned = dynamicFrom(returned);return returned;},set defaultNodes(v) {v = dynamicTo(v);this[clOb].defaultNodes = v;},get profiles() { var returned = this[clOb].profiles;returned = dynamicFrom(returned);return returned;},set profiles(v) {v = dynamicTo(v);this[clOb].profiles = v;},get enableHttp() { var returned = this[clOb].enableHttp;return returned;},set enableHttp(v) {this[clOb].enableHttp = v;},get encodePrettyJson() { var returned = this[clOb].encodePrettyJson;return returned;},set encodePrettyJson(v) {this[clOb].encodePrettyJson = v;},get strictOptions() { var returned = this[clOb].strictOptions;return returned;},set strictOptions(v) {this[clOb].strictOptions = v;},get exitOnFailure() { var returned = this[clOb].exitOnFailure;return returned;},set exitOnFailure(v) {this[clOb].exitOnFailure = v;},get loadNodesJson() { var returned = this[clOb].loadNodesJson;return returned;},set loadNodesJson(v) {this[clOb].loadNodesJson = v;},get defaultLogLevel() { var returned = this[clOb].defaultLogLevel;return returned;},set defaultLogLevel(v) {this[clOb].defaultLogLevel = v;},configure: function(_optObj_){_optObj_ = _optObj_ || {};var argp = typeof(_optObj_.argp) === 'undefined' ? null : _optObj_.argp;if(argp !== null) {argp = dynamicTo(argp);}var optionsHandler = typeof(_optObj_.optionsHandler) === 'undefined' ? null : _optObj_.optionsHandler;if(optionsHandler !== null) {optionsHandler = dynamicTo(optionsHandler);}return (this[clOb].configure$2$argp$optionsHandler).call(this[clOb],argp,optionsHandler);},chooseBroker: function($nn){$nn = dynamicTo($nn);var returned = (this[clOb].chooseBroker$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},onValueChange: function($nn,_optObj_){_optObj_ = _optObj_ || {};var cacheLevel = typeof(_optObj_.cacheLevel) === 'undefined' ? 1 : _optObj_.cacheLevel;if(cacheLevel !== null) {}var returned = (this[clOb].onValueChange$2$cacheLevel).call(this[clOb],$nn,cacheLevel);returned = dynamicFrom(returned);return returned;},syncValue: function($nn){var returned = (this[clOb].syncValue$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},init: function(){var returned = (this[clOb].init$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},get dslinkJson() { var returned = this[clOb].dslinkJson;returned = dynamicFrom(returned);return returned;},set dslinkJson(v) {v = dynamicTo(v);this[clOb].dslinkJson = v;},getConfig: function($nn){var returned = (this[clOb].getConfig$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},connect: function(){var returned = (this[clOb].connect$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},close: function(){var returned = (this[clOb].close$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},stop: function(){var returned = (this[clOb].stop$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},save: function(){var returned = (this[clOb].save$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},saveAsync: function(){var returned = (this[clOb].saveAsync$0).call(this[clOb]);returned = dynamicFrom(returned);return returned;},getNode: function($nn){var returned = (this[clOb].getNode$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},addNode: function($nn,$nnn){$nnn = dynamicTo($nnn);var returned = (this[clOb].addNode$2).call(this[clOb],$nn,$nnn);returned = dynamicFrom(returned);return returned;},removeNode: function($nn){var returned = (this[clOb].removeNode$1).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},updateValue: function($nn,dynamic){dynamic = dynamicTo(dynamic);var returned = (this[clOb].updateValue$2).call(this[clOb],$nn,dynamic);returned = dynamicFrom(returned);return returned;},get: function($nn){var returned = (this[clOb].$index).call(this[clOb],$nn);returned = dynamicFrom(returned);return returned;},bitwiseNegate: function(){var returned = (this[clOb].$not).call(this[clOb]);returned = dynamicFrom(returned);return returned;},val: function($nn,dynamic){dynamic = typeof(dynamic) === 'undefined' ? null : dynamic;if(dynamic !== null) {dynamic = dynamicTo(dynamic);}var returned = (this[clOb].val$2).call(this[clOb],$nn,dynamic);returned = dynamicFrom(returned);return returned;},get requester() {var returned = (function(){return (this[clOb].get$requester).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set requester(v) {v = dynamicTo(v);this[clOb].get$requester = function() { return v; };},get onRequesterReady() {var returned = (function(){return (this[clOb].get$onRequesterReady).call(this[clOb]);}).apply(this, arguments);returned = dynamicFrom(returned);return returned;},set onRequesterReady(v) {v = dynamicTo(v);this[clOb].get$onRequesterReady = function() { return v; };},get didInitializationFail() {var returned = (function(){return (this[clOb].get$didInitializationFail).call(this[clOb]);}).apply(this, arguments);return returned;},set didInitializationFail(v) {this[clOb].get$didInitializationFail = function() { return v; };},get isInitialized() {var returned = (function(){return (this[clOb].get$isInitialized).call(this[clOb]);}).apply(this, arguments);return returned;},set isInitialized(v) {this[clOb].get$isInitialized = function() { return v; };}};mdex.LinkProvider.prototype[clIw] = true;    mdex.LinkProvider.class = obfr(function() {
        function LinkProvider() {
          mdex.LinkProvider.apply(this, arguments);
          var proto = Object.keys(Object.getPrototypeOf(this));
    if(proto.indexOf('configure') > -1) { overrideFunc(this, 'configure', 'configure$2$argp$optionsHandler'); }if(proto.indexOf('chooseBroker') > -1) { overrideFunc(this, 'chooseBroker', 'chooseBroker$1'); }if(proto.indexOf('onValueChange') > -1) { overrideFunc(this, 'onValueChange', 'onValueChange$2$cacheLevel'); }if(proto.indexOf('syncValue') > -1) { overrideFunc(this, 'syncValue', 'syncValue$1'); }if(proto.indexOf('init') > -1) { overrideFunc(this, 'init', 'init$0'); }if(proto.indexOf('getConfig') > -1) { overrideFunc(this, 'getConfig', 'getConfig$1'); }if(proto.indexOf('connect') > -1) { overrideFunc(this, 'connect', 'connect$0'); }if(proto.indexOf('close') > -1) { overrideFunc(this, 'close', 'close$0'); }if(proto.indexOf('stop') > -1) { overrideFunc(this, 'stop', 'stop$0'); }if(proto.indexOf('save') > -1) { overrideFunc(this, 'save', 'save$0'); }if(proto.indexOf('saveAsync') > -1) { overrideFunc(this, 'saveAsync', 'saveAsync$0'); }if(proto.indexOf('getNode') > -1) { overrideFunc(this, 'getNode', 'getNode$1'); }if(proto.indexOf('addNode') > -1) { overrideFunc(this, 'addNode', 'addNode$2'); }if(proto.indexOf('removeNode') > -1) { overrideFunc(this, 'removeNode', 'removeNode$1'); }if(proto.indexOf('updateValue') > -1) { overrideFunc(this, 'updateValue', 'updateValue$2'); }if(proto.indexOf('get') > -1) { overrideFunc(this, 'get', '$index'); }if(proto.indexOf('bitwiseNegate') > -1) { overrideFunc(this, 'bitwiseNegate', '$not'); }if(proto.indexOf('val') > -1) { overrideFunc(this, 'val', 'val$2'); }        }

        LinkProvider.prototype = Object.create(mdex.LinkProvider.prototype);

        return LinkProvider;
    }());
    mdex.LinkProvider[clCl] = function(__obj__) {var returned = Object.create(mdex.LinkProvider.prototype);(function() {this[clOb] = __obj__;}.bind(returned))();return returned;};function mixin(dest) {
  var count = 1;
  var length = arguments.length;

  for(; count < length; count++) {
    var arg = arguments[count];

    for(var prop in arg) {
      if(arg.hasOwnProperty(prop)) {
        dest[prop] = arg[prop];
      }
    }
  }
  return dest;
}

module.exports.createNode = function(opt) {
  var extend = exports.SimpleNode.class;

  function Node(path) {
    extend.call(this, path);
  }

  Node.prototype = Object.create(extend.prototype);

  mixin(Node.prototype, opt);
  return Node;
};
  // END invoke [main].
})();

//# sourceMappingURL=dslink.js.map